function makeMap(str, expectsLowerCase) {
  const map2 = /* @__PURE__ */ Object.create(null);
  const list2 = str.split(",");
  for (let i = 0; i < list2.length; i++) {
    map2[list2[i]] = true;
  }
  return expectsLowerCase ? (val) => !!map2[val.toLowerCase()] : (val) => !!map2[val];
}
function normalizeStyle(value) {
  if (isArray$2(value)) {
    const res = {};
    for (let i = 0; i < value.length; i++) {
      const item = value[i];
      const normalized = isString$1(item) ? parseStringStyle(item) : normalizeStyle(item);
      if (normalized) {
        for (const key in normalized) {
          res[key] = normalized[key];
        }
      }
    }
    return res;
  } else if (isString$1(value)) {
    return value;
  } else if (isObject$1(value)) {
    return value;
  }
}
const listDelimiterRE = /;(?![^(]*\))/g;
const propertyDelimiterRE = /:([^]+)/;
const styleCommentRE = /\/\*.*?\*\//gs;
function parseStringStyle(cssText) {
  const ret = {};
  cssText.replace(styleCommentRE, "").split(listDelimiterRE).forEach((item) => {
    if (item) {
      const tmp = item.split(propertyDelimiterRE);
      tmp.length > 1 && (ret[tmp[0].trim()] = tmp[1].trim());
    }
  });
  return ret;
}
function normalizeClass(value) {
  let res = "";
  if (isString$1(value)) {
    res = value;
  } else if (isArray$2(value)) {
    for (let i = 0; i < value.length; i++) {
      const normalized = normalizeClass(value[i]);
      if (normalized) {
        res += normalized + " ";
      }
    }
  } else if (isObject$1(value)) {
    for (const name in value) {
      if (value[name]) {
        res += name + " ";
      }
    }
  }
  return res.trim();
}
const specialBooleanAttrs = `itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly`;
const isSpecialBooleanAttr = /* @__PURE__ */ makeMap(specialBooleanAttrs);
function includeBooleanAttr(value) {
  return !!value || value === "";
}
function looseCompareArrays(a, b) {
  if (a.length !== b.length)
    return false;
  let equal = true;
  for (let i = 0; equal && i < a.length; i++) {
    equal = looseEqual(a[i], b[i]);
  }
  return equal;
}
function looseEqual(a, b) {
  if (a === b)
    return true;
  let aValidType = isDate$1(a);
  let bValidType = isDate$1(b);
  if (aValidType || bValidType) {
    return aValidType && bValidType ? a.getTime() === b.getTime() : false;
  }
  aValidType = isSymbol(a);
  bValidType = isSymbol(b);
  if (aValidType || bValidType) {
    return a === b;
  }
  aValidType = isArray$2(a);
  bValidType = isArray$2(b);
  if (aValidType || bValidType) {
    return aValidType && bValidType ? looseCompareArrays(a, b) : false;
  }
  aValidType = isObject$1(a);
  bValidType = isObject$1(b);
  if (aValidType || bValidType) {
    if (!aValidType || !bValidType) {
      return false;
    }
    const aKeysCount = Object.keys(a).length;
    const bKeysCount = Object.keys(b).length;
    if (aKeysCount !== bKeysCount) {
      return false;
    }
    for (const key in a) {
      const aHasKey = a.hasOwnProperty(key);
      const bHasKey = b.hasOwnProperty(key);
      if (aHasKey && !bHasKey || !aHasKey && bHasKey || !looseEqual(a[key], b[key])) {
        return false;
      }
    }
  }
  return String(a) === String(b);
}
function looseIndexOf(arr, val) {
  return arr.findIndex((item) => looseEqual(item, val));
}
const toDisplayString = (val) => {
  return isString$1(val) ? val : val == null ? "" : isArray$2(val) || isObject$1(val) && (val.toString === objectToString || !isFunction$1(val.toString)) ? JSON.stringify(val, replacer, 2) : String(val);
};
const replacer = (_key, val) => {
  if (val && val.__v_isRef) {
    return replacer(_key, val.value);
  } else if (isMap(val)) {
    return {
      [`Map(${val.size})`]: [...val.entries()].reduce((entries, [key, val2]) => {
        entries[`${key} =>`] = val2;
        return entries;
      }, {})
    };
  } else if (isSet(val)) {
    return {
      [`Set(${val.size})`]: [...val.values()]
    };
  } else if (isObject$1(val) && !isArray$2(val) && !isPlainObject$1(val)) {
    return String(val);
  }
  return val;
};
const EMPTY_OBJ = {};
const EMPTY_ARR = [];
const NOOP = () => {
};
const NO = () => false;
const onRE = /^on[^a-z]/;
const isOn = (key) => onRE.test(key);
const isModelListener = (key) => key.startsWith("onUpdate:");
const extend$1 = Object.assign;
const remove = (arr, el) => {
  const i = arr.indexOf(el);
  if (i > -1) {
    arr.splice(i, 1);
  }
};
const hasOwnProperty$1 = Object.prototype.hasOwnProperty;
const hasOwn = (val, key) => hasOwnProperty$1.call(val, key);
const isArray$2 = Array.isArray;
const isMap = (val) => toTypeString(val) === "[object Map]";
const isSet = (val) => toTypeString(val) === "[object Set]";
const isDate$1 = (val) => toTypeString(val) === "[object Date]";
const isFunction$1 = (val) => typeof val === "function";
const isString$1 = (val) => typeof val === "string";
const isSymbol = (val) => typeof val === "symbol";
const isObject$1 = (val) => val !== null && typeof val === "object";
const isPromise = (val) => {
  return isObject$1(val) && isFunction$1(val.then) && isFunction$1(val.catch);
};
const objectToString = Object.prototype.toString;
const toTypeString = (value) => objectToString.call(value);
const toRawType = (value) => {
  return toTypeString(value).slice(8, -1);
};
const isPlainObject$1 = (val) => toTypeString(val) === "[object Object]";
const isIntegerKey = (key) => isString$1(key) && key !== "NaN" && key[0] !== "-" && "" + parseInt(key, 10) === key;
const isReservedProp = /* @__PURE__ */ makeMap(
  // the leading comma is intentional so empty string "" is also included
  ",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"
);
const cacheStringFunction = (fn2) => {
  const cache = /* @__PURE__ */ Object.create(null);
  return (str) => {
    const hit = cache[str];
    return hit || (cache[str] = fn2(str));
  };
};
const camelizeRE = /-(\w)/g;
const camelize = cacheStringFunction((str) => {
  return str.replace(camelizeRE, (_, c) => c ? c.toUpperCase() : "");
});
const hyphenateRE = /\B([A-Z])/g;
const hyphenate = cacheStringFunction((str) => str.replace(hyphenateRE, "-$1").toLowerCase());
const capitalize = cacheStringFunction((str) => str.charAt(0).toUpperCase() + str.slice(1));
const toHandlerKey = cacheStringFunction((str) => str ? `on${capitalize(str)}` : ``);
const hasChanged = (value, oldValue) => !Object.is(value, oldValue);
const invokeArrayFns = (fns, arg) => {
  for (let i = 0; i < fns.length; i++) {
    fns[i](arg);
  }
};
const def = (obj, key, value) => {
  Object.defineProperty(obj, key, {
    configurable: true,
    enumerable: false,
    value
  });
};
const looseToNumber = (val) => {
  const n = parseFloat(val);
  return isNaN(n) ? val : n;
};
let _globalThis;
const getGlobalThis = () => {
  return _globalThis || (_globalThis = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
};
let activeEffectScope;
class EffectScope {
  constructor(detached = false) {
    this.detached = detached;
    this._active = true;
    this.effects = [];
    this.cleanups = [];
    this.parent = activeEffectScope;
    if (!detached && activeEffectScope) {
      this.index = (activeEffectScope.scopes || (activeEffectScope.scopes = [])).push(this) - 1;
    }
  }
  get active() {
    return this._active;
  }
  run(fn2) {
    if (this._active) {
      const currentEffectScope = activeEffectScope;
      try {
        activeEffectScope = this;
        return fn2();
      } finally {
        activeEffectScope = currentEffectScope;
      }
    }
  }
  /**
   * This should only be called on non-detached scopes
   * @internal
   */
  on() {
    activeEffectScope = this;
  }
  /**
   * This should only be called on non-detached scopes
   * @internal
   */
  off() {
    activeEffectScope = this.parent;
  }
  stop(fromParent) {
    if (this._active) {
      let i, l;
      for (i = 0, l = this.effects.length; i < l; i++) {
        this.effects[i].stop();
      }
      for (i = 0, l = this.cleanups.length; i < l; i++) {
        this.cleanups[i]();
      }
      if (this.scopes) {
        for (i = 0, l = this.scopes.length; i < l; i++) {
          this.scopes[i].stop(true);
        }
      }
      if (!this.detached && this.parent && !fromParent) {
        const last = this.parent.scopes.pop();
        if (last && last !== this) {
          this.parent.scopes[this.index] = last;
          last.index = this.index;
        }
      }
      this.parent = void 0;
      this._active = false;
    }
  }
}
function effectScope(detached) {
  return new EffectScope(detached);
}
function recordEffectScope(effect2, scope = activeEffectScope) {
  if (scope && scope.active) {
    scope.effects.push(effect2);
  }
}
function getCurrentScope() {
  return activeEffectScope;
}
function onScopeDispose(fn2) {
  if (activeEffectScope) {
    activeEffectScope.cleanups.push(fn2);
  }
}
const createDep = (effects) => {
  const dep = new Set(effects);
  dep.w = 0;
  dep.n = 0;
  return dep;
};
const wasTracked = (dep) => (dep.w & trackOpBit) > 0;
const newTracked = (dep) => (dep.n & trackOpBit) > 0;
const initDepMarkers = ({ deps }) => {
  if (deps.length) {
    for (let i = 0; i < deps.length; i++) {
      deps[i].w |= trackOpBit;
    }
  }
};
const finalizeDepMarkers = (effect2) => {
  const { deps } = effect2;
  if (deps.length) {
    let ptr = 0;
    for (let i = 0; i < deps.length; i++) {
      const dep = deps[i];
      if (wasTracked(dep) && !newTracked(dep)) {
        dep.delete(effect2);
      } else {
        deps[ptr++] = dep;
      }
      dep.w &= ~trackOpBit;
      dep.n &= ~trackOpBit;
    }
    deps.length = ptr;
  }
};
const targetMap = /* @__PURE__ */ new WeakMap();
let effectTrackDepth = 0;
let trackOpBit = 1;
const maxMarkerBits = 30;
let activeEffect;
const ITERATE_KEY = Symbol("");
const MAP_KEY_ITERATE_KEY = Symbol("");
class ReactiveEffect {
  constructor(fn2, scheduler = null, scope) {
    this.fn = fn2;
    this.scheduler = scheduler;
    this.active = true;
    this.deps = [];
    this.parent = void 0;
    recordEffectScope(this, scope);
  }
  run() {
    if (!this.active) {
      return this.fn();
    }
    let parent = activeEffect;
    let lastShouldTrack = shouldTrack;
    while (parent) {
      if (parent === this) {
        return;
      }
      parent = parent.parent;
    }
    try {
      this.parent = activeEffect;
      activeEffect = this;
      shouldTrack = true;
      trackOpBit = 1 << ++effectTrackDepth;
      if (effectTrackDepth <= maxMarkerBits) {
        initDepMarkers(this);
      } else {
        cleanupEffect(this);
      }
      return this.fn();
    } finally {
      if (effectTrackDepth <= maxMarkerBits) {
        finalizeDepMarkers(this);
      }
      trackOpBit = 1 << --effectTrackDepth;
      activeEffect = this.parent;
      shouldTrack = lastShouldTrack;
      this.parent = void 0;
      if (this.deferStop) {
        this.stop();
      }
    }
  }
  stop() {
    if (activeEffect === this) {
      this.deferStop = true;
    } else if (this.active) {
      cleanupEffect(this);
      if (this.onStop) {
        this.onStop();
      }
      this.active = false;
    }
  }
}
function cleanupEffect(effect2) {
  const { deps } = effect2;
  if (deps.length) {
    for (let i = 0; i < deps.length; i++) {
      deps[i].delete(effect2);
    }
    deps.length = 0;
  }
}
let shouldTrack = true;
const trackStack = [];
function pauseTracking() {
  trackStack.push(shouldTrack);
  shouldTrack = false;
}
function resetTracking() {
  const last = trackStack.pop();
  shouldTrack = last === void 0 ? true : last;
}
function track(target, type, key) {
  if (shouldTrack && activeEffect) {
    let depsMap = targetMap.get(target);
    if (!depsMap) {
      targetMap.set(target, depsMap = /* @__PURE__ */ new Map());
    }
    let dep = depsMap.get(key);
    if (!dep) {
      depsMap.set(key, dep = createDep());
    }
    trackEffects(dep);
  }
}
function trackEffects(dep, debuggerEventExtraInfo) {
  let shouldTrack2 = false;
  if (effectTrackDepth <= maxMarkerBits) {
    if (!newTracked(dep)) {
      dep.n |= trackOpBit;
      shouldTrack2 = !wasTracked(dep);
    }
  } else {
    shouldTrack2 = !dep.has(activeEffect);
  }
  if (shouldTrack2) {
    dep.add(activeEffect);
    activeEffect.deps.push(dep);
  }
}
function trigger(target, type, key, newValue, oldValue, oldTarget) {
  const depsMap = targetMap.get(target);
  if (!depsMap) {
    return;
  }
  let deps = [];
  if (type === "clear") {
    deps = [...depsMap.values()];
  } else if (key === "length" && isArray$2(target)) {
    const newLength = Number(newValue);
    depsMap.forEach((dep, key2) => {
      if (key2 === "length" || key2 >= newLength) {
        deps.push(dep);
      }
    });
  } else {
    if (key !== void 0) {
      deps.push(depsMap.get(key));
    }
    switch (type) {
      case "add":
        if (!isArray$2(target)) {
          deps.push(depsMap.get(ITERATE_KEY));
          if (isMap(target)) {
            deps.push(depsMap.get(MAP_KEY_ITERATE_KEY));
          }
        } else if (isIntegerKey(key)) {
          deps.push(depsMap.get("length"));
        }
        break;
      case "delete":
        if (!isArray$2(target)) {
          deps.push(depsMap.get(ITERATE_KEY));
          if (isMap(target)) {
            deps.push(depsMap.get(MAP_KEY_ITERATE_KEY));
          }
        }
        break;
      case "set":
        if (isMap(target)) {
          deps.push(depsMap.get(ITERATE_KEY));
        }
        break;
    }
  }
  if (deps.length === 1) {
    if (deps[0]) {
      {
        triggerEffects(deps[0]);
      }
    }
  } else {
    const effects = [];
    for (const dep of deps) {
      if (dep) {
        effects.push(...dep);
      }
    }
    {
      triggerEffects(createDep(effects));
    }
  }
}
function triggerEffects(dep, debuggerEventExtraInfo) {
  const effects = isArray$2(dep) ? dep : [...dep];
  for (const effect2 of effects) {
    if (effect2.computed) {
      triggerEffect(effect2);
    }
  }
  for (const effect2 of effects) {
    if (!effect2.computed) {
      triggerEffect(effect2);
    }
  }
}
function triggerEffect(effect2, debuggerEventExtraInfo) {
  if (effect2 !== activeEffect || effect2.allowRecurse) {
    if (effect2.scheduler) {
      effect2.scheduler();
    } else {
      effect2.run();
    }
  }
}
function getDepFromReactive(object, key) {
  var _a;
  return (_a = targetMap.get(object)) === null || _a === void 0 ? void 0 : _a.get(key);
}
const isNonTrackableKeys = /* @__PURE__ */ makeMap(`__proto__,__v_isRef,__isVue`);
const builtInSymbols = new Set(
  /* @__PURE__ */ Object.getOwnPropertyNames(Symbol).filter((key) => key !== "arguments" && key !== "caller").map((key) => Symbol[key]).filter(isSymbol)
);
const get$1$1 = /* @__PURE__ */ createGetter();
const shallowGet = /* @__PURE__ */ createGetter(false, true);
const readonlyGet = /* @__PURE__ */ createGetter(true);
const arrayInstrumentations = /* @__PURE__ */ createArrayInstrumentations();
function createArrayInstrumentations() {
  const instrumentations = {};
  ["includes", "indexOf", "lastIndexOf"].forEach((key) => {
    instrumentations[key] = function(...args) {
      const arr = toRaw(this);
      for (let i = 0, l = this.length; i < l; i++) {
        track(arr, "get", i + "");
      }
      const res = arr[key](...args);
      if (res === -1 || res === false) {
        return arr[key](...args.map(toRaw));
      } else {
        return res;
      }
    };
  });
  ["push", "pop", "shift", "unshift", "splice"].forEach((key) => {
    instrumentations[key] = function(...args) {
      pauseTracking();
      const res = toRaw(this)[key].apply(this, args);
      resetTracking();
      return res;
    };
  });
  return instrumentations;
}
function hasOwnProperty(key) {
  const obj = toRaw(this);
  track(obj, "has", key);
  return obj.hasOwnProperty(key);
}
function createGetter(isReadonly2 = false, shallow = false) {
  return function get2(target, key, receiver) {
    if (key === "__v_isReactive") {
      return !isReadonly2;
    } else if (key === "__v_isReadonly") {
      return isReadonly2;
    } else if (key === "__v_isShallow") {
      return shallow;
    } else if (key === "__v_raw" && receiver === (isReadonly2 ? shallow ? shallowReadonlyMap : readonlyMap : shallow ? shallowReactiveMap : reactiveMap).get(target)) {
      return target;
    }
    const targetIsArray = isArray$2(target);
    if (!isReadonly2) {
      if (targetIsArray && hasOwn(arrayInstrumentations, key)) {
        return Reflect.get(arrayInstrumentations, key, receiver);
      }
      if (key === "hasOwnProperty") {
        return hasOwnProperty;
      }
    }
    const res = Reflect.get(target, key, receiver);
    if (isSymbol(key) ? builtInSymbols.has(key) : isNonTrackableKeys(key)) {
      return res;
    }
    if (!isReadonly2) {
      track(target, "get", key);
    }
    if (shallow) {
      return res;
    }
    if (isRef(res)) {
      return targetIsArray && isIntegerKey(key) ? res : res.value;
    }
    if (isObject$1(res)) {
      return isReadonly2 ? readonly(res) : reactive(res);
    }
    return res;
  };
}
const set$1$1 = /* @__PURE__ */ createSetter();
const shallowSet = /* @__PURE__ */ createSetter(true);
function createSetter(shallow = false) {
  return function set2(target, key, value, receiver) {
    let oldValue = target[key];
    if (isReadonly(oldValue) && isRef(oldValue) && !isRef(value)) {
      return false;
    }
    if (!shallow) {
      if (!isShallow(value) && !isReadonly(value)) {
        oldValue = toRaw(oldValue);
        value = toRaw(value);
      }
      if (!isArray$2(target) && isRef(oldValue) && !isRef(value)) {
        oldValue.value = value;
        return true;
      }
    }
    const hadKey = isArray$2(target) && isIntegerKey(key) ? Number(key) < target.length : hasOwn(target, key);
    const result = Reflect.set(target, key, value, receiver);
    if (target === toRaw(receiver)) {
      if (!hadKey) {
        trigger(target, "add", key, value);
      } else if (hasChanged(value, oldValue)) {
        trigger(target, "set", key, value);
      }
    }
    return result;
  };
}
function deleteProperty(target, key) {
  const hadKey = hasOwn(target, key);
  target[key];
  const result = Reflect.deleteProperty(target, key);
  if (result && hadKey) {
    trigger(target, "delete", key, void 0);
  }
  return result;
}
function has$1(target, key) {
  const result = Reflect.has(target, key);
  if (!isSymbol(key) || !builtInSymbols.has(key)) {
    track(target, "has", key);
  }
  return result;
}
function ownKeys(target) {
  track(target, "iterate", isArray$2(target) ? "length" : ITERATE_KEY);
  return Reflect.ownKeys(target);
}
const mutableHandlers = {
  get: get$1$1,
  set: set$1$1,
  deleteProperty,
  has: has$1,
  ownKeys
};
const readonlyHandlers = {
  get: readonlyGet,
  set(target, key) {
    return true;
  },
  deleteProperty(target, key) {
    return true;
  }
};
const shallowReactiveHandlers = /* @__PURE__ */ extend$1({}, mutableHandlers, {
  get: shallowGet,
  set: shallowSet
});
const toShallow = (value) => value;
const getProto = (v) => Reflect.getPrototypeOf(v);
function get$3(target, key, isReadonly2 = false, isShallow2 = false) {
  target = target[
    "__v_raw"
    /* ReactiveFlags.RAW */
  ];
  const rawTarget = toRaw(target);
  const rawKey = toRaw(key);
  if (!isReadonly2) {
    if (key !== rawKey) {
      track(rawTarget, "get", key);
    }
    track(rawTarget, "get", rawKey);
  }
  const { has: has2 } = getProto(rawTarget);
  const wrap = isShallow2 ? toShallow : isReadonly2 ? toReadonly : toReactive;
  if (has2.call(rawTarget, key)) {
    return wrap(target.get(key));
  } else if (has2.call(rawTarget, rawKey)) {
    return wrap(target.get(rawKey));
  } else if (target !== rawTarget) {
    target.get(key);
  }
}
function has(key, isReadonly2 = false) {
  const target = this[
    "__v_raw"
    /* ReactiveFlags.RAW */
  ];
  const rawTarget = toRaw(target);
  const rawKey = toRaw(key);
  if (!isReadonly2) {
    if (key !== rawKey) {
      track(rawTarget, "has", key);
    }
    track(rawTarget, "has", rawKey);
  }
  return key === rawKey ? target.has(key) : target.has(key) || target.has(rawKey);
}
function size(target, isReadonly2 = false) {
  target = target[
    "__v_raw"
    /* ReactiveFlags.RAW */
  ];
  !isReadonly2 && track(toRaw(target), "iterate", ITERATE_KEY);
  return Reflect.get(target, "size", target);
}
function add$2(value) {
  value = toRaw(value);
  const target = toRaw(this);
  const proto2 = getProto(target);
  const hadKey = proto2.has.call(target, value);
  if (!hadKey) {
    target.add(value);
    trigger(target, "add", value, value);
  }
  return this;
}
function set$2(key, value) {
  value = toRaw(value);
  const target = toRaw(this);
  const { has: has2, get: get2 } = getProto(target);
  let hadKey = has2.call(target, key);
  if (!hadKey) {
    key = toRaw(key);
    hadKey = has2.call(target, key);
  }
  const oldValue = get2.call(target, key);
  target.set(key, value);
  if (!hadKey) {
    trigger(target, "add", key, value);
  } else if (hasChanged(value, oldValue)) {
    trigger(target, "set", key, value);
  }
  return this;
}
function deleteEntry(key) {
  const target = toRaw(this);
  const { has: has2, get: get2 } = getProto(target);
  let hadKey = has2.call(target, key);
  if (!hadKey) {
    key = toRaw(key);
    hadKey = has2.call(target, key);
  }
  get2 ? get2.call(target, key) : void 0;
  const result = target.delete(key);
  if (hadKey) {
    trigger(target, "delete", key, void 0);
  }
  return result;
}
function clear() {
  const target = toRaw(this);
  const hadItems = target.size !== 0;
  const result = target.clear();
  if (hadItems) {
    trigger(target, "clear", void 0, void 0);
  }
  return result;
}
function createForEach(isReadonly2, isShallow2) {
  return function forEach(callback, thisArg) {
    const observed = this;
    const target = observed[
      "__v_raw"
      /* ReactiveFlags.RAW */
    ];
    const rawTarget = toRaw(target);
    const wrap = isShallow2 ? toShallow : isReadonly2 ? toReadonly : toReactive;
    !isReadonly2 && track(rawTarget, "iterate", ITERATE_KEY);
    return target.forEach((value, key) => {
      return callback.call(thisArg, wrap(value), wrap(key), observed);
    });
  };
}
function createIterableMethod(method, isReadonly2, isShallow2) {
  return function(...args) {
    const target = this[
      "__v_raw"
      /* ReactiveFlags.RAW */
    ];
    const rawTarget = toRaw(target);
    const targetIsMap = isMap(rawTarget);
    const isPair = method === "entries" || method === Symbol.iterator && targetIsMap;
    const isKeyOnly = method === "keys" && targetIsMap;
    const innerIterator = target[method](...args);
    const wrap = isShallow2 ? toShallow : isReadonly2 ? toReadonly : toReactive;
    !isReadonly2 && track(rawTarget, "iterate", isKeyOnly ? MAP_KEY_ITERATE_KEY : ITERATE_KEY);
    return {
      // iterator protocol
      next() {
        const { value, done } = innerIterator.next();
        return done ? { value, done } : {
          value: isPair ? [wrap(value[0]), wrap(value[1])] : wrap(value),
          done
        };
      },
      // iterable protocol
      [Symbol.iterator]() {
        return this;
      }
    };
  };
}
function createReadonlyMethod(type) {
  return function(...args) {
    return type === "delete" ? false : this;
  };
}
function createInstrumentations() {
  const mutableInstrumentations2 = {
    get(key) {
      return get$3(this, key);
    },
    get size() {
      return size(this);
    },
    has,
    add: add$2,
    set: set$2,
    delete: deleteEntry,
    clear,
    forEach: createForEach(false, false)
  };
  const shallowInstrumentations2 = {
    get(key) {
      return get$3(this, key, false, true);
    },
    get size() {
      return size(this);
    },
    has,
    add: add$2,
    set: set$2,
    delete: deleteEntry,
    clear,
    forEach: createForEach(false, true)
  };
  const readonlyInstrumentations2 = {
    get(key) {
      return get$3(this, key, true);
    },
    get size() {
      return size(this, true);
    },
    has(key) {
      return has.call(this, key, true);
    },
    add: createReadonlyMethod(
      "add"
      /* TriggerOpTypes.ADD */
    ),
    set: createReadonlyMethod(
      "set"
      /* TriggerOpTypes.SET */
    ),
    delete: createReadonlyMethod(
      "delete"
      /* TriggerOpTypes.DELETE */
    ),
    clear: createReadonlyMethod(
      "clear"
      /* TriggerOpTypes.CLEAR */
    ),
    forEach: createForEach(true, false)
  };
  const shallowReadonlyInstrumentations2 = {
    get(key) {
      return get$3(this, key, true, true);
    },
    get size() {
      return size(this, true);
    },
    has(key) {
      return has.call(this, key, true);
    },
    add: createReadonlyMethod(
      "add"
      /* TriggerOpTypes.ADD */
    ),
    set: createReadonlyMethod(
      "set"
      /* TriggerOpTypes.SET */
    ),
    delete: createReadonlyMethod(
      "delete"
      /* TriggerOpTypes.DELETE */
    ),
    clear: createReadonlyMethod(
      "clear"
      /* TriggerOpTypes.CLEAR */
    ),
    forEach: createForEach(true, true)
  };
  const iteratorMethods = ["keys", "values", "entries", Symbol.iterator];
  iteratorMethods.forEach((method) => {
    mutableInstrumentations2[method] = createIterableMethod(method, false, false);
    readonlyInstrumentations2[method] = createIterableMethod(method, true, false);
    shallowInstrumentations2[method] = createIterableMethod(method, false, true);
    shallowReadonlyInstrumentations2[method] = createIterableMethod(method, true, true);
  });
  return [
    mutableInstrumentations2,
    readonlyInstrumentations2,
    shallowInstrumentations2,
    shallowReadonlyInstrumentations2
  ];
}
const [mutableInstrumentations, readonlyInstrumentations, shallowInstrumentations, shallowReadonlyInstrumentations] = /* @__PURE__ */ createInstrumentations();
function createInstrumentationGetter(isReadonly2, shallow) {
  const instrumentations = shallow ? isReadonly2 ? shallowReadonlyInstrumentations : shallowInstrumentations : isReadonly2 ? readonlyInstrumentations : mutableInstrumentations;
  return (target, key, receiver) => {
    if (key === "__v_isReactive") {
      return !isReadonly2;
    } else if (key === "__v_isReadonly") {
      return isReadonly2;
    } else if (key === "__v_raw") {
      return target;
    }
    return Reflect.get(hasOwn(instrumentations, key) && key in target ? instrumentations : target, key, receiver);
  };
}
const mutableCollectionHandlers = {
  get: /* @__PURE__ */ createInstrumentationGetter(false, false)
};
const shallowCollectionHandlers = {
  get: /* @__PURE__ */ createInstrumentationGetter(false, true)
};
const readonlyCollectionHandlers = {
  get: /* @__PURE__ */ createInstrumentationGetter(true, false)
};
const reactiveMap = /* @__PURE__ */ new WeakMap();
const shallowReactiveMap = /* @__PURE__ */ new WeakMap();
const readonlyMap = /* @__PURE__ */ new WeakMap();
const shallowReadonlyMap = /* @__PURE__ */ new WeakMap();
function targetTypeMap(rawType) {
  switch (rawType) {
    case "Object":
    case "Array":
      return 1;
    case "Map":
    case "Set":
    case "WeakMap":
    case "WeakSet":
      return 2;
    default:
      return 0;
  }
}
function getTargetType(value) {
  return value[
    "__v_skip"
    /* ReactiveFlags.SKIP */
  ] || !Object.isExtensible(value) ? 0 : targetTypeMap(toRawType(value));
}
function reactive(target) {
  if (isReadonly(target)) {
    return target;
  }
  return createReactiveObject(target, false, mutableHandlers, mutableCollectionHandlers, reactiveMap);
}
function shallowReactive(target) {
  return createReactiveObject(target, false, shallowReactiveHandlers, shallowCollectionHandlers, shallowReactiveMap);
}
function readonly(target) {
  return createReactiveObject(target, true, readonlyHandlers, readonlyCollectionHandlers, readonlyMap);
}
function createReactiveObject(target, isReadonly2, baseHandlers, collectionHandlers, proxyMap) {
  if (!isObject$1(target)) {
    return target;
  }
  if (target[
    "__v_raw"
    /* ReactiveFlags.RAW */
  ] && !(isReadonly2 && target[
    "__v_isReactive"
    /* ReactiveFlags.IS_REACTIVE */
  ])) {
    return target;
  }
  const existingProxy = proxyMap.get(target);
  if (existingProxy) {
    return existingProxy;
  }
  const targetType = getTargetType(target);
  if (targetType === 0) {
    return target;
  }
  const proxy = new Proxy(target, targetType === 2 ? collectionHandlers : baseHandlers);
  proxyMap.set(target, proxy);
  return proxy;
}
function isReactive(value) {
  if (isReadonly(value)) {
    return isReactive(value[
      "__v_raw"
      /* ReactiveFlags.RAW */
    ]);
  }
  return !!(value && value[
    "__v_isReactive"
    /* ReactiveFlags.IS_REACTIVE */
  ]);
}
function isReadonly(value) {
  return !!(value && value[
    "__v_isReadonly"
    /* ReactiveFlags.IS_READONLY */
  ]);
}
function isShallow(value) {
  return !!(value && value[
    "__v_isShallow"
    /* ReactiveFlags.IS_SHALLOW */
  ]);
}
function isProxy(value) {
  return isReactive(value) || isReadonly(value);
}
function toRaw(observed) {
  const raw = observed && observed[
    "__v_raw"
    /* ReactiveFlags.RAW */
  ];
  return raw ? toRaw(raw) : observed;
}
function markRaw(value) {
  def(value, "__v_skip", true);
  return value;
}
const toReactive = (value) => isObject$1(value) ? reactive(value) : value;
const toReadonly = (value) => isObject$1(value) ? readonly(value) : value;
function trackRefValue(ref2) {
  if (shouldTrack && activeEffect) {
    ref2 = toRaw(ref2);
    {
      trackEffects(ref2.dep || (ref2.dep = createDep()));
    }
  }
}
function triggerRefValue(ref2, newVal) {
  ref2 = toRaw(ref2);
  const dep = ref2.dep;
  if (dep) {
    {
      triggerEffects(dep);
    }
  }
}
function isRef(r) {
  return !!(r && r.__v_isRef === true);
}
function ref(value) {
  return createRef(value, false);
}
function shallowRef(value) {
  return createRef(value, true);
}
function createRef(rawValue, shallow) {
  if (isRef(rawValue)) {
    return rawValue;
  }
  return new RefImpl(rawValue, shallow);
}
class RefImpl {
  constructor(value, __v_isShallow) {
    this.__v_isShallow = __v_isShallow;
    this.dep = void 0;
    this.__v_isRef = true;
    this._rawValue = __v_isShallow ? value : toRaw(value);
    this._value = __v_isShallow ? value : toReactive(value);
  }
  get value() {
    trackRefValue(this);
    return this._value;
  }
  set value(newVal) {
    const useDirectValue = this.__v_isShallow || isShallow(newVal) || isReadonly(newVal);
    newVal = useDirectValue ? newVal : toRaw(newVal);
    if (hasChanged(newVal, this._rawValue)) {
      this._rawValue = newVal;
      this._value = useDirectValue ? newVal : toReactive(newVal);
      triggerRefValue(this);
    }
  }
}
function unref(ref2) {
  return isRef(ref2) ? ref2.value : ref2;
}
const shallowUnwrapHandlers = {
  get: (target, key, receiver) => unref(Reflect.get(target, key, receiver)),
  set: (target, key, value, receiver) => {
    const oldValue = target[key];
    if (isRef(oldValue) && !isRef(value)) {
      oldValue.value = value;
      return true;
    } else {
      return Reflect.set(target, key, value, receiver);
    }
  }
};
function proxyRefs(objectWithRefs) {
  return isReactive(objectWithRefs) ? objectWithRefs : new Proxy(objectWithRefs, shallowUnwrapHandlers);
}
function toRefs(object) {
  const ret = isArray$2(object) ? new Array(object.length) : {};
  for (const key in object) {
    ret[key] = toRef(object, key);
  }
  return ret;
}
class ObjectRefImpl {
  constructor(_object, _key, _defaultValue) {
    this._object = _object;
    this._key = _key;
    this._defaultValue = _defaultValue;
    this.__v_isRef = true;
  }
  get value() {
    const val = this._object[this._key];
    return val === void 0 ? this._defaultValue : val;
  }
  set value(newVal) {
    this._object[this._key] = newVal;
  }
  get dep() {
    return getDepFromReactive(toRaw(this._object), this._key);
  }
}
function toRef(object, key, defaultValue) {
  const val = object[key];
  return isRef(val) ? val : new ObjectRefImpl(object, key, defaultValue);
}
var _a$1;
class ComputedRefImpl {
  constructor(getter, _setter, isReadonly2, isSSR) {
    this._setter = _setter;
    this.dep = void 0;
    this.__v_isRef = true;
    this[_a$1] = false;
    this._dirty = true;
    this.effect = new ReactiveEffect(getter, () => {
      if (!this._dirty) {
        this._dirty = true;
        triggerRefValue(this);
      }
    });
    this.effect.computed = this;
    this.effect.active = this._cacheable = !isSSR;
    this[
      "__v_isReadonly"
      /* ReactiveFlags.IS_READONLY */
    ] = isReadonly2;
  }
  get value() {
    const self2 = toRaw(this);
    trackRefValue(self2);
    if (self2._dirty || !self2._cacheable) {
      self2._dirty = false;
      self2._value = self2.effect.run();
    }
    return self2._value;
  }
  set value(newValue) {
    this._setter(newValue);
  }
}
_a$1 = "__v_isReadonly";
function computed$1(getterOrOptions, debugOptions, isSSR = false) {
  let getter;
  let setter;
  const onlyGetter = isFunction$1(getterOrOptions);
  if (onlyGetter) {
    getter = getterOrOptions;
    setter = NOOP;
  } else {
    getter = getterOrOptions.get;
    setter = getterOrOptions.set;
  }
  const cRef = new ComputedRefImpl(getter, setter, onlyGetter || !setter, isSSR);
  return cRef;
}
function warn$1(msg, ...args) {
  return;
}
function callWithErrorHandling(fn2, instance, type, args) {
  let res;
  try {
    res = args ? fn2(...args) : fn2();
  } catch (err) {
    handleError(err, instance, type);
  }
  return res;
}
function callWithAsyncErrorHandling(fn2, instance, type, args) {
  if (isFunction$1(fn2)) {
    const res = callWithErrorHandling(fn2, instance, type, args);
    if (res && isPromise(res)) {
      res.catch((err) => {
        handleError(err, instance, type);
      });
    }
    return res;
  }
  const values = [];
  for (let i = 0; i < fn2.length; i++) {
    values.push(callWithAsyncErrorHandling(fn2[i], instance, type, args));
  }
  return values;
}
function handleError(err, instance, type, throwInDev = true) {
  const contextVNode = instance ? instance.vnode : null;
  if (instance) {
    let cur = instance.parent;
    const exposedInstance = instance.proxy;
    const errorInfo = type;
    while (cur) {
      const errorCapturedHooks = cur.ec;
      if (errorCapturedHooks) {
        for (let i = 0; i < errorCapturedHooks.length; i++) {
          if (errorCapturedHooks[i](err, exposedInstance, errorInfo) === false) {
            return;
          }
        }
      }
      cur = cur.parent;
    }
    const appErrorHandler = instance.appContext.config.errorHandler;
    if (appErrorHandler) {
      callWithErrorHandling(appErrorHandler, null, 10, [err, exposedInstance, errorInfo]);
      return;
    }
  }
  logError(err, type, contextVNode, throwInDev);
}
function logError(err, type, contextVNode, throwInDev = true) {
  {
    console.error(err);
  }
}
let isFlushing = false;
let isFlushPending = false;
const queue = [];
let flushIndex = 0;
const pendingPostFlushCbs = [];
let activePostFlushCbs = null;
let postFlushIndex = 0;
const resolvedPromise = /* @__PURE__ */ Promise.resolve();
let currentFlushPromise = null;
function nextTick(fn2) {
  const p2 = currentFlushPromise || resolvedPromise;
  return fn2 ? p2.then(this ? fn2.bind(this) : fn2) : p2;
}
function findInsertionIndex(id) {
  let start2 = flushIndex + 1;
  let end2 = queue.length;
  while (start2 < end2) {
    const middle = start2 + end2 >>> 1;
    const middleJobId = getId(queue[middle]);
    middleJobId < id ? start2 = middle + 1 : end2 = middle;
  }
  return start2;
}
function queueJob(job) {
  if (!queue.length || !queue.includes(job, isFlushing && job.allowRecurse ? flushIndex + 1 : flushIndex)) {
    if (job.id == null) {
      queue.push(job);
    } else {
      queue.splice(findInsertionIndex(job.id), 0, job);
    }
    queueFlush();
  }
}
function queueFlush() {
  if (!isFlushing && !isFlushPending) {
    isFlushPending = true;
    currentFlushPromise = resolvedPromise.then(flushJobs);
  }
}
function invalidateJob(job) {
  const i = queue.indexOf(job);
  if (i > flushIndex) {
    queue.splice(i, 1);
  }
}
function queuePostFlushCb(cb) {
  if (!isArray$2(cb)) {
    if (!activePostFlushCbs || !activePostFlushCbs.includes(cb, cb.allowRecurse ? postFlushIndex + 1 : postFlushIndex)) {
      pendingPostFlushCbs.push(cb);
    }
  } else {
    pendingPostFlushCbs.push(...cb);
  }
  queueFlush();
}
function flushPreFlushCbs(seen2, i = isFlushing ? flushIndex + 1 : 0) {
  for (; i < queue.length; i++) {
    const cb = queue[i];
    if (cb && cb.pre) {
      queue.splice(i, 1);
      i--;
      cb();
    }
  }
}
function flushPostFlushCbs(seen2) {
  if (pendingPostFlushCbs.length) {
    const deduped = [...new Set(pendingPostFlushCbs)];
    pendingPostFlushCbs.length = 0;
    if (activePostFlushCbs) {
      activePostFlushCbs.push(...deduped);
      return;
    }
    activePostFlushCbs = deduped;
    activePostFlushCbs.sort((a, b) => getId(a) - getId(b));
    for (postFlushIndex = 0; postFlushIndex < activePostFlushCbs.length; postFlushIndex++) {
      activePostFlushCbs[postFlushIndex]();
    }
    activePostFlushCbs = null;
    postFlushIndex = 0;
  }
}
const getId = (job) => job.id == null ? Infinity : job.id;
const comparator = (a, b) => {
  const diff2 = getId(a) - getId(b);
  if (diff2 === 0) {
    if (a.pre && !b.pre)
      return -1;
    if (b.pre && !a.pre)
      return 1;
  }
  return diff2;
};
function flushJobs(seen2) {
  isFlushPending = false;
  isFlushing = true;
  queue.sort(comparator);
  const check = NOOP;
  try {
    for (flushIndex = 0; flushIndex < queue.length; flushIndex++) {
      const job = queue[flushIndex];
      if (job && job.active !== false) {
        if (false)
          ;
        callWithErrorHandling(
          job,
          null,
          14
          /* ErrorCodes.SCHEDULER */
        );
      }
    }
  } finally {
    flushIndex = 0;
    queue.length = 0;
    flushPostFlushCbs();
    isFlushing = false;
    currentFlushPromise = null;
    if (queue.length || pendingPostFlushCbs.length) {
      flushJobs();
    }
  }
}
function emit(instance, event, ...rawArgs) {
  if (instance.isUnmounted)
    return;
  const props = instance.vnode.props || EMPTY_OBJ;
  let args = rawArgs;
  const isModelListener2 = event.startsWith("update:");
  const modelArg = isModelListener2 && event.slice(7);
  if (modelArg && modelArg in props) {
    const modifiersKey = `${modelArg === "modelValue" ? "model" : modelArg}Modifiers`;
    const { number: number2, trim } = props[modifiersKey] || EMPTY_OBJ;
    if (trim) {
      args = rawArgs.map((a) => isString$1(a) ? a.trim() : a);
    }
    if (number2) {
      args = rawArgs.map(looseToNumber);
    }
  }
  let handlerName;
  let handler = props[handlerName = toHandlerKey(event)] || // also try camelCase event handler (#2249)
  props[handlerName = toHandlerKey(camelize(event))];
  if (!handler && isModelListener2) {
    handler = props[handlerName = toHandlerKey(hyphenate(event))];
  }
  if (handler) {
    callWithAsyncErrorHandling(handler, instance, 6, args);
  }
  const onceHandler = props[handlerName + `Once`];
  if (onceHandler) {
    if (!instance.emitted) {
      instance.emitted = {};
    } else if (instance.emitted[handlerName]) {
      return;
    }
    instance.emitted[handlerName] = true;
    callWithAsyncErrorHandling(onceHandler, instance, 6, args);
  }
}
function normalizeEmitsOptions(comp, appContext, asMixin = false) {
  const cache = appContext.emitsCache;
  const cached = cache.get(comp);
  if (cached !== void 0) {
    return cached;
  }
  const raw = comp.emits;
  let normalized = {};
  let hasExtends = false;
  if (!isFunction$1(comp)) {
    const extendEmits = (raw2) => {
      const normalizedFromExtend = normalizeEmitsOptions(raw2, appContext, true);
      if (normalizedFromExtend) {
        hasExtends = true;
        extend$1(normalized, normalizedFromExtend);
      }
    };
    if (!asMixin && appContext.mixins.length) {
      appContext.mixins.forEach(extendEmits);
    }
    if (comp.extends) {
      extendEmits(comp.extends);
    }
    if (comp.mixins) {
      comp.mixins.forEach(extendEmits);
    }
  }
  if (!raw && !hasExtends) {
    if (isObject$1(comp)) {
      cache.set(comp, null);
    }
    return null;
  }
  if (isArray$2(raw)) {
    raw.forEach((key) => normalized[key] = null);
  } else {
    extend$1(normalized, raw);
  }
  if (isObject$1(comp)) {
    cache.set(comp, normalized);
  }
  return normalized;
}
function isEmitListener(options, key) {
  if (!options || !isOn(key)) {
    return false;
  }
  key = key.slice(2).replace(/Once$/, "");
  return hasOwn(options, key[0].toLowerCase() + key.slice(1)) || hasOwn(options, hyphenate(key)) || hasOwn(options, key);
}
let currentRenderingInstance = null;
let currentScopeId = null;
function setCurrentRenderingInstance(instance) {
  const prev = currentRenderingInstance;
  currentRenderingInstance = instance;
  currentScopeId = instance && instance.type.__scopeId || null;
  return prev;
}
function pushScopeId(id) {
  currentScopeId = id;
}
function popScopeId() {
  currentScopeId = null;
}
function withCtx(fn2, ctx = currentRenderingInstance, isNonScopedSlot) {
  if (!ctx)
    return fn2;
  if (fn2._n) {
    return fn2;
  }
  const renderFnWithContext = (...args) => {
    if (renderFnWithContext._d) {
      setBlockTracking(-1);
    }
    const prevInstance = setCurrentRenderingInstance(ctx);
    let res;
    try {
      res = fn2(...args);
    } finally {
      setCurrentRenderingInstance(prevInstance);
      if (renderFnWithContext._d) {
        setBlockTracking(1);
      }
    }
    return res;
  };
  renderFnWithContext._n = true;
  renderFnWithContext._c = true;
  renderFnWithContext._d = true;
  return renderFnWithContext;
}
function markAttrsAccessed() {
}
function renderComponentRoot(instance) {
  const { type: Component2, vnode, proxy, withProxy, props, propsOptions: [propsOptions], slots, attrs, emit: emit2, render, renderCache, data, setupState, ctx, inheritAttrs } = instance;
  let result;
  let fallthroughAttrs;
  const prev = setCurrentRenderingInstance(instance);
  try {
    if (vnode.shapeFlag & 4) {
      const proxyToUse = withProxy || proxy;
      result = normalizeVNode(render.call(proxyToUse, proxyToUse, renderCache, props, setupState, data, ctx));
      fallthroughAttrs = attrs;
    } else {
      const render2 = Component2;
      if (false)
        ;
      result = normalizeVNode(render2.length > 1 ? render2(props, false ? {
        get attrs() {
          markAttrsAccessed();
          return attrs;
        },
        slots,
        emit: emit2
      } : { attrs, slots, emit: emit2 }) : render2(
        props,
        null
        /* we know it doesn't need it */
      ));
      fallthroughAttrs = Component2.props ? attrs : getFunctionalFallthrough(attrs);
    }
  } catch (err) {
    blockStack.length = 0;
    handleError(
      err,
      instance,
      1
      /* ErrorCodes.RENDER_FUNCTION */
    );
    result = createVNode(Comment);
  }
  let root = result;
  if (fallthroughAttrs && inheritAttrs !== false) {
    const keys2 = Object.keys(fallthroughAttrs);
    const { shapeFlag } = root;
    if (keys2.length) {
      if (shapeFlag & (1 | 6)) {
        if (propsOptions && keys2.some(isModelListener)) {
          fallthroughAttrs = filterModelListeners(fallthroughAttrs, propsOptions);
        }
        root = cloneVNode(root, fallthroughAttrs);
      }
    }
  }
  if (vnode.dirs) {
    root = cloneVNode(root);
    root.dirs = root.dirs ? root.dirs.concat(vnode.dirs) : vnode.dirs;
  }
  if (vnode.transition) {
    root.transition = vnode.transition;
  }
  {
    result = root;
  }
  setCurrentRenderingInstance(prev);
  return result;
}
const getFunctionalFallthrough = (attrs) => {
  let res;
  for (const key in attrs) {
    if (key === "class" || key === "style" || isOn(key)) {
      (res || (res = {}))[key] = attrs[key];
    }
  }
  return res;
};
const filterModelListeners = (attrs, props) => {
  const res = {};
  for (const key in attrs) {
    if (!isModelListener(key) || !(key.slice(9) in props)) {
      res[key] = attrs[key];
    }
  }
  return res;
};
function shouldUpdateComponent(prevVNode, nextVNode, optimized) {
  const { props: prevProps, children: prevChildren, component } = prevVNode;
  const { props: nextProps, children: nextChildren, patchFlag } = nextVNode;
  const emits = component.emitsOptions;
  if (nextVNode.dirs || nextVNode.transition) {
    return true;
  }
  if (optimized && patchFlag >= 0) {
    if (patchFlag & 1024) {
      return true;
    }
    if (patchFlag & 16) {
      if (!prevProps) {
        return !!nextProps;
      }
      return hasPropsChanged(prevProps, nextProps, emits);
    } else if (patchFlag & 8) {
      const dynamicProps = nextVNode.dynamicProps;
      for (let i = 0; i < dynamicProps.length; i++) {
        const key = dynamicProps[i];
        if (nextProps[key] !== prevProps[key] && !isEmitListener(emits, key)) {
          return true;
        }
      }
    }
  } else {
    if (prevChildren || nextChildren) {
      if (!nextChildren || !nextChildren.$stable) {
        return true;
      }
    }
    if (prevProps === nextProps) {
      return false;
    }
    if (!prevProps) {
      return !!nextProps;
    }
    if (!nextProps) {
      return true;
    }
    return hasPropsChanged(prevProps, nextProps, emits);
  }
  return false;
}
function hasPropsChanged(prevProps, nextProps, emitsOptions) {
  const nextKeys = Object.keys(nextProps);
  if (nextKeys.length !== Object.keys(prevProps).length) {
    return true;
  }
  for (let i = 0; i < nextKeys.length; i++) {
    const key = nextKeys[i];
    if (nextProps[key] !== prevProps[key] && !isEmitListener(emitsOptions, key)) {
      return true;
    }
  }
  return false;
}
function updateHOCHostEl({ vnode, parent }, el) {
  while (parent && parent.subTree === vnode) {
    (vnode = parent.vnode).el = el;
    parent = parent.parent;
  }
}
const isSuspense = (type) => type.__isSuspense;
function queueEffectWithSuspense(fn2, suspense) {
  if (suspense && suspense.pendingBranch) {
    if (isArray$2(fn2)) {
      suspense.effects.push(...fn2);
    } else {
      suspense.effects.push(fn2);
    }
  } else {
    queuePostFlushCb(fn2);
  }
}
function provide(key, value) {
  if (!currentInstance)
    ;
  else {
    let provides = currentInstance.provides;
    const parentProvides = currentInstance.parent && currentInstance.parent.provides;
    if (parentProvides === provides) {
      provides = currentInstance.provides = Object.create(parentProvides);
    }
    provides[key] = value;
  }
}
function inject(key, defaultValue, treatDefaultAsFactory = false) {
  const instance = currentInstance || currentRenderingInstance;
  if (instance) {
    const provides = instance.parent == null ? instance.vnode.appContext && instance.vnode.appContext.provides : instance.parent.provides;
    if (provides && key in provides) {
      return provides[key];
    } else if (arguments.length > 1) {
      return treatDefaultAsFactory && isFunction$1(defaultValue) ? defaultValue.call(instance.proxy) : defaultValue;
    } else
      ;
  }
}
const INITIAL_WATCHER_VALUE = {};
function watch(source, cb, options) {
  return doWatch(source, cb, options);
}
function doWatch(source, cb, { immediate, deep, flush, onTrack, onTrigger } = EMPTY_OBJ) {
  const instance = getCurrentScope() === (currentInstance === null || currentInstance === void 0 ? void 0 : currentInstance.scope) ? currentInstance : null;
  let getter;
  let forceTrigger = false;
  let isMultiSource = false;
  if (isRef(source)) {
    getter = () => source.value;
    forceTrigger = isShallow(source);
  } else if (isReactive(source)) {
    getter = () => source;
    deep = true;
  } else if (isArray$2(source)) {
    isMultiSource = true;
    forceTrigger = source.some((s) => isReactive(s) || isShallow(s));
    getter = () => source.map((s) => {
      if (isRef(s)) {
        return s.value;
      } else if (isReactive(s)) {
        return traverse(s);
      } else if (isFunction$1(s)) {
        return callWithErrorHandling(
          s,
          instance,
          2
          /* ErrorCodes.WATCH_GETTER */
        );
      } else
        ;
    });
  } else if (isFunction$1(source)) {
    if (cb) {
      getter = () => callWithErrorHandling(
        source,
        instance,
        2
        /* ErrorCodes.WATCH_GETTER */
      );
    } else {
      getter = () => {
        if (instance && instance.isUnmounted) {
          return;
        }
        if (cleanup) {
          cleanup();
        }
        return callWithAsyncErrorHandling(source, instance, 3, [onCleanup]);
      };
    }
  } else {
    getter = NOOP;
  }
  if (cb && deep) {
    const baseGetter = getter;
    getter = () => traverse(baseGetter());
  }
  let cleanup;
  let onCleanup = (fn2) => {
    cleanup = effect2.onStop = () => {
      callWithErrorHandling(
        fn2,
        instance,
        4
        /* ErrorCodes.WATCH_CLEANUP */
      );
    };
  };
  let ssrCleanup;
  if (isInSSRComponentSetup) {
    onCleanup = NOOP;
    if (!cb) {
      getter();
    } else if (immediate) {
      callWithAsyncErrorHandling(cb, instance, 3, [
        getter(),
        isMultiSource ? [] : void 0,
        onCleanup
      ]);
    }
    if (flush === "sync") {
      const ctx = useSSRContext();
      ssrCleanup = ctx.__watcherHandles || (ctx.__watcherHandles = []);
    } else {
      return NOOP;
    }
  }
  let oldValue = isMultiSource ? new Array(source.length).fill(INITIAL_WATCHER_VALUE) : INITIAL_WATCHER_VALUE;
  const job = () => {
    if (!effect2.active) {
      return;
    }
    if (cb) {
      const newValue = effect2.run();
      if (deep || forceTrigger || (isMultiSource ? newValue.some((v, i) => hasChanged(v, oldValue[i])) : hasChanged(newValue, oldValue)) || false) {
        if (cleanup) {
          cleanup();
        }
        callWithAsyncErrorHandling(cb, instance, 3, [
          newValue,
          // pass undefined as the old value when it's changed for the first time
          oldValue === INITIAL_WATCHER_VALUE ? void 0 : isMultiSource && oldValue[0] === INITIAL_WATCHER_VALUE ? [] : oldValue,
          onCleanup
        ]);
        oldValue = newValue;
      }
    } else {
      effect2.run();
    }
  };
  job.allowRecurse = !!cb;
  let scheduler;
  if (flush === "sync") {
    scheduler = job;
  } else if (flush === "post") {
    scheduler = () => queuePostRenderEffect(job, instance && instance.suspense);
  } else {
    job.pre = true;
    if (instance)
      job.id = instance.uid;
    scheduler = () => queueJob(job);
  }
  const effect2 = new ReactiveEffect(getter, scheduler);
  if (cb) {
    if (immediate) {
      job();
    } else {
      oldValue = effect2.run();
    }
  } else if (flush === "post") {
    queuePostRenderEffect(effect2.run.bind(effect2), instance && instance.suspense);
  } else {
    effect2.run();
  }
  const unwatch = () => {
    effect2.stop();
    if (instance && instance.scope) {
      remove(instance.scope.effects, effect2);
    }
  };
  if (ssrCleanup)
    ssrCleanup.push(unwatch);
  return unwatch;
}
function instanceWatch(source, value, options) {
  const publicThis = this.proxy;
  const getter = isString$1(source) ? source.includes(".") ? createPathGetter(publicThis, source) : () => publicThis[source] : source.bind(publicThis, publicThis);
  let cb;
  if (isFunction$1(value)) {
    cb = value;
  } else {
    cb = value.handler;
    options = value;
  }
  const cur = currentInstance;
  setCurrentInstance(this);
  const res = doWatch(getter, cb.bind(publicThis), options);
  if (cur) {
    setCurrentInstance(cur);
  } else {
    unsetCurrentInstance();
  }
  return res;
}
function createPathGetter(ctx, path) {
  const segments = path.split(".");
  return () => {
    let cur = ctx;
    for (let i = 0; i < segments.length && cur; i++) {
      cur = cur[segments[i]];
    }
    return cur;
  };
}
function traverse(value, seen2) {
  if (!isObject$1(value) || value[
    "__v_skip"
    /* ReactiveFlags.SKIP */
  ]) {
    return value;
  }
  seen2 = seen2 || /* @__PURE__ */ new Set();
  if (seen2.has(value)) {
    return value;
  }
  seen2.add(value);
  if (isRef(value)) {
    traverse(value.value, seen2);
  } else if (isArray$2(value)) {
    for (let i = 0; i < value.length; i++) {
      traverse(value[i], seen2);
    }
  } else if (isSet(value) || isMap(value)) {
    value.forEach((v) => {
      traverse(v, seen2);
    });
  } else if (isPlainObject$1(value)) {
    for (const key in value) {
      traverse(value[key], seen2);
    }
  }
  return value;
}
function defineComponent(options) {
  return isFunction$1(options) ? { setup: options, name: options.name } : options;
}
const isAsyncWrapper = (i) => !!i.type.__asyncLoader;
const isKeepAlive = (vnode) => vnode.type.__isKeepAlive;
function onActivated(hook, target) {
  registerKeepAliveHook(hook, "a", target);
}
function onDeactivated(hook, target) {
  registerKeepAliveHook(hook, "da", target);
}
function registerKeepAliveHook(hook, type, target = currentInstance) {
  const wrappedHook = hook.__wdc || (hook.__wdc = () => {
    let current = target;
    while (current) {
      if (current.isDeactivated) {
        return;
      }
      current = current.parent;
    }
    return hook();
  });
  injectHook(type, wrappedHook, target);
  if (target) {
    let current = target.parent;
    while (current && current.parent) {
      if (isKeepAlive(current.parent.vnode)) {
        injectToKeepAliveRoot(wrappedHook, type, target, current);
      }
      current = current.parent;
    }
  }
}
function injectToKeepAliveRoot(hook, type, target, keepAliveRoot) {
  const injected = injectHook(
    type,
    hook,
    keepAliveRoot,
    true
    /* prepend */
  );
  onUnmounted(() => {
    remove(keepAliveRoot[type], injected);
  }, target);
}
function injectHook(type, hook, target = currentInstance, prepend = false) {
  if (target) {
    const hooks2 = target[type] || (target[type] = []);
    const wrappedHook = hook.__weh || (hook.__weh = (...args) => {
      if (target.isUnmounted) {
        return;
      }
      pauseTracking();
      setCurrentInstance(target);
      const res = callWithAsyncErrorHandling(hook, target, type, args);
      unsetCurrentInstance();
      resetTracking();
      return res;
    });
    if (prepend) {
      hooks2.unshift(wrappedHook);
    } else {
      hooks2.push(wrappedHook);
    }
    return wrappedHook;
  }
}
const createHook = (lifecycle) => (hook, target = currentInstance) => (
  // post-create lifecycle registrations are noops during SSR (except for serverPrefetch)
  (!isInSSRComponentSetup || lifecycle === "sp") && injectHook(lifecycle, (...args) => hook(...args), target)
);
const onBeforeMount = createHook(
  "bm"
  /* LifecycleHooks.BEFORE_MOUNT */
);
const onMounted = createHook(
  "m"
  /* LifecycleHooks.MOUNTED */
);
const onBeforeUpdate = createHook(
  "bu"
  /* LifecycleHooks.BEFORE_UPDATE */
);
const onUpdated = createHook(
  "u"
  /* LifecycleHooks.UPDATED */
);
const onBeforeUnmount = createHook(
  "bum"
  /* LifecycleHooks.BEFORE_UNMOUNT */
);
const onUnmounted = createHook(
  "um"
  /* LifecycleHooks.UNMOUNTED */
);
const onServerPrefetch = createHook(
  "sp"
  /* LifecycleHooks.SERVER_PREFETCH */
);
const onRenderTriggered = createHook(
  "rtg"
  /* LifecycleHooks.RENDER_TRIGGERED */
);
const onRenderTracked = createHook(
  "rtc"
  /* LifecycleHooks.RENDER_TRACKED */
);
function onErrorCaptured(hook, target = currentInstance) {
  injectHook("ec", hook, target);
}
function withDirectives(vnode, directives) {
  const internalInstance = currentRenderingInstance;
  if (internalInstance === null) {
    return vnode;
  }
  const instance = getExposeProxy(internalInstance) || internalInstance.proxy;
  const bindings = vnode.dirs || (vnode.dirs = []);
  for (let i = 0; i < directives.length; i++) {
    let [dir, value, arg, modifiers = EMPTY_OBJ] = directives[i];
    if (dir) {
      if (isFunction$1(dir)) {
        dir = {
          mounted: dir,
          updated: dir
        };
      }
      if (dir.deep) {
        traverse(value);
      }
      bindings.push({
        dir,
        instance,
        value,
        oldValue: void 0,
        arg,
        modifiers
      });
    }
  }
  return vnode;
}
function invokeDirectiveHook(vnode, prevVNode, instance, name) {
  const bindings = vnode.dirs;
  const oldBindings = prevVNode && prevVNode.dirs;
  for (let i = 0; i < bindings.length; i++) {
    const binding = bindings[i];
    if (oldBindings) {
      binding.oldValue = oldBindings[i].value;
    }
    let hook = binding.dir[name];
    if (hook) {
      pauseTracking();
      callWithAsyncErrorHandling(hook, instance, 8, [
        vnode.el,
        binding,
        vnode,
        prevVNode
      ]);
      resetTracking();
    }
  }
}
const COMPONENTS = "components";
const DIRECTIVES = "directives";
function resolveComponent(name, maybeSelfReference) {
  return resolveAsset(COMPONENTS, name, true, maybeSelfReference) || name;
}
const NULL_DYNAMIC_COMPONENT = Symbol();
function resolveDirective(name) {
  return resolveAsset(DIRECTIVES, name);
}
function resolveAsset(type, name, warnMissing = true, maybeSelfReference = false) {
  const instance = currentRenderingInstance || currentInstance;
  if (instance) {
    const Component2 = instance.type;
    if (type === COMPONENTS) {
      const selfName = getComponentName(
        Component2,
        false
        /* do not include inferred name to avoid breaking existing code */
      );
      if (selfName && (selfName === name || selfName === camelize(name) || selfName === capitalize(camelize(name)))) {
        return Component2;
      }
    }
    const res = (
      // local registration
      // check instance[type] first which is resolved for options API
      resolve(instance[type] || Component2[type], name) || // global registration
      resolve(instance.appContext[type], name)
    );
    if (!res && maybeSelfReference) {
      return Component2;
    }
    return res;
  }
}
function resolve(registry, name) {
  return registry && (registry[name] || registry[camelize(name)] || registry[capitalize(camelize(name))]);
}
function renderList(source, renderItem, cache, index2) {
  let ret;
  const cached = cache && cache[index2];
  if (isArray$2(source) || isString$1(source)) {
    ret = new Array(source.length);
    for (let i = 0, l = source.length; i < l; i++) {
      ret[i] = renderItem(source[i], i, void 0, cached && cached[i]);
    }
  } else if (typeof source === "number") {
    ret = new Array(source);
    for (let i = 0; i < source; i++) {
      ret[i] = renderItem(i + 1, i, void 0, cached && cached[i]);
    }
  } else if (isObject$1(source)) {
    if (source[Symbol.iterator]) {
      ret = Array.from(source, (item, i) => renderItem(item, i, void 0, cached && cached[i]));
    } else {
      const keys2 = Object.keys(source);
      ret = new Array(keys2.length);
      for (let i = 0, l = keys2.length; i < l; i++) {
        const key = keys2[i];
        ret[i] = renderItem(source[key], key, i, cached && cached[i]);
      }
    }
  } else {
    ret = [];
  }
  if (cache) {
    cache[index2] = ret;
  }
  return ret;
}
const getPublicInstance = (i) => {
  if (!i)
    return null;
  if (isStatefulComponent(i))
    return getExposeProxy(i) || i.proxy;
  return getPublicInstance(i.parent);
};
const publicPropertiesMap = (
  // Move PURE marker to new line to workaround compiler discarding it
  // due to type annotation
  /* @__PURE__ */ extend$1(/* @__PURE__ */ Object.create(null), {
    $: (i) => i,
    $el: (i) => i.vnode.el,
    $data: (i) => i.data,
    $props: (i) => i.props,
    $attrs: (i) => i.attrs,
    $slots: (i) => i.slots,
    $refs: (i) => i.refs,
    $parent: (i) => getPublicInstance(i.parent),
    $root: (i) => getPublicInstance(i.root),
    $emit: (i) => i.emit,
    $options: (i) => resolveMergedOptions(i),
    $forceUpdate: (i) => i.f || (i.f = () => queueJob(i.update)),
    $nextTick: (i) => i.n || (i.n = nextTick.bind(i.proxy)),
    $watch: (i) => instanceWatch.bind(i)
  })
);
const hasSetupBinding = (state, key) => state !== EMPTY_OBJ && !state.__isScriptSetup && hasOwn(state, key);
const PublicInstanceProxyHandlers = {
  get({ _: instance }, key) {
    const { ctx, setupState, data, props, accessCache, type, appContext } = instance;
    let normalizedProps;
    if (key[0] !== "$") {
      const n = accessCache[key];
      if (n !== void 0) {
        switch (n) {
          case 1:
            return setupState[key];
          case 2:
            return data[key];
          case 4:
            return ctx[key];
          case 3:
            return props[key];
        }
      } else if (hasSetupBinding(setupState, key)) {
        accessCache[key] = 1;
        return setupState[key];
      } else if (data !== EMPTY_OBJ && hasOwn(data, key)) {
        accessCache[key] = 2;
        return data[key];
      } else if (
        // only cache other properties when instance has declared (thus stable)
        // props
        (normalizedProps = instance.propsOptions[0]) && hasOwn(normalizedProps, key)
      ) {
        accessCache[key] = 3;
        return props[key];
      } else if (ctx !== EMPTY_OBJ && hasOwn(ctx, key)) {
        accessCache[key] = 4;
        return ctx[key];
      } else if (shouldCacheAccess) {
        accessCache[key] = 0;
      }
    }
    const publicGetter = publicPropertiesMap[key];
    let cssModule, globalProperties;
    if (publicGetter) {
      if (key === "$attrs") {
        track(instance, "get", key);
      }
      return publicGetter(instance);
    } else if (
      // css module (injected by vue-loader)
      (cssModule = type.__cssModules) && (cssModule = cssModule[key])
    ) {
      return cssModule;
    } else if (ctx !== EMPTY_OBJ && hasOwn(ctx, key)) {
      accessCache[key] = 4;
      return ctx[key];
    } else if (
      // global properties
      globalProperties = appContext.config.globalProperties, hasOwn(globalProperties, key)
    ) {
      {
        return globalProperties[key];
      }
    } else
      ;
  },
  set({ _: instance }, key, value) {
    const { data, setupState, ctx } = instance;
    if (hasSetupBinding(setupState, key)) {
      setupState[key] = value;
      return true;
    } else if (data !== EMPTY_OBJ && hasOwn(data, key)) {
      data[key] = value;
      return true;
    } else if (hasOwn(instance.props, key)) {
      return false;
    }
    if (key[0] === "$" && key.slice(1) in instance) {
      return false;
    } else {
      {
        ctx[key] = value;
      }
    }
    return true;
  },
  has({ _: { data, setupState, accessCache, ctx, appContext, propsOptions } }, key) {
    let normalizedProps;
    return !!accessCache[key] || data !== EMPTY_OBJ && hasOwn(data, key) || hasSetupBinding(setupState, key) || (normalizedProps = propsOptions[0]) && hasOwn(normalizedProps, key) || hasOwn(ctx, key) || hasOwn(publicPropertiesMap, key) || hasOwn(appContext.config.globalProperties, key);
  },
  defineProperty(target, key, descriptor) {
    if (descriptor.get != null) {
      target._.accessCache[key] = 0;
    } else if (hasOwn(descriptor, "value")) {
      this.set(target, key, descriptor.value, null);
    }
    return Reflect.defineProperty(target, key, descriptor);
  }
};
let shouldCacheAccess = true;
function applyOptions(instance) {
  const options = resolveMergedOptions(instance);
  const publicThis = instance.proxy;
  const ctx = instance.ctx;
  shouldCacheAccess = false;
  if (options.beforeCreate) {
    callHook(
      options.beforeCreate,
      instance,
      "bc"
      /* LifecycleHooks.BEFORE_CREATE */
    );
  }
  const {
    // state
    data: dataOptions,
    computed: computedOptions,
    methods,
    watch: watchOptions,
    provide: provideOptions,
    inject: injectOptions,
    // lifecycle
    created,
    beforeMount,
    mounted,
    beforeUpdate,
    updated,
    activated,
    deactivated,
    beforeDestroy,
    beforeUnmount,
    destroyed,
    unmounted,
    render,
    renderTracked,
    renderTriggered,
    errorCaptured,
    serverPrefetch,
    // public API
    expose,
    inheritAttrs,
    // assets
    components,
    directives,
    filters
  } = options;
  const checkDuplicateProperties = null;
  if (injectOptions) {
    resolveInjections(injectOptions, ctx, checkDuplicateProperties, instance.appContext.config.unwrapInjectedRef);
  }
  if (methods) {
    for (const key in methods) {
      const methodHandler = methods[key];
      if (isFunction$1(methodHandler)) {
        {
          ctx[key] = methodHandler.bind(publicThis);
        }
      }
    }
  }
  if (dataOptions) {
    const data = dataOptions.call(publicThis, publicThis);
    if (!isObject$1(data))
      ;
    else {
      instance.data = reactive(data);
    }
  }
  shouldCacheAccess = true;
  if (computedOptions) {
    for (const key in computedOptions) {
      const opt = computedOptions[key];
      const get2 = isFunction$1(opt) ? opt.bind(publicThis, publicThis) : isFunction$1(opt.get) ? opt.get.bind(publicThis, publicThis) : NOOP;
      const set2 = !isFunction$1(opt) && isFunction$1(opt.set) ? opt.set.bind(publicThis) : NOOP;
      const c = computed({
        get: get2,
        set: set2
      });
      Object.defineProperty(ctx, key, {
        enumerable: true,
        configurable: true,
        get: () => c.value,
        set: (v) => c.value = v
      });
    }
  }
  if (watchOptions) {
    for (const key in watchOptions) {
      createWatcher(watchOptions[key], ctx, publicThis, key);
    }
  }
  if (provideOptions) {
    const provides = isFunction$1(provideOptions) ? provideOptions.call(publicThis) : provideOptions;
    Reflect.ownKeys(provides).forEach((key) => {
      provide(key, provides[key]);
    });
  }
  if (created) {
    callHook(
      created,
      instance,
      "c"
      /* LifecycleHooks.CREATED */
    );
  }
  function registerLifecycleHook(register, hook) {
    if (isArray$2(hook)) {
      hook.forEach((_hook) => register(_hook.bind(publicThis)));
    } else if (hook) {
      register(hook.bind(publicThis));
    }
  }
  registerLifecycleHook(onBeforeMount, beforeMount);
  registerLifecycleHook(onMounted, mounted);
  registerLifecycleHook(onBeforeUpdate, beforeUpdate);
  registerLifecycleHook(onUpdated, updated);
  registerLifecycleHook(onActivated, activated);
  registerLifecycleHook(onDeactivated, deactivated);
  registerLifecycleHook(onErrorCaptured, errorCaptured);
  registerLifecycleHook(onRenderTracked, renderTracked);
  registerLifecycleHook(onRenderTriggered, renderTriggered);
  registerLifecycleHook(onBeforeUnmount, beforeUnmount);
  registerLifecycleHook(onUnmounted, unmounted);
  registerLifecycleHook(onServerPrefetch, serverPrefetch);
  if (isArray$2(expose)) {
    if (expose.length) {
      const exposed = instance.exposed || (instance.exposed = {});
      expose.forEach((key) => {
        Object.defineProperty(exposed, key, {
          get: () => publicThis[key],
          set: (val) => publicThis[key] = val
        });
      });
    } else if (!instance.exposed) {
      instance.exposed = {};
    }
  }
  if (render && instance.render === NOOP) {
    instance.render = render;
  }
  if (inheritAttrs != null) {
    instance.inheritAttrs = inheritAttrs;
  }
  if (components)
    instance.components = components;
  if (directives)
    instance.directives = directives;
}
function resolveInjections(injectOptions, ctx, checkDuplicateProperties = NOOP, unwrapRef = false) {
  if (isArray$2(injectOptions)) {
    injectOptions = normalizeInject(injectOptions);
  }
  for (const key in injectOptions) {
    const opt = injectOptions[key];
    let injected;
    if (isObject$1(opt)) {
      if ("default" in opt) {
        injected = inject(
          opt.from || key,
          opt.default,
          true
          /* treat default function as factory */
        );
      } else {
        injected = inject(opt.from || key);
      }
    } else {
      injected = inject(opt);
    }
    if (isRef(injected)) {
      if (unwrapRef) {
        Object.defineProperty(ctx, key, {
          enumerable: true,
          configurable: true,
          get: () => injected.value,
          set: (v) => injected.value = v
        });
      } else {
        ctx[key] = injected;
      }
    } else {
      ctx[key] = injected;
    }
  }
}
function callHook(hook, instance, type) {
  callWithAsyncErrorHandling(isArray$2(hook) ? hook.map((h2) => h2.bind(instance.proxy)) : hook.bind(instance.proxy), instance, type);
}
function createWatcher(raw, ctx, publicThis, key) {
  const getter = key.includes(".") ? createPathGetter(publicThis, key) : () => publicThis[key];
  if (isString$1(raw)) {
    const handler = ctx[raw];
    if (isFunction$1(handler)) {
      watch(getter, handler);
    }
  } else if (isFunction$1(raw)) {
    watch(getter, raw.bind(publicThis));
  } else if (isObject$1(raw)) {
    if (isArray$2(raw)) {
      raw.forEach((r) => createWatcher(r, ctx, publicThis, key));
    } else {
      const handler = isFunction$1(raw.handler) ? raw.handler.bind(publicThis) : ctx[raw.handler];
      if (isFunction$1(handler)) {
        watch(getter, handler, raw);
      }
    }
  } else
    ;
}
function resolveMergedOptions(instance) {
  const base = instance.type;
  const { mixins, extends: extendsOptions } = base;
  const { mixins: globalMixins, optionsCache: cache, config: { optionMergeStrategies } } = instance.appContext;
  const cached = cache.get(base);
  let resolved;
  if (cached) {
    resolved = cached;
  } else if (!globalMixins.length && !mixins && !extendsOptions) {
    {
      resolved = base;
    }
  } else {
    resolved = {};
    if (globalMixins.length) {
      globalMixins.forEach((m) => mergeOptions$1(resolved, m, optionMergeStrategies, true));
    }
    mergeOptions$1(resolved, base, optionMergeStrategies);
  }
  if (isObject$1(base)) {
    cache.set(base, resolved);
  }
  return resolved;
}
function mergeOptions$1(to2, from2, strats, asMixin = false) {
  const { mixins, extends: extendsOptions } = from2;
  if (extendsOptions) {
    mergeOptions$1(to2, extendsOptions, strats, true);
  }
  if (mixins) {
    mixins.forEach((m) => mergeOptions$1(to2, m, strats, true));
  }
  for (const key in from2) {
    if (asMixin && key === "expose")
      ;
    else {
      const strat = internalOptionMergeStrats[key] || strats && strats[key];
      to2[key] = strat ? strat(to2[key], from2[key]) : from2[key];
    }
  }
  return to2;
}
const internalOptionMergeStrats = {
  data: mergeDataFn,
  props: mergeObjectOptions,
  emits: mergeObjectOptions,
  // objects
  methods: mergeObjectOptions,
  computed: mergeObjectOptions,
  // lifecycle
  beforeCreate: mergeAsArray,
  created: mergeAsArray,
  beforeMount: mergeAsArray,
  mounted: mergeAsArray,
  beforeUpdate: mergeAsArray,
  updated: mergeAsArray,
  beforeDestroy: mergeAsArray,
  beforeUnmount: mergeAsArray,
  destroyed: mergeAsArray,
  unmounted: mergeAsArray,
  activated: mergeAsArray,
  deactivated: mergeAsArray,
  errorCaptured: mergeAsArray,
  serverPrefetch: mergeAsArray,
  // assets
  components: mergeObjectOptions,
  directives: mergeObjectOptions,
  // watch
  watch: mergeWatchOptions,
  // provide / inject
  provide: mergeDataFn,
  inject: mergeInject
};
function mergeDataFn(to2, from2) {
  if (!from2) {
    return to2;
  }
  if (!to2) {
    return from2;
  }
  return function mergedDataFn() {
    return extend$1(isFunction$1(to2) ? to2.call(this, this) : to2, isFunction$1(from2) ? from2.call(this, this) : from2);
  };
}
function mergeInject(to2, from2) {
  return mergeObjectOptions(normalizeInject(to2), normalizeInject(from2));
}
function normalizeInject(raw) {
  if (isArray$2(raw)) {
    const res = {};
    for (let i = 0; i < raw.length; i++) {
      res[raw[i]] = raw[i];
    }
    return res;
  }
  return raw;
}
function mergeAsArray(to2, from2) {
  return to2 ? [...new Set([].concat(to2, from2))] : from2;
}
function mergeObjectOptions(to2, from2) {
  return to2 ? extend$1(extend$1(/* @__PURE__ */ Object.create(null), to2), from2) : from2;
}
function mergeWatchOptions(to2, from2) {
  if (!to2)
    return from2;
  if (!from2)
    return to2;
  const merged = extend$1(/* @__PURE__ */ Object.create(null), to2);
  for (const key in from2) {
    merged[key] = mergeAsArray(to2[key], from2[key]);
  }
  return merged;
}
function initProps(instance, rawProps, isStateful, isSSR = false) {
  const props = {};
  const attrs = {};
  def(attrs, InternalObjectKey, 1);
  instance.propsDefaults = /* @__PURE__ */ Object.create(null);
  setFullProps(instance, rawProps, props, attrs);
  for (const key in instance.propsOptions[0]) {
    if (!(key in props)) {
      props[key] = void 0;
    }
  }
  if (isStateful) {
    instance.props = isSSR ? props : shallowReactive(props);
  } else {
    if (!instance.type.props) {
      instance.props = attrs;
    } else {
      instance.props = props;
    }
  }
  instance.attrs = attrs;
}
function updateProps(instance, rawProps, rawPrevProps, optimized) {
  const { props, attrs, vnode: { patchFlag } } = instance;
  const rawCurrentProps = toRaw(props);
  const [options] = instance.propsOptions;
  let hasAttrsChanged = false;
  if (
    // always force full diff in dev
    // - #1942 if hmr is enabled with sfc component
    // - vite#872 non-sfc component used by sfc component
    (optimized || patchFlag > 0) && !(patchFlag & 16)
  ) {
    if (patchFlag & 8) {
      const propsToUpdate = instance.vnode.dynamicProps;
      for (let i = 0; i < propsToUpdate.length; i++) {
        let key = propsToUpdate[i];
        if (isEmitListener(instance.emitsOptions, key)) {
          continue;
        }
        const value = rawProps[key];
        if (options) {
          if (hasOwn(attrs, key)) {
            if (value !== attrs[key]) {
              attrs[key] = value;
              hasAttrsChanged = true;
            }
          } else {
            const camelizedKey = camelize(key);
            props[camelizedKey] = resolvePropValue(
              options,
              rawCurrentProps,
              camelizedKey,
              value,
              instance,
              false
              /* isAbsent */
            );
          }
        } else {
          if (value !== attrs[key]) {
            attrs[key] = value;
            hasAttrsChanged = true;
          }
        }
      }
    }
  } else {
    if (setFullProps(instance, rawProps, props, attrs)) {
      hasAttrsChanged = true;
    }
    let kebabKey;
    for (const key in rawCurrentProps) {
      if (!rawProps || // for camelCase
      !hasOwn(rawProps, key) && // it's possible the original props was passed in as kebab-case
      // and converted to camelCase (#955)
      ((kebabKey = hyphenate(key)) === key || !hasOwn(rawProps, kebabKey))) {
        if (options) {
          if (rawPrevProps && // for camelCase
          (rawPrevProps[key] !== void 0 || // for kebab-case
          rawPrevProps[kebabKey] !== void 0)) {
            props[key] = resolvePropValue(
              options,
              rawCurrentProps,
              key,
              void 0,
              instance,
              true
              /* isAbsent */
            );
          }
        } else {
          delete props[key];
        }
      }
    }
    if (attrs !== rawCurrentProps) {
      for (const key in attrs) {
        if (!rawProps || !hasOwn(rawProps, key) && true) {
          delete attrs[key];
          hasAttrsChanged = true;
        }
      }
    }
  }
  if (hasAttrsChanged) {
    trigger(instance, "set", "$attrs");
  }
}
function setFullProps(instance, rawProps, props, attrs) {
  const [options, needCastKeys] = instance.propsOptions;
  let hasAttrsChanged = false;
  let rawCastValues;
  if (rawProps) {
    for (let key in rawProps) {
      if (isReservedProp(key)) {
        continue;
      }
      const value = rawProps[key];
      let camelKey;
      if (options && hasOwn(options, camelKey = camelize(key))) {
        if (!needCastKeys || !needCastKeys.includes(camelKey)) {
          props[camelKey] = value;
        } else {
          (rawCastValues || (rawCastValues = {}))[camelKey] = value;
        }
      } else if (!isEmitListener(instance.emitsOptions, key)) {
        if (!(key in attrs) || value !== attrs[key]) {
          attrs[key] = value;
          hasAttrsChanged = true;
        }
      }
    }
  }
  if (needCastKeys) {
    const rawCurrentProps = toRaw(props);
    const castValues = rawCastValues || EMPTY_OBJ;
    for (let i = 0; i < needCastKeys.length; i++) {
      const key = needCastKeys[i];
      props[key] = resolvePropValue(options, rawCurrentProps, key, castValues[key], instance, !hasOwn(castValues, key));
    }
  }
  return hasAttrsChanged;
}
function resolvePropValue(options, props, key, value, instance, isAbsent) {
  const opt = options[key];
  if (opt != null) {
    const hasDefault = hasOwn(opt, "default");
    if (hasDefault && value === void 0) {
      const defaultValue = opt.default;
      if (opt.type !== Function && isFunction$1(defaultValue)) {
        const { propsDefaults } = instance;
        if (key in propsDefaults) {
          value = propsDefaults[key];
        } else {
          setCurrentInstance(instance);
          value = propsDefaults[key] = defaultValue.call(null, props);
          unsetCurrentInstance();
        }
      } else {
        value = defaultValue;
      }
    }
    if (opt[
      0
      /* BooleanFlags.shouldCast */
    ]) {
      if (isAbsent && !hasDefault) {
        value = false;
      } else if (opt[
        1
        /* BooleanFlags.shouldCastTrue */
      ] && (value === "" || value === hyphenate(key))) {
        value = true;
      }
    }
  }
  return value;
}
function normalizePropsOptions(comp, appContext, asMixin = false) {
  const cache = appContext.propsCache;
  const cached = cache.get(comp);
  if (cached) {
    return cached;
  }
  const raw = comp.props;
  const normalized = {};
  const needCastKeys = [];
  let hasExtends = false;
  if (!isFunction$1(comp)) {
    const extendProps = (raw2) => {
      hasExtends = true;
      const [props, keys2] = normalizePropsOptions(raw2, appContext, true);
      extend$1(normalized, props);
      if (keys2)
        needCastKeys.push(...keys2);
    };
    if (!asMixin && appContext.mixins.length) {
      appContext.mixins.forEach(extendProps);
    }
    if (comp.extends) {
      extendProps(comp.extends);
    }
    if (comp.mixins) {
      comp.mixins.forEach(extendProps);
    }
  }
  if (!raw && !hasExtends) {
    if (isObject$1(comp)) {
      cache.set(comp, EMPTY_ARR);
    }
    return EMPTY_ARR;
  }
  if (isArray$2(raw)) {
    for (let i = 0; i < raw.length; i++) {
      const normalizedKey = camelize(raw[i]);
      if (validatePropName(normalizedKey)) {
        normalized[normalizedKey] = EMPTY_OBJ;
      }
    }
  } else if (raw) {
    for (const key in raw) {
      const normalizedKey = camelize(key);
      if (validatePropName(normalizedKey)) {
        const opt = raw[key];
        const prop = normalized[normalizedKey] = isArray$2(opt) || isFunction$1(opt) ? { type: opt } : Object.assign({}, opt);
        if (prop) {
          const booleanIndex = getTypeIndex(Boolean, prop.type);
          const stringIndex = getTypeIndex(String, prop.type);
          prop[
            0
            /* BooleanFlags.shouldCast */
          ] = booleanIndex > -1;
          prop[
            1
            /* BooleanFlags.shouldCastTrue */
          ] = stringIndex < 0 || booleanIndex < stringIndex;
          if (booleanIndex > -1 || hasOwn(prop, "default")) {
            needCastKeys.push(normalizedKey);
          }
        }
      }
    }
  }
  const res = [normalized, needCastKeys];
  if (isObject$1(comp)) {
    cache.set(comp, res);
  }
  return res;
}
function validatePropName(key) {
  if (key[0] !== "$") {
    return true;
  }
  return false;
}
function getType(ctor) {
  const match = ctor && ctor.toString().match(/^\s*(function|class) (\w+)/);
  return match ? match[2] : ctor === null ? "null" : "";
}
function isSameType(a, b) {
  return getType(a) === getType(b);
}
function getTypeIndex(type, expectedTypes) {
  if (isArray$2(expectedTypes)) {
    return expectedTypes.findIndex((t) => isSameType(t, type));
  } else if (isFunction$1(expectedTypes)) {
    return isSameType(expectedTypes, type) ? 0 : -1;
  }
  return -1;
}
const isInternalKey = (key) => key[0] === "_" || key === "$stable";
const normalizeSlotValue = (value) => isArray$2(value) ? value.map(normalizeVNode) : [normalizeVNode(value)];
const normalizeSlot$1 = (key, rawSlot, ctx) => {
  if (rawSlot._n) {
    return rawSlot;
  }
  const normalized = withCtx((...args) => {
    if (false)
      ;
    return normalizeSlotValue(rawSlot(...args));
  }, ctx);
  normalized._c = false;
  return normalized;
};
const normalizeObjectSlots = (rawSlots, slots, instance) => {
  const ctx = rawSlots._ctx;
  for (const key in rawSlots) {
    if (isInternalKey(key))
      continue;
    const value = rawSlots[key];
    if (isFunction$1(value)) {
      slots[key] = normalizeSlot$1(key, value, ctx);
    } else if (value != null) {
      const normalized = normalizeSlotValue(value);
      slots[key] = () => normalized;
    }
  }
};
const normalizeVNodeSlots = (instance, children) => {
  const normalized = normalizeSlotValue(children);
  instance.slots.default = () => normalized;
};
const initSlots = (instance, children) => {
  if (instance.vnode.shapeFlag & 32) {
    const type = children._;
    if (type) {
      instance.slots = toRaw(children);
      def(children, "_", type);
    } else {
      normalizeObjectSlots(children, instance.slots = {});
    }
  } else {
    instance.slots = {};
    if (children) {
      normalizeVNodeSlots(instance, children);
    }
  }
  def(instance.slots, InternalObjectKey, 1);
};
const updateSlots = (instance, children, optimized) => {
  const { vnode, slots } = instance;
  let needDeletionCheck = true;
  let deletionComparisonTarget = EMPTY_OBJ;
  if (vnode.shapeFlag & 32) {
    const type = children._;
    if (type) {
      if (optimized && type === 1) {
        needDeletionCheck = false;
      } else {
        extend$1(slots, children);
        if (!optimized && type === 1) {
          delete slots._;
        }
      }
    } else {
      needDeletionCheck = !children.$stable;
      normalizeObjectSlots(children, slots);
    }
    deletionComparisonTarget = children;
  } else if (children) {
    normalizeVNodeSlots(instance, children);
    deletionComparisonTarget = { default: 1 };
  }
  if (needDeletionCheck) {
    for (const key in slots) {
      if (!isInternalKey(key) && !(key in deletionComparisonTarget)) {
        delete slots[key];
      }
    }
  }
};
function createAppContext() {
  return {
    app: null,
    config: {
      isNativeTag: NO,
      performance: false,
      globalProperties: {},
      optionMergeStrategies: {},
      errorHandler: void 0,
      warnHandler: void 0,
      compilerOptions: {}
    },
    mixins: [],
    components: {},
    directives: {},
    provides: /* @__PURE__ */ Object.create(null),
    optionsCache: /* @__PURE__ */ new WeakMap(),
    propsCache: /* @__PURE__ */ new WeakMap(),
    emitsCache: /* @__PURE__ */ new WeakMap()
  };
}
let uid$1 = 0;
function createAppAPI(render, hydrate) {
  return function createApp2(rootComponent, rootProps = null) {
    if (!isFunction$1(rootComponent)) {
      rootComponent = Object.assign({}, rootComponent);
    }
    if (rootProps != null && !isObject$1(rootProps)) {
      rootProps = null;
    }
    const context = createAppContext();
    const installedPlugins = /* @__PURE__ */ new Set();
    let isMounted = false;
    const app2 = context.app = {
      _uid: uid$1++,
      _component: rootComponent,
      _props: rootProps,
      _container: null,
      _context: context,
      _instance: null,
      version,
      get config() {
        return context.config;
      },
      set config(v) {
      },
      use(plugin, ...options) {
        if (installedPlugins.has(plugin))
          ;
        else if (plugin && isFunction$1(plugin.install)) {
          installedPlugins.add(plugin);
          plugin.install(app2, ...options);
        } else if (isFunction$1(plugin)) {
          installedPlugins.add(plugin);
          plugin(app2, ...options);
        } else
          ;
        return app2;
      },
      mixin(mixin) {
        {
          if (!context.mixins.includes(mixin)) {
            context.mixins.push(mixin);
          }
        }
        return app2;
      },
      component(name, component) {
        if (!component) {
          return context.components[name];
        }
        context.components[name] = component;
        return app2;
      },
      directive(name, directive) {
        if (!directive) {
          return context.directives[name];
        }
        context.directives[name] = directive;
        return app2;
      },
      mount(rootContainer, isHydrate, isSVG) {
        if (!isMounted) {
          const vnode = createVNode(rootComponent, rootProps);
          vnode.appContext = context;
          if (isHydrate && hydrate) {
            hydrate(vnode, rootContainer);
          } else {
            render(vnode, rootContainer, isSVG);
          }
          isMounted = true;
          app2._container = rootContainer;
          rootContainer.__vue_app__ = app2;
          return getExposeProxy(vnode.component) || vnode.component.proxy;
        }
      },
      unmount() {
        if (isMounted) {
          render(null, app2._container);
          delete app2._container.__vue_app__;
        }
      },
      provide(key, value) {
        context.provides[key] = value;
        return app2;
      }
    };
    return app2;
  };
}
function setRef(rawRef, oldRawRef, parentSuspense, vnode, isUnmount = false) {
  if (isArray$2(rawRef)) {
    rawRef.forEach((r, i) => setRef(r, oldRawRef && (isArray$2(oldRawRef) ? oldRawRef[i] : oldRawRef), parentSuspense, vnode, isUnmount));
    return;
  }
  if (isAsyncWrapper(vnode) && !isUnmount) {
    return;
  }
  const refValue = vnode.shapeFlag & 4 ? getExposeProxy(vnode.component) || vnode.component.proxy : vnode.el;
  const value = isUnmount ? null : refValue;
  const { i: owner, r: ref2 } = rawRef;
  const oldRef = oldRawRef && oldRawRef.r;
  const refs = owner.refs === EMPTY_OBJ ? owner.refs = {} : owner.refs;
  const setupState = owner.setupState;
  if (oldRef != null && oldRef !== ref2) {
    if (isString$1(oldRef)) {
      refs[oldRef] = null;
      if (hasOwn(setupState, oldRef)) {
        setupState[oldRef] = null;
      }
    } else if (isRef(oldRef)) {
      oldRef.value = null;
    }
  }
  if (isFunction$1(ref2)) {
    callWithErrorHandling(ref2, owner, 12, [value, refs]);
  } else {
    const _isString = isString$1(ref2);
    const _isRef = isRef(ref2);
    if (_isString || _isRef) {
      const doSet = () => {
        if (rawRef.f) {
          const existing = _isString ? hasOwn(setupState, ref2) ? setupState[ref2] : refs[ref2] : ref2.value;
          if (isUnmount) {
            isArray$2(existing) && remove(existing, refValue);
          } else {
            if (!isArray$2(existing)) {
              if (_isString) {
                refs[ref2] = [refValue];
                if (hasOwn(setupState, ref2)) {
                  setupState[ref2] = refs[ref2];
                }
              } else {
                ref2.value = [refValue];
                if (rawRef.k)
                  refs[rawRef.k] = ref2.value;
              }
            } else if (!existing.includes(refValue)) {
              existing.push(refValue);
            }
          }
        } else if (_isString) {
          refs[ref2] = value;
          if (hasOwn(setupState, ref2)) {
            setupState[ref2] = value;
          }
        } else if (_isRef) {
          ref2.value = value;
          if (rawRef.k)
            refs[rawRef.k] = value;
        } else
          ;
      };
      if (value) {
        doSet.id = -1;
        queuePostRenderEffect(doSet, parentSuspense);
      } else {
        doSet();
      }
    }
  }
}
const queuePostRenderEffect = queueEffectWithSuspense;
function createRenderer(options) {
  return baseCreateRenderer(options);
}
function baseCreateRenderer(options, createHydrationFns) {
  const target = getGlobalThis();
  target.__VUE__ = true;
  const { insert: hostInsert, remove: hostRemove, patchProp: hostPatchProp, createElement: hostCreateElement, createText: hostCreateText, createComment: hostCreateComment, setText: hostSetText, setElementText: hostSetElementText, parentNode: hostParentNode, nextSibling: hostNextSibling, setScopeId: hostSetScopeId = NOOP, insertStaticContent: hostInsertStaticContent } = options;
  const patch = (n1, n2, container, anchor = null, parentComponent = null, parentSuspense = null, isSVG = false, slotScopeIds = null, optimized = !!n2.dynamicChildren) => {
    if (n1 === n2) {
      return;
    }
    if (n1 && !isSameVNodeType(n1, n2)) {
      anchor = getNextHostNode(n1);
      unmount(n1, parentComponent, parentSuspense, true);
      n1 = null;
    }
    if (n2.patchFlag === -2) {
      optimized = false;
      n2.dynamicChildren = null;
    }
    const { type, ref: ref2, shapeFlag } = n2;
    switch (type) {
      case Text:
        processText(n1, n2, container, anchor);
        break;
      case Comment:
        processCommentNode(n1, n2, container, anchor);
        break;
      case Static:
        if (n1 == null) {
          mountStaticNode(n2, container, anchor, isSVG);
        }
        break;
      case Fragment:
        processFragment(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        break;
      default:
        if (shapeFlag & 1) {
          processElement(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        } else if (shapeFlag & 6) {
          processComponent(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        } else if (shapeFlag & 64) {
          type.process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, internals);
        } else if (shapeFlag & 128) {
          type.process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, internals);
        } else
          ;
    }
    if (ref2 != null && parentComponent) {
      setRef(ref2, n1 && n1.ref, parentSuspense, n2 || n1, !n2);
    }
  };
  const processText = (n1, n2, container, anchor) => {
    if (n1 == null) {
      hostInsert(n2.el = hostCreateText(n2.children), container, anchor);
    } else {
      const el = n2.el = n1.el;
      if (n2.children !== n1.children) {
        hostSetText(el, n2.children);
      }
    }
  };
  const processCommentNode = (n1, n2, container, anchor) => {
    if (n1 == null) {
      hostInsert(n2.el = hostCreateComment(n2.children || ""), container, anchor);
    } else {
      n2.el = n1.el;
    }
  };
  const mountStaticNode = (n2, container, anchor, isSVG) => {
    [n2.el, n2.anchor] = hostInsertStaticContent(n2.children, container, anchor, isSVG, n2.el, n2.anchor);
  };
  const moveStaticNode = ({ el, anchor }, container, nextSibling) => {
    let next;
    while (el && el !== anchor) {
      next = hostNextSibling(el);
      hostInsert(el, container, nextSibling);
      el = next;
    }
    hostInsert(anchor, container, nextSibling);
  };
  const removeStaticNode = ({ el, anchor }) => {
    let next;
    while (el && el !== anchor) {
      next = hostNextSibling(el);
      hostRemove(el);
      el = next;
    }
    hostRemove(anchor);
  };
  const processElement = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    isSVG = isSVG || n2.type === "svg";
    if (n1 == null) {
      mountElement(n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
    } else {
      patchElement(n1, n2, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
    }
  };
  const mountElement = (vnode, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    let el;
    let vnodeHook;
    const { type, props, shapeFlag, transition, dirs } = vnode;
    el = vnode.el = hostCreateElement(vnode.type, isSVG, props && props.is, props);
    if (shapeFlag & 8) {
      hostSetElementText(el, vnode.children);
    } else if (shapeFlag & 16) {
      mountChildren(vnode.children, el, null, parentComponent, parentSuspense, isSVG && type !== "foreignObject", slotScopeIds, optimized);
    }
    if (dirs) {
      invokeDirectiveHook(vnode, null, parentComponent, "created");
    }
    setScopeId(el, vnode, vnode.scopeId, slotScopeIds, parentComponent);
    if (props) {
      for (const key in props) {
        if (key !== "value" && !isReservedProp(key)) {
          hostPatchProp(el, key, null, props[key], isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);
        }
      }
      if ("value" in props) {
        hostPatchProp(el, "value", null, props.value);
      }
      if (vnodeHook = props.onVnodeBeforeMount) {
        invokeVNodeHook(vnodeHook, parentComponent, vnode);
      }
    }
    if (dirs) {
      invokeDirectiveHook(vnode, null, parentComponent, "beforeMount");
    }
    const needCallTransitionHooks = (!parentSuspense || parentSuspense && !parentSuspense.pendingBranch) && transition && !transition.persisted;
    if (needCallTransitionHooks) {
      transition.beforeEnter(el);
    }
    hostInsert(el, container, anchor);
    if ((vnodeHook = props && props.onVnodeMounted) || needCallTransitionHooks || dirs) {
      queuePostRenderEffect(() => {
        vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, vnode);
        needCallTransitionHooks && transition.enter(el);
        dirs && invokeDirectiveHook(vnode, null, parentComponent, "mounted");
      }, parentSuspense);
    }
  };
  const setScopeId = (el, vnode, scopeId, slotScopeIds, parentComponent) => {
    if (scopeId) {
      hostSetScopeId(el, scopeId);
    }
    if (slotScopeIds) {
      for (let i = 0; i < slotScopeIds.length; i++) {
        hostSetScopeId(el, slotScopeIds[i]);
      }
    }
    if (parentComponent) {
      let subTree = parentComponent.subTree;
      if (vnode === subTree) {
        const parentVNode = parentComponent.vnode;
        setScopeId(el, parentVNode, parentVNode.scopeId, parentVNode.slotScopeIds, parentComponent.parent);
      }
    }
  };
  const mountChildren = (children, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, start2 = 0) => {
    for (let i = start2; i < children.length; i++) {
      const child = children[i] = optimized ? cloneIfMounted(children[i]) : normalizeVNode(children[i]);
      patch(null, child, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
    }
  };
  const patchElement = (n1, n2, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    const el = n2.el = n1.el;
    let { patchFlag, dynamicChildren, dirs } = n2;
    patchFlag |= n1.patchFlag & 16;
    const oldProps = n1.props || EMPTY_OBJ;
    const newProps = n2.props || EMPTY_OBJ;
    let vnodeHook;
    parentComponent && toggleRecurse(parentComponent, false);
    if (vnodeHook = newProps.onVnodeBeforeUpdate) {
      invokeVNodeHook(vnodeHook, parentComponent, n2, n1);
    }
    if (dirs) {
      invokeDirectiveHook(n2, n1, parentComponent, "beforeUpdate");
    }
    parentComponent && toggleRecurse(parentComponent, true);
    const areChildrenSVG = isSVG && n2.type !== "foreignObject";
    if (dynamicChildren) {
      patchBlockChildren(n1.dynamicChildren, dynamicChildren, el, parentComponent, parentSuspense, areChildrenSVG, slotScopeIds);
    } else if (!optimized) {
      patchChildren(n1, n2, el, null, parentComponent, parentSuspense, areChildrenSVG, slotScopeIds, false);
    }
    if (patchFlag > 0) {
      if (patchFlag & 16) {
        patchProps(el, n2, oldProps, newProps, parentComponent, parentSuspense, isSVG);
      } else {
        if (patchFlag & 2) {
          if (oldProps.class !== newProps.class) {
            hostPatchProp(el, "class", null, newProps.class, isSVG);
          }
        }
        if (patchFlag & 4) {
          hostPatchProp(el, "style", oldProps.style, newProps.style, isSVG);
        }
        if (patchFlag & 8) {
          const propsToUpdate = n2.dynamicProps;
          for (let i = 0; i < propsToUpdate.length; i++) {
            const key = propsToUpdate[i];
            const prev = oldProps[key];
            const next = newProps[key];
            if (next !== prev || key === "value") {
              hostPatchProp(el, key, prev, next, isSVG, n1.children, parentComponent, parentSuspense, unmountChildren);
            }
          }
        }
      }
      if (patchFlag & 1) {
        if (n1.children !== n2.children) {
          hostSetElementText(el, n2.children);
        }
      }
    } else if (!optimized && dynamicChildren == null) {
      patchProps(el, n2, oldProps, newProps, parentComponent, parentSuspense, isSVG);
    }
    if ((vnodeHook = newProps.onVnodeUpdated) || dirs) {
      queuePostRenderEffect(() => {
        vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, n2, n1);
        dirs && invokeDirectiveHook(n2, n1, parentComponent, "updated");
      }, parentSuspense);
    }
  };
  const patchBlockChildren = (oldChildren, newChildren, fallbackContainer, parentComponent, parentSuspense, isSVG, slotScopeIds) => {
    for (let i = 0; i < newChildren.length; i++) {
      const oldVNode = oldChildren[i];
      const newVNode = newChildren[i];
      const container = (
        // oldVNode may be an errored async setup() component inside Suspense
        // which will not have a mounted element
        oldVNode.el && // - In the case of a Fragment, we need to provide the actual parent
        // of the Fragment itself so it can move its children.
        (oldVNode.type === Fragment || // - In the case of different nodes, there is going to be a replacement
        // which also requires the correct parent container
        !isSameVNodeType(oldVNode, newVNode) || // - In the case of a component, it could contain anything.
        oldVNode.shapeFlag & (6 | 64)) ? hostParentNode(oldVNode.el) : (
          // In other cases, the parent container is not actually used so we
          // just pass the block element here to avoid a DOM parentNode call.
          fallbackContainer
        )
      );
      patch(oldVNode, newVNode, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, true);
    }
  };
  const patchProps = (el, vnode, oldProps, newProps, parentComponent, parentSuspense, isSVG) => {
    if (oldProps !== newProps) {
      if (oldProps !== EMPTY_OBJ) {
        for (const key in oldProps) {
          if (!isReservedProp(key) && !(key in newProps)) {
            hostPatchProp(el, key, oldProps[key], null, isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);
          }
        }
      }
      for (const key in newProps) {
        if (isReservedProp(key))
          continue;
        const next = newProps[key];
        const prev = oldProps[key];
        if (next !== prev && key !== "value") {
          hostPatchProp(el, key, prev, next, isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);
        }
      }
      if ("value" in newProps) {
        hostPatchProp(el, "value", oldProps.value, newProps.value);
      }
    }
  };
  const processFragment = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    const fragmentStartAnchor = n2.el = n1 ? n1.el : hostCreateText("");
    const fragmentEndAnchor = n2.anchor = n1 ? n1.anchor : hostCreateText("");
    let { patchFlag, dynamicChildren, slotScopeIds: fragmentSlotScopeIds } = n2;
    if (fragmentSlotScopeIds) {
      slotScopeIds = slotScopeIds ? slotScopeIds.concat(fragmentSlotScopeIds) : fragmentSlotScopeIds;
    }
    if (n1 == null) {
      hostInsert(fragmentStartAnchor, container, anchor);
      hostInsert(fragmentEndAnchor, container, anchor);
      mountChildren(n2.children, container, fragmentEndAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
    } else {
      if (patchFlag > 0 && patchFlag & 64 && dynamicChildren && // #2715 the previous fragment could've been a BAILed one as a result
      // of renderSlot() with no valid children
      n1.dynamicChildren) {
        patchBlockChildren(n1.dynamicChildren, dynamicChildren, container, parentComponent, parentSuspense, isSVG, slotScopeIds);
        if (
          // #2080 if the stable fragment has a key, it's a <template v-for> that may
          //  get moved around. Make sure all root level vnodes inherit el.
          // #2134 or if it's a component root, it may also get moved around
          // as the component is being moved.
          n2.key != null || parentComponent && n2 === parentComponent.subTree
        ) {
          traverseStaticChildren(
            n1,
            n2,
            true
            /* shallow */
          );
        }
      } else {
        patchChildren(n1, n2, container, fragmentEndAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
      }
    }
  };
  const processComponent = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    n2.slotScopeIds = slotScopeIds;
    if (n1 == null) {
      if (n2.shapeFlag & 512) {
        parentComponent.ctx.activate(n2, container, anchor, isSVG, optimized);
      } else {
        mountComponent(n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized);
      }
    } else {
      updateComponent(n1, n2, optimized);
    }
  };
  const mountComponent = (initialVNode, container, anchor, parentComponent, parentSuspense, isSVG, optimized) => {
    const instance = initialVNode.component = createComponentInstance(initialVNode, parentComponent, parentSuspense);
    if (isKeepAlive(initialVNode)) {
      instance.ctx.renderer = internals;
    }
    {
      setupComponent(instance);
    }
    if (instance.asyncDep) {
      parentSuspense && parentSuspense.registerDep(instance, setupRenderEffect);
      if (!initialVNode.el) {
        const placeholder = instance.subTree = createVNode(Comment);
        processCommentNode(null, placeholder, container, anchor);
      }
      return;
    }
    setupRenderEffect(instance, initialVNode, container, anchor, parentSuspense, isSVG, optimized);
  };
  const updateComponent = (n1, n2, optimized) => {
    const instance = n2.component = n1.component;
    if (shouldUpdateComponent(n1, n2, optimized)) {
      if (instance.asyncDep && !instance.asyncResolved) {
        updateComponentPreRender(instance, n2, optimized);
        return;
      } else {
        instance.next = n2;
        invalidateJob(instance.update);
        instance.update();
      }
    } else {
      n2.el = n1.el;
      instance.vnode = n2;
    }
  };
  const setupRenderEffect = (instance, initialVNode, container, anchor, parentSuspense, isSVG, optimized) => {
    const componentUpdateFn = () => {
      if (!instance.isMounted) {
        let vnodeHook;
        const { el, props } = initialVNode;
        const { bm, m, parent } = instance;
        const isAsyncWrapperVNode = isAsyncWrapper(initialVNode);
        toggleRecurse(instance, false);
        if (bm) {
          invokeArrayFns(bm);
        }
        if (!isAsyncWrapperVNode && (vnodeHook = props && props.onVnodeBeforeMount)) {
          invokeVNodeHook(vnodeHook, parent, initialVNode);
        }
        toggleRecurse(instance, true);
        if (el && hydrateNode) {
          const hydrateSubTree = () => {
            instance.subTree = renderComponentRoot(instance);
            hydrateNode(el, instance.subTree, instance, parentSuspense, null);
          };
          if (isAsyncWrapperVNode) {
            initialVNode.type.__asyncLoader().then(
              // note: we are moving the render call into an async callback,
              // which means it won't track dependencies - but it's ok because
              // a server-rendered async wrapper is already in resolved state
              // and it will never need to change.
              () => !instance.isUnmounted && hydrateSubTree()
            );
          } else {
            hydrateSubTree();
          }
        } else {
          const subTree = instance.subTree = renderComponentRoot(instance);
          patch(null, subTree, container, anchor, instance, parentSuspense, isSVG);
          initialVNode.el = subTree.el;
        }
        if (m) {
          queuePostRenderEffect(m, parentSuspense);
        }
        if (!isAsyncWrapperVNode && (vnodeHook = props && props.onVnodeMounted)) {
          const scopedInitialVNode = initialVNode;
          queuePostRenderEffect(() => invokeVNodeHook(vnodeHook, parent, scopedInitialVNode), parentSuspense);
        }
        if (initialVNode.shapeFlag & 256 || parent && isAsyncWrapper(parent.vnode) && parent.vnode.shapeFlag & 256) {
          instance.a && queuePostRenderEffect(instance.a, parentSuspense);
        }
        instance.isMounted = true;
        initialVNode = container = anchor = null;
      } else {
        let { next, bu, u, parent, vnode } = instance;
        let originNext = next;
        let vnodeHook;
        toggleRecurse(instance, false);
        if (next) {
          next.el = vnode.el;
          updateComponentPreRender(instance, next, optimized);
        } else {
          next = vnode;
        }
        if (bu) {
          invokeArrayFns(bu);
        }
        if (vnodeHook = next.props && next.props.onVnodeBeforeUpdate) {
          invokeVNodeHook(vnodeHook, parent, next, vnode);
        }
        toggleRecurse(instance, true);
        const nextTree = renderComponentRoot(instance);
        const prevTree = instance.subTree;
        instance.subTree = nextTree;
        patch(
          prevTree,
          nextTree,
          // parent may have changed if it's in a teleport
          hostParentNode(prevTree.el),
          // anchor may have changed if it's in a fragment
          getNextHostNode(prevTree),
          instance,
          parentSuspense,
          isSVG
        );
        next.el = nextTree.el;
        if (originNext === null) {
          updateHOCHostEl(instance, nextTree.el);
        }
        if (u) {
          queuePostRenderEffect(u, parentSuspense);
        }
        if (vnodeHook = next.props && next.props.onVnodeUpdated) {
          queuePostRenderEffect(() => invokeVNodeHook(vnodeHook, parent, next, vnode), parentSuspense);
        }
      }
    };
    const effect2 = instance.effect = new ReactiveEffect(
      componentUpdateFn,
      () => queueJob(update),
      instance.scope
      // track it in component's effect scope
    );
    const update = instance.update = () => effect2.run();
    update.id = instance.uid;
    toggleRecurse(instance, true);
    update();
  };
  const updateComponentPreRender = (instance, nextVNode, optimized) => {
    nextVNode.component = instance;
    const prevProps = instance.vnode.props;
    instance.vnode = nextVNode;
    instance.next = null;
    updateProps(instance, nextVNode.props, prevProps, optimized);
    updateSlots(instance, nextVNode.children, optimized);
    pauseTracking();
    flushPreFlushCbs();
    resetTracking();
  };
  const patchChildren = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized = false) => {
    const c1 = n1 && n1.children;
    const prevShapeFlag = n1 ? n1.shapeFlag : 0;
    const c2 = n2.children;
    const { patchFlag, shapeFlag } = n2;
    if (patchFlag > 0) {
      if (patchFlag & 128) {
        patchKeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        return;
      } else if (patchFlag & 256) {
        patchUnkeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        return;
      }
    }
    if (shapeFlag & 8) {
      if (prevShapeFlag & 16) {
        unmountChildren(c1, parentComponent, parentSuspense);
      }
      if (c2 !== c1) {
        hostSetElementText(container, c2);
      }
    } else {
      if (prevShapeFlag & 16) {
        if (shapeFlag & 16) {
          patchKeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        } else {
          unmountChildren(c1, parentComponent, parentSuspense, true);
        }
      } else {
        if (prevShapeFlag & 8) {
          hostSetElementText(container, "");
        }
        if (shapeFlag & 16) {
          mountChildren(c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        }
      }
    }
  };
  const patchUnkeyedChildren = (c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    c1 = c1 || EMPTY_ARR;
    c2 = c2 || EMPTY_ARR;
    const oldLength = c1.length;
    const newLength = c2.length;
    const commonLength = Math.min(oldLength, newLength);
    let i;
    for (i = 0; i < commonLength; i++) {
      const nextChild = c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]);
      patch(c1[i], nextChild, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
    }
    if (oldLength > newLength) {
      unmountChildren(c1, parentComponent, parentSuspense, true, false, commonLength);
    } else {
      mountChildren(c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, commonLength);
    }
  };
  const patchKeyedChildren = (c1, c2, container, parentAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    let i = 0;
    const l2 = c2.length;
    let e1 = c1.length - 1;
    let e2 = l2 - 1;
    while (i <= e1 && i <= e2) {
      const n1 = c1[i];
      const n2 = c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]);
      if (isSameVNodeType(n1, n2)) {
        patch(n1, n2, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
      } else {
        break;
      }
      i++;
    }
    while (i <= e1 && i <= e2) {
      const n1 = c1[e1];
      const n2 = c2[e2] = optimized ? cloneIfMounted(c2[e2]) : normalizeVNode(c2[e2]);
      if (isSameVNodeType(n1, n2)) {
        patch(n1, n2, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
      } else {
        break;
      }
      e1--;
      e2--;
    }
    if (i > e1) {
      if (i <= e2) {
        const nextPos = e2 + 1;
        const anchor = nextPos < l2 ? c2[nextPos].el : parentAnchor;
        while (i <= e2) {
          patch(null, c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]), container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
          i++;
        }
      }
    } else if (i > e2) {
      while (i <= e1) {
        unmount(c1[i], parentComponent, parentSuspense, true);
        i++;
      }
    } else {
      const s1 = i;
      const s2 = i;
      const keyToNewIndexMap = /* @__PURE__ */ new Map();
      for (i = s2; i <= e2; i++) {
        const nextChild = c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]);
        if (nextChild.key != null) {
          keyToNewIndexMap.set(nextChild.key, i);
        }
      }
      let j;
      let patched = 0;
      const toBePatched = e2 - s2 + 1;
      let moved = false;
      let maxNewIndexSoFar = 0;
      const newIndexToOldIndexMap = new Array(toBePatched);
      for (i = 0; i < toBePatched; i++)
        newIndexToOldIndexMap[i] = 0;
      for (i = s1; i <= e1; i++) {
        const prevChild = c1[i];
        if (patched >= toBePatched) {
          unmount(prevChild, parentComponent, parentSuspense, true);
          continue;
        }
        let newIndex;
        if (prevChild.key != null) {
          newIndex = keyToNewIndexMap.get(prevChild.key);
        } else {
          for (j = s2; j <= e2; j++) {
            if (newIndexToOldIndexMap[j - s2] === 0 && isSameVNodeType(prevChild, c2[j])) {
              newIndex = j;
              break;
            }
          }
        }
        if (newIndex === void 0) {
          unmount(prevChild, parentComponent, parentSuspense, true);
        } else {
          newIndexToOldIndexMap[newIndex - s2] = i + 1;
          if (newIndex >= maxNewIndexSoFar) {
            maxNewIndexSoFar = newIndex;
          } else {
            moved = true;
          }
          patch(prevChild, c2[newIndex], container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
          patched++;
        }
      }
      const increasingNewIndexSequence = moved ? getSequence(newIndexToOldIndexMap) : EMPTY_ARR;
      j = increasingNewIndexSequence.length - 1;
      for (i = toBePatched - 1; i >= 0; i--) {
        const nextIndex = s2 + i;
        const nextChild = c2[nextIndex];
        const anchor = nextIndex + 1 < l2 ? c2[nextIndex + 1].el : parentAnchor;
        if (newIndexToOldIndexMap[i] === 0) {
          patch(null, nextChild, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        } else if (moved) {
          if (j < 0 || i !== increasingNewIndexSequence[j]) {
            move(
              nextChild,
              container,
              anchor,
              2
              /* MoveType.REORDER */
            );
          } else {
            j--;
          }
        }
      }
    }
  };
  const move = (vnode, container, anchor, moveType, parentSuspense = null) => {
    const { el, type, transition, children, shapeFlag } = vnode;
    if (shapeFlag & 6) {
      move(vnode.component.subTree, container, anchor, moveType);
      return;
    }
    if (shapeFlag & 128) {
      vnode.suspense.move(container, anchor, moveType);
      return;
    }
    if (shapeFlag & 64) {
      type.move(vnode, container, anchor, internals);
      return;
    }
    if (type === Fragment) {
      hostInsert(el, container, anchor);
      for (let i = 0; i < children.length; i++) {
        move(children[i], container, anchor, moveType);
      }
      hostInsert(vnode.anchor, container, anchor);
      return;
    }
    if (type === Static) {
      moveStaticNode(vnode, container, anchor);
      return;
    }
    const needTransition = moveType !== 2 && shapeFlag & 1 && transition;
    if (needTransition) {
      if (moveType === 0) {
        transition.beforeEnter(el);
        hostInsert(el, container, anchor);
        queuePostRenderEffect(() => transition.enter(el), parentSuspense);
      } else {
        const { leave, delayLeave, afterLeave } = transition;
        const remove3 = () => hostInsert(el, container, anchor);
        const performLeave = () => {
          leave(el, () => {
            remove3();
            afterLeave && afterLeave();
          });
        };
        if (delayLeave) {
          delayLeave(el, remove3, performLeave);
        } else {
          performLeave();
        }
      }
    } else {
      hostInsert(el, container, anchor);
    }
  };
  const unmount = (vnode, parentComponent, parentSuspense, doRemove = false, optimized = false) => {
    const { type, props, ref: ref2, children, dynamicChildren, shapeFlag, patchFlag, dirs } = vnode;
    if (ref2 != null) {
      setRef(ref2, null, parentSuspense, vnode, true);
    }
    if (shapeFlag & 256) {
      parentComponent.ctx.deactivate(vnode);
      return;
    }
    const shouldInvokeDirs = shapeFlag & 1 && dirs;
    const shouldInvokeVnodeHook = !isAsyncWrapper(vnode);
    let vnodeHook;
    if (shouldInvokeVnodeHook && (vnodeHook = props && props.onVnodeBeforeUnmount)) {
      invokeVNodeHook(vnodeHook, parentComponent, vnode);
    }
    if (shapeFlag & 6) {
      unmountComponent(vnode.component, parentSuspense, doRemove);
    } else {
      if (shapeFlag & 128) {
        vnode.suspense.unmount(parentSuspense, doRemove);
        return;
      }
      if (shouldInvokeDirs) {
        invokeDirectiveHook(vnode, null, parentComponent, "beforeUnmount");
      }
      if (shapeFlag & 64) {
        vnode.type.remove(vnode, parentComponent, parentSuspense, optimized, internals, doRemove);
      } else if (dynamicChildren && // #1153: fast path should not be taken for non-stable (v-for) fragments
      (type !== Fragment || patchFlag > 0 && patchFlag & 64)) {
        unmountChildren(dynamicChildren, parentComponent, parentSuspense, false, true);
      } else if (type === Fragment && patchFlag & (128 | 256) || !optimized && shapeFlag & 16) {
        unmountChildren(children, parentComponent, parentSuspense);
      }
      if (doRemove) {
        remove2(vnode);
      }
    }
    if (shouldInvokeVnodeHook && (vnodeHook = props && props.onVnodeUnmounted) || shouldInvokeDirs) {
      queuePostRenderEffect(() => {
        vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, vnode);
        shouldInvokeDirs && invokeDirectiveHook(vnode, null, parentComponent, "unmounted");
      }, parentSuspense);
    }
  };
  const remove2 = (vnode) => {
    const { type, el, anchor, transition } = vnode;
    if (type === Fragment) {
      {
        removeFragment(el, anchor);
      }
      return;
    }
    if (type === Static) {
      removeStaticNode(vnode);
      return;
    }
    const performRemove = () => {
      hostRemove(el);
      if (transition && !transition.persisted && transition.afterLeave) {
        transition.afterLeave();
      }
    };
    if (vnode.shapeFlag & 1 && transition && !transition.persisted) {
      const { leave, delayLeave } = transition;
      const performLeave = () => leave(el, performRemove);
      if (delayLeave) {
        delayLeave(vnode.el, performRemove, performLeave);
      } else {
        performLeave();
      }
    } else {
      performRemove();
    }
  };
  const removeFragment = (cur, end2) => {
    let next;
    while (cur !== end2) {
      next = hostNextSibling(cur);
      hostRemove(cur);
      cur = next;
    }
    hostRemove(end2);
  };
  const unmountComponent = (instance, parentSuspense, doRemove) => {
    const { bum, scope, update, subTree, um } = instance;
    if (bum) {
      invokeArrayFns(bum);
    }
    scope.stop();
    if (update) {
      update.active = false;
      unmount(subTree, instance, parentSuspense, doRemove);
    }
    if (um) {
      queuePostRenderEffect(um, parentSuspense);
    }
    queuePostRenderEffect(() => {
      instance.isUnmounted = true;
    }, parentSuspense);
    if (parentSuspense && parentSuspense.pendingBranch && !parentSuspense.isUnmounted && instance.asyncDep && !instance.asyncResolved && instance.suspenseId === parentSuspense.pendingId) {
      parentSuspense.deps--;
      if (parentSuspense.deps === 0) {
        parentSuspense.resolve();
      }
    }
  };
  const unmountChildren = (children, parentComponent, parentSuspense, doRemove = false, optimized = false, start2 = 0) => {
    for (let i = start2; i < children.length; i++) {
      unmount(children[i], parentComponent, parentSuspense, doRemove, optimized);
    }
  };
  const getNextHostNode = (vnode) => {
    if (vnode.shapeFlag & 6) {
      return getNextHostNode(vnode.component.subTree);
    }
    if (vnode.shapeFlag & 128) {
      return vnode.suspense.next();
    }
    return hostNextSibling(vnode.anchor || vnode.el);
  };
  const render = (vnode, container, isSVG) => {
    if (vnode == null) {
      if (container._vnode) {
        unmount(container._vnode, null, null, true);
      }
    } else {
      patch(container._vnode || null, vnode, container, null, null, null, isSVG);
    }
    flushPreFlushCbs();
    flushPostFlushCbs();
    container._vnode = vnode;
  };
  const internals = {
    p: patch,
    um: unmount,
    m: move,
    r: remove2,
    mt: mountComponent,
    mc: mountChildren,
    pc: patchChildren,
    pbc: patchBlockChildren,
    n: getNextHostNode,
    o: options
  };
  let hydrate;
  let hydrateNode;
  if (createHydrationFns) {
    [hydrate, hydrateNode] = createHydrationFns(internals);
  }
  return {
    render,
    hydrate,
    createApp: createAppAPI(render, hydrate)
  };
}
function toggleRecurse({ effect: effect2, update }, allowed) {
  effect2.allowRecurse = update.allowRecurse = allowed;
}
function traverseStaticChildren(n1, n2, shallow = false) {
  const ch1 = n1.children;
  const ch2 = n2.children;
  if (isArray$2(ch1) && isArray$2(ch2)) {
    for (let i = 0; i < ch1.length; i++) {
      const c1 = ch1[i];
      let c2 = ch2[i];
      if (c2.shapeFlag & 1 && !c2.dynamicChildren) {
        if (c2.patchFlag <= 0 || c2.patchFlag === 32) {
          c2 = ch2[i] = cloneIfMounted(ch2[i]);
          c2.el = c1.el;
        }
        if (!shallow)
          traverseStaticChildren(c1, c2);
      }
      if (c2.type === Text) {
        c2.el = c1.el;
      }
    }
  }
}
function getSequence(arr) {
  const p2 = arr.slice();
  const result = [0];
  let i, j, u, v, c;
  const len = arr.length;
  for (i = 0; i < len; i++) {
    const arrI = arr[i];
    if (arrI !== 0) {
      j = result[result.length - 1];
      if (arr[j] < arrI) {
        p2[i] = j;
        result.push(i);
        continue;
      }
      u = 0;
      v = result.length - 1;
      while (u < v) {
        c = u + v >> 1;
        if (arr[result[c]] < arrI) {
          u = c + 1;
        } else {
          v = c;
        }
      }
      if (arrI < arr[result[u]]) {
        if (u > 0) {
          p2[i] = result[u - 1];
        }
        result[u] = i;
      }
    }
  }
  u = result.length;
  v = result[u - 1];
  while (u-- > 0) {
    result[u] = v;
    v = p2[v];
  }
  return result;
}
const isTeleport = (type) => type.__isTeleport;
const Fragment = Symbol(void 0);
const Text = Symbol(void 0);
const Comment = Symbol(void 0);
const Static = Symbol(void 0);
const blockStack = [];
let currentBlock = null;
function openBlock(disableTracking = false) {
  blockStack.push(currentBlock = disableTracking ? null : []);
}
function closeBlock() {
  blockStack.pop();
  currentBlock = blockStack[blockStack.length - 1] || null;
}
let isBlockTreeEnabled = 1;
function setBlockTracking(value) {
  isBlockTreeEnabled += value;
}
function setupBlock(vnode) {
  vnode.dynamicChildren = isBlockTreeEnabled > 0 ? currentBlock || EMPTY_ARR : null;
  closeBlock();
  if (isBlockTreeEnabled > 0 && currentBlock) {
    currentBlock.push(vnode);
  }
  return vnode;
}
function createElementBlock(type, props, children, patchFlag, dynamicProps, shapeFlag) {
  return setupBlock(createBaseVNode(
    type,
    props,
    children,
    patchFlag,
    dynamicProps,
    shapeFlag,
    true
    /* isBlock */
  ));
}
function createBlock(type, props, children, patchFlag, dynamicProps) {
  return setupBlock(createVNode(
    type,
    props,
    children,
    patchFlag,
    dynamicProps,
    true
    /* isBlock: prevent a block from tracking itself */
  ));
}
function isVNode(value) {
  return value ? value.__v_isVNode === true : false;
}
function isSameVNodeType(n1, n2) {
  return n1.type === n2.type && n1.key === n2.key;
}
const InternalObjectKey = `__vInternal`;
const normalizeKey = ({ key }) => key != null ? key : null;
const normalizeRef = ({ ref: ref2, ref_key, ref_for }) => {
  return ref2 != null ? isString$1(ref2) || isRef(ref2) || isFunction$1(ref2) ? { i: currentRenderingInstance, r: ref2, k: ref_key, f: !!ref_for } : ref2 : null;
};
function createBaseVNode(type, props = null, children = null, patchFlag = 0, dynamicProps = null, shapeFlag = type === Fragment ? 0 : 1, isBlockNode = false, needFullChildrenNormalization = false) {
  const vnode = {
    __v_isVNode: true,
    __v_skip: true,
    type,
    props,
    key: props && normalizeKey(props),
    ref: props && normalizeRef(props),
    scopeId: currentScopeId,
    slotScopeIds: null,
    children,
    component: null,
    suspense: null,
    ssContent: null,
    ssFallback: null,
    dirs: null,
    transition: null,
    el: null,
    anchor: null,
    target: null,
    targetAnchor: null,
    staticCount: 0,
    shapeFlag,
    patchFlag,
    dynamicProps,
    dynamicChildren: null,
    appContext: null,
    ctx: currentRenderingInstance
  };
  if (needFullChildrenNormalization) {
    normalizeChildren(vnode, children);
    if (shapeFlag & 128) {
      type.normalize(vnode);
    }
  } else if (children) {
    vnode.shapeFlag |= isString$1(children) ? 8 : 16;
  }
  if (isBlockTreeEnabled > 0 && // avoid a block node from tracking itself
  !isBlockNode && // has current parent block
  currentBlock && // presence of a patch flag indicates this node needs patching on updates.
  // component nodes also should always be patched, because even if the
  // component doesn't need to update, it needs to persist the instance on to
  // the next vnode so that it can be properly unmounted later.
  (vnode.patchFlag > 0 || shapeFlag & 6) && // the EVENTS flag is only for hydration and if it is the only flag, the
  // vnode should not be considered dynamic due to handler caching.
  vnode.patchFlag !== 32) {
    currentBlock.push(vnode);
  }
  return vnode;
}
const createVNode = _createVNode;
function _createVNode(type, props = null, children = null, patchFlag = 0, dynamicProps = null, isBlockNode = false) {
  if (!type || type === NULL_DYNAMIC_COMPONENT) {
    type = Comment;
  }
  if (isVNode(type)) {
    const cloned = cloneVNode(
      type,
      props,
      true
      /* mergeRef: true */
    );
    if (children) {
      normalizeChildren(cloned, children);
    }
    if (isBlockTreeEnabled > 0 && !isBlockNode && currentBlock) {
      if (cloned.shapeFlag & 6) {
        currentBlock[currentBlock.indexOf(type)] = cloned;
      } else {
        currentBlock.push(cloned);
      }
    }
    cloned.patchFlag |= -2;
    return cloned;
  }
  if (isClassComponent(type)) {
    type = type.__vccOpts;
  }
  if (props) {
    props = guardReactiveProps(props);
    let { class: klass, style } = props;
    if (klass && !isString$1(klass)) {
      props.class = normalizeClass(klass);
    }
    if (isObject$1(style)) {
      if (isProxy(style) && !isArray$2(style)) {
        style = extend$1({}, style);
      }
      props.style = normalizeStyle(style);
    }
  }
  const shapeFlag = isString$1(type) ? 1 : isSuspense(type) ? 128 : isTeleport(type) ? 64 : isObject$1(type) ? 4 : isFunction$1(type) ? 2 : 0;
  return createBaseVNode(type, props, children, patchFlag, dynamicProps, shapeFlag, isBlockNode, true);
}
function guardReactiveProps(props) {
  if (!props)
    return null;
  return isProxy(props) || InternalObjectKey in props ? extend$1({}, props) : props;
}
function cloneVNode(vnode, extraProps, mergeRef = false) {
  const { props, ref: ref2, patchFlag, children } = vnode;
  const mergedProps = extraProps ? mergeProps(props || {}, extraProps) : props;
  const cloned = {
    __v_isVNode: true,
    __v_skip: true,
    type: vnode.type,
    props: mergedProps,
    key: mergedProps && normalizeKey(mergedProps),
    ref: extraProps && extraProps.ref ? (
      // #2078 in the case of <component :is="vnode" ref="extra"/>
      // if the vnode itself already has a ref, cloneVNode will need to merge
      // the refs so the single vnode can be set on multiple refs
      mergeRef && ref2 ? isArray$2(ref2) ? ref2.concat(normalizeRef(extraProps)) : [ref2, normalizeRef(extraProps)] : normalizeRef(extraProps)
    ) : ref2,
    scopeId: vnode.scopeId,
    slotScopeIds: vnode.slotScopeIds,
    children,
    target: vnode.target,
    targetAnchor: vnode.targetAnchor,
    staticCount: vnode.staticCount,
    shapeFlag: vnode.shapeFlag,
    // if the vnode is cloned with extra props, we can no longer assume its
    // existing patch flag to be reliable and need to add the FULL_PROPS flag.
    // note: preserve flag for fragments since they use the flag for children
    // fast paths only.
    patchFlag: extraProps && vnode.type !== Fragment ? patchFlag === -1 ? 16 : patchFlag | 16 : patchFlag,
    dynamicProps: vnode.dynamicProps,
    dynamicChildren: vnode.dynamicChildren,
    appContext: vnode.appContext,
    dirs: vnode.dirs,
    transition: vnode.transition,
    // These should technically only be non-null on mounted VNodes. However,
    // they *should* be copied for kept-alive vnodes. So we just always copy
    // them since them being non-null during a mount doesn't affect the logic as
    // they will simply be overwritten.
    component: vnode.component,
    suspense: vnode.suspense,
    ssContent: vnode.ssContent && cloneVNode(vnode.ssContent),
    ssFallback: vnode.ssFallback && cloneVNode(vnode.ssFallback),
    el: vnode.el,
    anchor: vnode.anchor,
    ctx: vnode.ctx,
    ce: vnode.ce
  };
  return cloned;
}
function createTextVNode(text = " ", flag = 0) {
  return createVNode(Text, null, text, flag);
}
function createStaticVNode(content, numberOfNodes) {
  const vnode = createVNode(Static, null, content);
  vnode.staticCount = numberOfNodes;
  return vnode;
}
function createCommentVNode(text = "", asBlock = false) {
  return asBlock ? (openBlock(), createBlock(Comment, null, text)) : createVNode(Comment, null, text);
}
function normalizeVNode(child) {
  if (child == null || typeof child === "boolean") {
    return createVNode(Comment);
  } else if (isArray$2(child)) {
    return createVNode(
      Fragment,
      null,
      // #3666, avoid reference pollution when reusing vnode
      child.slice()
    );
  } else if (typeof child === "object") {
    return cloneIfMounted(child);
  } else {
    return createVNode(Text, null, String(child));
  }
}
function cloneIfMounted(child) {
  return child.el === null && child.patchFlag !== -1 || child.memo ? child : cloneVNode(child);
}
function normalizeChildren(vnode, children) {
  let type = 0;
  const { shapeFlag } = vnode;
  if (children == null) {
    children = null;
  } else if (isArray$2(children)) {
    type = 16;
  } else if (typeof children === "object") {
    if (shapeFlag & (1 | 64)) {
      const slot = children.default;
      if (slot) {
        slot._c && (slot._d = false);
        normalizeChildren(vnode, slot());
        slot._c && (slot._d = true);
      }
      return;
    } else {
      type = 32;
      const slotFlag = children._;
      if (!slotFlag && !(InternalObjectKey in children)) {
        children._ctx = currentRenderingInstance;
      } else if (slotFlag === 3 && currentRenderingInstance) {
        if (currentRenderingInstance.slots._ === 1) {
          children._ = 1;
        } else {
          children._ = 2;
          vnode.patchFlag |= 1024;
        }
      }
    }
  } else if (isFunction$1(children)) {
    children = { default: children, _ctx: currentRenderingInstance };
    type = 32;
  } else {
    children = String(children);
    if (shapeFlag & 64) {
      type = 16;
      children = [createTextVNode(children)];
    } else {
      type = 8;
    }
  }
  vnode.children = children;
  vnode.shapeFlag |= type;
}
function mergeProps(...args) {
  const ret = {};
  for (let i = 0; i < args.length; i++) {
    const toMerge = args[i];
    for (const key in toMerge) {
      if (key === "class") {
        if (ret.class !== toMerge.class) {
          ret.class = normalizeClass([ret.class, toMerge.class]);
        }
      } else if (key === "style") {
        ret.style = normalizeStyle([ret.style, toMerge.style]);
      } else if (isOn(key)) {
        const existing = ret[key];
        const incoming = toMerge[key];
        if (incoming && existing !== incoming && !(isArray$2(existing) && existing.includes(incoming))) {
          ret[key] = existing ? [].concat(existing, incoming) : incoming;
        }
      } else if (key !== "") {
        ret[key] = toMerge[key];
      }
    }
  }
  return ret;
}
function invokeVNodeHook(hook, instance, vnode, prevVNode = null) {
  callWithAsyncErrorHandling(hook, instance, 7, [
    vnode,
    prevVNode
  ]);
}
const emptyAppContext = createAppContext();
let uid = 0;
function createComponentInstance(vnode, parent, suspense) {
  const type = vnode.type;
  const appContext = (parent ? parent.appContext : vnode.appContext) || emptyAppContext;
  const instance = {
    uid: uid++,
    vnode,
    type,
    parent,
    appContext,
    root: null,
    next: null,
    subTree: null,
    effect: null,
    update: null,
    scope: new EffectScope(
      true
      /* detached */
    ),
    render: null,
    proxy: null,
    exposed: null,
    exposeProxy: null,
    withProxy: null,
    provides: parent ? parent.provides : Object.create(appContext.provides),
    accessCache: null,
    renderCache: [],
    // local resolved assets
    components: null,
    directives: null,
    // resolved props and emits options
    propsOptions: normalizePropsOptions(type, appContext),
    emitsOptions: normalizeEmitsOptions(type, appContext),
    // emit
    emit: null,
    emitted: null,
    // props default value
    propsDefaults: EMPTY_OBJ,
    // inheritAttrs
    inheritAttrs: type.inheritAttrs,
    // state
    ctx: EMPTY_OBJ,
    data: EMPTY_OBJ,
    props: EMPTY_OBJ,
    attrs: EMPTY_OBJ,
    slots: EMPTY_OBJ,
    refs: EMPTY_OBJ,
    setupState: EMPTY_OBJ,
    setupContext: null,
    // suspense related
    suspense,
    suspenseId: suspense ? suspense.pendingId : 0,
    asyncDep: null,
    asyncResolved: false,
    // lifecycle hooks
    // not using enums here because it results in computed properties
    isMounted: false,
    isUnmounted: false,
    isDeactivated: false,
    bc: null,
    c: null,
    bm: null,
    m: null,
    bu: null,
    u: null,
    um: null,
    bum: null,
    da: null,
    a: null,
    rtg: null,
    rtc: null,
    ec: null,
    sp: null
  };
  {
    instance.ctx = { _: instance };
  }
  instance.root = parent ? parent.root : instance;
  instance.emit = emit.bind(null, instance);
  if (vnode.ce) {
    vnode.ce(instance);
  }
  return instance;
}
let currentInstance = null;
const getCurrentInstance = () => currentInstance || currentRenderingInstance;
const setCurrentInstance = (instance) => {
  currentInstance = instance;
  instance.scope.on();
};
const unsetCurrentInstance = () => {
  currentInstance && currentInstance.scope.off();
  currentInstance = null;
};
function isStatefulComponent(instance) {
  return instance.vnode.shapeFlag & 4;
}
let isInSSRComponentSetup = false;
function setupComponent(instance, isSSR = false) {
  isInSSRComponentSetup = isSSR;
  const { props, children } = instance.vnode;
  const isStateful = isStatefulComponent(instance);
  initProps(instance, props, isStateful, isSSR);
  initSlots(instance, children);
  const setupResult = isStateful ? setupStatefulComponent(instance, isSSR) : void 0;
  isInSSRComponentSetup = false;
  return setupResult;
}
function setupStatefulComponent(instance, isSSR) {
  const Component2 = instance.type;
  instance.accessCache = /* @__PURE__ */ Object.create(null);
  instance.proxy = markRaw(new Proxy(instance.ctx, PublicInstanceProxyHandlers));
  const { setup } = Component2;
  if (setup) {
    const setupContext = instance.setupContext = setup.length > 1 ? createSetupContext(instance) : null;
    setCurrentInstance(instance);
    pauseTracking();
    const setupResult = callWithErrorHandling(setup, instance, 0, [instance.props, setupContext]);
    resetTracking();
    unsetCurrentInstance();
    if (isPromise(setupResult)) {
      setupResult.then(unsetCurrentInstance, unsetCurrentInstance);
      if (isSSR) {
        return setupResult.then((resolvedResult) => {
          handleSetupResult(instance, resolvedResult, isSSR);
        }).catch((e) => {
          handleError(
            e,
            instance,
            0
            /* ErrorCodes.SETUP_FUNCTION */
          );
        });
      } else {
        instance.asyncDep = setupResult;
      }
    } else {
      handleSetupResult(instance, setupResult, isSSR);
    }
  } else {
    finishComponentSetup(instance, isSSR);
  }
}
function handleSetupResult(instance, setupResult, isSSR) {
  if (isFunction$1(setupResult)) {
    if (instance.type.__ssrInlineRender) {
      instance.ssrRender = setupResult;
    } else {
      instance.render = setupResult;
    }
  } else if (isObject$1(setupResult)) {
    instance.setupState = proxyRefs(setupResult);
  } else
    ;
  finishComponentSetup(instance, isSSR);
}
let compile;
function finishComponentSetup(instance, isSSR, skipOptions) {
  const Component2 = instance.type;
  if (!instance.render) {
    if (!isSSR && compile && !Component2.render) {
      const template = Component2.template || resolveMergedOptions(instance).template;
      if (template) {
        const { isCustomElement, compilerOptions } = instance.appContext.config;
        const { delimiters, compilerOptions: componentCompilerOptions } = Component2;
        const finalCompilerOptions = extend$1(extend$1({
          isCustomElement,
          delimiters
        }, compilerOptions), componentCompilerOptions);
        Component2.render = compile(template, finalCompilerOptions);
      }
    }
    instance.render = Component2.render || NOOP;
  }
  {
    setCurrentInstance(instance);
    pauseTracking();
    applyOptions(instance);
    resetTracking();
    unsetCurrentInstance();
  }
}
function createAttrsProxy(instance) {
  return new Proxy(instance.attrs, {
    get(target, key) {
      track(instance, "get", "$attrs");
      return target[key];
    }
  });
}
function createSetupContext(instance) {
  const expose = (exposed) => {
    instance.exposed = exposed || {};
  };
  let attrs;
  {
    return {
      get attrs() {
        return attrs || (attrs = createAttrsProxy(instance));
      },
      slots: instance.slots,
      emit: instance.emit,
      expose
    };
  }
}
function getExposeProxy(instance) {
  if (instance.exposed) {
    return instance.exposeProxy || (instance.exposeProxy = new Proxy(proxyRefs(markRaw(instance.exposed)), {
      get(target, key) {
        if (key in target) {
          return target[key];
        } else if (key in publicPropertiesMap) {
          return publicPropertiesMap[key](instance);
        }
      },
      has(target, key) {
        return key in target || key in publicPropertiesMap;
      }
    }));
  }
}
function getComponentName(Component2, includeInferred = true) {
  return isFunction$1(Component2) ? Component2.displayName || Component2.name : Component2.name || includeInferred && Component2.__name;
}
function isClassComponent(value) {
  return isFunction$1(value) && "__vccOpts" in value;
}
const computed = (getterOrOptions, debugOptions) => {
  return computed$1(getterOrOptions, debugOptions, isInSSRComponentSetup);
};
function h(type, propsOrChildren, children) {
  const l = arguments.length;
  if (l === 2) {
    if (isObject$1(propsOrChildren) && !isArray$2(propsOrChildren)) {
      if (isVNode(propsOrChildren)) {
        return createVNode(type, null, [propsOrChildren]);
      }
      return createVNode(type, propsOrChildren);
    } else {
      return createVNode(type, null, propsOrChildren);
    }
  } else {
    if (l > 3) {
      children = Array.prototype.slice.call(arguments, 2);
    } else if (l === 3 && isVNode(children)) {
      children = [children];
    }
    return createVNode(type, propsOrChildren, children);
  }
}
const ssrContextKey = Symbol(``);
const useSSRContext = () => {
  {
    const ctx = inject(ssrContextKey);
    return ctx;
  }
};
const version = "3.2.47";
const svgNS = "http://www.w3.org/2000/svg";
const doc = typeof document !== "undefined" ? document : null;
const templateContainer = doc && /* @__PURE__ */ doc.createElement("template");
const nodeOps = {
  insert: (child, parent, anchor) => {
    parent.insertBefore(child, anchor || null);
  },
  remove: (child) => {
    const parent = child.parentNode;
    if (parent) {
      parent.removeChild(child);
    }
  },
  createElement: (tag, isSVG, is, props) => {
    const el = isSVG ? doc.createElementNS(svgNS, tag) : doc.createElement(tag, is ? { is } : void 0);
    if (tag === "select" && props && props.multiple != null) {
      el.setAttribute("multiple", props.multiple);
    }
    return el;
  },
  createText: (text) => doc.createTextNode(text),
  createComment: (text) => doc.createComment(text),
  setText: (node, text) => {
    node.nodeValue = text;
  },
  setElementText: (el, text) => {
    el.textContent = text;
  },
  parentNode: (node) => node.parentNode,
  nextSibling: (node) => node.nextSibling,
  querySelector: (selector) => doc.querySelector(selector),
  setScopeId(el, id) {
    el.setAttribute(id, "");
  },
  // __UNSAFE__
  // Reason: innerHTML.
  // Static content here can only come from compiled templates.
  // As long as the user only uses trusted templates, this is safe.
  insertStaticContent(content, parent, anchor, isSVG, start2, end2) {
    const before = anchor ? anchor.previousSibling : parent.lastChild;
    if (start2 && (start2 === end2 || start2.nextSibling)) {
      while (true) {
        parent.insertBefore(start2.cloneNode(true), anchor);
        if (start2 === end2 || !(start2 = start2.nextSibling))
          break;
      }
    } else {
      templateContainer.innerHTML = isSVG ? `<svg>${content}</svg>` : content;
      const template = templateContainer.content;
      if (isSVG) {
        const wrapper = template.firstChild;
        while (wrapper.firstChild) {
          template.appendChild(wrapper.firstChild);
        }
        template.removeChild(wrapper);
      }
      parent.insertBefore(template, anchor);
    }
    return [
      // first
      before ? before.nextSibling : parent.firstChild,
      // last
      anchor ? anchor.previousSibling : parent.lastChild
    ];
  }
};
function patchClass(el, value, isSVG) {
  const transitionClasses = el._vtc;
  if (transitionClasses) {
    value = (value ? [value, ...transitionClasses] : [...transitionClasses]).join(" ");
  }
  if (value == null) {
    el.removeAttribute("class");
  } else if (isSVG) {
    el.setAttribute("class", value);
  } else {
    el.className = value;
  }
}
function patchStyle(el, prev, next) {
  const style = el.style;
  const isCssString = isString$1(next);
  if (next && !isCssString) {
    if (prev && !isString$1(prev)) {
      for (const key in prev) {
        if (next[key] == null) {
          setStyle(style, key, "");
        }
      }
    }
    for (const key in next) {
      setStyle(style, key, next[key]);
    }
  } else {
    const currentDisplay = style.display;
    if (isCssString) {
      if (prev !== next) {
        style.cssText = next;
      }
    } else if (prev) {
      el.removeAttribute("style");
    }
    if ("_vod" in el) {
      style.display = currentDisplay;
    }
  }
}
const importantRE = /\s*!important$/;
function setStyle(style, name, val) {
  if (isArray$2(val)) {
    val.forEach((v) => setStyle(style, name, v));
  } else {
    if (val == null)
      val = "";
    if (name.startsWith("--")) {
      style.setProperty(name, val);
    } else {
      const prefixed = autoPrefix(style, name);
      if (importantRE.test(val)) {
        style.setProperty(hyphenate(prefixed), val.replace(importantRE, ""), "important");
      } else {
        style[prefixed] = val;
      }
    }
  }
}
const prefixes = ["Webkit", "Moz", "ms"];
const prefixCache = {};
function autoPrefix(style, rawName) {
  const cached = prefixCache[rawName];
  if (cached) {
    return cached;
  }
  let name = camelize(rawName);
  if (name !== "filter" && name in style) {
    return prefixCache[rawName] = name;
  }
  name = capitalize(name);
  for (let i = 0; i < prefixes.length; i++) {
    const prefixed = prefixes[i] + name;
    if (prefixed in style) {
      return prefixCache[rawName] = prefixed;
    }
  }
  return rawName;
}
const xlinkNS = "http://www.w3.org/1999/xlink";
function patchAttr(el, key, value, isSVG, instance) {
  if (isSVG && key.startsWith("xlink:")) {
    if (value == null) {
      el.removeAttributeNS(xlinkNS, key.slice(6, key.length));
    } else {
      el.setAttributeNS(xlinkNS, key, value);
    }
  } else {
    const isBoolean = isSpecialBooleanAttr(key);
    if (value == null || isBoolean && !includeBooleanAttr(value)) {
      el.removeAttribute(key);
    } else {
      el.setAttribute(key, isBoolean ? "" : value);
    }
  }
}
function patchDOMProp(el, key, value, prevChildren, parentComponent, parentSuspense, unmountChildren) {
  if (key === "innerHTML" || key === "textContent") {
    if (prevChildren) {
      unmountChildren(prevChildren, parentComponent, parentSuspense);
    }
    el[key] = value == null ? "" : value;
    return;
  }
  if (key === "value" && el.tagName !== "PROGRESS" && // custom elements may use _value internally
  !el.tagName.includes("-")) {
    el._value = value;
    const newValue = value == null ? "" : value;
    if (el.value !== newValue || // #4956: always set for OPTION elements because its value falls back to
    // textContent if no value attribute is present. And setting .value for
    // OPTION has no side effect
    el.tagName === "OPTION") {
      el.value = newValue;
    }
    if (value == null) {
      el.removeAttribute(key);
    }
    return;
  }
  let needRemove = false;
  if (value === "" || value == null) {
    const type = typeof el[key];
    if (type === "boolean") {
      value = includeBooleanAttr(value);
    } else if (value == null && type === "string") {
      value = "";
      needRemove = true;
    } else if (type === "number") {
      value = 0;
      needRemove = true;
    }
  }
  try {
    el[key] = value;
  } catch (e) {
  }
  needRemove && el.removeAttribute(key);
}
function addEventListener(el, event, handler, options) {
  el.addEventListener(event, handler, options);
}
function removeEventListener(el, event, handler, options) {
  el.removeEventListener(event, handler, options);
}
function patchEvent(el, rawName, prevValue, nextValue, instance = null) {
  const invokers = el._vei || (el._vei = {});
  const existingInvoker = invokers[rawName];
  if (nextValue && existingInvoker) {
    existingInvoker.value = nextValue;
  } else {
    const [name, options] = parseName(rawName);
    if (nextValue) {
      const invoker = invokers[rawName] = createInvoker(nextValue, instance);
      addEventListener(el, name, invoker, options);
    } else if (existingInvoker) {
      removeEventListener(el, name, existingInvoker, options);
      invokers[rawName] = void 0;
    }
  }
}
const optionsModifierRE = /(?:Once|Passive|Capture)$/;
function parseName(name) {
  let options;
  if (optionsModifierRE.test(name)) {
    options = {};
    let m;
    while (m = name.match(optionsModifierRE)) {
      name = name.slice(0, name.length - m[0].length);
      options[m[0].toLowerCase()] = true;
    }
  }
  const event = name[2] === ":" ? name.slice(3) : hyphenate(name.slice(2));
  return [event, options];
}
let cachedNow = 0;
const p = /* @__PURE__ */ Promise.resolve();
const getNow = () => cachedNow || (p.then(() => cachedNow = 0), cachedNow = Date.now());
function createInvoker(initialValue, instance) {
  const invoker = (e) => {
    if (!e._vts) {
      e._vts = Date.now();
    } else if (e._vts <= invoker.attached) {
      return;
    }
    callWithAsyncErrorHandling(patchStopImmediatePropagation(e, invoker.value), instance, 5, [e]);
  };
  invoker.value = initialValue;
  invoker.attached = getNow();
  return invoker;
}
function patchStopImmediatePropagation(e, value) {
  if (isArray$2(value)) {
    const originalStop = e.stopImmediatePropagation;
    e.stopImmediatePropagation = () => {
      originalStop.call(e);
      e._stopped = true;
    };
    return value.map((fn2) => (e2) => !e2._stopped && fn2 && fn2(e2));
  } else {
    return value;
  }
}
const nativeOnRE = /^on[a-z]/;
const patchProp = (el, key, prevValue, nextValue, isSVG = false, prevChildren, parentComponent, parentSuspense, unmountChildren) => {
  if (key === "class") {
    patchClass(el, nextValue, isSVG);
  } else if (key === "style") {
    patchStyle(el, prevValue, nextValue);
  } else if (isOn(key)) {
    if (!isModelListener(key)) {
      patchEvent(el, key, prevValue, nextValue, parentComponent);
    }
  } else if (key[0] === "." ? (key = key.slice(1), true) : key[0] === "^" ? (key = key.slice(1), false) : shouldSetAsProp(el, key, nextValue, isSVG)) {
    patchDOMProp(el, key, nextValue, prevChildren, parentComponent, parentSuspense, unmountChildren);
  } else {
    if (key === "true-value") {
      el._trueValue = nextValue;
    } else if (key === "false-value") {
      el._falseValue = nextValue;
    }
    patchAttr(el, key, nextValue, isSVG);
  }
};
function shouldSetAsProp(el, key, value, isSVG) {
  if (isSVG) {
    if (key === "innerHTML" || key === "textContent") {
      return true;
    }
    if (key in el && nativeOnRE.test(key) && isFunction$1(value)) {
      return true;
    }
    return false;
  }
  if (key === "spellcheck" || key === "draggable" || key === "translate") {
    return false;
  }
  if (key === "form") {
    return false;
  }
  if (key === "list" && el.tagName === "INPUT") {
    return false;
  }
  if (key === "type" && el.tagName === "TEXTAREA") {
    return false;
  }
  if (nativeOnRE.test(key) && isString$1(value)) {
    return false;
  }
  return key in el;
}
const getModelAssigner = (vnode) => {
  const fn2 = vnode.props["onUpdate:modelValue"] || false;
  return isArray$2(fn2) ? (value) => invokeArrayFns(fn2, value) : fn2;
};
function onCompositionStart(e) {
  e.target.composing = true;
}
function onCompositionEnd(e) {
  const target = e.target;
  if (target.composing) {
    target.composing = false;
    target.dispatchEvent(new Event("input"));
  }
}
const vModelText = {
  created(el, { modifiers: { lazy, trim, number: number2 } }, vnode) {
    el._assign = getModelAssigner(vnode);
    const castToNumber = number2 || vnode.props && vnode.props.type === "number";
    addEventListener(el, lazy ? "change" : "input", (e) => {
      if (e.target.composing)
        return;
      let domValue = el.value;
      if (trim) {
        domValue = domValue.trim();
      }
      if (castToNumber) {
        domValue = looseToNumber(domValue);
      }
      el._assign(domValue);
    });
    if (trim) {
      addEventListener(el, "change", () => {
        el.value = el.value.trim();
      });
    }
    if (!lazy) {
      addEventListener(el, "compositionstart", onCompositionStart);
      addEventListener(el, "compositionend", onCompositionEnd);
      addEventListener(el, "change", onCompositionEnd);
    }
  },
  // set value on mounted so it's after min/max for type="range"
  mounted(el, { value }) {
    el.value = value == null ? "" : value;
  },
  beforeUpdate(el, { value, modifiers: { lazy, trim, number: number2 } }, vnode) {
    el._assign = getModelAssigner(vnode);
    if (el.composing)
      return;
    if (document.activeElement === el && el.type !== "range") {
      if (lazy) {
        return;
      }
      if (trim && el.value.trim() === value) {
        return;
      }
      if ((number2 || el.type === "number") && looseToNumber(el.value) === value) {
        return;
      }
    }
    const newValue = value == null ? "" : value;
    if (el.value !== newValue) {
      el.value = newValue;
    }
  }
};
const vModelCheckbox = {
  // #4096 array checkboxes need to be deep traversed
  deep: true,
  created(el, _, vnode) {
    el._assign = getModelAssigner(vnode);
    addEventListener(el, "change", () => {
      const modelValue = el._modelValue;
      const elementValue = getValue(el);
      const checked = el.checked;
      const assign2 = el._assign;
      if (isArray$2(modelValue)) {
        const index2 = looseIndexOf(modelValue, elementValue);
        const found = index2 !== -1;
        if (checked && !found) {
          assign2(modelValue.concat(elementValue));
        } else if (!checked && found) {
          const filtered = [...modelValue];
          filtered.splice(index2, 1);
          assign2(filtered);
        }
      } else if (isSet(modelValue)) {
        const cloned = new Set(modelValue);
        if (checked) {
          cloned.add(elementValue);
        } else {
          cloned.delete(elementValue);
        }
        assign2(cloned);
      } else {
        assign2(getCheckboxValue(el, checked));
      }
    });
  },
  // set initial checked on mount to wait for true-value/false-value
  mounted: setChecked,
  beforeUpdate(el, binding, vnode) {
    el._assign = getModelAssigner(vnode);
    setChecked(el, binding, vnode);
  }
};
function setChecked(el, { value, oldValue }, vnode) {
  el._modelValue = value;
  if (isArray$2(value)) {
    el.checked = looseIndexOf(value, vnode.props.value) > -1;
  } else if (isSet(value)) {
    el.checked = value.has(vnode.props.value);
  } else if (value !== oldValue) {
    el.checked = looseEqual(value, getCheckboxValue(el, true));
  }
}
const vModelSelect = {
  // <select multiple> value need to be deep traversed
  deep: true,
  created(el, { value, modifiers: { number: number2 } }, vnode) {
    const isSetModel = isSet(value);
    addEventListener(el, "change", () => {
      const selectedVal = Array.prototype.filter.call(el.options, (o) => o.selected).map((o) => number2 ? looseToNumber(getValue(o)) : getValue(o));
      el._assign(el.multiple ? isSetModel ? new Set(selectedVal) : selectedVal : selectedVal[0]);
    });
    el._assign = getModelAssigner(vnode);
  },
  // set value in mounted & updated because <select> relies on its children
  // <option>s.
  mounted(el, { value }) {
    setSelected(el, value);
  },
  beforeUpdate(el, _binding, vnode) {
    el._assign = getModelAssigner(vnode);
  },
  updated(el, { value }) {
    setSelected(el, value);
  }
};
function setSelected(el, value) {
  const isMultiple = el.multiple;
  if (isMultiple && !isArray$2(value) && !isSet(value)) {
    return;
  }
  for (let i = 0, l = el.options.length; i < l; i++) {
    const option = el.options[i];
    const optionValue = getValue(option);
    if (isMultiple) {
      if (isArray$2(value)) {
        option.selected = looseIndexOf(value, optionValue) > -1;
      } else {
        option.selected = value.has(optionValue);
      }
    } else {
      if (looseEqual(getValue(option), value)) {
        if (el.selectedIndex !== i)
          el.selectedIndex = i;
        return;
      }
    }
  }
  if (!isMultiple && el.selectedIndex !== -1) {
    el.selectedIndex = -1;
  }
}
function getValue(el) {
  return "_value" in el ? el._value : el.value;
}
function getCheckboxValue(el, checked) {
  const key = checked ? "_trueValue" : "_falseValue";
  return key in el ? el[key] : checked;
}
const systemModifiers = ["ctrl", "shift", "alt", "meta"];
const modifierGuards = {
  stop: (e) => e.stopPropagation(),
  prevent: (e) => e.preventDefault(),
  self: (e) => e.target !== e.currentTarget,
  ctrl: (e) => !e.ctrlKey,
  shift: (e) => !e.shiftKey,
  alt: (e) => !e.altKey,
  meta: (e) => !e.metaKey,
  left: (e) => "button" in e && e.button !== 0,
  middle: (e) => "button" in e && e.button !== 1,
  right: (e) => "button" in e && e.button !== 2,
  exact: (e, modifiers) => systemModifiers.some((m) => e[`${m}Key`] && !modifiers.includes(m))
};
const withModifiers = (fn2, modifiers) => {
  return (event, ...args) => {
    for (let i = 0; i < modifiers.length; i++) {
      const guard = modifierGuards[modifiers[i]];
      if (guard && guard(event, modifiers))
        return;
    }
    return fn2(event, ...args);
  };
};
const keyNames = {
  esc: "escape",
  space: " ",
  up: "arrow-up",
  left: "arrow-left",
  right: "arrow-right",
  down: "arrow-down",
  delete: "backspace"
};
const withKeys = (fn2, modifiers) => {
  return (event) => {
    if (!("key" in event)) {
      return;
    }
    const eventKey = hyphenate(event.key);
    if (modifiers.some((k) => k === eventKey || keyNames[k] === eventKey)) {
      return fn2(event);
    }
  };
};
const vShow = {
  beforeMount(el, { value }, { transition }) {
    el._vod = el.style.display === "none" ? "" : el.style.display;
    if (transition && value) {
      transition.beforeEnter(el);
    } else {
      setDisplay(el, value);
    }
  },
  mounted(el, { value }, { transition }) {
    if (transition && value) {
      transition.enter(el);
    }
  },
  updated(el, { value, oldValue }, { transition }) {
    if (!value === !oldValue)
      return;
    if (transition) {
      if (value) {
        transition.beforeEnter(el);
        setDisplay(el, true);
        transition.enter(el);
      } else {
        transition.leave(el, () => {
          setDisplay(el, false);
        });
      }
    } else {
      setDisplay(el, value);
    }
  },
  beforeUnmount(el, { value }) {
    setDisplay(el, value);
  }
};
function setDisplay(el, value) {
  el.style.display = value ? el._vod : "none";
}
const rendererOptions = /* @__PURE__ */ extend$1({ patchProp }, nodeOps);
let renderer;
function ensureRenderer() {
  return renderer || (renderer = createRenderer(rendererOptions));
}
const createApp = (...args) => {
  const app2 = ensureRenderer().createApp(...args);
  const { mount } = app2;
  app2.mount = (containerOrSelector) => {
    const container = normalizeContainer(containerOrSelector);
    if (!container)
      return;
    const component = app2._component;
    if (!isFunction$1(component) && !component.render && !component.template) {
      component.template = container.innerHTML;
    }
    container.innerHTML = "";
    const proxy = mount(container, false, container instanceof SVGElement);
    if (container instanceof Element) {
      container.removeAttribute("v-cloak");
      container.setAttribute("data-v-app", "");
    }
    return proxy;
  };
  return app2;
};
function normalizeContainer(container) {
  if (isString$1(container)) {
    const res = document.querySelector(container);
    return res;
  }
  return container;
}
var isVue2 = false;
/*!
  * pinia v2.0.33
  * (c) 2023 Eduardo San Martin Morote
  * @license MIT
  */
let activePinia;
const setActivePinia = (pinia) => activePinia = pinia;
const piniaSymbol = (
  /* istanbul ignore next */
  Symbol()
);
function isPlainObject(o) {
  return o && typeof o === "object" && Object.prototype.toString.call(o) === "[object Object]" && typeof o.toJSON !== "function";
}
var MutationType;
(function(MutationType2) {
  MutationType2["direct"] = "direct";
  MutationType2["patchObject"] = "patch object";
  MutationType2["patchFunction"] = "patch function";
})(MutationType || (MutationType = {}));
function createPinia() {
  const scope = effectScope(true);
  const state = scope.run(() => ref({}));
  let _p = [];
  let toBeInstalled = [];
  const pinia = markRaw({
    install(app2) {
      setActivePinia(pinia);
      {
        pinia._a = app2;
        app2.provide(piniaSymbol, pinia);
        app2.config.globalProperties.$pinia = pinia;
        toBeInstalled.forEach((plugin) => _p.push(plugin));
        toBeInstalled = [];
      }
    },
    use(plugin) {
      if (!this._a && !isVue2) {
        toBeInstalled.push(plugin);
      } else {
        _p.push(plugin);
      }
      return this;
    },
    _p,
    // it's actually undefined here
    // @ts-expect-error
    _a: null,
    _e: scope,
    _s: /* @__PURE__ */ new Map(),
    state
  });
  return pinia;
}
const noop$1 = () => {
};
function addSubscription(subscriptions, callback, detached, onCleanup = noop$1) {
  subscriptions.push(callback);
  const removeSubscription = () => {
    const idx = subscriptions.indexOf(callback);
    if (idx > -1) {
      subscriptions.splice(idx, 1);
      onCleanup();
    }
  };
  if (!detached && getCurrentScope()) {
    onScopeDispose(removeSubscription);
  }
  return removeSubscription;
}
function triggerSubscriptions(subscriptions, ...args) {
  subscriptions.slice().forEach((callback) => {
    callback(...args);
  });
}
function mergeReactiveObjects(target, patchToApply) {
  if (target instanceof Map && patchToApply instanceof Map) {
    patchToApply.forEach((value, key) => target.set(key, value));
  }
  if (target instanceof Set && patchToApply instanceof Set) {
    patchToApply.forEach(target.add, target);
  }
  for (const key in patchToApply) {
    if (!patchToApply.hasOwnProperty(key))
      continue;
    const subPatch = patchToApply[key];
    const targetValue = target[key];
    if (isPlainObject(targetValue) && isPlainObject(subPatch) && target.hasOwnProperty(key) && !isRef(subPatch) && !isReactive(subPatch)) {
      target[key] = mergeReactiveObjects(targetValue, subPatch);
    } else {
      target[key] = subPatch;
    }
  }
  return target;
}
const skipHydrateSymbol = (
  /* istanbul ignore next */
  Symbol()
);
function shouldHydrate(obj) {
  return !isPlainObject(obj) || !obj.hasOwnProperty(skipHydrateSymbol);
}
const { assign: assign$1 } = Object;
function isComputed(o) {
  return !!(isRef(o) && o.effect);
}
function createOptionsStore(id, options, pinia, hot) {
  const { state, actions, getters } = options;
  const initialState = pinia.state.value[id];
  let store;
  function setup() {
    if (!initialState && true) {
      {
        pinia.state.value[id] = state ? state() : {};
      }
    }
    const localState = toRefs(pinia.state.value[id]);
    return assign$1(localState, actions, Object.keys(getters || {}).reduce((computedGetters, name) => {
      computedGetters[name] = markRaw(computed(() => {
        setActivePinia(pinia);
        const store2 = pinia._s.get(id);
        return getters[name].call(store2, store2);
      }));
      return computedGetters;
    }, {}));
  }
  store = createSetupStore(id, setup, options, pinia, hot, true);
  return store;
}
function createSetupStore($id, setup, options = {}, pinia, hot, isOptionsStore) {
  let scope;
  const optionsForPlugin = assign$1({ actions: {} }, options);
  const $subscribeOptions = {
    deep: true
    // flush: 'post',
  };
  let isListening;
  let isSyncListening;
  let subscriptions = markRaw([]);
  let actionSubscriptions = markRaw([]);
  let debuggerEvents;
  const initialState = pinia.state.value[$id];
  if (!isOptionsStore && !initialState && true) {
    {
      pinia.state.value[$id] = {};
    }
  }
  ref({});
  let activeListener;
  function $patch(partialStateOrMutator) {
    let subscriptionMutation;
    isListening = isSyncListening = false;
    if (typeof partialStateOrMutator === "function") {
      partialStateOrMutator(pinia.state.value[$id]);
      subscriptionMutation = {
        type: MutationType.patchFunction,
        storeId: $id,
        events: debuggerEvents
      };
    } else {
      mergeReactiveObjects(pinia.state.value[$id], partialStateOrMutator);
      subscriptionMutation = {
        type: MutationType.patchObject,
        payload: partialStateOrMutator,
        storeId: $id,
        events: debuggerEvents
      };
    }
    const myListenerId = activeListener = Symbol();
    nextTick().then(() => {
      if (activeListener === myListenerId) {
        isListening = true;
      }
    });
    isSyncListening = true;
    triggerSubscriptions(subscriptions, subscriptionMutation, pinia.state.value[$id]);
  }
  const $reset = isOptionsStore ? function $reset2() {
    const { state } = options;
    const newState = state ? state() : {};
    this.$patch(($state) => {
      assign$1($state, newState);
    });
  } : (
    /* istanbul ignore next */
    noop$1
  );
  function $dispose() {
    scope.stop();
    subscriptions = [];
    actionSubscriptions = [];
    pinia._s.delete($id);
  }
  function wrapAction(name, action) {
    return function() {
      setActivePinia(pinia);
      const args = Array.from(arguments);
      const afterCallbackList = [];
      const onErrorCallbackList = [];
      function after(callback) {
        afterCallbackList.push(callback);
      }
      function onError(callback) {
        onErrorCallbackList.push(callback);
      }
      triggerSubscriptions(actionSubscriptions, {
        args,
        name,
        store,
        after,
        onError
      });
      let ret;
      try {
        ret = action.apply(this && this.$id === $id ? this : store, args);
      } catch (error) {
        triggerSubscriptions(onErrorCallbackList, error);
        throw error;
      }
      if (ret instanceof Promise) {
        return ret.then((value) => {
          triggerSubscriptions(afterCallbackList, value);
          return value;
        }).catch((error) => {
          triggerSubscriptions(onErrorCallbackList, error);
          return Promise.reject(error);
        });
      }
      triggerSubscriptions(afterCallbackList, ret);
      return ret;
    };
  }
  const partialStore = {
    _p: pinia,
    // _s: scope,
    $id,
    $onAction: addSubscription.bind(null, actionSubscriptions),
    $patch,
    $reset,
    $subscribe(callback, options2 = {}) {
      const removeSubscription = addSubscription(subscriptions, callback, options2.detached, () => stopWatcher());
      const stopWatcher = scope.run(() => watch(() => pinia.state.value[$id], (state) => {
        if (options2.flush === "sync" ? isSyncListening : isListening) {
          callback({
            storeId: $id,
            type: MutationType.direct,
            events: debuggerEvents
          }, state);
        }
      }, assign$1({}, $subscribeOptions, options2)));
      return removeSubscription;
    },
    $dispose
  };
  const store = reactive(partialStore);
  pinia._s.set($id, store);
  const setupStore = pinia._e.run(() => {
    scope = effectScope();
    return scope.run(() => setup());
  });
  for (const key in setupStore) {
    const prop = setupStore[key];
    if (isRef(prop) && !isComputed(prop) || isReactive(prop)) {
      if (!isOptionsStore) {
        if (initialState && shouldHydrate(prop)) {
          if (isRef(prop)) {
            prop.value = initialState[key];
          } else {
            mergeReactiveObjects(prop, initialState[key]);
          }
        }
        {
          pinia.state.value[$id][key] = prop;
        }
      }
    } else if (typeof prop === "function") {
      const actionValue = wrapAction(key, prop);
      {
        setupStore[key] = actionValue;
      }
      optionsForPlugin.actions[key] = prop;
    } else
      ;
  }
  {
    assign$1(store, setupStore);
    assign$1(toRaw(store), setupStore);
  }
  Object.defineProperty(store, "$state", {
    get: () => pinia.state.value[$id],
    set: (state) => {
      $patch(($state) => {
        assign$1($state, state);
      });
    }
  });
  pinia._p.forEach((extender) => {
    {
      assign$1(store, scope.run(() => extender({
        store,
        app: pinia._a,
        pinia,
        options: optionsForPlugin
      })));
    }
  });
  if (initialState && isOptionsStore && options.hydrate) {
    options.hydrate(store.$state, initialState);
  }
  isListening = true;
  isSyncListening = true;
  return store;
}
function defineStore(idOrOptions, setup, setupOptions) {
  let id;
  let options;
  const isSetupStore = typeof setup === "function";
  if (typeof idOrOptions === "string") {
    id = idOrOptions;
    options = isSetupStore ? setupOptions : setup;
  } else {
    options = idOrOptions;
    id = idOrOptions.id;
  }
  function useStore(pinia, hot) {
    const currentInstance2 = getCurrentInstance();
    pinia = // in test mode, ignore the argument provided as we can always retrieve a
    // pinia instance with getActivePinia()
    pinia || currentInstance2 && inject(piniaSymbol, null);
    if (pinia)
      setActivePinia(pinia);
    pinia = activePinia;
    if (!pinia._s.has(id)) {
      if (isSetupStore) {
        createSetupStore(id, setup, options, pinia);
      } else {
        createOptionsStore(id, options, pinia);
      }
    }
    const store = pinia._s.get(id);
    return store;
  }
  useStore.$id = id;
  return useStore;
}
var commonjsGlobal$1 = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
var sweetalert2 = { exports: {} };
/*!
* sweetalert2 v11.4.0
* Released under the MIT License.
*/
(function(module2, exports) {
  (function(global2, factory) {
    module2.exports = factory();
  })(commonjsGlobal$1, function() {
    const consolePrefix = "SweetAlert2:";
    const uniqueArray = (arr) => {
      const result = [];
      for (let i = 0; i < arr.length; i++) {
        if (result.indexOf(arr[i]) === -1) {
          result.push(arr[i]);
        }
      }
      return result;
    };
    const capitalizeFirstLetter = (str) => str.charAt(0).toUpperCase() + str.slice(1);
    const toArray2 = (nodeList) => Array.prototype.slice.call(nodeList);
    const warn2 = (message) => {
      console.warn("".concat(consolePrefix, " ").concat(typeof message === "object" ? message.join(" ") : message));
    };
    const error = (message) => {
      console.error("".concat(consolePrefix, " ").concat(message));
    };
    const previousWarnOnceMessages = [];
    const warnOnce = (message) => {
      if (!previousWarnOnceMessages.includes(message)) {
        previousWarnOnceMessages.push(message);
        warn2(message);
      }
    };
    const warnAboutDeprecation = (deprecatedParam, useInstead) => {
      warnOnce('"'.concat(deprecatedParam, '" is deprecated and will be removed in the next major release. Please use "').concat(useInstead, '" instead.'));
    };
    const callIfFunction = (arg) => typeof arg === "function" ? arg() : arg;
    const hasToPromiseFn = (arg) => arg && typeof arg.toPromise === "function";
    const asPromise = (arg) => hasToPromiseFn(arg) ? arg.toPromise() : Promise.resolve(arg);
    const isPromise2 = (arg) => arg && Promise.resolve(arg) === arg;
    const defaultParams = {
      title: "",
      titleText: "",
      text: "",
      html: "",
      footer: "",
      icon: void 0,
      iconColor: void 0,
      iconHtml: void 0,
      template: void 0,
      toast: false,
      showClass: {
        popup: "swal2-show",
        backdrop: "swal2-backdrop-show",
        icon: "swal2-icon-show"
      },
      hideClass: {
        popup: "swal2-hide",
        backdrop: "swal2-backdrop-hide",
        icon: "swal2-icon-hide"
      },
      customClass: {},
      target: "body",
      color: void 0,
      backdrop: true,
      heightAuto: true,
      allowOutsideClick: true,
      allowEscapeKey: true,
      allowEnterKey: true,
      stopKeydownPropagation: true,
      keydownListenerCapture: false,
      showConfirmButton: true,
      showDenyButton: false,
      showCancelButton: false,
      preConfirm: void 0,
      preDeny: void 0,
      confirmButtonText: "OK",
      confirmButtonAriaLabel: "",
      confirmButtonColor: void 0,
      denyButtonText: "No",
      denyButtonAriaLabel: "",
      denyButtonColor: void 0,
      cancelButtonText: "Cancel",
      cancelButtonAriaLabel: "",
      cancelButtonColor: void 0,
      buttonsStyling: true,
      reverseButtons: false,
      focusConfirm: true,
      focusDeny: false,
      focusCancel: false,
      returnFocus: true,
      showCloseButton: false,
      closeButtonHtml: "&times;",
      closeButtonAriaLabel: "Close this dialog",
      loaderHtml: "",
      showLoaderOnConfirm: false,
      showLoaderOnDeny: false,
      imageUrl: void 0,
      imageWidth: void 0,
      imageHeight: void 0,
      imageAlt: "",
      timer: void 0,
      timerProgressBar: false,
      width: void 0,
      padding: void 0,
      background: void 0,
      input: void 0,
      inputPlaceholder: "",
      inputLabel: "",
      inputValue: "",
      inputOptions: {},
      inputAutoTrim: true,
      inputAttributes: {},
      inputValidator: void 0,
      returnInputValueOnDeny: false,
      validationMessage: void 0,
      grow: false,
      position: "center",
      progressSteps: [],
      currentProgressStep: void 0,
      progressStepsDistance: void 0,
      willOpen: void 0,
      didOpen: void 0,
      didRender: void 0,
      willClose: void 0,
      didClose: void 0,
      didDestroy: void 0,
      scrollbarPadding: true
    };
    const updatableParams = ["allowEscapeKey", "allowOutsideClick", "background", "buttonsStyling", "cancelButtonAriaLabel", "cancelButtonColor", "cancelButtonText", "closeButtonAriaLabel", "closeButtonHtml", "color", "confirmButtonAriaLabel", "confirmButtonColor", "confirmButtonText", "currentProgressStep", "customClass", "denyButtonAriaLabel", "denyButtonColor", "denyButtonText", "didClose", "didDestroy", "footer", "hideClass", "html", "icon", "iconColor", "iconHtml", "imageAlt", "imageHeight", "imageUrl", "imageWidth", "preConfirm", "preDeny", "progressSteps", "returnFocus", "reverseButtons", "showCancelButton", "showCloseButton", "showConfirmButton", "showDenyButton", "text", "title", "titleText", "willClose"];
    const deprecatedParams = {};
    const toastIncompatibleParams = ["allowOutsideClick", "allowEnterKey", "backdrop", "focusConfirm", "focusDeny", "focusCancel", "returnFocus", "heightAuto", "keydownListenerCapture"];
    const isValidParameter = (paramName) => {
      return Object.prototype.hasOwnProperty.call(defaultParams, paramName);
    };
    const isUpdatableParameter = (paramName) => {
      return updatableParams.indexOf(paramName) !== -1;
    };
    const isDeprecatedParameter = (paramName) => {
      return deprecatedParams[paramName];
    };
    const checkIfParamIsValid = (param) => {
      if (!isValidParameter(param)) {
        warn2('Unknown parameter "'.concat(param, '"'));
      }
    };
    const checkIfToastParamIsValid = (param) => {
      if (toastIncompatibleParams.includes(param)) {
        warn2('The parameter "'.concat(param, '" is incompatible with toasts'));
      }
    };
    const checkIfParamIsDeprecated = (param) => {
      if (isDeprecatedParameter(param)) {
        warnAboutDeprecation(param, isDeprecatedParameter(param));
      }
    };
    const showWarningsForParams = (params) => {
      if (!params.backdrop && params.allowOutsideClick) {
        warn2('"allowOutsideClick" parameter requires `backdrop` parameter to be set to `true`');
      }
      for (const param in params) {
        checkIfParamIsValid(param);
        if (params.toast) {
          checkIfToastParamIsValid(param);
        }
        checkIfParamIsDeprecated(param);
      }
    };
    const swalPrefix = "swal2-";
    const prefix = (items) => {
      const result = {};
      for (const i in items) {
        result[items[i]] = swalPrefix + items[i];
      }
      return result;
    };
    const swalClasses = prefix(["container", "shown", "height-auto", "iosfix", "popup", "modal", "no-backdrop", "no-transition", "toast", "toast-shown", "show", "hide", "close", "title", "html-container", "actions", "confirm", "deny", "cancel", "default-outline", "footer", "icon", "icon-content", "image", "input", "file", "range", "select", "radio", "checkbox", "label", "textarea", "inputerror", "input-label", "validation-message", "progress-steps", "active-progress-step", "progress-step", "progress-step-line", "loader", "loading", "styled", "top", "top-start", "top-end", "top-left", "top-right", "center", "center-start", "center-end", "center-left", "center-right", "bottom", "bottom-start", "bottom-end", "bottom-left", "bottom-right", "grow-row", "grow-column", "grow-fullscreen", "rtl", "timer-progress-bar", "timer-progress-bar-container", "scrollbar-measure", "icon-success", "icon-warning", "icon-info", "icon-question", "icon-error"]);
    const iconTypes = prefix(["success", "warning", "info", "question", "error"]);
    const getContainer = () => document.body.querySelector(".".concat(swalClasses.container));
    const elementBySelector = (selectorString) => {
      const container = getContainer();
      return container ? container.querySelector(selectorString) : null;
    };
    const elementByClass = (className) => {
      return elementBySelector(".".concat(className));
    };
    const getPopup = () => elementByClass(swalClasses.popup);
    const getIcon = () => elementByClass(swalClasses.icon);
    const getTitle = () => elementByClass(swalClasses.title);
    const getHtmlContainer = () => elementByClass(swalClasses["html-container"]);
    const getImage = () => elementByClass(swalClasses.image);
    const getProgressSteps = () => elementByClass(swalClasses["progress-steps"]);
    const getValidationMessage = () => elementByClass(swalClasses["validation-message"]);
    const getConfirmButton = () => elementBySelector(".".concat(swalClasses.actions, " .").concat(swalClasses.confirm));
    const getDenyButton = () => elementBySelector(".".concat(swalClasses.actions, " .").concat(swalClasses.deny));
    const getInputLabel = () => elementByClass(swalClasses["input-label"]);
    const getLoader = () => elementBySelector(".".concat(swalClasses.loader));
    const getCancelButton = () => elementBySelector(".".concat(swalClasses.actions, " .").concat(swalClasses.cancel));
    const getActions = () => elementByClass(swalClasses.actions);
    const getFooter = () => elementByClass(swalClasses.footer);
    const getTimerProgressBar = () => elementByClass(swalClasses["timer-progress-bar"]);
    const getCloseButton = () => elementByClass(swalClasses.close);
    const focusable = '\n  a[href],\n  area[href],\n  input:not([disabled]),\n  select:not([disabled]),\n  textarea:not([disabled]),\n  button:not([disabled]),\n  iframe,\n  object,\n  embed,\n  [tabindex="0"],\n  [contenteditable],\n  audio[controls],\n  video[controls],\n  summary\n';
    const getFocusableElements = () => {
      const focusableElementsWithTabindex = toArray2(getPopup().querySelectorAll('[tabindex]:not([tabindex="-1"]):not([tabindex="0"])')).sort((a, b) => {
        const tabindexA = parseInt(a.getAttribute("tabindex"));
        const tabindexB = parseInt(b.getAttribute("tabindex"));
        if (tabindexA > tabindexB) {
          return 1;
        } else if (tabindexA < tabindexB) {
          return -1;
        }
        return 0;
      });
      const otherFocusableElements = toArray2(getPopup().querySelectorAll(focusable)).filter((el) => el.getAttribute("tabindex") !== "-1");
      return uniqueArray(focusableElementsWithTabindex.concat(otherFocusableElements)).filter((el) => isVisible(el));
    };
    const isModal = () => {
      return !hasClass(document.body, swalClasses["toast-shown"]) && !hasClass(document.body, swalClasses["no-backdrop"]);
    };
    const isToast = () => {
      return getPopup() && hasClass(getPopup(), swalClasses.toast);
    };
    const isLoading = () => {
      return getPopup().hasAttribute("data-loading");
    };
    const states = {
      previousBodyPadding: null
    };
    const setInnerHtml = (elem, html2) => {
      elem.textContent = "";
      if (html2) {
        const parser = new DOMParser();
        const parsed = parser.parseFromString(html2, "text/html");
        toArray2(parsed.querySelector("head").childNodes).forEach((child) => {
          elem.appendChild(child);
        });
        toArray2(parsed.querySelector("body").childNodes).forEach((child) => {
          elem.appendChild(child);
        });
      }
    };
    const hasClass = (elem, className) => {
      if (!className) {
        return false;
      }
      const classList = className.split(/\s+/);
      for (let i = 0; i < classList.length; i++) {
        if (!elem.classList.contains(classList[i])) {
          return false;
        }
      }
      return true;
    };
    const removeCustomClasses = (elem, params) => {
      toArray2(elem.classList).forEach((className) => {
        if (!Object.values(swalClasses).includes(className) && !Object.values(iconTypes).includes(className) && !Object.values(params.showClass).includes(className)) {
          elem.classList.remove(className);
        }
      });
    };
    const applyCustomClass = (elem, params, className) => {
      removeCustomClasses(elem, params);
      if (params.customClass && params.customClass[className]) {
        if (typeof params.customClass[className] !== "string" && !params.customClass[className].forEach) {
          return warn2("Invalid type of customClass.".concat(className, '! Expected string or iterable object, got "').concat(typeof params.customClass[className], '"'));
        }
        addClass(elem, params.customClass[className]);
      }
    };
    const getInput = (popup, inputType) => {
      if (!inputType) {
        return null;
      }
      switch (inputType) {
        case "select":
        case "textarea":
        case "file":
          return popup.querySelector(".".concat(swalClasses.popup, " > .").concat(swalClasses[inputType]));
        case "checkbox":
          return popup.querySelector(".".concat(swalClasses.popup, " > .").concat(swalClasses.checkbox, " input"));
        case "radio":
          return popup.querySelector(".".concat(swalClasses.popup, " > .").concat(swalClasses.radio, " input:checked")) || popup.querySelector(".".concat(swalClasses.popup, " > .").concat(swalClasses.radio, " input:first-child"));
        case "range":
          return popup.querySelector(".".concat(swalClasses.popup, " > .").concat(swalClasses.range, " input"));
        default:
          return popup.querySelector(".".concat(swalClasses.popup, " > .").concat(swalClasses.input));
      }
    };
    const focusInput = (input2) => {
      input2.focus();
      if (input2.type !== "file") {
        const val = input2.value;
        input2.value = "";
        input2.value = val;
      }
    };
    const toggleClass = (target, classList, condition) => {
      if (!target || !classList) {
        return;
      }
      if (typeof classList === "string") {
        classList = classList.split(/\s+/).filter(Boolean);
      }
      classList.forEach((className) => {
        if (Array.isArray(target)) {
          target.forEach((elem) => {
            condition ? elem.classList.add(className) : elem.classList.remove(className);
          });
        } else {
          condition ? target.classList.add(className) : target.classList.remove(className);
        }
      });
    };
    const addClass = (target, classList) => {
      toggleClass(target, classList, true);
    };
    const removeClass = (target, classList) => {
      toggleClass(target, classList, false);
    };
    const getDirectChildByClass = (elem, className) => {
      const childNodes = toArray2(elem.childNodes);
      for (let i = 0; i < childNodes.length; i++) {
        if (hasClass(childNodes[i], className)) {
          return childNodes[i];
        }
      }
    };
    const applyNumericalStyle = (elem, property, value) => {
      if (value === "".concat(parseInt(value))) {
        value = parseInt(value);
      }
      if (value || parseInt(value) === 0) {
        elem.style[property] = typeof value === "number" ? "".concat(value, "px") : value;
      } else {
        elem.style.removeProperty(property);
      }
    };
    const show = function(elem) {
      let display = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "flex";
      elem.style.display = display;
    };
    const hide2 = (elem) => {
      elem.style.display = "none";
    };
    const setStyle2 = (parent, selector, property, value) => {
      const el = parent.querySelector(selector);
      if (el) {
        el.style[property] = value;
      }
    };
    const toggle = (elem, condition, display) => {
      condition ? show(elem, display) : hide2(elem);
    };
    const isVisible = (elem) => !!(elem && (elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length));
    const allButtonsAreHidden = () => !isVisible(getConfirmButton()) && !isVisible(getDenyButton()) && !isVisible(getCancelButton());
    const isScrollable = (elem) => !!(elem.scrollHeight > elem.clientHeight);
    const hasCssAnimation = (elem) => {
      const style = window.getComputedStyle(elem);
      const animDuration = parseFloat(style.getPropertyValue("animation-duration") || "0");
      const transDuration = parseFloat(style.getPropertyValue("transition-duration") || "0");
      return animDuration > 0 || transDuration > 0;
    };
    const animateTimerProgressBar = function(timer) {
      let reset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      const timerProgressBar = getTimerProgressBar();
      if (isVisible(timerProgressBar)) {
        if (reset) {
          timerProgressBar.style.transition = "none";
          timerProgressBar.style.width = "100%";
        }
        setTimeout(() => {
          timerProgressBar.style.transition = "width ".concat(timer / 1e3, "s linear");
          timerProgressBar.style.width = "0%";
        }, 10);
      }
    };
    const stopTimerProgressBar = () => {
      const timerProgressBar = getTimerProgressBar();
      const timerProgressBarWidth = parseInt(window.getComputedStyle(timerProgressBar).width);
      timerProgressBar.style.removeProperty("transition");
      timerProgressBar.style.width = "100%";
      const timerProgressBarFullWidth = parseInt(window.getComputedStyle(timerProgressBar).width);
      const timerProgressBarPercent = timerProgressBarWidth / timerProgressBarFullWidth * 100;
      timerProgressBar.style.removeProperty("transition");
      timerProgressBar.style.width = "".concat(timerProgressBarPercent, "%");
    };
    const isNodeEnv = () => typeof window === "undefined" || typeof document === "undefined";
    const RESTORE_FOCUS_TIMEOUT = 100;
    const globalState = {};
    const focusPreviousActiveElement = () => {
      if (globalState.previousActiveElement && globalState.previousActiveElement.focus) {
        globalState.previousActiveElement.focus();
        globalState.previousActiveElement = null;
      } else if (document.body) {
        document.body.focus();
      }
    };
    const restoreActiveElement = (returnFocus) => {
      return new Promise((resolve2) => {
        if (!returnFocus) {
          return resolve2();
        }
        const x = window.scrollX;
        const y = window.scrollY;
        globalState.restoreFocusTimeout = setTimeout(() => {
          focusPreviousActiveElement();
          resolve2();
        }, RESTORE_FOCUS_TIMEOUT);
        window.scrollTo(x, y);
      });
    };
    const sweetHTML = '\n <div aria-labelledby="'.concat(swalClasses.title, '" aria-describedby="').concat(swalClasses["html-container"], '" class="').concat(swalClasses.popup, '" tabindex="-1">\n   <button type="button" class="').concat(swalClasses.close, '"></button>\n   <ul class="').concat(swalClasses["progress-steps"], '"></ul>\n   <div class="').concat(swalClasses.icon, '"></div>\n   <img class="').concat(swalClasses.image, '" />\n   <h2 class="').concat(swalClasses.title, '" id="').concat(swalClasses.title, '"></h2>\n   <div class="').concat(swalClasses["html-container"], '" id="').concat(swalClasses["html-container"], '"></div>\n   <input class="').concat(swalClasses.input, '" />\n   <input type="file" class="').concat(swalClasses.file, '" />\n   <div class="').concat(swalClasses.range, '">\n     <input type="range" />\n     <output></output>\n   </div>\n   <select class="').concat(swalClasses.select, '"></select>\n   <div class="').concat(swalClasses.radio, '"></div>\n   <label for="').concat(swalClasses.checkbox, '" class="').concat(swalClasses.checkbox, '">\n     <input type="checkbox" />\n     <span class="').concat(swalClasses.label, '"></span>\n   </label>\n   <textarea class="').concat(swalClasses.textarea, '"></textarea>\n   <div class="').concat(swalClasses["validation-message"], '" id="').concat(swalClasses["validation-message"], '"></div>\n   <div class="').concat(swalClasses.actions, '">\n     <div class="').concat(swalClasses.loader, '"></div>\n     <button type="button" class="').concat(swalClasses.confirm, '"></button>\n     <button type="button" class="').concat(swalClasses.deny, '"></button>\n     <button type="button" class="').concat(swalClasses.cancel, '"></button>\n   </div>\n   <div class="').concat(swalClasses.footer, '"></div>\n   <div class="').concat(swalClasses["timer-progress-bar-container"], '">\n     <div class="').concat(swalClasses["timer-progress-bar"], '"></div>\n   </div>\n </div>\n').replace(/(^|\n)\s*/g, "");
    const resetOldContainer = () => {
      const oldContainer = getContainer();
      if (!oldContainer) {
        return false;
      }
      oldContainer.remove();
      removeClass([document.documentElement, document.body], [swalClasses["no-backdrop"], swalClasses["toast-shown"], swalClasses["has-column"]]);
      return true;
    };
    const resetValidationMessage = () => {
      globalState.currentInstance.resetValidationMessage();
    };
    const addInputChangeListeners = () => {
      const popup = getPopup();
      const input2 = getDirectChildByClass(popup, swalClasses.input);
      const file = getDirectChildByClass(popup, swalClasses.file);
      const range2 = popup.querySelector(".".concat(swalClasses.range, " input"));
      const rangeOutput = popup.querySelector(".".concat(swalClasses.range, " output"));
      const select2 = getDirectChildByClass(popup, swalClasses.select);
      const checkbox = popup.querySelector(".".concat(swalClasses.checkbox, " input"));
      const textarea2 = getDirectChildByClass(popup, swalClasses.textarea);
      input2.oninput = resetValidationMessage;
      file.onchange = resetValidationMessage;
      select2.onchange = resetValidationMessage;
      checkbox.onchange = resetValidationMessage;
      textarea2.oninput = resetValidationMessage;
      range2.oninput = () => {
        resetValidationMessage();
        rangeOutput.value = range2.value;
      };
      range2.onchange = () => {
        resetValidationMessage();
        range2.nextSibling.value = range2.value;
      };
    };
    const getTarget = (target) => typeof target === "string" ? document.querySelector(target) : target;
    const setupAccessibility = (params) => {
      const popup = getPopup();
      popup.setAttribute("role", params.toast ? "alert" : "dialog");
      popup.setAttribute("aria-live", params.toast ? "polite" : "assertive");
      if (!params.toast) {
        popup.setAttribute("aria-modal", "true");
      }
    };
    const setupRTL = (targetElement) => {
      if (window.getComputedStyle(targetElement).direction === "rtl") {
        addClass(getContainer(), swalClasses.rtl);
      }
    };
    const init2 = (params) => {
      const oldContainerExisted = resetOldContainer();
      if (isNodeEnv()) {
        error("SweetAlert2 requires document to initialize");
        return;
      }
      const container = document.createElement("div");
      container.className = swalClasses.container;
      if (oldContainerExisted) {
        addClass(container, swalClasses["no-transition"]);
      }
      setInnerHtml(container, sweetHTML);
      const targetElement = getTarget(params.target);
      targetElement.appendChild(container);
      setupAccessibility(params);
      setupRTL(targetElement);
      addInputChangeListeners();
    };
    const parseHtmlToContainer = (param, target) => {
      if (param instanceof HTMLElement) {
        target.appendChild(param);
      } else if (typeof param === "object") {
        handleObject(param, target);
      } else if (param) {
        setInnerHtml(target, param);
      }
    };
    const handleObject = (param, target) => {
      if (param.jquery) {
        handleJqueryElem(target, param);
      } else {
        setInnerHtml(target, param.toString());
      }
    };
    const handleJqueryElem = (target, elem) => {
      target.textContent = "";
      if (0 in elem) {
        for (let i = 0; i in elem; i++) {
          target.appendChild(elem[i].cloneNode(true));
        }
      } else {
        target.appendChild(elem.cloneNode(true));
      }
    };
    const animationEndEvent = (() => {
      if (isNodeEnv()) {
        return false;
      }
      const testEl = document.createElement("div");
      const transEndEventNames = {
        WebkitAnimation: "webkitAnimationEnd",
        animation: "animationend"
      };
      for (const i in transEndEventNames) {
        if (Object.prototype.hasOwnProperty.call(transEndEventNames, i) && typeof testEl.style[i] !== "undefined") {
          return transEndEventNames[i];
        }
      }
      return false;
    })();
    const measureScrollbar = () => {
      const scrollDiv = document.createElement("div");
      scrollDiv.className = swalClasses["scrollbar-measure"];
      document.body.appendChild(scrollDiv);
      const scrollbarWidth = scrollDiv.getBoundingClientRect().width - scrollDiv.clientWidth;
      document.body.removeChild(scrollDiv);
      return scrollbarWidth;
    };
    const renderActions = (instance, params) => {
      const actions = getActions();
      const loader = getLoader();
      if (!params.showConfirmButton && !params.showDenyButton && !params.showCancelButton) {
        hide2(actions);
      } else {
        show(actions);
      }
      applyCustomClass(actions, params, "actions");
      renderButtons(actions, loader, params);
      setInnerHtml(loader, params.loaderHtml);
      applyCustomClass(loader, params, "loader");
    };
    function renderButtons(actions, loader, params) {
      const confirmButton = getConfirmButton();
      const denyButton = getDenyButton();
      const cancelButton = getCancelButton();
      renderButton(confirmButton, "confirm", params);
      renderButton(denyButton, "deny", params);
      renderButton(cancelButton, "cancel", params);
      handleButtonsStyling(confirmButton, denyButton, cancelButton, params);
      if (params.reverseButtons) {
        if (params.toast) {
          actions.insertBefore(cancelButton, confirmButton);
          actions.insertBefore(denyButton, confirmButton);
        } else {
          actions.insertBefore(cancelButton, loader);
          actions.insertBefore(denyButton, loader);
          actions.insertBefore(confirmButton, loader);
        }
      }
    }
    function handleButtonsStyling(confirmButton, denyButton, cancelButton, params) {
      if (!params.buttonsStyling) {
        return removeClass([confirmButton, denyButton, cancelButton], swalClasses.styled);
      }
      addClass([confirmButton, denyButton, cancelButton], swalClasses.styled);
      if (params.confirmButtonColor) {
        confirmButton.style.backgroundColor = params.confirmButtonColor;
        addClass(confirmButton, swalClasses["default-outline"]);
      }
      if (params.denyButtonColor) {
        denyButton.style.backgroundColor = params.denyButtonColor;
        addClass(denyButton, swalClasses["default-outline"]);
      }
      if (params.cancelButtonColor) {
        cancelButton.style.backgroundColor = params.cancelButtonColor;
        addClass(cancelButton, swalClasses["default-outline"]);
      }
    }
    function renderButton(button, buttonType, params) {
      toggle(button, params["show".concat(capitalizeFirstLetter(buttonType), "Button")], "inline-block");
      setInnerHtml(button, params["".concat(buttonType, "ButtonText")]);
      button.setAttribute("aria-label", params["".concat(buttonType, "ButtonAriaLabel")]);
      button.className = swalClasses[buttonType];
      applyCustomClass(button, params, "".concat(buttonType, "Button"));
      addClass(button, params["".concat(buttonType, "ButtonClass")]);
    }
    function handleBackdropParam(container, backdrop) {
      if (typeof backdrop === "string") {
        container.style.background = backdrop;
      } else if (!backdrop) {
        addClass([document.documentElement, document.body], swalClasses["no-backdrop"]);
      }
    }
    function handlePositionParam(container, position) {
      if (position in swalClasses) {
        addClass(container, swalClasses[position]);
      } else {
        warn2('The "position" parameter is not valid, defaulting to "center"');
        addClass(container, swalClasses.center);
      }
    }
    function handleGrowParam(container, grow) {
      if (grow && typeof grow === "string") {
        const growClass = "grow-".concat(grow);
        if (growClass in swalClasses) {
          addClass(container, swalClasses[growClass]);
        }
      }
    }
    const renderContainer = (instance, params) => {
      const container = getContainer();
      if (!container) {
        return;
      }
      handleBackdropParam(container, params.backdrop);
      handlePositionParam(container, params.position);
      handleGrowParam(container, params.grow);
      applyCustomClass(container, params, "container");
    };
    var privateProps = {
      awaitingPromise: /* @__PURE__ */ new WeakMap(),
      promise: /* @__PURE__ */ new WeakMap(),
      innerParams: /* @__PURE__ */ new WeakMap(),
      domCache: /* @__PURE__ */ new WeakMap()
    };
    const inputTypes = ["input", "file", "range", "select", "radio", "checkbox", "textarea"];
    const renderInput = (instance, params) => {
      const popup = getPopup();
      const innerParams = privateProps.innerParams.get(instance);
      const rerender = !innerParams || params.input !== innerParams.input;
      inputTypes.forEach((inputType) => {
        const inputClass = swalClasses[inputType];
        const inputContainer = getDirectChildByClass(popup, inputClass);
        setAttributes(inputType, params.inputAttributes);
        inputContainer.className = inputClass;
        if (rerender) {
          hide2(inputContainer);
        }
      });
      if (params.input) {
        if (rerender) {
          showInput(params);
        }
        setCustomClass(params);
      }
    };
    const showInput = (params) => {
      if (!renderInputType[params.input]) {
        return error('Unexpected type of input! Expected "text", "email", "password", "number", "tel", "select", "radio", "checkbox", "textarea", "file" or "url", got "'.concat(params.input, '"'));
      }
      const inputContainer = getInputContainer(params.input);
      const input2 = renderInputType[params.input](inputContainer, params);
      show(input2);
      setTimeout(() => {
        focusInput(input2);
      });
    };
    const removeAttributes = (input2) => {
      for (let i = 0; i < input2.attributes.length; i++) {
        const attrName = input2.attributes[i].name;
        if (!["type", "value", "style"].includes(attrName)) {
          input2.removeAttribute(attrName);
        }
      }
    };
    const setAttributes = (inputType, inputAttributes) => {
      const input2 = getInput(getPopup(), inputType);
      if (!input2) {
        return;
      }
      removeAttributes(input2);
      for (const attr in inputAttributes) {
        input2.setAttribute(attr, inputAttributes[attr]);
      }
    };
    const setCustomClass = (params) => {
      const inputContainer = getInputContainer(params.input);
      if (params.customClass) {
        addClass(inputContainer, params.customClass.input);
      }
    };
    const setInputPlaceholder = (input2, params) => {
      if (!input2.placeholder || params.inputPlaceholder) {
        input2.placeholder = params.inputPlaceholder;
      }
    };
    const setInputLabel = (input2, prependTo, params) => {
      if (params.inputLabel) {
        input2.id = swalClasses.input;
        const label = document.createElement("label");
        const labelClass = swalClasses["input-label"];
        label.setAttribute("for", input2.id);
        label.className = labelClass;
        addClass(label, params.customClass.inputLabel);
        label.innerText = params.inputLabel;
        prependTo.insertAdjacentElement("beforebegin", label);
      }
    };
    const getInputContainer = (inputType) => {
      const inputClass = swalClasses[inputType] ? swalClasses[inputType] : swalClasses.input;
      return getDirectChildByClass(getPopup(), inputClass);
    };
    const renderInputType = {};
    renderInputType.text = renderInputType.email = renderInputType.password = renderInputType.number = renderInputType.tel = renderInputType.url = (input2, params) => {
      if (typeof params.inputValue === "string" || typeof params.inputValue === "number") {
        input2.value = params.inputValue;
      } else if (!isPromise2(params.inputValue)) {
        warn2('Unexpected type of inputValue! Expected "string", "number" or "Promise", got "'.concat(typeof params.inputValue, '"'));
      }
      setInputLabel(input2, input2, params);
      setInputPlaceholder(input2, params);
      input2.type = params.input;
      return input2;
    };
    renderInputType.file = (input2, params) => {
      setInputLabel(input2, input2, params);
      setInputPlaceholder(input2, params);
      return input2;
    };
    renderInputType.range = (range2, params) => {
      const rangeInput = range2.querySelector("input");
      const rangeOutput = range2.querySelector("output");
      rangeInput.value = params.inputValue;
      rangeInput.type = params.input;
      rangeOutput.value = params.inputValue;
      setInputLabel(rangeInput, range2, params);
      return range2;
    };
    renderInputType.select = (select2, params) => {
      select2.textContent = "";
      if (params.inputPlaceholder) {
        const placeholder = document.createElement("option");
        setInnerHtml(placeholder, params.inputPlaceholder);
        placeholder.value = "";
        placeholder.disabled = true;
        placeholder.selected = true;
        select2.appendChild(placeholder);
      }
      setInputLabel(select2, select2, params);
      return select2;
    };
    renderInputType.radio = (radio) => {
      radio.textContent = "";
      return radio;
    };
    renderInputType.checkbox = (checkboxContainer, params) => {
      const checkbox = getInput(getPopup(), "checkbox");
      checkbox.value = "1";
      checkbox.id = swalClasses.checkbox;
      checkbox.checked = Boolean(params.inputValue);
      const label = checkboxContainer.querySelector("span");
      setInnerHtml(label, params.inputPlaceholder);
      return checkboxContainer;
    };
    renderInputType.textarea = (textarea2, params) => {
      textarea2.value = params.inputValue;
      setInputPlaceholder(textarea2, params);
      setInputLabel(textarea2, textarea2, params);
      const getMargin = (el) => parseInt(window.getComputedStyle(el).marginLeft) + parseInt(window.getComputedStyle(el).marginRight);
      setTimeout(() => {
        if ("MutationObserver" in window) {
          const initialPopupWidth = parseInt(window.getComputedStyle(getPopup()).width);
          const textareaResizeHandler = () => {
            const textareaWidth = textarea2.offsetWidth + getMargin(textarea2);
            if (textareaWidth > initialPopupWidth) {
              getPopup().style.width = "".concat(textareaWidth, "px");
            } else {
              getPopup().style.width = null;
            }
          };
          new MutationObserver(textareaResizeHandler).observe(textarea2, {
            attributes: true,
            attributeFilter: ["style"]
          });
        }
      });
      return textarea2;
    };
    const renderContent = (instance, params) => {
      const htmlContainer = getHtmlContainer();
      applyCustomClass(htmlContainer, params, "htmlContainer");
      if (params.html) {
        parseHtmlToContainer(params.html, htmlContainer);
        show(htmlContainer, "block");
      } else if (params.text) {
        htmlContainer.textContent = params.text;
        show(htmlContainer, "block");
      } else {
        hide2(htmlContainer);
      }
      renderInput(instance, params);
    };
    const renderFooter = (instance, params) => {
      const footer = getFooter();
      toggle(footer, params.footer);
      if (params.footer) {
        parseHtmlToContainer(params.footer, footer);
      }
      applyCustomClass(footer, params, "footer");
    };
    const renderCloseButton = (instance, params) => {
      const closeButton = getCloseButton();
      setInnerHtml(closeButton, params.closeButtonHtml);
      applyCustomClass(closeButton, params, "closeButton");
      toggle(closeButton, params.showCloseButton);
      closeButton.setAttribute("aria-label", params.closeButtonAriaLabel);
    };
    const renderIcon = (instance, params) => {
      const innerParams = privateProps.innerParams.get(instance);
      const icon = getIcon();
      if (innerParams && params.icon === innerParams.icon) {
        setContent(icon, params);
        applyStyles2(icon, params);
        return;
      }
      if (!params.icon && !params.iconHtml) {
        return hide2(icon);
      }
      if (params.icon && Object.keys(iconTypes).indexOf(params.icon) === -1) {
        error('Unknown icon! Expected "success", "error", "warning", "info" or "question", got "'.concat(params.icon, '"'));
        return hide2(icon);
      }
      show(icon);
      setContent(icon, params);
      applyStyles2(icon, params);
      addClass(icon, params.showClass.icon);
    };
    const applyStyles2 = (icon, params) => {
      for (const iconType in iconTypes) {
        if (params.icon !== iconType) {
          removeClass(icon, iconTypes[iconType]);
        }
      }
      addClass(icon, iconTypes[params.icon]);
      setColor(icon, params);
      adjustSuccessIconBackgroundColor();
      applyCustomClass(icon, params, "icon");
    };
    const adjustSuccessIconBackgroundColor = () => {
      const popup = getPopup();
      const popupBackgroundColor = window.getComputedStyle(popup).getPropertyValue("background-color");
      const successIconParts = popup.querySelectorAll("[class^=swal2-success-circular-line], .swal2-success-fix");
      for (let i = 0; i < successIconParts.length; i++) {
        successIconParts[i].style.backgroundColor = popupBackgroundColor;
      }
    };
    const successIconHtml = '\n  <div class="swal2-success-circular-line-left"></div>\n  <span class="swal2-success-line-tip"></span> <span class="swal2-success-line-long"></span>\n  <div class="swal2-success-ring"></div> <div class="swal2-success-fix"></div>\n  <div class="swal2-success-circular-line-right"></div>\n';
    const errorIconHtml = '\n  <span class="swal2-x-mark">\n    <span class="swal2-x-mark-line-left"></span>\n    <span class="swal2-x-mark-line-right"></span>\n  </span>\n';
    const setContent = (icon, params) => {
      icon.textContent = "";
      if (params.iconHtml) {
        setInnerHtml(icon, iconContent(params.iconHtml));
      } else if (params.icon === "success") {
        setInnerHtml(icon, successIconHtml);
      } else if (params.icon === "error") {
        setInnerHtml(icon, errorIconHtml);
      } else {
        const defaultIconHtml = {
          question: "?",
          warning: "!",
          info: "i"
        };
        setInnerHtml(icon, iconContent(defaultIconHtml[params.icon]));
      }
    };
    const setColor = (icon, params) => {
      if (!params.iconColor) {
        return;
      }
      icon.style.color = params.iconColor;
      icon.style.borderColor = params.iconColor;
      for (const sel of [".swal2-success-line-tip", ".swal2-success-line-long", ".swal2-x-mark-line-left", ".swal2-x-mark-line-right"]) {
        setStyle2(icon, sel, "backgroundColor", params.iconColor);
      }
      setStyle2(icon, ".swal2-success-ring", "borderColor", params.iconColor);
    };
    const iconContent = (content) => '<div class="'.concat(swalClasses["icon-content"], '">').concat(content, "</div>");
    const renderImage = (instance, params) => {
      const image2 = getImage();
      if (!params.imageUrl) {
        return hide2(image2);
      }
      show(image2, "");
      image2.setAttribute("src", params.imageUrl);
      image2.setAttribute("alt", params.imageAlt);
      applyNumericalStyle(image2, "width", params.imageWidth);
      applyNumericalStyle(image2, "height", params.imageHeight);
      image2.className = swalClasses.image;
      applyCustomClass(image2, params, "image");
    };
    const createStepElement = (step) => {
      const stepEl = document.createElement("li");
      addClass(stepEl, swalClasses["progress-step"]);
      setInnerHtml(stepEl, step);
      return stepEl;
    };
    const createLineElement = (params) => {
      const lineEl = document.createElement("li");
      addClass(lineEl, swalClasses["progress-step-line"]);
      if (params.progressStepsDistance) {
        lineEl.style.width = params.progressStepsDistance;
      }
      return lineEl;
    };
    const renderProgressSteps = (instance, params) => {
      const progressStepsContainer = getProgressSteps();
      if (!params.progressSteps || params.progressSteps.length === 0) {
        return hide2(progressStepsContainer);
      }
      show(progressStepsContainer);
      progressStepsContainer.textContent = "";
      if (params.currentProgressStep >= params.progressSteps.length) {
        warn2("Invalid currentProgressStep parameter, it should be less than progressSteps.length (currentProgressStep like JS arrays starts from 0)");
      }
      params.progressSteps.forEach((step, index2) => {
        const stepEl = createStepElement(step);
        progressStepsContainer.appendChild(stepEl);
        if (index2 === params.currentProgressStep) {
          addClass(stepEl, swalClasses["active-progress-step"]);
        }
        if (index2 !== params.progressSteps.length - 1) {
          const lineEl = createLineElement(params);
          progressStepsContainer.appendChild(lineEl);
        }
      });
    };
    const renderTitle = (instance, params) => {
      const title = getTitle();
      toggle(title, params.title || params.titleText, "block");
      if (params.title) {
        parseHtmlToContainer(params.title, title);
      }
      if (params.titleText) {
        title.innerText = params.titleText;
      }
      applyCustomClass(title, params, "title");
    };
    const renderPopup = (instance, params) => {
      const container = getContainer();
      const popup = getPopup();
      if (params.toast) {
        applyNumericalStyle(container, "width", params.width);
        popup.style.width = "100%";
        popup.insertBefore(getLoader(), getIcon());
      } else {
        applyNumericalStyle(popup, "width", params.width);
      }
      applyNumericalStyle(popup, "padding", params.padding);
      if (params.color) {
        popup.style.color = params.color;
      }
      if (params.background) {
        popup.style.background = params.background;
      }
      hide2(getValidationMessage());
      addClasses(popup, params);
    };
    const addClasses = (popup, params) => {
      popup.className = "".concat(swalClasses.popup, " ").concat(isVisible(popup) ? params.showClass.popup : "");
      if (params.toast) {
        addClass([document.documentElement, document.body], swalClasses["toast-shown"]);
        addClass(popup, swalClasses.toast);
      } else {
        addClass(popup, swalClasses.modal);
      }
      applyCustomClass(popup, params, "popup");
      if (typeof params.customClass === "string") {
        addClass(popup, params.customClass);
      }
      if (params.icon) {
        addClass(popup, swalClasses["icon-".concat(params.icon)]);
      }
    };
    const render = (instance, params) => {
      renderPopup(instance, params);
      renderContainer(instance, params);
      renderProgressSteps(instance, params);
      renderIcon(instance, params);
      renderImage(instance, params);
      renderTitle(instance, params);
      renderCloseButton(instance, params);
      renderContent(instance, params);
      renderActions(instance, params);
      renderFooter(instance, params);
      if (typeof params.didRender === "function") {
        params.didRender(getPopup());
      }
    };
    const DismissReason = Object.freeze({
      cancel: "cancel",
      backdrop: "backdrop",
      close: "close",
      esc: "esc",
      timer: "timer"
    });
    const setAriaHidden = () => {
      const bodyChildren = toArray2(document.body.children);
      bodyChildren.forEach((el) => {
        if (el === getContainer() || el.contains(getContainer())) {
          return;
        }
        if (el.hasAttribute("aria-hidden")) {
          el.setAttribute("data-previous-aria-hidden", el.getAttribute("aria-hidden"));
        }
        el.setAttribute("aria-hidden", "true");
      });
    };
    const unsetAriaHidden = () => {
      const bodyChildren = toArray2(document.body.children);
      bodyChildren.forEach((el) => {
        if (el.hasAttribute("data-previous-aria-hidden")) {
          el.setAttribute("aria-hidden", el.getAttribute("data-previous-aria-hidden"));
          el.removeAttribute("data-previous-aria-hidden");
        } else {
          el.removeAttribute("aria-hidden");
        }
      });
    };
    const swalStringParams = ["swal-title", "swal-html", "swal-footer"];
    const getTemplateParams = (params) => {
      const template = typeof params.template === "string" ? document.querySelector(params.template) : params.template;
      if (!template) {
        return {};
      }
      const templateContent = template.content;
      showWarningsForElements(templateContent);
      const result = Object.assign(getSwalParams(templateContent), getSwalButtons(templateContent), getSwalImage(templateContent), getSwalIcon(templateContent), getSwalInput(templateContent), getSwalStringParams(templateContent, swalStringParams));
      return result;
    };
    const getSwalParams = (templateContent) => {
      const result = {};
      toArray2(templateContent.querySelectorAll("swal-param")).forEach((param) => {
        showWarningsForAttributes(param, ["name", "value"]);
        const paramName = param.getAttribute("name");
        const value = param.getAttribute("value");
        if (typeof defaultParams[paramName] === "boolean" && value === "false") {
          result[paramName] = false;
        }
        if (typeof defaultParams[paramName] === "object") {
          result[paramName] = JSON.parse(value);
        }
      });
      return result;
    };
    const getSwalButtons = (templateContent) => {
      const result = {};
      toArray2(templateContent.querySelectorAll("swal-button")).forEach((button) => {
        showWarningsForAttributes(button, ["type", "color", "aria-label"]);
        const type = button.getAttribute("type");
        result["".concat(type, "ButtonText")] = button.innerHTML;
        result["show".concat(capitalizeFirstLetter(type), "Button")] = true;
        if (button.hasAttribute("color")) {
          result["".concat(type, "ButtonColor")] = button.getAttribute("color");
        }
        if (button.hasAttribute("aria-label")) {
          result["".concat(type, "ButtonAriaLabel")] = button.getAttribute("aria-label");
        }
      });
      return result;
    };
    const getSwalImage = (templateContent) => {
      const result = {};
      const image2 = templateContent.querySelector("swal-image");
      if (image2) {
        showWarningsForAttributes(image2, ["src", "width", "height", "alt"]);
        if (image2.hasAttribute("src")) {
          result.imageUrl = image2.getAttribute("src");
        }
        if (image2.hasAttribute("width")) {
          result.imageWidth = image2.getAttribute("width");
        }
        if (image2.hasAttribute("height")) {
          result.imageHeight = image2.getAttribute("height");
        }
        if (image2.hasAttribute("alt")) {
          result.imageAlt = image2.getAttribute("alt");
        }
      }
      return result;
    };
    const getSwalIcon = (templateContent) => {
      const result = {};
      const icon = templateContent.querySelector("swal-icon");
      if (icon) {
        showWarningsForAttributes(icon, ["type", "color"]);
        if (icon.hasAttribute("type")) {
          result.icon = icon.getAttribute("type");
        }
        if (icon.hasAttribute("color")) {
          result.iconColor = icon.getAttribute("color");
        }
        result.iconHtml = icon.innerHTML;
      }
      return result;
    };
    const getSwalInput = (templateContent) => {
      const result = {};
      const input2 = templateContent.querySelector("swal-input");
      if (input2) {
        showWarningsForAttributes(input2, ["type", "label", "placeholder", "value"]);
        result.input = input2.getAttribute("type") || "text";
        if (input2.hasAttribute("label")) {
          result.inputLabel = input2.getAttribute("label");
        }
        if (input2.hasAttribute("placeholder")) {
          result.inputPlaceholder = input2.getAttribute("placeholder");
        }
        if (input2.hasAttribute("value")) {
          result.inputValue = input2.getAttribute("value");
        }
      }
      const inputOptions = templateContent.querySelectorAll("swal-input-option");
      if (inputOptions.length) {
        result.inputOptions = {};
        toArray2(inputOptions).forEach((option) => {
          showWarningsForAttributes(option, ["value"]);
          const optionValue = option.getAttribute("value");
          const optionName = option.innerHTML;
          result.inputOptions[optionValue] = optionName;
        });
      }
      return result;
    };
    const getSwalStringParams = (templateContent, paramNames) => {
      const result = {};
      for (const i in paramNames) {
        const paramName = paramNames[i];
        const tag = templateContent.querySelector(paramName);
        if (tag) {
          showWarningsForAttributes(tag, []);
          result[paramName.replace(/^swal-/, "")] = tag.innerHTML.trim();
        }
      }
      return result;
    };
    const showWarningsForElements = (templateContent) => {
      const allowedElements = swalStringParams.concat(["swal-param", "swal-button", "swal-image", "swal-icon", "swal-input", "swal-input-option"]);
      toArray2(templateContent.children).forEach((el) => {
        const tagName = el.tagName.toLowerCase();
        if (allowedElements.indexOf(tagName) === -1) {
          warn2("Unrecognized element <".concat(tagName, ">"));
        }
      });
    };
    const showWarningsForAttributes = (el, allowedAttributes) => {
      toArray2(el.attributes).forEach((attribute) => {
        if (allowedAttributes.indexOf(attribute.name) === -1) {
          warn2(['Unrecognized attribute "'.concat(attribute.name, '" on <').concat(el.tagName.toLowerCase(), ">."), "".concat(allowedAttributes.length ? "Allowed attributes are: ".concat(allowedAttributes.join(", ")) : "To set the value, use HTML within the element.")]);
        }
      });
    };
    var defaultInputValidators = {
      email: (string2, validationMessage) => {
        return /^[a-zA-Z0-9.+_-]+@[a-zA-Z0-9.-]+\.[a-zA-Z0-9-]{2,24}$/.test(string2) ? Promise.resolve() : Promise.resolve(validationMessage || "Invalid email address");
      },
      url: (string2, validationMessage) => {
        return /^https?:\/\/(www\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\.[a-z]{2,63}\b([-a-zA-Z0-9@:%_+.~#?&/=]*)$/.test(string2) ? Promise.resolve() : Promise.resolve(validationMessage || "Invalid URL");
      }
    };
    function setDefaultInputValidators(params) {
      if (!params.inputValidator) {
        Object.keys(defaultInputValidators).forEach((key) => {
          if (params.input === key) {
            params.inputValidator = defaultInputValidators[key];
          }
        });
      }
    }
    function validateCustomTargetElement(params) {
      if (!params.target || typeof params.target === "string" && !document.querySelector(params.target) || typeof params.target !== "string" && !params.target.appendChild) {
        warn2('Target parameter is not valid, defaulting to "body"');
        params.target = "body";
      }
    }
    function setParameters(params) {
      setDefaultInputValidators(params);
      if (params.showLoaderOnConfirm && !params.preConfirm) {
        warn2("showLoaderOnConfirm is set to true, but preConfirm is not defined.\nshowLoaderOnConfirm should be used together with preConfirm, see usage example:\nhttps://sweetalert2.github.io/#ajax-request");
      }
      validateCustomTargetElement(params);
      if (typeof params.title === "string") {
        params.title = params.title.split("\n").join("<br />");
      }
      init2(params);
    }
    class Timer2 {
      constructor(callback, delay) {
        this.callback = callback;
        this.remaining = delay;
        this.running = false;
        this.start();
      }
      start() {
        if (!this.running) {
          this.running = true;
          this.started = /* @__PURE__ */ new Date();
          this.id = setTimeout(this.callback, this.remaining);
        }
        return this.remaining;
      }
      stop() {
        if (this.running) {
          this.running = false;
          clearTimeout(this.id);
          this.remaining -= (/* @__PURE__ */ new Date()).getTime() - this.started.getTime();
        }
        return this.remaining;
      }
      increase(n) {
        const running = this.running;
        if (running) {
          this.stop();
        }
        this.remaining += n;
        if (running) {
          this.start();
        }
        return this.remaining;
      }
      getTimerLeft() {
        if (this.running) {
          this.stop();
          this.start();
        }
        return this.remaining;
      }
      isRunning() {
        return this.running;
      }
    }
    const fixScrollbar = () => {
      if (states.previousBodyPadding !== null) {
        return;
      }
      if (document.body.scrollHeight > window.innerHeight) {
        states.previousBodyPadding = parseInt(window.getComputedStyle(document.body).getPropertyValue("padding-right"));
        document.body.style.paddingRight = "".concat(states.previousBodyPadding + measureScrollbar(), "px");
      }
    };
    const undoScrollbar = () => {
      if (states.previousBodyPadding !== null) {
        document.body.style.paddingRight = "".concat(states.previousBodyPadding, "px");
        states.previousBodyPadding = null;
      }
    };
    const iOSfix = () => {
      const iOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream || navigator.platform === "MacIntel" && navigator.maxTouchPoints > 1;
      if (iOS && !hasClass(document.body, swalClasses.iosfix)) {
        const offset2 = document.body.scrollTop;
        document.body.style.top = "".concat(offset2 * -1, "px");
        addClass(document.body, swalClasses.iosfix);
        lockBodyScroll();
        addBottomPaddingForTallPopups();
      }
    };
    const addBottomPaddingForTallPopups = () => {
      const ua = navigator.userAgent;
      const iOS = !!ua.match(/iPad/i) || !!ua.match(/iPhone/i);
      const webkit = !!ua.match(/WebKit/i);
      const iOSSafari = iOS && webkit && !ua.match(/CriOS/i);
      if (iOSSafari) {
        const bottomPanelHeight = 44;
        if (getPopup().scrollHeight > window.innerHeight - bottomPanelHeight) {
          getContainer().style.paddingBottom = "".concat(bottomPanelHeight, "px");
        }
      }
    };
    const lockBodyScroll = () => {
      const container = getContainer();
      let preventTouchMove;
      container.ontouchstart = (e) => {
        preventTouchMove = shouldPreventTouchMove(e);
      };
      container.ontouchmove = (e) => {
        if (preventTouchMove) {
          e.preventDefault();
          e.stopPropagation();
        }
      };
    };
    const shouldPreventTouchMove = (event) => {
      const target = event.target;
      const container = getContainer();
      if (isStylus(event) || isZoom(event)) {
        return false;
      }
      if (target === container) {
        return true;
      }
      if (!isScrollable(container) && target.tagName !== "INPUT" && target.tagName !== "TEXTAREA" && !(isScrollable(getHtmlContainer()) && getHtmlContainer().contains(target))) {
        return true;
      }
      return false;
    };
    const isStylus = (event) => {
      return event.touches && event.touches.length && event.touches[0].touchType === "stylus";
    };
    const isZoom = (event) => {
      return event.touches && event.touches.length > 1;
    };
    const undoIOSfix = () => {
      if (hasClass(document.body, swalClasses.iosfix)) {
        const offset2 = parseInt(document.body.style.top, 10);
        removeClass(document.body, swalClasses.iosfix);
        document.body.style.top = "";
        document.body.scrollTop = offset2 * -1;
      }
    };
    const SHOW_CLASS_TIMEOUT = 10;
    const openPopup = (params) => {
      const container = getContainer();
      const popup = getPopup();
      if (typeof params.willOpen === "function") {
        params.willOpen(popup);
      }
      const bodyStyles = window.getComputedStyle(document.body);
      const initialBodyOverflow = bodyStyles.overflowY;
      addClasses$1(container, popup, params);
      setTimeout(() => {
        setScrollingVisibility(container, popup);
      }, SHOW_CLASS_TIMEOUT);
      if (isModal()) {
        fixScrollContainer(container, params.scrollbarPadding, initialBodyOverflow);
        setAriaHidden();
      }
      if (!isToast() && !globalState.previousActiveElement) {
        globalState.previousActiveElement = document.activeElement;
      }
      if (typeof params.didOpen === "function") {
        setTimeout(() => params.didOpen(popup));
      }
      removeClass(container, swalClasses["no-transition"]);
    };
    const swalOpenAnimationFinished = (event) => {
      const popup = getPopup();
      if (event.target !== popup) {
        return;
      }
      const container = getContainer();
      popup.removeEventListener(animationEndEvent, swalOpenAnimationFinished);
      container.style.overflowY = "auto";
    };
    const setScrollingVisibility = (container, popup) => {
      if (animationEndEvent && hasCssAnimation(popup)) {
        container.style.overflowY = "hidden";
        popup.addEventListener(animationEndEvent, swalOpenAnimationFinished);
      } else {
        container.style.overflowY = "auto";
      }
    };
    const fixScrollContainer = (container, scrollbarPadding, initialBodyOverflow) => {
      iOSfix();
      if (scrollbarPadding && initialBodyOverflow !== "hidden") {
        fixScrollbar();
      }
      setTimeout(() => {
        container.scrollTop = 0;
      });
    };
    const addClasses$1 = (container, popup, params) => {
      addClass(container, params.showClass.backdrop);
      popup.style.setProperty("opacity", "0", "important");
      show(popup, "grid");
      setTimeout(() => {
        addClass(popup, params.showClass.popup);
        popup.style.removeProperty("opacity");
      }, SHOW_CLASS_TIMEOUT);
      addClass([document.documentElement, document.body], swalClasses.shown);
      if (params.heightAuto && params.backdrop && !params.toast) {
        addClass([document.documentElement, document.body], swalClasses["height-auto"]);
      }
    };
    const showLoading = (buttonToReplace) => {
      let popup = getPopup();
      if (!popup) {
        new Swal2();
      }
      popup = getPopup();
      const loader = getLoader();
      if (isToast()) {
        hide2(getIcon());
      } else {
        replaceButton(popup, buttonToReplace);
      }
      show(loader);
      popup.setAttribute("data-loading", true);
      popup.setAttribute("aria-busy", true);
      popup.focus();
    };
    const replaceButton = (popup, buttonToReplace) => {
      const actions = getActions();
      const loader = getLoader();
      if (!buttonToReplace && isVisible(getConfirmButton())) {
        buttonToReplace = getConfirmButton();
      }
      show(actions);
      if (buttonToReplace) {
        hide2(buttonToReplace);
        loader.setAttribute("data-button-to-replace", buttonToReplace.className);
      }
      loader.parentNode.insertBefore(loader, buttonToReplace);
      addClass([popup, actions], swalClasses.loading);
    };
    const handleInputOptionsAndValue = (instance, params) => {
      if (params.input === "select" || params.input === "radio") {
        handleInputOptions(instance, params);
      } else if (["text", "email", "number", "tel", "textarea"].includes(params.input) && (hasToPromiseFn(params.inputValue) || isPromise2(params.inputValue))) {
        showLoading(getConfirmButton());
        handleInputValue(instance, params);
      }
    };
    const getInputValue = (instance, innerParams) => {
      const input2 = instance.getInput();
      if (!input2) {
        return null;
      }
      switch (innerParams.input) {
        case "checkbox":
          return getCheckboxValue2(input2);
        case "radio":
          return getRadioValue(input2);
        case "file":
          return getFileValue(input2);
        default:
          return innerParams.inputAutoTrim ? input2.value.trim() : input2.value;
      }
    };
    const getCheckboxValue2 = (input2) => input2.checked ? 1 : 0;
    const getRadioValue = (input2) => input2.checked ? input2.value : null;
    const getFileValue = (input2) => input2.files.length ? input2.getAttribute("multiple") !== null ? input2.files : input2.files[0] : null;
    const handleInputOptions = (instance, params) => {
      const popup = getPopup();
      const processInputOptions = (inputOptions) => populateInputOptions[params.input](popup, formatInputOptions(inputOptions), params);
      if (hasToPromiseFn(params.inputOptions) || isPromise2(params.inputOptions)) {
        showLoading(getConfirmButton());
        asPromise(params.inputOptions).then((inputOptions) => {
          instance.hideLoading();
          processInputOptions(inputOptions);
        });
      } else if (typeof params.inputOptions === "object") {
        processInputOptions(params.inputOptions);
      } else {
        error("Unexpected type of inputOptions! Expected object, Map or Promise, got ".concat(typeof params.inputOptions));
      }
    };
    const handleInputValue = (instance, params) => {
      const input2 = instance.getInput();
      hide2(input2);
      asPromise(params.inputValue).then((inputValue) => {
        input2.value = params.input === "number" ? parseFloat(inputValue) || 0 : "".concat(inputValue);
        show(input2);
        input2.focus();
        instance.hideLoading();
      }).catch((err) => {
        error("Error in inputValue promise: ".concat(err));
        input2.value = "";
        show(input2);
        input2.focus();
        instance.hideLoading();
      });
    };
    const populateInputOptions = {
      select: (popup, inputOptions, params) => {
        const select2 = getDirectChildByClass(popup, swalClasses.select);
        const renderOption = (parent, optionLabel, optionValue) => {
          const option = document.createElement("option");
          option.value = optionValue;
          setInnerHtml(option, optionLabel);
          option.selected = isSelected(optionValue, params.inputValue);
          parent.appendChild(option);
        };
        inputOptions.forEach((inputOption) => {
          const optionValue = inputOption[0];
          const optionLabel = inputOption[1];
          if (Array.isArray(optionLabel)) {
            const optgroup = document.createElement("optgroup");
            optgroup.label = optionValue;
            optgroup.disabled = false;
            select2.appendChild(optgroup);
            optionLabel.forEach((o) => renderOption(optgroup, o[1], o[0]));
          } else {
            renderOption(select2, optionLabel, optionValue);
          }
        });
        select2.focus();
      },
      radio: (popup, inputOptions, params) => {
        const radio = getDirectChildByClass(popup, swalClasses.radio);
        inputOptions.forEach((inputOption) => {
          const radioValue = inputOption[0];
          const radioLabel = inputOption[1];
          const radioInput = document.createElement("input");
          const radioLabelElement = document.createElement("label");
          radioInput.type = "radio";
          radioInput.name = swalClasses.radio;
          radioInput.value = radioValue;
          if (isSelected(radioValue, params.inputValue)) {
            radioInput.checked = true;
          }
          const label = document.createElement("span");
          setInnerHtml(label, radioLabel);
          label.className = swalClasses.label;
          radioLabelElement.appendChild(radioInput);
          radioLabelElement.appendChild(label);
          radio.appendChild(radioLabelElement);
        });
        const radios = radio.querySelectorAll("input");
        if (radios.length) {
          radios[0].focus();
        }
      }
    };
    const formatInputOptions = (inputOptions) => {
      const result = [];
      if (typeof Map !== "undefined" && inputOptions instanceof Map) {
        inputOptions.forEach((value, key) => {
          let valueFormatted = value;
          if (typeof valueFormatted === "object") {
            valueFormatted = formatInputOptions(valueFormatted);
          }
          result.push([key, valueFormatted]);
        });
      } else {
        Object.keys(inputOptions).forEach((key) => {
          let valueFormatted = inputOptions[key];
          if (typeof valueFormatted === "object") {
            valueFormatted = formatInputOptions(valueFormatted);
          }
          result.push([key, valueFormatted]);
        });
      }
      return result;
    };
    const isSelected = (optionValue, inputValue) => {
      return inputValue && inputValue.toString() === optionValue.toString();
    };
    const handleConfirmButtonClick = (instance) => {
      const innerParams = privateProps.innerParams.get(instance);
      instance.disableButtons();
      if (innerParams.input) {
        handleConfirmOrDenyWithInput(instance, "confirm");
      } else {
        confirm(instance, true);
      }
    };
    const handleDenyButtonClick = (instance) => {
      const innerParams = privateProps.innerParams.get(instance);
      instance.disableButtons();
      if (innerParams.returnInputValueOnDeny) {
        handleConfirmOrDenyWithInput(instance, "deny");
      } else {
        deny(instance, false);
      }
    };
    const handleCancelButtonClick = (instance, dismissWith) => {
      instance.disableButtons();
      dismissWith(DismissReason.cancel);
    };
    const handleConfirmOrDenyWithInput = (instance, type) => {
      const innerParams = privateProps.innerParams.get(instance);
      if (!innerParams.input) {
        return error('The "input" parameter is needed to be set when using returnInputValueOn'.concat(capitalizeFirstLetter(type)));
      }
      const inputValue = getInputValue(instance, innerParams);
      if (innerParams.inputValidator) {
        handleInputValidator(instance, inputValue, type);
      } else if (!instance.getInput().checkValidity()) {
        instance.enableButtons();
        instance.showValidationMessage(innerParams.validationMessage);
      } else if (type === "deny") {
        deny(instance, inputValue);
      } else {
        confirm(instance, inputValue);
      }
    };
    const handleInputValidator = (instance, inputValue, type) => {
      const innerParams = privateProps.innerParams.get(instance);
      instance.disableInput();
      const validationPromise = Promise.resolve().then(() => asPromise(innerParams.inputValidator(inputValue, innerParams.validationMessage)));
      validationPromise.then((validationMessage) => {
        instance.enableButtons();
        instance.enableInput();
        if (validationMessage) {
          instance.showValidationMessage(validationMessage);
        } else if (type === "deny") {
          deny(instance, inputValue);
        } else {
          confirm(instance, inputValue);
        }
      });
    };
    const deny = (instance, value) => {
      const innerParams = privateProps.innerParams.get(instance || void 0);
      if (innerParams.showLoaderOnDeny) {
        showLoading(getDenyButton());
      }
      if (innerParams.preDeny) {
        privateProps.awaitingPromise.set(instance || void 0, true);
        const preDenyPromise = Promise.resolve().then(() => asPromise(innerParams.preDeny(value, innerParams.validationMessage)));
        preDenyPromise.then((preDenyValue) => {
          if (preDenyValue === false) {
            instance.hideLoading();
          } else {
            instance.closePopup({
              isDenied: true,
              value: typeof preDenyValue === "undefined" ? value : preDenyValue
            });
          }
        }).catch((error$$1) => rejectWith(instance || void 0, error$$1));
      } else {
        instance.closePopup({
          isDenied: true,
          value
        });
      }
    };
    const succeedWith = (instance, value) => {
      instance.closePopup({
        isConfirmed: true,
        value
      });
    };
    const rejectWith = (instance, error$$1) => {
      instance.rejectPromise(error$$1);
    };
    const confirm = (instance, value) => {
      const innerParams = privateProps.innerParams.get(instance || void 0);
      if (innerParams.showLoaderOnConfirm) {
        showLoading();
      }
      if (innerParams.preConfirm) {
        instance.resetValidationMessage();
        privateProps.awaitingPromise.set(instance || void 0, true);
        const preConfirmPromise = Promise.resolve().then(() => asPromise(innerParams.preConfirm(value, innerParams.validationMessage)));
        preConfirmPromise.then((preConfirmValue) => {
          if (isVisible(getValidationMessage()) || preConfirmValue === false) {
            instance.hideLoading();
          } else {
            succeedWith(instance, typeof preConfirmValue === "undefined" ? value : preConfirmValue);
          }
        }).catch((error$$1) => rejectWith(instance || void 0, error$$1));
      } else {
        succeedWith(instance, value);
      }
    };
    const handlePopupClick = (instance, domCache, dismissWith) => {
      const innerParams = privateProps.innerParams.get(instance);
      if (innerParams.toast) {
        handleToastClick(instance, domCache, dismissWith);
      } else {
        handleModalMousedown(domCache);
        handleContainerMousedown(domCache);
        handleModalClick(instance, domCache, dismissWith);
      }
    };
    const handleToastClick = (instance, domCache, dismissWith) => {
      domCache.popup.onclick = () => {
        const innerParams = privateProps.innerParams.get(instance);
        if (innerParams && (isAnyButtonShown(innerParams) || innerParams.timer || innerParams.input)) {
          return;
        }
        dismissWith(DismissReason.close);
      };
    };
    const isAnyButtonShown = (innerParams) => {
      return innerParams.showConfirmButton || innerParams.showDenyButton || innerParams.showCancelButton || innerParams.showCloseButton;
    };
    let ignoreOutsideClick = false;
    const handleModalMousedown = (domCache) => {
      domCache.popup.onmousedown = () => {
        domCache.container.onmouseup = function(e) {
          domCache.container.onmouseup = void 0;
          if (e.target === domCache.container) {
            ignoreOutsideClick = true;
          }
        };
      };
    };
    const handleContainerMousedown = (domCache) => {
      domCache.container.onmousedown = () => {
        domCache.popup.onmouseup = function(e) {
          domCache.popup.onmouseup = void 0;
          if (e.target === domCache.popup || domCache.popup.contains(e.target)) {
            ignoreOutsideClick = true;
          }
        };
      };
    };
    const handleModalClick = (instance, domCache, dismissWith) => {
      domCache.container.onclick = (e) => {
        const innerParams = privateProps.innerParams.get(instance);
        if (ignoreOutsideClick) {
          ignoreOutsideClick = false;
          return;
        }
        if (e.target === domCache.container && callIfFunction(innerParams.allowOutsideClick)) {
          dismissWith(DismissReason.backdrop);
        }
      };
    };
    const isVisible$1 = () => {
      return isVisible(getPopup());
    };
    const clickConfirm = () => getConfirmButton() && getConfirmButton().click();
    const clickDeny = () => getDenyButton() && getDenyButton().click();
    const clickCancel = () => getCancelButton() && getCancelButton().click();
    const addKeydownHandler = (instance, globalState2, innerParams, dismissWith) => {
      if (globalState2.keydownTarget && globalState2.keydownHandlerAdded) {
        globalState2.keydownTarget.removeEventListener("keydown", globalState2.keydownHandler, {
          capture: globalState2.keydownListenerCapture
        });
        globalState2.keydownHandlerAdded = false;
      }
      if (!innerParams.toast) {
        globalState2.keydownHandler = (e) => keydownHandler(instance, e, dismissWith);
        globalState2.keydownTarget = innerParams.keydownListenerCapture ? window : getPopup();
        globalState2.keydownListenerCapture = innerParams.keydownListenerCapture;
        globalState2.keydownTarget.addEventListener("keydown", globalState2.keydownHandler, {
          capture: globalState2.keydownListenerCapture
        });
        globalState2.keydownHandlerAdded = true;
      }
    };
    const setFocus = (innerParams, index2, increment) => {
      const focusableElements = getFocusableElements();
      if (focusableElements.length) {
        index2 = index2 + increment;
        if (index2 === focusableElements.length) {
          index2 = 0;
        } else if (index2 === -1) {
          index2 = focusableElements.length - 1;
        }
        return focusableElements[index2].focus();
      }
      getPopup().focus();
    };
    const arrowKeysNextButton = ["ArrowRight", "ArrowDown"];
    const arrowKeysPreviousButton = ["ArrowLeft", "ArrowUp"];
    const keydownHandler = (instance, e, dismissWith) => {
      const innerParams = privateProps.innerParams.get(instance);
      if (!innerParams) {
        return;
      }
      if (innerParams.stopKeydownPropagation) {
        e.stopPropagation();
      }
      if (e.key === "Enter") {
        handleEnter(instance, e, innerParams);
      } else if (e.key === "Tab") {
        handleTab(e, innerParams);
      } else if ([...arrowKeysNextButton, ...arrowKeysPreviousButton].includes(e.key)) {
        handleArrows(e.key);
      } else if (e.key === "Escape") {
        handleEsc(e, innerParams, dismissWith);
      }
    };
    const handleEnter = (instance, e, innerParams) => {
      if (!callIfFunction(innerParams.allowEnterKey) || e.isComposing) {
        return;
      }
      if (e.target && instance.getInput() && e.target.outerHTML === instance.getInput().outerHTML) {
        if (["textarea", "file"].includes(innerParams.input)) {
          return;
        }
        clickConfirm();
        e.preventDefault();
      }
    };
    const handleTab = (e, innerParams) => {
      const targetElement = e.target;
      const focusableElements = getFocusableElements();
      let btnIndex = -1;
      for (let i = 0; i < focusableElements.length; i++) {
        if (targetElement === focusableElements[i]) {
          btnIndex = i;
          break;
        }
      }
      if (!e.shiftKey) {
        setFocus(innerParams, btnIndex, 1);
      } else {
        setFocus(innerParams, btnIndex, -1);
      }
      e.stopPropagation();
      e.preventDefault();
    };
    const handleArrows = (key) => {
      const confirmButton = getConfirmButton();
      const denyButton = getDenyButton();
      const cancelButton = getCancelButton();
      if (![confirmButton, denyButton, cancelButton].includes(document.activeElement)) {
        return;
      }
      const sibling = arrowKeysNextButton.includes(key) ? "nextElementSibling" : "previousElementSibling";
      const buttonToFocus = document.activeElement[sibling];
      if (buttonToFocus instanceof HTMLElement) {
        buttonToFocus.focus();
      }
    };
    const handleEsc = (e, innerParams, dismissWith) => {
      if (callIfFunction(innerParams.allowEscapeKey)) {
        e.preventDefault();
        dismissWith(DismissReason.esc);
      }
    };
    const isJqueryElement = (elem) => typeof elem === "object" && elem.jquery;
    const isElement2 = (elem) => elem instanceof Element || isJqueryElement(elem);
    const argsToParams = (args) => {
      const params = {};
      if (typeof args[0] === "object" && !isElement2(args[0])) {
        Object.assign(params, args[0]);
      } else {
        ["title", "html", "icon"].forEach((name, index2) => {
          const arg = args[index2];
          if (typeof arg === "string" || isElement2(arg)) {
            params[name] = arg;
          } else if (arg !== void 0) {
            error("Unexpected type of ".concat(name, '! Expected "string" or "Element", got ').concat(typeof arg));
          }
        });
      }
      return params;
    };
    function fire() {
      const Swal3 = this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return new Swal3(...args);
    }
    function mixin(mixinParams) {
      class MixinSwal extends this {
        _main(params, priorityMixinParams) {
          return super._main(params, Object.assign({}, mixinParams, priorityMixinParams));
        }
      }
      return MixinSwal;
    }
    const getTimerLeft = () => {
      return globalState.timeout && globalState.timeout.getTimerLeft();
    };
    const stopTimer = () => {
      if (globalState.timeout) {
        stopTimerProgressBar();
        return globalState.timeout.stop();
      }
    };
    const resumeTimer = () => {
      if (globalState.timeout) {
        const remaining = globalState.timeout.start();
        animateTimerProgressBar(remaining);
        return remaining;
      }
    };
    const toggleTimer = () => {
      const timer = globalState.timeout;
      return timer && (timer.running ? stopTimer() : resumeTimer());
    };
    const increaseTimer = (n) => {
      if (globalState.timeout) {
        const remaining = globalState.timeout.increase(n);
        animateTimerProgressBar(remaining, true);
        return remaining;
      }
    };
    const isTimerRunning = () => {
      return globalState.timeout && globalState.timeout.isRunning();
    };
    let bodyClickListenerAdded = false;
    const clickHandlers = {};
    function bindClickHandler() {
      let attr = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "data-swal-template";
      clickHandlers[attr] = this;
      if (!bodyClickListenerAdded) {
        document.body.addEventListener("click", bodyClickListener);
        bodyClickListenerAdded = true;
      }
    }
    const bodyClickListener = (event) => {
      for (let el = event.target; el && el !== document; el = el.parentNode) {
        for (const attr in clickHandlers) {
          const template = el.getAttribute(attr);
          if (template) {
            clickHandlers[attr].fire({
              template
            });
            return;
          }
        }
      }
    };
    var staticMethods = /* @__PURE__ */ Object.freeze({
      isValidParameter,
      isUpdatableParameter,
      isDeprecatedParameter,
      argsToParams,
      isVisible: isVisible$1,
      clickConfirm,
      clickDeny,
      clickCancel,
      getContainer,
      getPopup,
      getTitle,
      getHtmlContainer,
      getImage,
      getIcon,
      getInputLabel,
      getCloseButton,
      getActions,
      getConfirmButton,
      getDenyButton,
      getCancelButton,
      getLoader,
      getFooter,
      getTimerProgressBar,
      getFocusableElements,
      getValidationMessage,
      isLoading,
      fire,
      mixin,
      showLoading,
      enableLoading: showLoading,
      getTimerLeft,
      stopTimer,
      resumeTimer,
      toggleTimer,
      increaseTimer,
      isTimerRunning,
      bindClickHandler
    });
    function hideLoading() {
      const innerParams = privateProps.innerParams.get(this);
      if (!innerParams) {
        return;
      }
      const domCache = privateProps.domCache.get(this);
      hide2(domCache.loader);
      if (isToast()) {
        if (innerParams.icon) {
          show(getIcon());
        }
      } else {
        showRelatedButton(domCache);
      }
      removeClass([domCache.popup, domCache.actions], swalClasses.loading);
      domCache.popup.removeAttribute("aria-busy");
      domCache.popup.removeAttribute("data-loading");
      domCache.confirmButton.disabled = false;
      domCache.denyButton.disabled = false;
      domCache.cancelButton.disabled = false;
    }
    const showRelatedButton = (domCache) => {
      const buttonToReplace = domCache.popup.getElementsByClassName(domCache.loader.getAttribute("data-button-to-replace"));
      if (buttonToReplace.length) {
        show(buttonToReplace[0], "inline-block");
      } else if (allButtonsAreHidden()) {
        hide2(domCache.actions);
      }
    };
    function getInput$1(instance) {
      const innerParams = privateProps.innerParams.get(instance || this);
      const domCache = privateProps.domCache.get(instance || this);
      if (!domCache) {
        return null;
      }
      return getInput(domCache.popup, innerParams.input);
    }
    var privateMethods = {
      swalPromiseResolve: /* @__PURE__ */ new WeakMap(),
      swalPromiseReject: /* @__PURE__ */ new WeakMap()
    };
    function removePopupAndResetState(instance, container, returnFocus, didClose) {
      if (isToast()) {
        triggerDidCloseAndDispose(instance, didClose);
      } else {
        restoreActiveElement(returnFocus).then(() => triggerDidCloseAndDispose(instance, didClose));
        globalState.keydownTarget.removeEventListener("keydown", globalState.keydownHandler, {
          capture: globalState.keydownListenerCapture
        });
        globalState.keydownHandlerAdded = false;
      }
      const isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
      if (isSafari) {
        container.setAttribute("style", "display:none !important");
        container.removeAttribute("class");
        container.innerHTML = "";
      } else {
        container.remove();
      }
      if (isModal()) {
        undoScrollbar();
        undoIOSfix();
        unsetAriaHidden();
      }
      removeBodyClasses();
    }
    function removeBodyClasses() {
      removeClass([document.documentElement, document.body], [swalClasses.shown, swalClasses["height-auto"], swalClasses["no-backdrop"], swalClasses["toast-shown"]]);
    }
    function close(resolveValue) {
      resolveValue = prepareResolveValue(resolveValue);
      const swalPromiseResolve = privateMethods.swalPromiseResolve.get(this);
      const didClose = triggerClosePopup(this);
      if (this.isAwaitingPromise()) {
        if (!resolveValue.isDismissed) {
          handleAwaitingPromise(this);
          swalPromiseResolve(resolveValue);
        }
      } else if (didClose) {
        swalPromiseResolve(resolveValue);
      }
    }
    function isAwaitingPromise() {
      return !!privateProps.awaitingPromise.get(this);
    }
    const triggerClosePopup = (instance) => {
      const popup = getPopup();
      if (!popup) {
        return false;
      }
      const innerParams = privateProps.innerParams.get(instance);
      if (!innerParams || hasClass(popup, innerParams.hideClass.popup)) {
        return false;
      }
      removeClass(popup, innerParams.showClass.popup);
      addClass(popup, innerParams.hideClass.popup);
      const backdrop = getContainer();
      removeClass(backdrop, innerParams.showClass.backdrop);
      addClass(backdrop, innerParams.hideClass.backdrop);
      handlePopupAnimation(instance, popup, innerParams);
      return true;
    };
    function rejectPromise(error2) {
      const rejectPromise2 = privateMethods.swalPromiseReject.get(this);
      handleAwaitingPromise(this);
      if (rejectPromise2) {
        rejectPromise2(error2);
      }
    }
    const handleAwaitingPromise = (instance) => {
      if (instance.isAwaitingPromise()) {
        privateProps.awaitingPromise.delete(instance);
        if (!privateProps.innerParams.get(instance)) {
          instance._destroy();
        }
      }
    };
    const prepareResolveValue = (resolveValue) => {
      if (typeof resolveValue === "undefined") {
        return {
          isConfirmed: false,
          isDenied: false,
          isDismissed: true
        };
      }
      return Object.assign({
        isConfirmed: false,
        isDenied: false,
        isDismissed: false
      }, resolveValue);
    };
    const handlePopupAnimation = (instance, popup, innerParams) => {
      const container = getContainer();
      const animationIsSupported = animationEndEvent && hasCssAnimation(popup);
      if (typeof innerParams.willClose === "function") {
        innerParams.willClose(popup);
      }
      if (animationIsSupported) {
        animatePopup(instance, popup, container, innerParams.returnFocus, innerParams.didClose);
      } else {
        removePopupAndResetState(instance, container, innerParams.returnFocus, innerParams.didClose);
      }
    };
    const animatePopup = (instance, popup, container, returnFocus, didClose) => {
      globalState.swalCloseEventFinishedCallback = removePopupAndResetState.bind(null, instance, container, returnFocus, didClose);
      popup.addEventListener(animationEndEvent, function(e) {
        if (e.target === popup) {
          globalState.swalCloseEventFinishedCallback();
          delete globalState.swalCloseEventFinishedCallback;
        }
      });
    };
    const triggerDidCloseAndDispose = (instance, didClose) => {
      setTimeout(() => {
        if (typeof didClose === "function") {
          didClose.bind(instance.params)();
        }
        instance._destroy();
      });
    };
    function setButtonsDisabled(instance, buttons, disabled) {
      const domCache = privateProps.domCache.get(instance);
      buttons.forEach((button) => {
        domCache[button].disabled = disabled;
      });
    }
    function setInputDisabled(input2, disabled) {
      if (!input2) {
        return false;
      }
      if (input2.type === "radio") {
        const radiosContainer = input2.parentNode.parentNode;
        const radios = radiosContainer.querySelectorAll("input");
        for (let i = 0; i < radios.length; i++) {
          radios[i].disabled = disabled;
        }
      } else {
        input2.disabled = disabled;
      }
    }
    function enableButtons() {
      setButtonsDisabled(this, ["confirmButton", "denyButton", "cancelButton"], false);
    }
    function disableButtons() {
      setButtonsDisabled(this, ["confirmButton", "denyButton", "cancelButton"], true);
    }
    function enableInput() {
      return setInputDisabled(this.getInput(), false);
    }
    function disableInput() {
      return setInputDisabled(this.getInput(), true);
    }
    function showValidationMessage(error2) {
      const domCache = privateProps.domCache.get(this);
      const params = privateProps.innerParams.get(this);
      setInnerHtml(domCache.validationMessage, error2);
      domCache.validationMessage.className = swalClasses["validation-message"];
      if (params.customClass && params.customClass.validationMessage) {
        addClass(domCache.validationMessage, params.customClass.validationMessage);
      }
      show(domCache.validationMessage);
      const input2 = this.getInput();
      if (input2) {
        input2.setAttribute("aria-invalid", true);
        input2.setAttribute("aria-describedby", swalClasses["validation-message"]);
        focusInput(input2);
        addClass(input2, swalClasses.inputerror);
      }
    }
    function resetValidationMessage$1() {
      const domCache = privateProps.domCache.get(this);
      if (domCache.validationMessage) {
        hide2(domCache.validationMessage);
      }
      const input2 = this.getInput();
      if (input2) {
        input2.removeAttribute("aria-invalid");
        input2.removeAttribute("aria-describedby");
        removeClass(input2, swalClasses.inputerror);
      }
    }
    function getProgressSteps$1() {
      const domCache = privateProps.domCache.get(this);
      return domCache.progressSteps;
    }
    function update(params) {
      const popup = getPopup();
      const innerParams = privateProps.innerParams.get(this);
      if (!popup || hasClass(popup, innerParams.hideClass.popup)) {
        return warn2("You're trying to update the closed or closing popup, that won't work. Use the update() method in preConfirm parameter or show a new popup.");
      }
      const validUpdatableParams = filterValidParams(params);
      const updatedParams = Object.assign({}, innerParams, validUpdatableParams);
      render(this, updatedParams);
      privateProps.innerParams.set(this, updatedParams);
      Object.defineProperties(this, {
        params: {
          value: Object.assign({}, this.params, params),
          writable: false,
          enumerable: true
        }
      });
    }
    const filterValidParams = (params) => {
      const validUpdatableParams = {};
      Object.keys(params).forEach((param) => {
        if (isUpdatableParameter(param)) {
          validUpdatableParams[param] = params[param];
        } else {
          warn2('Invalid parameter to update: "'.concat(param, '". Updatable params are listed here: https://github.com/sweetalert2/sweetalert2/blob/master/src/utils/params.js\n\nIf you think this parameter should be updatable, request it here: https://github.com/sweetalert2/sweetalert2/issues/new?template=02_feature_request.md'));
        }
      });
      return validUpdatableParams;
    };
    function _destroy() {
      const domCache = privateProps.domCache.get(this);
      const innerParams = privateProps.innerParams.get(this);
      if (!innerParams) {
        disposeWeakMaps(this);
        return;
      }
      if (domCache.popup && globalState.swalCloseEventFinishedCallback) {
        globalState.swalCloseEventFinishedCallback();
        delete globalState.swalCloseEventFinishedCallback;
      }
      if (globalState.deferDisposalTimer) {
        clearTimeout(globalState.deferDisposalTimer);
        delete globalState.deferDisposalTimer;
      }
      if (typeof innerParams.didDestroy === "function") {
        innerParams.didDestroy();
      }
      disposeSwal(this);
    }
    const disposeSwal = (instance) => {
      disposeWeakMaps(instance);
      delete instance.params;
      delete globalState.keydownHandler;
      delete globalState.keydownTarget;
      delete globalState.currentInstance;
    };
    const disposeWeakMaps = (instance) => {
      if (instance.isAwaitingPromise()) {
        unsetWeakMaps(privateProps, instance);
        privateProps.awaitingPromise.set(instance, true);
      } else {
        unsetWeakMaps(privateMethods, instance);
        unsetWeakMaps(privateProps, instance);
      }
    };
    const unsetWeakMaps = (obj, instance) => {
      for (const i in obj) {
        obj[i].delete(instance);
      }
    };
    var instanceMethods = /* @__PURE__ */ Object.freeze({
      hideLoading,
      disableLoading: hideLoading,
      getInput: getInput$1,
      close,
      isAwaitingPromise,
      rejectPromise,
      closePopup: close,
      closeModal: close,
      closeToast: close,
      enableButtons,
      disableButtons,
      enableInput,
      disableInput,
      showValidationMessage,
      resetValidationMessage: resetValidationMessage$1,
      getProgressSteps: getProgressSteps$1,
      update,
      _destroy
    });
    let currentInstance2;
    class SweetAlert {
      constructor() {
        if (typeof window === "undefined") {
          return;
        }
        currentInstance2 = this;
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        const outerParams = Object.freeze(this.constructor.argsToParams(args));
        Object.defineProperties(this, {
          params: {
            value: outerParams,
            writable: false,
            enumerable: true,
            configurable: true
          }
        });
        const promise = this._main(this.params);
        privateProps.promise.set(this, promise);
      }
      _main(userParams) {
        let mixinParams = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        showWarningsForParams(Object.assign({}, mixinParams, userParams));
        if (globalState.currentInstance) {
          globalState.currentInstance._destroy();
          if (isModal()) {
            unsetAriaHidden();
          }
        }
        globalState.currentInstance = this;
        const innerParams = prepareParams(userParams, mixinParams);
        setParameters(innerParams);
        Object.freeze(innerParams);
        if (globalState.timeout) {
          globalState.timeout.stop();
          delete globalState.timeout;
        }
        clearTimeout(globalState.restoreFocusTimeout);
        const domCache = populateDomCache(this);
        render(this, innerParams);
        privateProps.innerParams.set(this, innerParams);
        return swalPromise(this, domCache, innerParams);
      }
      then(onFulfilled) {
        const promise = privateProps.promise.get(this);
        return promise.then(onFulfilled);
      }
      finally(onFinally) {
        const promise = privateProps.promise.get(this);
        return promise.finally(onFinally);
      }
    }
    const swalPromise = (instance, domCache, innerParams) => {
      return new Promise((resolve2, reject) => {
        const dismissWith = (dismiss) => {
          instance.closePopup({
            isDismissed: true,
            dismiss
          });
        };
        privateMethods.swalPromiseResolve.set(instance, resolve2);
        privateMethods.swalPromiseReject.set(instance, reject);
        domCache.confirmButton.onclick = () => handleConfirmButtonClick(instance);
        domCache.denyButton.onclick = () => handleDenyButtonClick(instance);
        domCache.cancelButton.onclick = () => handleCancelButtonClick(instance, dismissWith);
        domCache.closeButton.onclick = () => dismissWith(DismissReason.close);
        handlePopupClick(instance, domCache, dismissWith);
        addKeydownHandler(instance, globalState, innerParams, dismissWith);
        handleInputOptionsAndValue(instance, innerParams);
        openPopup(innerParams);
        setupTimer(globalState, innerParams, dismissWith);
        initFocus(domCache, innerParams);
        setTimeout(() => {
          domCache.container.scrollTop = 0;
        });
      });
    };
    const prepareParams = (userParams, mixinParams) => {
      const templateParams = getTemplateParams(userParams);
      const params = Object.assign({}, defaultParams, mixinParams, templateParams, userParams);
      params.showClass = Object.assign({}, defaultParams.showClass, params.showClass);
      params.hideClass = Object.assign({}, defaultParams.hideClass, params.hideClass);
      return params;
    };
    const populateDomCache = (instance) => {
      const domCache = {
        popup: getPopup(),
        container: getContainer(),
        actions: getActions(),
        confirmButton: getConfirmButton(),
        denyButton: getDenyButton(),
        cancelButton: getCancelButton(),
        loader: getLoader(),
        closeButton: getCloseButton(),
        validationMessage: getValidationMessage(),
        progressSteps: getProgressSteps()
      };
      privateProps.domCache.set(instance, domCache);
      return domCache;
    };
    const setupTimer = (globalState$$1, innerParams, dismissWith) => {
      const timerProgressBar = getTimerProgressBar();
      hide2(timerProgressBar);
      if (innerParams.timer) {
        globalState$$1.timeout = new Timer2(() => {
          dismissWith("timer");
          delete globalState$$1.timeout;
        }, innerParams.timer);
        if (innerParams.timerProgressBar) {
          show(timerProgressBar);
          applyCustomClass(timerProgressBar, innerParams, "timerProgressBar");
          setTimeout(() => {
            if (globalState$$1.timeout && globalState$$1.timeout.running) {
              animateTimerProgressBar(innerParams.timer);
            }
          });
        }
      }
    };
    const initFocus = (domCache, innerParams) => {
      if (innerParams.toast) {
        return;
      }
      if (!callIfFunction(innerParams.allowEnterKey)) {
        return blurActiveElement();
      }
      if (!focusButton(domCache, innerParams)) {
        setFocus(innerParams, -1, 1);
      }
    };
    const focusButton = (domCache, innerParams) => {
      if (innerParams.focusDeny && isVisible(domCache.denyButton)) {
        domCache.denyButton.focus();
        return true;
      }
      if (innerParams.focusCancel && isVisible(domCache.cancelButton)) {
        domCache.cancelButton.focus();
        return true;
      }
      if (innerParams.focusConfirm && isVisible(domCache.confirmButton)) {
        domCache.confirmButton.focus();
        return true;
      }
      return false;
    };
    const blurActiveElement = () => {
      if (document.activeElement instanceof HTMLElement && typeof document.activeElement.blur === "function") {
        document.activeElement.blur();
      }
    };
    Object.assign(SweetAlert.prototype, instanceMethods);
    Object.assign(SweetAlert, staticMethods);
    Object.keys(instanceMethods).forEach((key) => {
      SweetAlert[key] = function() {
        if (currentInstance2) {
          return currentInstance2[key](...arguments);
        }
      };
    });
    SweetAlert.DismissReason = DismissReason;
    SweetAlert.version = "11.4.0";
    const Swal2 = SweetAlert;
    Swal2.default = Swal2;
    return Swal2;
  });
  if (typeof commonjsGlobal$1 !== "undefined" && commonjsGlobal$1.Sweetalert2) {
    commonjsGlobal$1.swal = commonjsGlobal$1.sweetAlert = commonjsGlobal$1.Swal = commonjsGlobal$1.SweetAlert = commonjsGlobal$1.Sweetalert2;
  }
})(sweetalert2);
var Swal$1 = sweetalert2.exports;
class VueSweetalert2 {
  static install(vue, options = {}) {
    var _a;
    const swalLocalInstance = Swal$1.mixin(options);
    const swalFunction = function(...args) {
      return swalLocalInstance.fire.call(swalLocalInstance, ...args);
    };
    Object.assign(swalFunction, Swal$1);
    Object.keys(Swal$1).filter((key) => typeof Swal$1[key] === "function").forEach((methodName) => {
      swalFunction[methodName] = swalLocalInstance[methodName].bind(swalLocalInstance);
    });
    if (((_a = vue.config) == null ? void 0 : _a.globalProperties) && !vue.config.globalProperties.$swal) {
      vue.config.globalProperties.$swal = swalFunction;
      vue.provide("$swal", swalFunction);
    } else if (!Object.prototype.hasOwnProperty.call(vue, "$swal")) {
      vue.prototype.$swal = swalFunction;
      vue["swal"] = swalFunction;
    }
  }
}
/*!
  * vue-router v4.1.6
  * (c) 2022 Eduardo San Martin Morote
  * @license MIT
  */
const isBrowser = typeof window !== "undefined";
function isESModule(obj) {
  return obj.__esModule || obj[Symbol.toStringTag] === "Module";
}
const assign = Object.assign;
function applyToParams(fn2, params) {
  const newParams = {};
  for (const key in params) {
    const value = params[key];
    newParams[key] = isArray$1(value) ? value.map(fn2) : fn2(value);
  }
  return newParams;
}
const noop = () => {
};
const isArray$1 = Array.isArray;
const TRAILING_SLASH_RE = /\/$/;
const removeTrailingSlash = (path) => path.replace(TRAILING_SLASH_RE, "");
function parseURL(parseQuery2, location2, currentLocation = "/") {
  let path, query = {}, searchString = "", hash2 = "";
  const hashPos = location2.indexOf("#");
  let searchPos = location2.indexOf("?");
  if (hashPos < searchPos && hashPos >= 0) {
    searchPos = -1;
  }
  if (searchPos > -1) {
    path = location2.slice(0, searchPos);
    searchString = location2.slice(searchPos + 1, hashPos > -1 ? hashPos : location2.length);
    query = parseQuery2(searchString);
  }
  if (hashPos > -1) {
    path = path || location2.slice(0, hashPos);
    hash2 = location2.slice(hashPos, location2.length);
  }
  path = resolveRelativePath(path != null ? path : location2, currentLocation);
  return {
    fullPath: path + (searchString && "?") + searchString + hash2,
    path,
    query,
    hash: hash2
  };
}
function stringifyURL(stringifyQuery2, location2) {
  const query = location2.query ? stringifyQuery2(location2.query) : "";
  return location2.path + (query && "?") + query + (location2.hash || "");
}
function stripBase(pathname, base) {
  if (!base || !pathname.toLowerCase().startsWith(base.toLowerCase()))
    return pathname;
  return pathname.slice(base.length) || "/";
}
function isSameRouteLocation(stringifyQuery2, a, b) {
  const aLastIndex = a.matched.length - 1;
  const bLastIndex = b.matched.length - 1;
  return aLastIndex > -1 && aLastIndex === bLastIndex && isSameRouteRecord(a.matched[aLastIndex], b.matched[bLastIndex]) && isSameRouteLocationParams(a.params, b.params) && stringifyQuery2(a.query) === stringifyQuery2(b.query) && a.hash === b.hash;
}
function isSameRouteRecord(a, b) {
  return (a.aliasOf || a) === (b.aliasOf || b);
}
function isSameRouteLocationParams(a, b) {
  if (Object.keys(a).length !== Object.keys(b).length)
    return false;
  for (const key in a) {
    if (!isSameRouteLocationParamsValue(a[key], b[key]))
      return false;
  }
  return true;
}
function isSameRouteLocationParamsValue(a, b) {
  return isArray$1(a) ? isEquivalentArray(a, b) : isArray$1(b) ? isEquivalentArray(b, a) : a === b;
}
function isEquivalentArray(a, b) {
  return isArray$1(b) ? a.length === b.length && a.every((value, i) => value === b[i]) : a.length === 1 && a[0] === b;
}
function resolveRelativePath(to2, from2) {
  if (to2.startsWith("/"))
    return to2;
  if (!to2)
    return from2;
  const fromSegments = from2.split("/");
  const toSegments = to2.split("/");
  let position = fromSegments.length - 1;
  let toPosition;
  let segment;
  for (toPosition = 0; toPosition < toSegments.length; toPosition++) {
    segment = toSegments[toPosition];
    if (segment === ".")
      continue;
    if (segment === "..") {
      if (position > 1)
        position--;
    } else
      break;
  }
  return fromSegments.slice(0, position).join("/") + "/" + toSegments.slice(toPosition - (toPosition === toSegments.length ? 1 : 0)).join("/");
}
var NavigationType;
(function(NavigationType2) {
  NavigationType2["pop"] = "pop";
  NavigationType2["push"] = "push";
})(NavigationType || (NavigationType = {}));
var NavigationDirection;
(function(NavigationDirection2) {
  NavigationDirection2["back"] = "back";
  NavigationDirection2["forward"] = "forward";
  NavigationDirection2["unknown"] = "";
})(NavigationDirection || (NavigationDirection = {}));
function normalizeBase(base) {
  if (!base) {
    if (isBrowser) {
      const baseEl = document.querySelector("base");
      base = baseEl && baseEl.getAttribute("href") || "/";
      base = base.replace(/^\w+:\/\/[^\/]+/, "");
    } else {
      base = "/";
    }
  }
  if (base[0] !== "/" && base[0] !== "#")
    base = "/" + base;
  return removeTrailingSlash(base);
}
const BEFORE_HASH_RE = /^[^#]+#/;
function createHref(base, location2) {
  return base.replace(BEFORE_HASH_RE, "#") + location2;
}
function getElementPosition(el, offset2) {
  const docRect = document.documentElement.getBoundingClientRect();
  const elRect = el.getBoundingClientRect();
  return {
    behavior: offset2.behavior,
    left: elRect.left - docRect.left - (offset2.left || 0),
    top: elRect.top - docRect.top - (offset2.top || 0)
  };
}
const computeScrollPosition = () => ({
  left: window.pageXOffset,
  top: window.pageYOffset
});
function scrollToPosition(position) {
  let scrollToOptions;
  if ("el" in position) {
    const positionEl = position.el;
    const isIdSelector = typeof positionEl === "string" && positionEl.startsWith("#");
    const el = typeof positionEl === "string" ? isIdSelector ? document.getElementById(positionEl.slice(1)) : document.querySelector(positionEl) : positionEl;
    if (!el) {
      return;
    }
    scrollToOptions = getElementPosition(el, position);
  } else {
    scrollToOptions = position;
  }
  if ("scrollBehavior" in document.documentElement.style)
    window.scrollTo(scrollToOptions);
  else {
    window.scrollTo(scrollToOptions.left != null ? scrollToOptions.left : window.pageXOffset, scrollToOptions.top != null ? scrollToOptions.top : window.pageYOffset);
  }
}
function getScrollKey(path, delta) {
  const position = history.state ? history.state.position - delta : -1;
  return position + path;
}
const scrollPositions = /* @__PURE__ */ new Map();
function saveScrollPosition(key, scrollPosition) {
  scrollPositions.set(key, scrollPosition);
}
function getSavedScrollPosition(key) {
  const scroll = scrollPositions.get(key);
  scrollPositions.delete(key);
  return scroll;
}
let createBaseLocation = () => location.protocol + "//" + location.host;
function createCurrentLocation(base, location2) {
  const { pathname, search, hash: hash2 } = location2;
  const hashPos = base.indexOf("#");
  if (hashPos > -1) {
    let slicePos = hash2.includes(base.slice(hashPos)) ? base.slice(hashPos).length : 1;
    let pathFromHash = hash2.slice(slicePos);
    if (pathFromHash[0] !== "/")
      pathFromHash = "/" + pathFromHash;
    return stripBase(pathFromHash, "");
  }
  const path = stripBase(pathname, base);
  return path + search + hash2;
}
function useHistoryListeners(base, historyState, currentLocation, replace) {
  let listeners = [];
  let teardowns = [];
  let pauseState = null;
  const popStateHandler = ({ state }) => {
    const to2 = createCurrentLocation(base, location);
    const from2 = currentLocation.value;
    const fromState = historyState.value;
    let delta = 0;
    if (state) {
      currentLocation.value = to2;
      historyState.value = state;
      if (pauseState && pauseState === from2) {
        pauseState = null;
        return;
      }
      delta = fromState ? state.position - fromState.position : 0;
    } else {
      replace(to2);
    }
    listeners.forEach((listener) => {
      listener(currentLocation.value, from2, {
        delta,
        type: NavigationType.pop,
        direction: delta ? delta > 0 ? NavigationDirection.forward : NavigationDirection.back : NavigationDirection.unknown
      });
    });
  };
  function pauseListeners() {
    pauseState = currentLocation.value;
  }
  function listen(callback) {
    listeners.push(callback);
    const teardown = () => {
      const index2 = listeners.indexOf(callback);
      if (index2 > -1)
        listeners.splice(index2, 1);
    };
    teardowns.push(teardown);
    return teardown;
  }
  function beforeUnloadListener() {
    const { history: history2 } = window;
    if (!history2.state)
      return;
    history2.replaceState(assign({}, history2.state, { scroll: computeScrollPosition() }), "");
  }
  function destroy() {
    for (const teardown of teardowns)
      teardown();
    teardowns = [];
    window.removeEventListener("popstate", popStateHandler);
    window.removeEventListener("beforeunload", beforeUnloadListener);
  }
  window.addEventListener("popstate", popStateHandler);
  window.addEventListener("beforeunload", beforeUnloadListener);
  return {
    pauseListeners,
    listen,
    destroy
  };
}
function buildState(back, current, forward, replaced = false, computeScroll = false) {
  return {
    back,
    current,
    forward,
    replaced,
    position: window.history.length,
    scroll: computeScroll ? computeScrollPosition() : null
  };
}
function useHistoryStateNavigation(base) {
  const { history: history2, location: location2 } = window;
  const currentLocation = {
    value: createCurrentLocation(base, location2)
  };
  const historyState = { value: history2.state };
  if (!historyState.value) {
    changeLocation(currentLocation.value, {
      back: null,
      current: currentLocation.value,
      forward: null,
      // the length is off by one, we need to decrease it
      position: history2.length - 1,
      replaced: true,
      // don't add a scroll as the user may have an anchor, and we want
      // scrollBehavior to be triggered without a saved position
      scroll: null
    }, true);
  }
  function changeLocation(to2, state, replace2) {
    const hashIndex = base.indexOf("#");
    const url = hashIndex > -1 ? (location2.host && document.querySelector("base") ? base : base.slice(hashIndex)) + to2 : createBaseLocation() + base + to2;
    try {
      history2[replace2 ? "replaceState" : "pushState"](state, "", url);
      historyState.value = state;
    } catch (err) {
      {
        console.error(err);
      }
      location2[replace2 ? "replace" : "assign"](url);
    }
  }
  function replace(to2, data) {
    const state = assign({}, history2.state, buildState(
      historyState.value.back,
      // keep back and forward entries but override current position
      to2,
      historyState.value.forward,
      true
    ), data, { position: historyState.value.position });
    changeLocation(to2, state, true);
    currentLocation.value = to2;
  }
  function push(to2, data) {
    const currentState = assign(
      {},
      // use current history state to gracefully handle a wrong call to
      // history.replaceState
      // https://github.com/vuejs/router/issues/366
      historyState.value,
      history2.state,
      {
        forward: to2,
        scroll: computeScrollPosition()
      }
    );
    changeLocation(currentState.current, currentState, true);
    const state = assign({}, buildState(currentLocation.value, to2, null), { position: currentState.position + 1 }, data);
    changeLocation(to2, state, false);
    currentLocation.value = to2;
  }
  return {
    location: currentLocation,
    state: historyState,
    push,
    replace
  };
}
function createWebHistory(base) {
  base = normalizeBase(base);
  const historyNavigation = useHistoryStateNavigation(base);
  const historyListeners = useHistoryListeners(base, historyNavigation.state, historyNavigation.location, historyNavigation.replace);
  function go(delta, triggerListeners = true) {
    if (!triggerListeners)
      historyListeners.pauseListeners();
    history.go(delta);
  }
  const routerHistory = assign({
    // it's overridden right after
    location: "",
    base,
    go,
    createHref: createHref.bind(null, base)
  }, historyNavigation, historyListeners);
  Object.defineProperty(routerHistory, "location", {
    enumerable: true,
    get: () => historyNavigation.location.value
  });
  Object.defineProperty(routerHistory, "state", {
    enumerable: true,
    get: () => historyNavigation.state.value
  });
  return routerHistory;
}
function createWebHashHistory(base) {
  base = location.host ? base || location.pathname + location.search : "";
  if (!base.includes("#"))
    base += "#";
  return createWebHistory(base);
}
function isRouteLocation(route) {
  return typeof route === "string" || route && typeof route === "object";
}
function isRouteName(name) {
  return typeof name === "string" || typeof name === "symbol";
}
const START_LOCATION_NORMALIZED = {
  path: "/",
  name: void 0,
  params: {},
  query: {},
  hash: "",
  fullPath: "/",
  matched: [],
  meta: {},
  redirectedFrom: void 0
};
const NavigationFailureSymbol = Symbol("");
var NavigationFailureType;
(function(NavigationFailureType2) {
  NavigationFailureType2[NavigationFailureType2["aborted"] = 4] = "aborted";
  NavigationFailureType2[NavigationFailureType2["cancelled"] = 8] = "cancelled";
  NavigationFailureType2[NavigationFailureType2["duplicated"] = 16] = "duplicated";
})(NavigationFailureType || (NavigationFailureType = {}));
function createRouterError(type, params) {
  {
    return assign(new Error(), {
      type,
      [NavigationFailureSymbol]: true
    }, params);
  }
}
function isNavigationFailure(error, type) {
  return error instanceof Error && NavigationFailureSymbol in error && (type == null || !!(error.type & type));
}
const BASE_PARAM_PATTERN = "[^/]+?";
const BASE_PATH_PARSER_OPTIONS = {
  sensitive: false,
  strict: false,
  start: true,
  end: true
};
const REGEX_CHARS_RE = /[.+*?^${}()[\]/\\]/g;
function tokensToParser(segments, extraOptions) {
  const options = assign({}, BASE_PATH_PARSER_OPTIONS, extraOptions);
  const score = [];
  let pattern = options.start ? "^" : "";
  const keys2 = [];
  for (const segment of segments) {
    const segmentScores = segment.length ? [] : [
      90
      /* PathScore.Root */
    ];
    if (options.strict && !segment.length)
      pattern += "/";
    for (let tokenIndex = 0; tokenIndex < segment.length; tokenIndex++) {
      const token2 = segment[tokenIndex];
      let subSegmentScore = 40 + (options.sensitive ? 0.25 : 0);
      if (token2.type === 0) {
        if (!tokenIndex)
          pattern += "/";
        pattern += token2.value.replace(REGEX_CHARS_RE, "\\$&");
        subSegmentScore += 40;
      } else if (token2.type === 1) {
        const { value, repeatable, optional, regexp } = token2;
        keys2.push({
          name: value,
          repeatable,
          optional
        });
        const re2 = regexp ? regexp : BASE_PARAM_PATTERN;
        if (re2 !== BASE_PARAM_PATTERN) {
          subSegmentScore += 10;
          try {
            new RegExp(`(${re2})`);
          } catch (err) {
            throw new Error(`Invalid custom RegExp for param "${value}" (${re2}): ` + err.message);
          }
        }
        let subPattern = repeatable ? `((?:${re2})(?:/(?:${re2}))*)` : `(${re2})`;
        if (!tokenIndex)
          subPattern = // avoid an optional / if there are more segments e.g. /:p?-static
          // or /:p?-:p2
          optional && segment.length < 2 ? `(?:/${subPattern})` : "/" + subPattern;
        if (optional)
          subPattern += "?";
        pattern += subPattern;
        subSegmentScore += 20;
        if (optional)
          subSegmentScore += -8;
        if (repeatable)
          subSegmentScore += -20;
        if (re2 === ".*")
          subSegmentScore += -50;
      }
      segmentScores.push(subSegmentScore);
    }
    score.push(segmentScores);
  }
  if (options.strict && options.end) {
    const i = score.length - 1;
    score[i][score[i].length - 1] += 0.7000000000000001;
  }
  if (!options.strict)
    pattern += "/?";
  if (options.end)
    pattern += "$";
  else if (options.strict)
    pattern += "(?:/|$)";
  const re = new RegExp(pattern, options.sensitive ? "" : "i");
  function parse(path) {
    const match = path.match(re);
    const params = {};
    if (!match)
      return null;
    for (let i = 1; i < match.length; i++) {
      const value = match[i] || "";
      const key = keys2[i - 1];
      params[key.name] = value && key.repeatable ? value.split("/") : value;
    }
    return params;
  }
  function stringify(params) {
    let path = "";
    let avoidDuplicatedSlash = false;
    for (const segment of segments) {
      if (!avoidDuplicatedSlash || !path.endsWith("/"))
        path += "/";
      avoidDuplicatedSlash = false;
      for (const token2 of segment) {
        if (token2.type === 0) {
          path += token2.value;
        } else if (token2.type === 1) {
          const { value, repeatable, optional } = token2;
          const param = value in params ? params[value] : "";
          if (isArray$1(param) && !repeatable) {
            throw new Error(`Provided param "${value}" is an array but it is not repeatable (* or + modifiers)`);
          }
          const text = isArray$1(param) ? param.join("/") : param;
          if (!text) {
            if (optional) {
              if (segment.length < 2) {
                if (path.endsWith("/"))
                  path = path.slice(0, -1);
                else
                  avoidDuplicatedSlash = true;
              }
            } else
              throw new Error(`Missing required param "${value}"`);
          }
          path += text;
        }
      }
    }
    return path || "/";
  }
  return {
    re,
    score,
    keys: keys2,
    parse,
    stringify
  };
}
function compareScoreArray(a, b) {
  let i = 0;
  while (i < a.length && i < b.length) {
    const diff2 = b[i] - a[i];
    if (diff2)
      return diff2;
    i++;
  }
  if (a.length < b.length) {
    return a.length === 1 && a[0] === 40 + 40 ? -1 : 1;
  } else if (a.length > b.length) {
    return b.length === 1 && b[0] === 40 + 40 ? 1 : -1;
  }
  return 0;
}
function comparePathParserScore(a, b) {
  let i = 0;
  const aScore = a.score;
  const bScore = b.score;
  while (i < aScore.length && i < bScore.length) {
    const comp = compareScoreArray(aScore[i], bScore[i]);
    if (comp)
      return comp;
    i++;
  }
  if (Math.abs(bScore.length - aScore.length) === 1) {
    if (isLastScoreNegative(aScore))
      return 1;
    if (isLastScoreNegative(bScore))
      return -1;
  }
  return bScore.length - aScore.length;
}
function isLastScoreNegative(score) {
  const last = score[score.length - 1];
  return score.length > 0 && last[last.length - 1] < 0;
}
const ROOT_TOKEN = {
  type: 0,
  value: ""
};
const VALID_PARAM_RE = /[a-zA-Z0-9_]/;
function tokenizePath(path) {
  if (!path)
    return [[]];
  if (path === "/")
    return [[ROOT_TOKEN]];
  if (!path.startsWith("/")) {
    throw new Error(`Invalid path "${path}"`);
  }
  function crash(message) {
    throw new Error(`ERR (${state})/"${buffer}": ${message}`);
  }
  let state = 0;
  let previousState = state;
  const tokens2 = [];
  let segment;
  function finalizeSegment() {
    if (segment)
      tokens2.push(segment);
    segment = [];
  }
  let i = 0;
  let char;
  let buffer = "";
  let customRe = "";
  function consumeBuffer() {
    if (!buffer)
      return;
    if (state === 0) {
      segment.push({
        type: 0,
        value: buffer
      });
    } else if (state === 1 || state === 2 || state === 3) {
      if (segment.length > 1 && (char === "*" || char === "+"))
        crash(`A repeatable param (${buffer}) must be alone in its segment. eg: '/:ids+.`);
      segment.push({
        type: 1,
        value: buffer,
        regexp: customRe,
        repeatable: char === "*" || char === "+",
        optional: char === "*" || char === "?"
      });
    } else {
      crash("Invalid state to consume buffer");
    }
    buffer = "";
  }
  function addCharToBuffer() {
    buffer += char;
  }
  while (i < path.length) {
    char = path[i++];
    if (char === "\\" && state !== 2) {
      previousState = state;
      state = 4;
      continue;
    }
    switch (state) {
      case 0:
        if (char === "/") {
          if (buffer) {
            consumeBuffer();
          }
          finalizeSegment();
        } else if (char === ":") {
          consumeBuffer();
          state = 1;
        } else {
          addCharToBuffer();
        }
        break;
      case 4:
        addCharToBuffer();
        state = previousState;
        break;
      case 1:
        if (char === "(") {
          state = 2;
        } else if (VALID_PARAM_RE.test(char)) {
          addCharToBuffer();
        } else {
          consumeBuffer();
          state = 0;
          if (char !== "*" && char !== "?" && char !== "+")
            i--;
        }
        break;
      case 2:
        if (char === ")") {
          if (customRe[customRe.length - 1] == "\\")
            customRe = customRe.slice(0, -1) + char;
          else
            state = 3;
        } else {
          customRe += char;
        }
        break;
      case 3:
        consumeBuffer();
        state = 0;
        if (char !== "*" && char !== "?" && char !== "+")
          i--;
        customRe = "";
        break;
      default:
        crash("Unknown state");
        break;
    }
  }
  if (state === 2)
    crash(`Unfinished custom RegExp for param "${buffer}"`);
  consumeBuffer();
  finalizeSegment();
  return tokens2;
}
function createRouteRecordMatcher(record, parent, options) {
  const parser = tokensToParser(tokenizePath(record.path), options);
  const matcher = assign(parser, {
    record,
    parent,
    // these needs to be populated by the parent
    children: [],
    alias: []
  });
  if (parent) {
    if (!matcher.record.aliasOf === !parent.record.aliasOf)
      parent.children.push(matcher);
  }
  return matcher;
}
function createRouterMatcher(routes2, globalOptions) {
  const matchers = [];
  const matcherMap = /* @__PURE__ */ new Map();
  globalOptions = mergeOptions({ strict: false, end: true, sensitive: false }, globalOptions);
  function getRecordMatcher(name) {
    return matcherMap.get(name);
  }
  function addRoute(record, parent, originalRecord) {
    const isRootAdd = !originalRecord;
    const mainNormalizedRecord = normalizeRouteRecord(record);
    mainNormalizedRecord.aliasOf = originalRecord && originalRecord.record;
    const options = mergeOptions(globalOptions, record);
    const normalizedRecords = [
      mainNormalizedRecord
    ];
    if ("alias" in record) {
      const aliases2 = typeof record.alias === "string" ? [record.alias] : record.alias;
      for (const alias of aliases2) {
        normalizedRecords.push(assign({}, mainNormalizedRecord, {
          // this allows us to hold a copy of the `components` option
          // so that async components cache is hold on the original record
          components: originalRecord ? originalRecord.record.components : mainNormalizedRecord.components,
          path: alias,
          // we might be the child of an alias
          aliasOf: originalRecord ? originalRecord.record : mainNormalizedRecord
          // the aliases are always of the same kind as the original since they
          // are defined on the same record
        }));
      }
    }
    let matcher;
    let originalMatcher;
    for (const normalizedRecord of normalizedRecords) {
      const { path } = normalizedRecord;
      if (parent && path[0] !== "/") {
        const parentPath = parent.record.path;
        const connectingSlash = parentPath[parentPath.length - 1] === "/" ? "" : "/";
        normalizedRecord.path = parent.record.path + (path && connectingSlash + path);
      }
      matcher = createRouteRecordMatcher(normalizedRecord, parent, options);
      if (originalRecord) {
        originalRecord.alias.push(matcher);
      } else {
        originalMatcher = originalMatcher || matcher;
        if (originalMatcher !== matcher)
          originalMatcher.alias.push(matcher);
        if (isRootAdd && record.name && !isAliasRecord(matcher))
          removeRoute(record.name);
      }
      if (mainNormalizedRecord.children) {
        const children = mainNormalizedRecord.children;
        for (let i = 0; i < children.length; i++) {
          addRoute(children[i], matcher, originalRecord && originalRecord.children[i]);
        }
      }
      originalRecord = originalRecord || matcher;
      if (matcher.record.components && Object.keys(matcher.record.components).length || matcher.record.name || matcher.record.redirect) {
        insertMatcher(matcher);
      }
    }
    return originalMatcher ? () => {
      removeRoute(originalMatcher);
    } : noop;
  }
  function removeRoute(matcherRef) {
    if (isRouteName(matcherRef)) {
      const matcher = matcherMap.get(matcherRef);
      if (matcher) {
        matcherMap.delete(matcherRef);
        matchers.splice(matchers.indexOf(matcher), 1);
        matcher.children.forEach(removeRoute);
        matcher.alias.forEach(removeRoute);
      }
    } else {
      const index2 = matchers.indexOf(matcherRef);
      if (index2 > -1) {
        matchers.splice(index2, 1);
        if (matcherRef.record.name)
          matcherMap.delete(matcherRef.record.name);
        matcherRef.children.forEach(removeRoute);
        matcherRef.alias.forEach(removeRoute);
      }
    }
  }
  function getRoutes() {
    return matchers;
  }
  function insertMatcher(matcher) {
    let i = 0;
    while (i < matchers.length && comparePathParserScore(matcher, matchers[i]) >= 0 && // Adding children with empty path should still appear before the parent
    // https://github.com/vuejs/router/issues/1124
    (matcher.record.path !== matchers[i].record.path || !isRecordChildOf(matcher, matchers[i])))
      i++;
    matchers.splice(i, 0, matcher);
    if (matcher.record.name && !isAliasRecord(matcher))
      matcherMap.set(matcher.record.name, matcher);
  }
  function resolve2(location2, currentLocation) {
    let matcher;
    let params = {};
    let path;
    let name;
    if ("name" in location2 && location2.name) {
      matcher = matcherMap.get(location2.name);
      if (!matcher)
        throw createRouterError(1, {
          location: location2
        });
      name = matcher.record.name;
      params = assign(
        // paramsFromLocation is a new object
        paramsFromLocation(
          currentLocation.params,
          // only keep params that exist in the resolved location
          // TODO: only keep optional params coming from a parent record
          matcher.keys.filter((k) => !k.optional).map((k) => k.name)
        ),
        // discard any existing params in the current location that do not exist here
        // #1497 this ensures better active/exact matching
        location2.params && paramsFromLocation(location2.params, matcher.keys.map((k) => k.name))
      );
      path = matcher.stringify(params);
    } else if ("path" in location2) {
      path = location2.path;
      matcher = matchers.find((m) => m.re.test(path));
      if (matcher) {
        params = matcher.parse(path);
        name = matcher.record.name;
      }
    } else {
      matcher = currentLocation.name ? matcherMap.get(currentLocation.name) : matchers.find((m) => m.re.test(currentLocation.path));
      if (!matcher)
        throw createRouterError(1, {
          location: location2,
          currentLocation
        });
      name = matcher.record.name;
      params = assign({}, currentLocation.params, location2.params);
      path = matcher.stringify(params);
    }
    const matched = [];
    let parentMatcher = matcher;
    while (parentMatcher) {
      matched.unshift(parentMatcher.record);
      parentMatcher = parentMatcher.parent;
    }
    return {
      name,
      path,
      params,
      matched,
      meta: mergeMetaFields(matched)
    };
  }
  routes2.forEach((route) => addRoute(route));
  return { addRoute, resolve: resolve2, removeRoute, getRoutes, getRecordMatcher };
}
function paramsFromLocation(params, keys2) {
  const newParams = {};
  for (const key of keys2) {
    if (key in params)
      newParams[key] = params[key];
  }
  return newParams;
}
function normalizeRouteRecord(record) {
  return {
    path: record.path,
    redirect: record.redirect,
    name: record.name,
    meta: record.meta || {},
    aliasOf: void 0,
    beforeEnter: record.beforeEnter,
    props: normalizeRecordProps(record),
    children: record.children || [],
    instances: {},
    leaveGuards: /* @__PURE__ */ new Set(),
    updateGuards: /* @__PURE__ */ new Set(),
    enterCallbacks: {},
    components: "components" in record ? record.components || null : record.component && { default: record.component }
  };
}
function normalizeRecordProps(record) {
  const propsObject = {};
  const props = record.props || false;
  if ("component" in record) {
    propsObject.default = props;
  } else {
    for (const name in record.components)
      propsObject[name] = typeof props === "boolean" ? props : props[name];
  }
  return propsObject;
}
function isAliasRecord(record) {
  while (record) {
    if (record.record.aliasOf)
      return true;
    record = record.parent;
  }
  return false;
}
function mergeMetaFields(matched) {
  return matched.reduce((meta, record) => assign(meta, record.meta), {});
}
function mergeOptions(defaults2, partialOptions) {
  const options = {};
  for (const key in defaults2) {
    options[key] = key in partialOptions ? partialOptions[key] : defaults2[key];
  }
  return options;
}
function isRecordChildOf(record, parent) {
  return parent.children.some((child) => child === record || isRecordChildOf(record, child));
}
const HASH_RE = /#/g;
const AMPERSAND_RE = /&/g;
const SLASH_RE = /\//g;
const EQUAL_RE = /=/g;
const IM_RE = /\?/g;
const PLUS_RE = /\+/g;
const ENC_BRACKET_OPEN_RE = /%5B/g;
const ENC_BRACKET_CLOSE_RE = /%5D/g;
const ENC_CARET_RE = /%5E/g;
const ENC_BACKTICK_RE = /%60/g;
const ENC_CURLY_OPEN_RE = /%7B/g;
const ENC_PIPE_RE = /%7C/g;
const ENC_CURLY_CLOSE_RE = /%7D/g;
const ENC_SPACE_RE = /%20/g;
function commonEncode(text) {
  return encodeURI("" + text).replace(ENC_PIPE_RE, "|").replace(ENC_BRACKET_OPEN_RE, "[").replace(ENC_BRACKET_CLOSE_RE, "]");
}
function encodeHash(text) {
  return commonEncode(text).replace(ENC_CURLY_OPEN_RE, "{").replace(ENC_CURLY_CLOSE_RE, "}").replace(ENC_CARET_RE, "^");
}
function encodeQueryValue(text) {
  return commonEncode(text).replace(PLUS_RE, "%2B").replace(ENC_SPACE_RE, "+").replace(HASH_RE, "%23").replace(AMPERSAND_RE, "%26").replace(ENC_BACKTICK_RE, "`").replace(ENC_CURLY_OPEN_RE, "{").replace(ENC_CURLY_CLOSE_RE, "}").replace(ENC_CARET_RE, "^");
}
function encodeQueryKey(text) {
  return encodeQueryValue(text).replace(EQUAL_RE, "%3D");
}
function encodePath(text) {
  return commonEncode(text).replace(HASH_RE, "%23").replace(IM_RE, "%3F");
}
function encodeParam(text) {
  return text == null ? "" : encodePath(text).replace(SLASH_RE, "%2F");
}
function decode(text) {
  try {
    return decodeURIComponent("" + text);
  } catch (err) {
  }
  return "" + text;
}
function parseQuery(search) {
  const query = {};
  if (search === "" || search === "?")
    return query;
  const hasLeadingIM = search[0] === "?";
  const searchParams = (hasLeadingIM ? search.slice(1) : search).split("&");
  for (let i = 0; i < searchParams.length; ++i) {
    const searchParam = searchParams[i].replace(PLUS_RE, " ");
    const eqPos = searchParam.indexOf("=");
    const key = decode(eqPos < 0 ? searchParam : searchParam.slice(0, eqPos));
    const value = eqPos < 0 ? null : decode(searchParam.slice(eqPos + 1));
    if (key in query) {
      let currentValue = query[key];
      if (!isArray$1(currentValue)) {
        currentValue = query[key] = [currentValue];
      }
      currentValue.push(value);
    } else {
      query[key] = value;
    }
  }
  return query;
}
function stringifyQuery(query) {
  let search = "";
  for (let key in query) {
    const value = query[key];
    key = encodeQueryKey(key);
    if (value == null) {
      if (value !== void 0) {
        search += (search.length ? "&" : "") + key;
      }
      continue;
    }
    const values = isArray$1(value) ? value.map((v) => v && encodeQueryValue(v)) : [value && encodeQueryValue(value)];
    values.forEach((value2) => {
      if (value2 !== void 0) {
        search += (search.length ? "&" : "") + key;
        if (value2 != null)
          search += "=" + value2;
      }
    });
  }
  return search;
}
function normalizeQuery(query) {
  const normalizedQuery = {};
  for (const key in query) {
    const value = query[key];
    if (value !== void 0) {
      normalizedQuery[key] = isArray$1(value) ? value.map((v) => v == null ? null : "" + v) : value == null ? value : "" + value;
    }
  }
  return normalizedQuery;
}
const matchedRouteKey = Symbol("");
const viewDepthKey = Symbol("");
const routerKey = Symbol("");
const routeLocationKey = Symbol("");
const routerViewLocationKey = Symbol("");
function useCallbacks() {
  let handlers = [];
  function add2(handler) {
    handlers.push(handler);
    return () => {
      const i = handlers.indexOf(handler);
      if (i > -1)
        handlers.splice(i, 1);
    };
  }
  function reset() {
    handlers = [];
  }
  return {
    add: add2,
    list: () => handlers,
    reset
  };
}
function guardToPromiseFn(guard, to2, from2, record, name) {
  const enterCallbackArray = record && // name is defined if record is because of the function overload
  (record.enterCallbacks[name] = record.enterCallbacks[name] || []);
  return () => new Promise((resolve2, reject) => {
    const next = (valid) => {
      if (valid === false) {
        reject(createRouterError(4, {
          from: from2,
          to: to2
        }));
      } else if (valid instanceof Error) {
        reject(valid);
      } else if (isRouteLocation(valid)) {
        reject(createRouterError(2, {
          from: to2,
          to: valid
        }));
      } else {
        if (enterCallbackArray && // since enterCallbackArray is truthy, both record and name also are
        record.enterCallbacks[name] === enterCallbackArray && typeof valid === "function") {
          enterCallbackArray.push(valid);
        }
        resolve2();
      }
    };
    const guardReturn = guard.call(record && record.instances[name], to2, from2, next);
    let guardCall = Promise.resolve(guardReturn);
    if (guard.length < 3)
      guardCall = guardCall.then(next);
    guardCall.catch((err) => reject(err));
  });
}
function extractComponentsGuards(matched, guardType, to2, from2) {
  const guards = [];
  for (const record of matched) {
    for (const name in record.components) {
      let rawComponent = record.components[name];
      if (guardType !== "beforeRouteEnter" && !record.instances[name])
        continue;
      if (isRouteComponent(rawComponent)) {
        const options = rawComponent.__vccOpts || rawComponent;
        const guard = options[guardType];
        guard && guards.push(guardToPromiseFn(guard, to2, from2, record, name));
      } else {
        let componentPromise = rawComponent();
        guards.push(() => componentPromise.then((resolved) => {
          if (!resolved)
            return Promise.reject(new Error(`Couldn't resolve component "${name}" at "${record.path}"`));
          const resolvedComponent = isESModule(resolved) ? resolved.default : resolved;
          record.components[name] = resolvedComponent;
          const options = resolvedComponent.__vccOpts || resolvedComponent;
          const guard = options[guardType];
          return guard && guardToPromiseFn(guard, to2, from2, record, name)();
        }));
      }
    }
  }
  return guards;
}
function isRouteComponent(component) {
  return typeof component === "object" || "displayName" in component || "props" in component || "__vccOpts" in component;
}
function useLink(props) {
  const router2 = inject(routerKey);
  const currentRoute = inject(routeLocationKey);
  const route = computed(() => router2.resolve(unref(props.to)));
  const activeRecordIndex = computed(() => {
    const { matched } = route.value;
    const { length } = matched;
    const routeMatched = matched[length - 1];
    const currentMatched = currentRoute.matched;
    if (!routeMatched || !currentMatched.length)
      return -1;
    const index2 = currentMatched.findIndex(isSameRouteRecord.bind(null, routeMatched));
    if (index2 > -1)
      return index2;
    const parentRecordPath = getOriginalPath(matched[length - 2]);
    return (
      // we are dealing with nested routes
      length > 1 && // if the parent and matched route have the same path, this link is
      // referring to the empty child. Or we currently are on a different
      // child of the same parent
      getOriginalPath(routeMatched) === parentRecordPath && // avoid comparing the child with its parent
      currentMatched[currentMatched.length - 1].path !== parentRecordPath ? currentMatched.findIndex(isSameRouteRecord.bind(null, matched[length - 2])) : index2
    );
  });
  const isActive = computed(() => activeRecordIndex.value > -1 && includesParams(currentRoute.params, route.value.params));
  const isExactActive = computed(() => activeRecordIndex.value > -1 && activeRecordIndex.value === currentRoute.matched.length - 1 && isSameRouteLocationParams(currentRoute.params, route.value.params));
  function navigate(e = {}) {
    if (guardEvent(e)) {
      return router2[unref(props.replace) ? "replace" : "push"](
        unref(props.to)
        // avoid uncaught errors are they are logged anyway
      ).catch(noop);
    }
    return Promise.resolve();
  }
  return {
    route,
    href: computed(() => route.value.href),
    isActive,
    isExactActive,
    navigate
  };
}
const RouterLinkImpl = /* @__PURE__ */ defineComponent({
  name: "RouterLink",
  compatConfig: { MODE: 3 },
  props: {
    to: {
      type: [String, Object],
      required: true
    },
    replace: Boolean,
    activeClass: String,
    // inactiveClass: String,
    exactActiveClass: String,
    custom: Boolean,
    ariaCurrentValue: {
      type: String,
      default: "page"
    }
  },
  useLink,
  setup(props, { slots }) {
    const link2 = reactive(useLink(props));
    const { options } = inject(routerKey);
    const elClass = computed(() => ({
      [getLinkClass(props.activeClass, options.linkActiveClass, "router-link-active")]: link2.isActive,
      // [getLinkClass(
      //   props.inactiveClass,
      //   options.linkInactiveClass,
      //   'router-link-inactive'
      // )]: !link.isExactActive,
      [getLinkClass(props.exactActiveClass, options.linkExactActiveClass, "router-link-exact-active")]: link2.isExactActive
    }));
    return () => {
      const children = slots.default && slots.default(link2);
      return props.custom ? children : h("a", {
        "aria-current": link2.isExactActive ? props.ariaCurrentValue : null,
        href: link2.href,
        // this would override user added attrs but Vue will still add
        // the listener, so we end up triggering both
        onClick: link2.navigate,
        class: elClass.value
      }, children);
    };
  }
});
const RouterLink = RouterLinkImpl;
function guardEvent(e) {
  if (e.metaKey || e.altKey || e.ctrlKey || e.shiftKey)
    return;
  if (e.defaultPrevented)
    return;
  if (e.button !== void 0 && e.button !== 0)
    return;
  if (e.currentTarget && e.currentTarget.getAttribute) {
    const target = e.currentTarget.getAttribute("target");
    if (/\b_blank\b/i.test(target))
      return;
  }
  if (e.preventDefault)
    e.preventDefault();
  return true;
}
function includesParams(outer, inner) {
  for (const key in inner) {
    const innerValue = inner[key];
    const outerValue = outer[key];
    if (typeof innerValue === "string") {
      if (innerValue !== outerValue)
        return false;
    } else {
      if (!isArray$1(outerValue) || outerValue.length !== innerValue.length || innerValue.some((value, i) => value !== outerValue[i]))
        return false;
    }
  }
  return true;
}
function getOriginalPath(record) {
  return record ? record.aliasOf ? record.aliasOf.path : record.path : "";
}
const getLinkClass = (propClass, globalClass, defaultClass) => propClass != null ? propClass : globalClass != null ? globalClass : defaultClass;
const RouterViewImpl = /* @__PURE__ */ defineComponent({
  name: "RouterView",
  // #674 we manually inherit them
  inheritAttrs: false,
  props: {
    name: {
      type: String,
      default: "default"
    },
    route: Object
  },
  // Better compat for @vue/compat users
  // https://github.com/vuejs/router/issues/1315
  compatConfig: { MODE: 3 },
  setup(props, { attrs, slots }) {
    const injectedRoute = inject(routerViewLocationKey);
    const routeToDisplay = computed(() => props.route || injectedRoute.value);
    const injectedDepth = inject(viewDepthKey, 0);
    const depth = computed(() => {
      let initialDepth = unref(injectedDepth);
      const { matched } = routeToDisplay.value;
      let matchedRoute;
      while ((matchedRoute = matched[initialDepth]) && !matchedRoute.components) {
        initialDepth++;
      }
      return initialDepth;
    });
    const matchedRouteRef = computed(() => routeToDisplay.value.matched[depth.value]);
    provide(viewDepthKey, computed(() => depth.value + 1));
    provide(matchedRouteKey, matchedRouteRef);
    provide(routerViewLocationKey, routeToDisplay);
    const viewRef = ref();
    watch(() => [viewRef.value, matchedRouteRef.value, props.name], ([instance, to2, name], [oldInstance, from2, oldName]) => {
      if (to2) {
        to2.instances[name] = instance;
        if (from2 && from2 !== to2 && instance && instance === oldInstance) {
          if (!to2.leaveGuards.size) {
            to2.leaveGuards = from2.leaveGuards;
          }
          if (!to2.updateGuards.size) {
            to2.updateGuards = from2.updateGuards;
          }
        }
      }
      if (instance && to2 && // if there is no instance but to and from are the same this might be
      // the first visit
      (!from2 || !isSameRouteRecord(to2, from2) || !oldInstance)) {
        (to2.enterCallbacks[name] || []).forEach((callback) => callback(instance));
      }
    }, { flush: "post" });
    return () => {
      const route = routeToDisplay.value;
      const currentName = props.name;
      const matchedRoute = matchedRouteRef.value;
      const ViewComponent = matchedRoute && matchedRoute.components[currentName];
      if (!ViewComponent) {
        return normalizeSlot(slots.default, { Component: ViewComponent, route });
      }
      const routePropsOption = matchedRoute.props[currentName];
      const routeProps = routePropsOption ? routePropsOption === true ? route.params : typeof routePropsOption === "function" ? routePropsOption(route) : routePropsOption : null;
      const onVnodeUnmounted = (vnode) => {
        if (vnode.component.isUnmounted) {
          matchedRoute.instances[currentName] = null;
        }
      };
      const component = h(ViewComponent, assign({}, routeProps, attrs, {
        onVnodeUnmounted,
        ref: viewRef
      }));
      return (
        // pass the vnode to the slot as a prop.
        // h and <component :is="..."> both accept vnodes
        normalizeSlot(slots.default, { Component: component, route }) || component
      );
    };
  }
});
function normalizeSlot(slot, data) {
  if (!slot)
    return null;
  const slotContent = slot(data);
  return slotContent.length === 1 ? slotContent[0] : slotContent;
}
const RouterView = RouterViewImpl;
function createRouter(options) {
  const matcher = createRouterMatcher(options.routes, options);
  const parseQuery$1 = options.parseQuery || parseQuery;
  const stringifyQuery$1 = options.stringifyQuery || stringifyQuery;
  const routerHistory = options.history;
  const beforeGuards = useCallbacks();
  const beforeResolveGuards = useCallbacks();
  const afterGuards = useCallbacks();
  const currentRoute = shallowRef(START_LOCATION_NORMALIZED);
  let pendingLocation = START_LOCATION_NORMALIZED;
  if (isBrowser && options.scrollBehavior && "scrollRestoration" in history) {
    history.scrollRestoration = "manual";
  }
  const normalizeParams = applyToParams.bind(null, (paramValue) => "" + paramValue);
  const encodeParams = applyToParams.bind(null, encodeParam);
  const decodeParams = (
    // @ts-expect-error: intentionally avoid the type check
    applyToParams.bind(null, decode)
  );
  function addRoute(parentOrRoute, route) {
    let parent;
    let record;
    if (isRouteName(parentOrRoute)) {
      parent = matcher.getRecordMatcher(parentOrRoute);
      record = route;
    } else {
      record = parentOrRoute;
    }
    return matcher.addRoute(record, parent);
  }
  function removeRoute(name) {
    const recordMatcher = matcher.getRecordMatcher(name);
    if (recordMatcher) {
      matcher.removeRoute(recordMatcher);
    }
  }
  function getRoutes() {
    return matcher.getRoutes().map((routeMatcher) => routeMatcher.record);
  }
  function hasRoute(name) {
    return !!matcher.getRecordMatcher(name);
  }
  function resolve2(rawLocation, currentLocation) {
    currentLocation = assign({}, currentLocation || currentRoute.value);
    if (typeof rawLocation === "string") {
      const locationNormalized = parseURL(parseQuery$1, rawLocation, currentLocation.path);
      const matchedRoute2 = matcher.resolve({ path: locationNormalized.path }, currentLocation);
      const href2 = routerHistory.createHref(locationNormalized.fullPath);
      return assign(locationNormalized, matchedRoute2, {
        params: decodeParams(matchedRoute2.params),
        hash: decode(locationNormalized.hash),
        redirectedFrom: void 0,
        href: href2
      });
    }
    let matcherLocation;
    if ("path" in rawLocation) {
      matcherLocation = assign({}, rawLocation, {
        path: parseURL(parseQuery$1, rawLocation.path, currentLocation.path).path
      });
    } else {
      const targetParams = assign({}, rawLocation.params);
      for (const key in targetParams) {
        if (targetParams[key] == null) {
          delete targetParams[key];
        }
      }
      matcherLocation = assign({}, rawLocation, {
        params: encodeParams(rawLocation.params)
      });
      currentLocation.params = encodeParams(currentLocation.params);
    }
    const matchedRoute = matcher.resolve(matcherLocation, currentLocation);
    const hash2 = rawLocation.hash || "";
    matchedRoute.params = normalizeParams(decodeParams(matchedRoute.params));
    const fullPath = stringifyURL(stringifyQuery$1, assign({}, rawLocation, {
      hash: encodeHash(hash2),
      path: matchedRoute.path
    }));
    const href = routerHistory.createHref(fullPath);
    return assign({
      fullPath,
      // keep the hash encoded so fullPath is effectively path + encodedQuery +
      // hash
      hash: hash2,
      query: (
        // if the user is using a custom query lib like qs, we might have
        // nested objects, so we keep the query as is, meaning it can contain
        // numbers at `$route.query`, but at the point, the user will have to
        // use their own type anyway.
        // https://github.com/vuejs/router/issues/328#issuecomment-649481567
        stringifyQuery$1 === stringifyQuery ? normalizeQuery(rawLocation.query) : rawLocation.query || {}
      )
    }, matchedRoute, {
      redirectedFrom: void 0,
      href
    });
  }
  function locationAsObject(to2) {
    return typeof to2 === "string" ? parseURL(parseQuery$1, to2, currentRoute.value.path) : assign({}, to2);
  }
  function checkCanceledNavigation(to2, from2) {
    if (pendingLocation !== to2) {
      return createRouterError(8, {
        from: from2,
        to: to2
      });
    }
  }
  function push(to2) {
    return pushWithRedirect(to2);
  }
  function replace(to2) {
    return push(assign(locationAsObject(to2), { replace: true }));
  }
  function handleRedirectRecord(to2) {
    const lastMatched = to2.matched[to2.matched.length - 1];
    if (lastMatched && lastMatched.redirect) {
      const { redirect } = lastMatched;
      let newTargetLocation = typeof redirect === "function" ? redirect(to2) : redirect;
      if (typeof newTargetLocation === "string") {
        newTargetLocation = newTargetLocation.includes("?") || newTargetLocation.includes("#") ? newTargetLocation = locationAsObject(newTargetLocation) : (
          // force empty params
          { path: newTargetLocation }
        );
        newTargetLocation.params = {};
      }
      return assign({
        query: to2.query,
        hash: to2.hash,
        // avoid transferring params if the redirect has a path
        params: "path" in newTargetLocation ? {} : to2.params
      }, newTargetLocation);
    }
  }
  function pushWithRedirect(to2, redirectedFrom) {
    const targetLocation = pendingLocation = resolve2(to2);
    const from2 = currentRoute.value;
    const data = to2.state;
    const force = to2.force;
    const replace2 = to2.replace === true;
    const shouldRedirect = handleRedirectRecord(targetLocation);
    if (shouldRedirect)
      return pushWithRedirect(
        assign(locationAsObject(shouldRedirect), {
          state: typeof shouldRedirect === "object" ? assign({}, data, shouldRedirect.state) : data,
          force,
          replace: replace2
        }),
        // keep original redirectedFrom if it exists
        redirectedFrom || targetLocation
      );
    const toLocation = targetLocation;
    toLocation.redirectedFrom = redirectedFrom;
    let failure;
    if (!force && isSameRouteLocation(stringifyQuery$1, from2, targetLocation)) {
      failure = createRouterError(16, { to: toLocation, from: from2 });
      handleScroll(
        from2,
        from2,
        // this is a push, the only way for it to be triggered from a
        // history.listen is with a redirect, which makes it become a push
        true,
        // This cannot be the first navigation because the initial location
        // cannot be manually navigated to
        false
      );
    }
    return (failure ? Promise.resolve(failure) : navigate(toLocation, from2)).catch((error) => isNavigationFailure(error) ? (
      // navigation redirects still mark the router as ready
      isNavigationFailure(
        error,
        2
        /* ErrorTypes.NAVIGATION_GUARD_REDIRECT */
      ) ? error : markAsReady(error)
    ) : (
      // reject any unknown error
      triggerError(error, toLocation, from2)
    )).then((failure2) => {
      if (failure2) {
        if (isNavigationFailure(
          failure2,
          2
          /* ErrorTypes.NAVIGATION_GUARD_REDIRECT */
        )) {
          return pushWithRedirect(
            // keep options
            assign({
              // preserve an existing replacement but allow the redirect to override it
              replace: replace2
            }, locationAsObject(failure2.to), {
              state: typeof failure2.to === "object" ? assign({}, data, failure2.to.state) : data,
              force
            }),
            // preserve the original redirectedFrom if any
            redirectedFrom || toLocation
          );
        }
      } else {
        failure2 = finalizeNavigation(toLocation, from2, true, replace2, data);
      }
      triggerAfterEach(toLocation, from2, failure2);
      return failure2;
    });
  }
  function checkCanceledNavigationAndReject(to2, from2) {
    const error = checkCanceledNavigation(to2, from2);
    return error ? Promise.reject(error) : Promise.resolve();
  }
  function navigate(to2, from2) {
    let guards;
    const [leavingRecords, updatingRecords, enteringRecords] = extractChangingRecords(to2, from2);
    guards = extractComponentsGuards(leavingRecords.reverse(), "beforeRouteLeave", to2, from2);
    for (const record of leavingRecords) {
      record.leaveGuards.forEach((guard) => {
        guards.push(guardToPromiseFn(guard, to2, from2));
      });
    }
    const canceledNavigationCheck = checkCanceledNavigationAndReject.bind(null, to2, from2);
    guards.push(canceledNavigationCheck);
    return runGuardQueue(guards).then(() => {
      guards = [];
      for (const guard of beforeGuards.list()) {
        guards.push(guardToPromiseFn(guard, to2, from2));
      }
      guards.push(canceledNavigationCheck);
      return runGuardQueue(guards);
    }).then(() => {
      guards = extractComponentsGuards(updatingRecords, "beforeRouteUpdate", to2, from2);
      for (const record of updatingRecords) {
        record.updateGuards.forEach((guard) => {
          guards.push(guardToPromiseFn(guard, to2, from2));
        });
      }
      guards.push(canceledNavigationCheck);
      return runGuardQueue(guards);
    }).then(() => {
      guards = [];
      for (const record of to2.matched) {
        if (record.beforeEnter && !from2.matched.includes(record)) {
          if (isArray$1(record.beforeEnter)) {
            for (const beforeEnter of record.beforeEnter)
              guards.push(guardToPromiseFn(beforeEnter, to2, from2));
          } else {
            guards.push(guardToPromiseFn(record.beforeEnter, to2, from2));
          }
        }
      }
      guards.push(canceledNavigationCheck);
      return runGuardQueue(guards);
    }).then(() => {
      to2.matched.forEach((record) => record.enterCallbacks = {});
      guards = extractComponentsGuards(enteringRecords, "beforeRouteEnter", to2, from2);
      guards.push(canceledNavigationCheck);
      return runGuardQueue(guards);
    }).then(() => {
      guards = [];
      for (const guard of beforeResolveGuards.list()) {
        guards.push(guardToPromiseFn(guard, to2, from2));
      }
      guards.push(canceledNavigationCheck);
      return runGuardQueue(guards);
    }).catch((err) => isNavigationFailure(
      err,
      8
      /* ErrorTypes.NAVIGATION_CANCELLED */
    ) ? err : Promise.reject(err));
  }
  function triggerAfterEach(to2, from2, failure) {
    for (const guard of afterGuards.list())
      guard(to2, from2, failure);
  }
  function finalizeNavigation(toLocation, from2, isPush, replace2, data) {
    const error = checkCanceledNavigation(toLocation, from2);
    if (error)
      return error;
    const isFirstNavigation = from2 === START_LOCATION_NORMALIZED;
    const state = !isBrowser ? {} : history.state;
    if (isPush) {
      if (replace2 || isFirstNavigation)
        routerHistory.replace(toLocation.fullPath, assign({
          scroll: isFirstNavigation && state && state.scroll
        }, data));
      else
        routerHistory.push(toLocation.fullPath, data);
    }
    currentRoute.value = toLocation;
    handleScroll(toLocation, from2, isPush, isFirstNavigation);
    markAsReady();
  }
  let removeHistoryListener;
  function setupListeners() {
    if (removeHistoryListener)
      return;
    removeHistoryListener = routerHistory.listen((to2, _from, info) => {
      if (!router2.listening)
        return;
      const toLocation = resolve2(to2);
      const shouldRedirect = handleRedirectRecord(toLocation);
      if (shouldRedirect) {
        pushWithRedirect(assign(shouldRedirect, { replace: true }), toLocation).catch(noop);
        return;
      }
      pendingLocation = toLocation;
      const from2 = currentRoute.value;
      if (isBrowser) {
        saveScrollPosition(getScrollKey(from2.fullPath, info.delta), computeScrollPosition());
      }
      navigate(toLocation, from2).catch((error) => {
        if (isNavigationFailure(
          error,
          4 | 8
          /* ErrorTypes.NAVIGATION_CANCELLED */
        )) {
          return error;
        }
        if (isNavigationFailure(
          error,
          2
          /* ErrorTypes.NAVIGATION_GUARD_REDIRECT */
        )) {
          pushWithRedirect(
            error.to,
            toLocation
            // avoid an uncaught rejection, let push call triggerError
          ).then((failure) => {
            if (isNavigationFailure(
              failure,
              4 | 16
              /* ErrorTypes.NAVIGATION_DUPLICATED */
            ) && !info.delta && info.type === NavigationType.pop) {
              routerHistory.go(-1, false);
            }
          }).catch(noop);
          return Promise.reject();
        }
        if (info.delta) {
          routerHistory.go(-info.delta, false);
        }
        return triggerError(error, toLocation, from2);
      }).then((failure) => {
        failure = failure || finalizeNavigation(
          // after navigation, all matched components are resolved
          toLocation,
          from2,
          false
        );
        if (failure) {
          if (info.delta && // a new navigation has been triggered, so we do not want to revert, that will change the current history
          // entry while a different route is displayed
          !isNavigationFailure(
            failure,
            8
            /* ErrorTypes.NAVIGATION_CANCELLED */
          )) {
            routerHistory.go(-info.delta, false);
          } else if (info.type === NavigationType.pop && isNavigationFailure(
            failure,
            4 | 16
            /* ErrorTypes.NAVIGATION_DUPLICATED */
          )) {
            routerHistory.go(-1, false);
          }
        }
        triggerAfterEach(toLocation, from2, failure);
      }).catch(noop);
    });
  }
  let readyHandlers = useCallbacks();
  let errorHandlers = useCallbacks();
  let ready;
  function triggerError(error, to2, from2) {
    markAsReady(error);
    const list2 = errorHandlers.list();
    if (list2.length) {
      list2.forEach((handler) => handler(error, to2, from2));
    } else {
      console.error(error);
    }
    return Promise.reject(error);
  }
  function isReady() {
    if (ready && currentRoute.value !== START_LOCATION_NORMALIZED)
      return Promise.resolve();
    return new Promise((resolve3, reject) => {
      readyHandlers.add([resolve3, reject]);
    });
  }
  function markAsReady(err) {
    if (!ready) {
      ready = !err;
      setupListeners();
      readyHandlers.list().forEach(([resolve3, reject]) => err ? reject(err) : resolve3());
      readyHandlers.reset();
    }
    return err;
  }
  function handleScroll(to2, from2, isPush, isFirstNavigation) {
    const { scrollBehavior } = options;
    if (!isBrowser || !scrollBehavior)
      return Promise.resolve();
    const scrollPosition = !isPush && getSavedScrollPosition(getScrollKey(to2.fullPath, 0)) || (isFirstNavigation || !isPush) && history.state && history.state.scroll || null;
    return nextTick().then(() => scrollBehavior(to2, from2, scrollPosition)).then((position) => position && scrollToPosition(position)).catch((err) => triggerError(err, to2, from2));
  }
  const go = (delta) => routerHistory.go(delta);
  let started;
  const installedApps = /* @__PURE__ */ new Set();
  const router2 = {
    currentRoute,
    listening: true,
    addRoute,
    removeRoute,
    hasRoute,
    getRoutes,
    resolve: resolve2,
    options,
    push,
    replace,
    go,
    back: () => go(-1),
    forward: () => go(1),
    beforeEach: beforeGuards.add,
    beforeResolve: beforeResolveGuards.add,
    afterEach: afterGuards.add,
    onError: errorHandlers.add,
    isReady,
    install(app2) {
      const router3 = this;
      app2.component("RouterLink", RouterLink);
      app2.component("RouterView", RouterView);
      app2.config.globalProperties.$router = router3;
      Object.defineProperty(app2.config.globalProperties, "$route", {
        enumerable: true,
        get: () => unref(currentRoute)
      });
      if (isBrowser && // used for the initial navigation client side to avoid pushing
      // multiple times when the router is used in multiple apps
      !started && currentRoute.value === START_LOCATION_NORMALIZED) {
        started = true;
        push(routerHistory.location).catch((err) => {
        });
      }
      const reactiveRoute = {};
      for (const key in START_LOCATION_NORMALIZED) {
        reactiveRoute[key] = computed(() => currentRoute.value[key]);
      }
      app2.provide(routerKey, router3);
      app2.provide(routeLocationKey, reactive(reactiveRoute));
      app2.provide(routerViewLocationKey, currentRoute);
      const unmountApp = app2.unmount;
      installedApps.add(app2);
      app2.unmount = function() {
        installedApps.delete(app2);
        if (installedApps.size < 1) {
          pendingLocation = START_LOCATION_NORMALIZED;
          removeHistoryListener && removeHistoryListener();
          removeHistoryListener = null;
          currentRoute.value = START_LOCATION_NORMALIZED;
          started = false;
          ready = false;
        }
        unmountApp();
      };
    }
  };
  return router2;
}
function runGuardQueue(guards) {
  return guards.reduce((promise, guard) => promise.then(() => guard()), Promise.resolve());
}
function extractChangingRecords(to2, from2) {
  const leavingRecords = [];
  const updatingRecords = [];
  const enteringRecords = [];
  const len = Math.max(from2.matched.length, to2.matched.length);
  for (let i = 0; i < len; i++) {
    const recordFrom = from2.matched[i];
    if (recordFrom) {
      if (to2.matched.find((record) => isSameRouteRecord(record, recordFrom)))
        updatingRecords.push(recordFrom);
      else
        leavingRecords.push(recordFrom);
    }
    const recordTo = to2.matched[i];
    if (recordTo) {
      if (!from2.matched.find((record) => isSameRouteRecord(record, recordTo))) {
        enteringRecords.push(recordTo);
      }
    }
  }
  return [leavingRecords, updatingRecords, enteringRecords];
}
function useRouter() {
  return inject(routerKey);
}
const scriptRel = function detectScriptRel() {
  const relList = document.createElement("link").relList;
  return relList && relList.supports && relList.supports("modulepreload") ? "modulepreload" : "preload";
}();
const assetsURL = function(dep, importerUrl) {
  return new URL(dep, importerUrl).href;
};
const seen = {};
const __vitePreload = function preload(baseModule, deps, importerUrl) {
  if (!deps || deps.length === 0) {
    return baseModule();
  }
  const links = document.getElementsByTagName("link");
  return Promise.all(deps.map((dep) => {
    dep = assetsURL(dep, importerUrl);
    if (dep in seen)
      return;
    seen[dep] = true;
    const isCss = dep.endsWith(".css");
    const cssSelector = isCss ? '[rel="stylesheet"]' : "";
    const isBaseRelative = !!importerUrl;
    if (isBaseRelative) {
      for (let i = links.length - 1; i >= 0; i--) {
        const link3 = links[i];
        if (link3.href === dep && (!isCss || link3.rel === "stylesheet")) {
          return;
        }
      }
    } else if (document.querySelector(`link[href="${dep}"]${cssSelector}`)) {
      return;
    }
    const link2 = document.createElement("link");
    link2.rel = isCss ? "stylesheet" : scriptRel;
    if (!isCss) {
      link2.as = "script";
      link2.crossOrigin = "";
    }
    link2.href = dep;
    document.head.appendChild(link2);
    if (isCss) {
      return new Promise((res, rej) => {
        link2.addEventListener("load", res);
        link2.addEventListener("error", () => rej(new Error(`Unable to preload CSS for ${dep}`)));
      });
    }
  })).then(() => baseModule());
};
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
var sweetalert2_allExports = {};
var sweetalert2_all = {
  get exports() {
    return sweetalert2_allExports;
  },
  set exports(v) {
    sweetalert2_allExports = v;
  }
};
/*!
* sweetalert2 v11.7.5
* Released under the MIT License.
*/
(function(module2, exports) {
  (function(global2, factory) {
    module2.exports = factory();
  })(commonjsGlobal, function() {
    var privateProps = {
      awaitingPromise: /* @__PURE__ */ new WeakMap(),
      promise: /* @__PURE__ */ new WeakMap(),
      innerParams: /* @__PURE__ */ new WeakMap(),
      domCache: /* @__PURE__ */ new WeakMap()
    };
    const swalPrefix = "swal2-";
    const prefix = (items) => {
      const result = {};
      for (const i in items) {
        result[items[i]] = swalPrefix + items[i];
      }
      return result;
    };
    const swalClasses = prefix(["container", "shown", "height-auto", "iosfix", "popup", "modal", "no-backdrop", "no-transition", "toast", "toast-shown", "show", "hide", "close", "title", "html-container", "actions", "confirm", "deny", "cancel", "default-outline", "footer", "icon", "icon-content", "image", "input", "file", "range", "select", "radio", "checkbox", "label", "textarea", "inputerror", "input-label", "validation-message", "progress-steps", "active-progress-step", "progress-step", "progress-step-line", "loader", "loading", "styled", "top", "top-start", "top-end", "top-left", "top-right", "center", "center-start", "center-end", "center-left", "center-right", "bottom", "bottom-start", "bottom-end", "bottom-left", "bottom-right", "grow-row", "grow-column", "grow-fullscreen", "rtl", "timer-progress-bar", "timer-progress-bar-container", "scrollbar-measure", "icon-success", "icon-warning", "icon-info", "icon-question", "icon-error"]);
    const iconTypes = prefix(["success", "warning", "info", "question", "error"]);
    const consolePrefix = "SweetAlert2:";
    const uniqueArray = (arr) => {
      const result = [];
      for (let i = 0; i < arr.length; i++) {
        if (result.indexOf(arr[i]) === -1) {
          result.push(arr[i]);
        }
      }
      return result;
    };
    const capitalizeFirstLetter = (str) => str.charAt(0).toUpperCase() + str.slice(1);
    const warn2 = (message) => {
      console.warn(`${consolePrefix} ${typeof message === "object" ? message.join(" ") : message}`);
    };
    const error = (message) => {
      console.error(`${consolePrefix} ${message}`);
    };
    const previousWarnOnceMessages = [];
    const warnOnce = (message) => {
      if (!previousWarnOnceMessages.includes(message)) {
        previousWarnOnceMessages.push(message);
        warn2(message);
      }
    };
    const warnAboutDeprecation = (deprecatedParam, useInstead) => {
      warnOnce(`"${deprecatedParam}" is deprecated and will be removed in the next major release. Please use "${useInstead}" instead.`);
    };
    const callIfFunction = (arg) => typeof arg === "function" ? arg() : arg;
    const hasToPromiseFn = (arg) => arg && typeof arg.toPromise === "function";
    const asPromise = (arg) => hasToPromiseFn(arg) ? arg.toPromise() : Promise.resolve(arg);
    const isPromise2 = (arg) => arg && Promise.resolve(arg) === arg;
    const getContainer = () => document.body.querySelector(`.${swalClasses.container}`);
    const elementBySelector = (selectorString) => {
      const container = getContainer();
      return container ? container.querySelector(selectorString) : null;
    };
    const elementByClass = (className) => {
      return elementBySelector(`.${className}`);
    };
    const getPopup = () => elementByClass(swalClasses.popup);
    const getIcon = () => elementByClass(swalClasses.icon);
    const getIconContent = () => elementByClass(swalClasses["icon-content"]);
    const getTitle = () => elementByClass(swalClasses.title);
    const getHtmlContainer = () => elementByClass(swalClasses["html-container"]);
    const getImage = () => elementByClass(swalClasses.image);
    const getProgressSteps = () => elementByClass(swalClasses["progress-steps"]);
    const getValidationMessage = () => elementByClass(swalClasses["validation-message"]);
    const getConfirmButton = () => (
      /** @type {HTMLButtonElement} */
      elementBySelector(`.${swalClasses.actions} .${swalClasses.confirm}`)
    );
    const getCancelButton = () => (
      /** @type {HTMLButtonElement} */
      elementBySelector(`.${swalClasses.actions} .${swalClasses.cancel}`)
    );
    const getDenyButton = () => (
      /** @type {HTMLButtonElement} */
      elementBySelector(`.${swalClasses.actions} .${swalClasses.deny}`)
    );
    const getInputLabel = () => elementByClass(swalClasses["input-label"]);
    const getLoader = () => elementBySelector(`.${swalClasses.loader}`);
    const getActions = () => elementByClass(swalClasses.actions);
    const getFooter = () => elementByClass(swalClasses.footer);
    const getTimerProgressBar = () => elementByClass(swalClasses["timer-progress-bar"]);
    const getCloseButton = () => elementByClass(swalClasses.close);
    const focusable = `
  a[href],
  area[href],
  input:not([disabled]),
  select:not([disabled]),
  textarea:not([disabled]),
  button:not([disabled]),
  iframe,
  object,
  embed,
  [tabindex="0"],
  [contenteditable],
  audio[controls],
  video[controls],
  summary
`;
    const getFocusableElements = () => {
      const focusableElementsWithTabindex = Array.from(getPopup().querySelectorAll('[tabindex]:not([tabindex="-1"]):not([tabindex="0"])')).sort((a, b) => {
        const tabindexA = parseInt(a.getAttribute("tabindex"));
        const tabindexB = parseInt(b.getAttribute("tabindex"));
        if (tabindexA > tabindexB) {
          return 1;
        } else if (tabindexA < tabindexB) {
          return -1;
        }
        return 0;
      });
      const otherFocusableElements = Array.from(getPopup().querySelectorAll(focusable)).filter((el) => el.getAttribute("tabindex") !== "-1");
      return uniqueArray(focusableElementsWithTabindex.concat(otherFocusableElements)).filter((el) => isVisible$1(el));
    };
    const isModal = () => {
      return hasClass(document.body, swalClasses.shown) && !hasClass(document.body, swalClasses["toast-shown"]) && !hasClass(document.body, swalClasses["no-backdrop"]);
    };
    const isToast = () => {
      return getPopup() && hasClass(getPopup(), swalClasses.toast);
    };
    const isLoading = () => {
      return getPopup().hasAttribute("data-loading");
    };
    const states = {
      previousBodyPadding: null
    };
    const setInnerHtml = (elem, html2) => {
      elem.textContent = "";
      if (html2) {
        const parser = new DOMParser();
        const parsed = parser.parseFromString(html2, `text/html`);
        Array.from(parsed.querySelector("head").childNodes).forEach((child) => {
          elem.appendChild(child);
        });
        Array.from(parsed.querySelector("body").childNodes).forEach((child) => {
          if (child instanceof HTMLVideoElement || child instanceof HTMLAudioElement) {
            elem.appendChild(child.cloneNode(true));
          } else {
            elem.appendChild(child);
          }
        });
      }
    };
    const hasClass = (elem, className) => {
      if (!className) {
        return false;
      }
      const classList = className.split(/\s+/);
      for (let i = 0; i < classList.length; i++) {
        if (!elem.classList.contains(classList[i])) {
          return false;
        }
      }
      return true;
    };
    const removeCustomClasses = (elem, params) => {
      Array.from(elem.classList).forEach((className) => {
        if (!Object.values(swalClasses).includes(className) && !Object.values(iconTypes).includes(className) && !Object.values(params.showClass).includes(className)) {
          elem.classList.remove(className);
        }
      });
    };
    const applyCustomClass = (elem, params, className) => {
      removeCustomClasses(elem, params);
      if (params.customClass && params.customClass[className]) {
        if (typeof params.customClass[className] !== "string" && !params.customClass[className].forEach) {
          warn2(`Invalid type of customClass.${className}! Expected string or iterable object, got "${typeof params.customClass[className]}"`);
          return;
        }
        addClass(elem, params.customClass[className]);
      }
    };
    const getInput$1 = (popup, inputClass) => {
      if (!inputClass) {
        return null;
      }
      switch (inputClass) {
        case "select":
        case "textarea":
        case "file":
          return popup.querySelector(`.${swalClasses.popup} > .${swalClasses[inputClass]}`);
        case "checkbox":
          return popup.querySelector(`.${swalClasses.popup} > .${swalClasses.checkbox} input`);
        case "radio":
          return popup.querySelector(`.${swalClasses.popup} > .${swalClasses.radio} input:checked`) || popup.querySelector(`.${swalClasses.popup} > .${swalClasses.radio} input:first-child`);
        case "range":
          return popup.querySelector(`.${swalClasses.popup} > .${swalClasses.range} input`);
        default:
          return popup.querySelector(`.${swalClasses.popup} > .${swalClasses.input}`);
      }
    };
    const focusInput = (input2) => {
      input2.focus();
      if (input2.type !== "file") {
        const val = input2.value;
        input2.value = "";
        input2.value = val;
      }
    };
    const toggleClass = (target, classList, condition) => {
      if (!target || !classList) {
        return;
      }
      if (typeof classList === "string") {
        classList = classList.split(/\s+/).filter(Boolean);
      }
      classList.forEach((className) => {
        if (Array.isArray(target)) {
          target.forEach((elem) => {
            condition ? elem.classList.add(className) : elem.classList.remove(className);
          });
        } else {
          condition ? target.classList.add(className) : target.classList.remove(className);
        }
      });
    };
    const addClass = (target, classList) => {
      toggleClass(target, classList, true);
    };
    const removeClass = (target, classList) => {
      toggleClass(target, classList, false);
    };
    const getDirectChildByClass = (elem, className) => {
      const children = Array.from(elem.children);
      for (let i = 0; i < children.length; i++) {
        const child = children[i];
        if (child instanceof HTMLElement && hasClass(child, className)) {
          return child;
        }
      }
    };
    const applyNumericalStyle = (elem, property, value) => {
      if (value === `${parseInt(value)}`) {
        value = parseInt(value);
      }
      if (value || parseInt(value) === 0) {
        elem.style[property] = typeof value === "number" ? `${value}px` : value;
      } else {
        elem.style.removeProperty(property);
      }
    };
    const show = function(elem) {
      let display = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "flex";
      elem.style.display = display;
    };
    const hide2 = (elem) => {
      elem.style.display = "none";
    };
    const setStyle2 = (parent, selector, property, value) => {
      const el = parent.querySelector(selector);
      if (el) {
        el.style[property] = value;
      }
    };
    const toggle = function(elem, condition) {
      let display = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "flex";
      condition ? show(elem, display) : hide2(elem);
    };
    const isVisible$1 = (elem) => !!(elem && (elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length));
    const allButtonsAreHidden = () => !isVisible$1(getConfirmButton()) && !isVisible$1(getDenyButton()) && !isVisible$1(getCancelButton());
    const isScrollable = (elem) => !!(elem.scrollHeight > elem.clientHeight);
    const hasCssAnimation = (elem) => {
      const style = window.getComputedStyle(elem);
      const animDuration = parseFloat(style.getPropertyValue("animation-duration") || "0");
      const transDuration = parseFloat(style.getPropertyValue("transition-duration") || "0");
      return animDuration > 0 || transDuration > 0;
    };
    const animateTimerProgressBar = function(timer) {
      let reset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      const timerProgressBar = getTimerProgressBar();
      if (isVisible$1(timerProgressBar)) {
        if (reset) {
          timerProgressBar.style.transition = "none";
          timerProgressBar.style.width = "100%";
        }
        setTimeout(() => {
          timerProgressBar.style.transition = `width ${timer / 1e3}s linear`;
          timerProgressBar.style.width = "0%";
        }, 10);
      }
    };
    const stopTimerProgressBar = () => {
      const timerProgressBar = getTimerProgressBar();
      const timerProgressBarWidth = parseInt(window.getComputedStyle(timerProgressBar).width);
      timerProgressBar.style.removeProperty("transition");
      timerProgressBar.style.width = "100%";
      const timerProgressBarFullWidth = parseInt(window.getComputedStyle(timerProgressBar).width);
      const timerProgressBarPercent = timerProgressBarWidth / timerProgressBarFullWidth * 100;
      timerProgressBar.style.width = `${timerProgressBarPercent}%`;
    };
    const RESTORE_FOCUS_TIMEOUT = 100;
    const globalState = {};
    const focusPreviousActiveElement = () => {
      if (globalState.previousActiveElement instanceof HTMLElement) {
        globalState.previousActiveElement.focus();
        globalState.previousActiveElement = null;
      } else if (document.body) {
        document.body.focus();
      }
    };
    const restoreActiveElement = (returnFocus) => {
      return new Promise((resolve2) => {
        if (!returnFocus) {
          return resolve2();
        }
        const x = window.scrollX;
        const y = window.scrollY;
        globalState.restoreFocusTimeout = setTimeout(() => {
          focusPreviousActiveElement();
          resolve2();
        }, RESTORE_FOCUS_TIMEOUT);
        window.scrollTo(x, y);
      });
    };
    const isNodeEnv = () => typeof window === "undefined" || typeof document === "undefined";
    const sweetHTML = `
 <div aria-labelledby="${swalClasses.title}" aria-describedby="${swalClasses["html-container"]}" class="${swalClasses.popup}" tabindex="-1">
   <button type="button" class="${swalClasses.close}"></button>
   <ul class="${swalClasses["progress-steps"]}"></ul>
   <div class="${swalClasses.icon}"></div>
   <img class="${swalClasses.image}" />
   <h2 class="${swalClasses.title}" id="${swalClasses.title}"></h2>
   <div class="${swalClasses["html-container"]}" id="${swalClasses["html-container"]}"></div>
   <input class="${swalClasses.input}" />
   <input type="file" class="${swalClasses.file}" />
   <div class="${swalClasses.range}">
     <input type="range" />
     <output></output>
   </div>
   <select class="${swalClasses.select}"></select>
   <div class="${swalClasses.radio}"></div>
   <label for="${swalClasses.checkbox}" class="${swalClasses.checkbox}">
     <input type="checkbox" />
     <span class="${swalClasses.label}"></span>
   </label>
   <textarea class="${swalClasses.textarea}"></textarea>
   <div class="${swalClasses["validation-message"]}" id="${swalClasses["validation-message"]}"></div>
   <div class="${swalClasses.actions}">
     <div class="${swalClasses.loader}"></div>
     <button type="button" class="${swalClasses.confirm}"></button>
     <button type="button" class="${swalClasses.deny}"></button>
     <button type="button" class="${swalClasses.cancel}"></button>
   </div>
   <div class="${swalClasses.footer}"></div>
   <div class="${swalClasses["timer-progress-bar-container"]}">
     <div class="${swalClasses["timer-progress-bar"]}"></div>
   </div>
 </div>
`.replace(/(^|\n)\s*/g, "");
    const resetOldContainer = () => {
      const oldContainer = getContainer();
      if (!oldContainer) {
        return false;
      }
      oldContainer.remove();
      removeClass([document.documentElement, document.body], [swalClasses["no-backdrop"], swalClasses["toast-shown"], swalClasses["has-column"]]);
      return true;
    };
    const resetValidationMessage$1 = () => {
      globalState.currentInstance.resetValidationMessage();
    };
    const addInputChangeListeners = () => {
      const popup = getPopup();
      const input2 = getDirectChildByClass(popup, swalClasses.input);
      const file = getDirectChildByClass(popup, swalClasses.file);
      const range2 = popup.querySelector(`.${swalClasses.range} input`);
      const rangeOutput = popup.querySelector(`.${swalClasses.range} output`);
      const select2 = getDirectChildByClass(popup, swalClasses.select);
      const checkbox = popup.querySelector(`.${swalClasses.checkbox} input`);
      const textarea2 = getDirectChildByClass(popup, swalClasses.textarea);
      input2.oninput = resetValidationMessage$1;
      file.onchange = resetValidationMessage$1;
      select2.onchange = resetValidationMessage$1;
      checkbox.onchange = resetValidationMessage$1;
      textarea2.oninput = resetValidationMessage$1;
      range2.oninput = () => {
        resetValidationMessage$1();
        rangeOutput.value = range2.value;
      };
      range2.onchange = () => {
        resetValidationMessage$1();
        rangeOutput.value = range2.value;
      };
    };
    const getTarget = (target) => typeof target === "string" ? document.querySelector(target) : target;
    const setupAccessibility = (params) => {
      const popup = getPopup();
      popup.setAttribute("role", params.toast ? "alert" : "dialog");
      popup.setAttribute("aria-live", params.toast ? "polite" : "assertive");
      if (!params.toast) {
        popup.setAttribute("aria-modal", "true");
      }
    };
    const setupRTL = (targetElement) => {
      if (window.getComputedStyle(targetElement).direction === "rtl") {
        addClass(getContainer(), swalClasses.rtl);
      }
    };
    const init2 = (params) => {
      const oldContainerExisted = resetOldContainer();
      if (isNodeEnv()) {
        error("SweetAlert2 requires document to initialize");
        return;
      }
      const container = document.createElement("div");
      container.className = swalClasses.container;
      if (oldContainerExisted) {
        addClass(container, swalClasses["no-transition"]);
      }
      setInnerHtml(container, sweetHTML);
      const targetElement = getTarget(params.target);
      targetElement.appendChild(container);
      setupAccessibility(params);
      setupRTL(targetElement);
      addInputChangeListeners();
    };
    const parseHtmlToContainer = (param, target) => {
      if (param instanceof HTMLElement) {
        target.appendChild(param);
      } else if (typeof param === "object") {
        handleObject(param, target);
      } else if (param) {
        setInnerHtml(target, param);
      }
    };
    const handleObject = (param, target) => {
      if (param.jquery) {
        handleJqueryElem(target, param);
      } else {
        setInnerHtml(target, param.toString());
      }
    };
    const handleJqueryElem = (target, elem) => {
      target.textContent = "";
      if (0 in elem) {
        for (let i = 0; i in elem; i++) {
          target.appendChild(elem[i].cloneNode(true));
        }
      } else {
        target.appendChild(elem.cloneNode(true));
      }
    };
    const animationEndEvent = (() => {
      if (isNodeEnv()) {
        return false;
      }
      const testEl = document.createElement("div");
      const transEndEventNames = {
        WebkitAnimation: "webkitAnimationEnd",
        // Chrome, Safari and Opera
        animation: "animationend"
        // Standard syntax
      };
      for (const i in transEndEventNames) {
        if (Object.prototype.hasOwnProperty.call(transEndEventNames, i) && typeof testEl.style[i] !== "undefined") {
          return transEndEventNames[i];
        }
      }
      return false;
    })();
    const measureScrollbar = () => {
      const scrollDiv = document.createElement("div");
      scrollDiv.className = swalClasses["scrollbar-measure"];
      document.body.appendChild(scrollDiv);
      const scrollbarWidth = scrollDiv.getBoundingClientRect().width - scrollDiv.clientWidth;
      document.body.removeChild(scrollDiv);
      return scrollbarWidth;
    };
    const renderActions = (instance, params) => {
      const actions = getActions();
      const loader = getLoader();
      if (!params.showConfirmButton && !params.showDenyButton && !params.showCancelButton) {
        hide2(actions);
      } else {
        show(actions);
      }
      applyCustomClass(actions, params, "actions");
      renderButtons(actions, loader, params);
      setInnerHtml(loader, params.loaderHtml);
      applyCustomClass(loader, params, "loader");
    };
    function renderButtons(actions, loader, params) {
      const confirmButton = getConfirmButton();
      const denyButton = getDenyButton();
      const cancelButton = getCancelButton();
      renderButton(confirmButton, "confirm", params);
      renderButton(denyButton, "deny", params);
      renderButton(cancelButton, "cancel", params);
      handleButtonsStyling(confirmButton, denyButton, cancelButton, params);
      if (params.reverseButtons) {
        if (params.toast) {
          actions.insertBefore(cancelButton, confirmButton);
          actions.insertBefore(denyButton, confirmButton);
        } else {
          actions.insertBefore(cancelButton, loader);
          actions.insertBefore(denyButton, loader);
          actions.insertBefore(confirmButton, loader);
        }
      }
    }
    function handleButtonsStyling(confirmButton, denyButton, cancelButton, params) {
      if (!params.buttonsStyling) {
        removeClass([confirmButton, denyButton, cancelButton], swalClasses.styled);
        return;
      }
      addClass([confirmButton, denyButton, cancelButton], swalClasses.styled);
      if (params.confirmButtonColor) {
        confirmButton.style.backgroundColor = params.confirmButtonColor;
        addClass(confirmButton, swalClasses["default-outline"]);
      }
      if (params.denyButtonColor) {
        denyButton.style.backgroundColor = params.denyButtonColor;
        addClass(denyButton, swalClasses["default-outline"]);
      }
      if (params.cancelButtonColor) {
        cancelButton.style.backgroundColor = params.cancelButtonColor;
        addClass(cancelButton, swalClasses["default-outline"]);
      }
    }
    function renderButton(button, buttonType, params) {
      toggle(button, params[`show${capitalizeFirstLetter(buttonType)}Button`], "inline-block");
      setInnerHtml(button, params[`${buttonType}ButtonText`]);
      button.setAttribute("aria-label", params[`${buttonType}ButtonAriaLabel`]);
      button.className = swalClasses[buttonType];
      applyCustomClass(button, params, `${buttonType}Button`);
      addClass(button, params[`${buttonType}ButtonClass`]);
    }
    const renderCloseButton = (instance, params) => {
      const closeButton = getCloseButton();
      setInnerHtml(closeButton, params.closeButtonHtml);
      applyCustomClass(closeButton, params, "closeButton");
      toggle(closeButton, params.showCloseButton);
      closeButton.setAttribute("aria-label", params.closeButtonAriaLabel);
    };
    const renderContainer = (instance, params) => {
      const container = getContainer();
      if (!container) {
        return;
      }
      handleBackdropParam(container, params.backdrop);
      handlePositionParam(container, params.position);
      handleGrowParam(container, params.grow);
      applyCustomClass(container, params, "container");
    };
    function handleBackdropParam(container, backdrop) {
      if (typeof backdrop === "string") {
        container.style.background = backdrop;
      } else if (!backdrop) {
        addClass([document.documentElement, document.body], swalClasses["no-backdrop"]);
      }
    }
    function handlePositionParam(container, position) {
      if (position in swalClasses) {
        addClass(container, swalClasses[position]);
      } else {
        warn2('The "position" parameter is not valid, defaulting to "center"');
        addClass(container, swalClasses.center);
      }
    }
    function handleGrowParam(container, grow) {
      if (grow && typeof grow === "string") {
        const growClass = `grow-${grow}`;
        if (growClass in swalClasses) {
          addClass(container, swalClasses[growClass]);
        }
      }
    }
    const inputClasses = ["input", "file", "range", "select", "radio", "checkbox", "textarea"];
    const renderInput = (instance, params) => {
      const popup = getPopup();
      const innerParams = privateProps.innerParams.get(instance);
      const rerender = !innerParams || params.input !== innerParams.input;
      inputClasses.forEach((inputClass) => {
        const inputContainer = getDirectChildByClass(popup, swalClasses[inputClass]);
        setAttributes(inputClass, params.inputAttributes);
        inputContainer.className = swalClasses[inputClass];
        if (rerender) {
          hide2(inputContainer);
        }
      });
      if (params.input) {
        if (rerender) {
          showInput(params);
        }
        setCustomClass(params);
      }
    };
    const showInput = (params) => {
      if (!renderInputType[params.input]) {
        error(`Unexpected type of input! Expected "text", "email", "password", "number", "tel", "select", "radio", "checkbox", "textarea", "file" or "url", got "${params.input}"`);
        return;
      }
      const inputContainer = getInputContainer(params.input);
      const input2 = renderInputType[params.input](inputContainer, params);
      show(inputContainer);
      if (params.inputAutoFocus) {
        setTimeout(() => {
          focusInput(input2);
        });
      }
    };
    const removeAttributes = (input2) => {
      for (let i = 0; i < input2.attributes.length; i++) {
        const attrName = input2.attributes[i].name;
        if (!["type", "value", "style"].includes(attrName)) {
          input2.removeAttribute(attrName);
        }
      }
    };
    const setAttributes = (inputClass, inputAttributes) => {
      const input2 = getInput$1(getPopup(), inputClass);
      if (!input2) {
        return;
      }
      removeAttributes(input2);
      for (const attr in inputAttributes) {
        input2.setAttribute(attr, inputAttributes[attr]);
      }
    };
    const setCustomClass = (params) => {
      const inputContainer = getInputContainer(params.input);
      if (typeof params.customClass === "object") {
        addClass(inputContainer, params.customClass.input);
      }
    };
    const setInputPlaceholder = (input2, params) => {
      if (!input2.placeholder || params.inputPlaceholder) {
        input2.placeholder = params.inputPlaceholder;
      }
    };
    const setInputLabel = (input2, prependTo, params) => {
      if (params.inputLabel) {
        input2.id = swalClasses.input;
        const label = document.createElement("label");
        const labelClass = swalClasses["input-label"];
        label.setAttribute("for", input2.id);
        label.className = labelClass;
        if (typeof params.customClass === "object") {
          addClass(label, params.customClass.inputLabel);
        }
        label.innerText = params.inputLabel;
        prependTo.insertAdjacentElement("beforebegin", label);
      }
    };
    const getInputContainer = (inputType) => {
      return getDirectChildByClass(getPopup(), swalClasses[inputType] || swalClasses.input);
    };
    const checkAndSetInputValue = (input2, inputValue) => {
      if (["string", "number"].includes(typeof inputValue)) {
        input2.value = `${inputValue}`;
      } else if (!isPromise2(inputValue)) {
        warn2(`Unexpected type of inputValue! Expected "string", "number" or "Promise", got "${typeof inputValue}"`);
      }
    };
    const renderInputType = {};
    renderInputType.text = renderInputType.email = renderInputType.password = renderInputType.number = renderInputType.tel = renderInputType.url = (input2, params) => {
      checkAndSetInputValue(input2, params.inputValue);
      setInputLabel(input2, input2, params);
      setInputPlaceholder(input2, params);
      input2.type = params.input;
      return input2;
    };
    renderInputType.file = (input2, params) => {
      setInputLabel(input2, input2, params);
      setInputPlaceholder(input2, params);
      return input2;
    };
    renderInputType.range = (range2, params) => {
      const rangeInput = range2.querySelector("input");
      const rangeOutput = range2.querySelector("output");
      checkAndSetInputValue(rangeInput, params.inputValue);
      rangeInput.type = params.input;
      checkAndSetInputValue(rangeOutput, params.inputValue);
      setInputLabel(rangeInput, range2, params);
      return range2;
    };
    renderInputType.select = (select2, params) => {
      select2.textContent = "";
      if (params.inputPlaceholder) {
        const placeholder = document.createElement("option");
        setInnerHtml(placeholder, params.inputPlaceholder);
        placeholder.value = "";
        placeholder.disabled = true;
        placeholder.selected = true;
        select2.appendChild(placeholder);
      }
      setInputLabel(select2, select2, params);
      return select2;
    };
    renderInputType.radio = (radio) => {
      radio.textContent = "";
      return radio;
    };
    renderInputType.checkbox = (checkboxContainer, params) => {
      const checkbox = getInput$1(getPopup(), "checkbox");
      checkbox.value = "1";
      checkbox.id = swalClasses.checkbox;
      checkbox.checked = Boolean(params.inputValue);
      const label = checkboxContainer.querySelector("span");
      setInnerHtml(label, params.inputPlaceholder);
      return checkbox;
    };
    renderInputType.textarea = (textarea2, params) => {
      checkAndSetInputValue(textarea2, params.inputValue);
      setInputPlaceholder(textarea2, params);
      setInputLabel(textarea2, textarea2, params);
      const getMargin = (el) => parseInt(window.getComputedStyle(el).marginLeft) + parseInt(window.getComputedStyle(el).marginRight);
      setTimeout(() => {
        if ("MutationObserver" in window) {
          const initialPopupWidth = parseInt(window.getComputedStyle(getPopup()).width);
          const textareaResizeHandler = () => {
            const textareaWidth = textarea2.offsetWidth + getMargin(textarea2);
            if (textareaWidth > initialPopupWidth) {
              getPopup().style.width = `${textareaWidth}px`;
            } else {
              getPopup().style.width = null;
            }
          };
          new MutationObserver(textareaResizeHandler).observe(textarea2, {
            attributes: true,
            attributeFilter: ["style"]
          });
        }
      });
      return textarea2;
    };
    const renderContent = (instance, params) => {
      const htmlContainer = getHtmlContainer();
      applyCustomClass(htmlContainer, params, "htmlContainer");
      if (params.html) {
        parseHtmlToContainer(params.html, htmlContainer);
        show(htmlContainer, "block");
      } else if (params.text) {
        htmlContainer.textContent = params.text;
        show(htmlContainer, "block");
      } else {
        hide2(htmlContainer);
      }
      renderInput(instance, params);
    };
    const renderFooter = (instance, params) => {
      const footer = getFooter();
      toggle(footer, params.footer);
      if (params.footer) {
        parseHtmlToContainer(params.footer, footer);
      }
      applyCustomClass(footer, params, "footer");
    };
    const renderIcon = (instance, params) => {
      const innerParams = privateProps.innerParams.get(instance);
      const icon = getIcon();
      if (innerParams && params.icon === innerParams.icon) {
        setContent(icon, params);
        applyStyles2(icon, params);
        return;
      }
      if (!params.icon && !params.iconHtml) {
        hide2(icon);
        return;
      }
      if (params.icon && Object.keys(iconTypes).indexOf(params.icon) === -1) {
        error(`Unknown icon! Expected "success", "error", "warning", "info" or "question", got "${params.icon}"`);
        hide2(icon);
        return;
      }
      show(icon);
      setContent(icon, params);
      applyStyles2(icon, params);
      addClass(icon, params.showClass.icon);
    };
    const applyStyles2 = (icon, params) => {
      for (const iconType in iconTypes) {
        if (params.icon !== iconType) {
          removeClass(icon, iconTypes[iconType]);
        }
      }
      addClass(icon, iconTypes[params.icon]);
      setColor(icon, params);
      adjustSuccessIconBackgroundColor();
      applyCustomClass(icon, params, "icon");
    };
    const adjustSuccessIconBackgroundColor = () => {
      const popup = getPopup();
      const popupBackgroundColor = window.getComputedStyle(popup).getPropertyValue("background-color");
      const successIconParts = popup.querySelectorAll("[class^=swal2-success-circular-line], .swal2-success-fix");
      for (let i = 0; i < successIconParts.length; i++) {
        successIconParts[i].style.backgroundColor = popupBackgroundColor;
      }
    };
    const successIconHtml = `
  <div class="swal2-success-circular-line-left"></div>
  <span class="swal2-success-line-tip"></span> <span class="swal2-success-line-long"></span>
  <div class="swal2-success-ring"></div> <div class="swal2-success-fix"></div>
  <div class="swal2-success-circular-line-right"></div>
`;
    const errorIconHtml = `
  <span class="swal2-x-mark">
    <span class="swal2-x-mark-line-left"></span>
    <span class="swal2-x-mark-line-right"></span>
  </span>
`;
    const setContent = (icon, params) => {
      let oldContent = icon.innerHTML;
      let newContent;
      if (params.iconHtml) {
        newContent = iconContent(params.iconHtml);
      } else if (params.icon === "success") {
        newContent = successIconHtml;
        oldContent = oldContent.replace(/ style=".*?"/g, "");
      } else if (params.icon === "error") {
        newContent = errorIconHtml;
      } else {
        const defaultIconHtml = {
          question: "?",
          warning: "!",
          info: "i"
        };
        newContent = iconContent(defaultIconHtml[params.icon]);
      }
      if (oldContent.trim() !== newContent.trim()) {
        setInnerHtml(icon, newContent);
      }
    };
    const setColor = (icon, params) => {
      if (!params.iconColor) {
        return;
      }
      icon.style.color = params.iconColor;
      icon.style.borderColor = params.iconColor;
      for (const sel of [".swal2-success-line-tip", ".swal2-success-line-long", ".swal2-x-mark-line-left", ".swal2-x-mark-line-right"]) {
        setStyle2(icon, sel, "backgroundColor", params.iconColor);
      }
      setStyle2(icon, ".swal2-success-ring", "borderColor", params.iconColor);
    };
    const iconContent = (content) => `<div class="${swalClasses["icon-content"]}">${content}</div>`;
    const renderImage = (instance, params) => {
      const image2 = getImage();
      if (!params.imageUrl) {
        hide2(image2);
        return;
      }
      show(image2, "");
      image2.setAttribute("src", params.imageUrl);
      image2.setAttribute("alt", params.imageAlt);
      applyNumericalStyle(image2, "width", params.imageWidth);
      applyNumericalStyle(image2, "height", params.imageHeight);
      image2.className = swalClasses.image;
      applyCustomClass(image2, params, "image");
    };
    const renderPopup = (instance, params) => {
      const container = getContainer();
      const popup = getPopup();
      if (params.toast) {
        applyNumericalStyle(container, "width", params.width);
        popup.style.width = "100%";
        popup.insertBefore(getLoader(), getIcon());
      } else {
        applyNumericalStyle(popup, "width", params.width);
      }
      applyNumericalStyle(popup, "padding", params.padding);
      if (params.color) {
        popup.style.color = params.color;
      }
      if (params.background) {
        popup.style.background = params.background;
      }
      hide2(getValidationMessage());
      addClasses$1(popup, params);
    };
    const addClasses$1 = (popup, params) => {
      popup.className = `${swalClasses.popup} ${isVisible$1(popup) ? params.showClass.popup : ""}`;
      if (params.toast) {
        addClass([document.documentElement, document.body], swalClasses["toast-shown"]);
        addClass(popup, swalClasses.toast);
      } else {
        addClass(popup, swalClasses.modal);
      }
      applyCustomClass(popup, params, "popup");
      if (typeof params.customClass === "string") {
        addClass(popup, params.customClass);
      }
      if (params.icon) {
        addClass(popup, swalClasses[`icon-${params.icon}`]);
      }
    };
    const renderProgressSteps = (instance, params) => {
      const progressStepsContainer = getProgressSteps();
      if (!params.progressSteps || params.progressSteps.length === 0) {
        hide2(progressStepsContainer);
        return;
      }
      show(progressStepsContainer);
      progressStepsContainer.textContent = "";
      if (params.currentProgressStep >= params.progressSteps.length) {
        warn2("Invalid currentProgressStep parameter, it should be less than progressSteps.length (currentProgressStep like JS arrays starts from 0)");
      }
      params.progressSteps.forEach((step, index2) => {
        const stepEl = createStepElement(step);
        progressStepsContainer.appendChild(stepEl);
        if (index2 === params.currentProgressStep) {
          addClass(stepEl, swalClasses["active-progress-step"]);
        }
        if (index2 !== params.progressSteps.length - 1) {
          const lineEl = createLineElement(params);
          progressStepsContainer.appendChild(lineEl);
        }
      });
    };
    const createStepElement = (step) => {
      const stepEl = document.createElement("li");
      addClass(stepEl, swalClasses["progress-step"]);
      setInnerHtml(stepEl, step);
      return stepEl;
    };
    const createLineElement = (params) => {
      const lineEl = document.createElement("li");
      addClass(lineEl, swalClasses["progress-step-line"]);
      if (params.progressStepsDistance) {
        applyNumericalStyle(lineEl, "width", params.progressStepsDistance);
      }
      return lineEl;
    };
    const renderTitle = (instance, params) => {
      const title = getTitle();
      toggle(title, params.title || params.titleText, "block");
      if (params.title) {
        parseHtmlToContainer(params.title, title);
      }
      if (params.titleText) {
        title.innerText = params.titleText;
      }
      applyCustomClass(title, params, "title");
    };
    const render = (instance, params) => {
      renderPopup(instance, params);
      renderContainer(instance, params);
      renderProgressSteps(instance, params);
      renderIcon(instance, params);
      renderImage(instance, params);
      renderTitle(instance, params);
      renderCloseButton(instance, params);
      renderContent(instance, params);
      renderActions(instance, params);
      renderFooter(instance, params);
      if (typeof params.didRender === "function") {
        params.didRender(getPopup());
      }
    };
    function hideLoading() {
      const innerParams = privateProps.innerParams.get(this);
      if (!innerParams) {
        return;
      }
      const domCache = privateProps.domCache.get(this);
      hide2(domCache.loader);
      if (isToast()) {
        if (innerParams.icon) {
          show(getIcon());
        }
      } else {
        showRelatedButton(domCache);
      }
      removeClass([domCache.popup, domCache.actions], swalClasses.loading);
      domCache.popup.removeAttribute("aria-busy");
      domCache.popup.removeAttribute("data-loading");
      domCache.confirmButton.disabled = false;
      domCache.denyButton.disabled = false;
      domCache.cancelButton.disabled = false;
    }
    const showRelatedButton = (domCache) => {
      const buttonToReplace = domCache.popup.getElementsByClassName(domCache.loader.getAttribute("data-button-to-replace"));
      if (buttonToReplace.length) {
        show(buttonToReplace[0], "inline-block");
      } else if (allButtonsAreHidden()) {
        hide2(domCache.actions);
      }
    };
    function getInput(instance) {
      const innerParams = privateProps.innerParams.get(instance || this);
      const domCache = privateProps.domCache.get(instance || this);
      if (!domCache) {
        return null;
      }
      return getInput$1(domCache.popup, innerParams.input);
    }
    const isVisible = () => {
      return isVisible$1(getPopup());
    };
    const clickConfirm = () => getConfirmButton() && getConfirmButton().click();
    const clickDeny = () => getDenyButton() && getDenyButton().click();
    const clickCancel = () => getCancelButton() && getCancelButton().click();
    const DismissReason = Object.freeze({
      cancel: "cancel",
      backdrop: "backdrop",
      close: "close",
      esc: "esc",
      timer: "timer"
    });
    const removeKeydownHandler = (globalState2) => {
      if (globalState2.keydownTarget && globalState2.keydownHandlerAdded) {
        globalState2.keydownTarget.removeEventListener("keydown", globalState2.keydownHandler, {
          capture: globalState2.keydownListenerCapture
        });
        globalState2.keydownHandlerAdded = false;
      }
    };
    const addKeydownHandler = (instance, globalState2, innerParams, dismissWith) => {
      removeKeydownHandler(globalState2);
      if (!innerParams.toast) {
        globalState2.keydownHandler = (e) => keydownHandler(instance, e, dismissWith);
        globalState2.keydownTarget = innerParams.keydownListenerCapture ? window : getPopup();
        globalState2.keydownListenerCapture = innerParams.keydownListenerCapture;
        globalState2.keydownTarget.addEventListener("keydown", globalState2.keydownHandler, {
          capture: globalState2.keydownListenerCapture
        });
        globalState2.keydownHandlerAdded = true;
      }
    };
    const setFocus = (index2, increment) => {
      const focusableElements = getFocusableElements();
      if (focusableElements.length) {
        index2 = index2 + increment;
        if (index2 === focusableElements.length) {
          index2 = 0;
        } else if (index2 === -1) {
          index2 = focusableElements.length - 1;
        }
        focusableElements[index2].focus();
        return;
      }
      getPopup().focus();
    };
    const arrowKeysNextButton = ["ArrowRight", "ArrowDown"];
    const arrowKeysPreviousButton = ["ArrowLeft", "ArrowUp"];
    const keydownHandler = (instance, event, dismissWith) => {
      const innerParams = privateProps.innerParams.get(instance);
      if (!innerParams) {
        return;
      }
      if (event.isComposing || event.keyCode === 229) {
        return;
      }
      if (innerParams.stopKeydownPropagation) {
        event.stopPropagation();
      }
      if (event.key === "Enter") {
        handleEnter(instance, event, innerParams);
      } else if (event.key === "Tab") {
        handleTab(event);
      } else if ([...arrowKeysNextButton, ...arrowKeysPreviousButton].includes(event.key)) {
        handleArrows(event.key);
      } else if (event.key === "Escape") {
        handleEsc(event, innerParams, dismissWith);
      }
    };
    const handleEnter = (instance, event, innerParams) => {
      if (!callIfFunction(innerParams.allowEnterKey)) {
        return;
      }
      if (event.target && instance.getInput() && event.target instanceof HTMLElement && event.target.outerHTML === instance.getInput().outerHTML) {
        if (["textarea", "file"].includes(innerParams.input)) {
          return;
        }
        clickConfirm();
        event.preventDefault();
      }
    };
    const handleTab = (event) => {
      const targetElement = event.target;
      const focusableElements = getFocusableElements();
      let btnIndex = -1;
      for (let i = 0; i < focusableElements.length; i++) {
        if (targetElement === focusableElements[i]) {
          btnIndex = i;
          break;
        }
      }
      if (!event.shiftKey) {
        setFocus(btnIndex, 1);
      } else {
        setFocus(btnIndex, -1);
      }
      event.stopPropagation();
      event.preventDefault();
    };
    const handleArrows = (key) => {
      const confirmButton = getConfirmButton();
      const denyButton = getDenyButton();
      const cancelButton = getCancelButton();
      const buttons = [confirmButton, denyButton, cancelButton];
      if (document.activeElement instanceof HTMLElement && !buttons.includes(document.activeElement)) {
        return;
      }
      const sibling = arrowKeysNextButton.includes(key) ? "nextElementSibling" : "previousElementSibling";
      let buttonToFocus = document.activeElement;
      for (let i = 0; i < getActions().children.length; i++) {
        buttonToFocus = buttonToFocus[sibling];
        if (!buttonToFocus) {
          return;
        }
        if (buttonToFocus instanceof HTMLButtonElement && isVisible$1(buttonToFocus)) {
          break;
        }
      }
      if (buttonToFocus instanceof HTMLButtonElement) {
        buttonToFocus.focus();
      }
    };
    const handleEsc = (event, innerParams, dismissWith) => {
      if (callIfFunction(innerParams.allowEscapeKey)) {
        event.preventDefault();
        dismissWith(DismissReason.esc);
      }
    };
    var privateMethods = {
      swalPromiseResolve: /* @__PURE__ */ new WeakMap(),
      swalPromiseReject: /* @__PURE__ */ new WeakMap()
    };
    const setAriaHidden = () => {
      const bodyChildren = Array.from(document.body.children);
      bodyChildren.forEach((el) => {
        if (el === getContainer() || el.contains(getContainer())) {
          return;
        }
        if (el.hasAttribute("aria-hidden")) {
          el.setAttribute("data-previous-aria-hidden", el.getAttribute("aria-hidden"));
        }
        el.setAttribute("aria-hidden", "true");
      });
    };
    const unsetAriaHidden = () => {
      const bodyChildren = Array.from(document.body.children);
      bodyChildren.forEach((el) => {
        if (el.hasAttribute("data-previous-aria-hidden")) {
          el.setAttribute("aria-hidden", el.getAttribute("data-previous-aria-hidden"));
          el.removeAttribute("data-previous-aria-hidden");
        } else {
          el.removeAttribute("aria-hidden");
        }
      });
    };
    const iOSfix = () => {
      const iOS = (
        // @ts-ignore
        /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream || navigator.platform === "MacIntel" && navigator.maxTouchPoints > 1
      );
      if (iOS && !hasClass(document.body, swalClasses.iosfix)) {
        const offset2 = document.body.scrollTop;
        document.body.style.top = `${offset2 * -1}px`;
        addClass(document.body, swalClasses.iosfix);
        lockBodyScroll();
        addBottomPaddingForTallPopups();
      }
    };
    const addBottomPaddingForTallPopups = () => {
      const ua = navigator.userAgent;
      const iOS = !!ua.match(/iPad/i) || !!ua.match(/iPhone/i);
      const webkit = !!ua.match(/WebKit/i);
      const iOSSafari = iOS && webkit && !ua.match(/CriOS/i);
      if (iOSSafari) {
        const bottomPanelHeight = 44;
        if (getPopup().scrollHeight > window.innerHeight - bottomPanelHeight) {
          getContainer().style.paddingBottom = `${bottomPanelHeight}px`;
        }
      }
    };
    const lockBodyScroll = () => {
      const container = getContainer();
      let preventTouchMove;
      container.ontouchstart = (event) => {
        preventTouchMove = shouldPreventTouchMove(event);
      };
      container.ontouchmove = (event) => {
        if (preventTouchMove) {
          event.preventDefault();
          event.stopPropagation();
        }
      };
    };
    const shouldPreventTouchMove = (event) => {
      const target = event.target;
      const container = getContainer();
      if (isStylus(event) || isZoom(event)) {
        return false;
      }
      if (target === container) {
        return true;
      }
      if (!isScrollable(container) && target instanceof HTMLElement && target.tagName !== "INPUT" && // #1603
      target.tagName !== "TEXTAREA" && // #2266
      !(isScrollable(getHtmlContainer()) && // #1944
      getHtmlContainer().contains(target))) {
        return true;
      }
      return false;
    };
    const isStylus = (event) => {
      return event.touches && event.touches.length && event.touches[0].touchType === "stylus";
    };
    const isZoom = (event) => {
      return event.touches && event.touches.length > 1;
    };
    const undoIOSfix = () => {
      if (hasClass(document.body, swalClasses.iosfix)) {
        const offset2 = parseInt(document.body.style.top, 10);
        removeClass(document.body, swalClasses.iosfix);
        document.body.style.top = "";
        document.body.scrollTop = offset2 * -1;
      }
    };
    const fixScrollbar = () => {
      if (states.previousBodyPadding !== null) {
        return;
      }
      if (document.body.scrollHeight > window.innerHeight) {
        states.previousBodyPadding = parseInt(window.getComputedStyle(document.body).getPropertyValue("padding-right"));
        document.body.style.paddingRight = `${states.previousBodyPadding + measureScrollbar()}px`;
      }
    };
    const undoScrollbar = () => {
      if (states.previousBodyPadding !== null) {
        document.body.style.paddingRight = `${states.previousBodyPadding}px`;
        states.previousBodyPadding = null;
      }
    };
    function removePopupAndResetState(instance, container, returnFocus, didClose) {
      if (isToast()) {
        triggerDidCloseAndDispose(instance, didClose);
      } else {
        restoreActiveElement(returnFocus).then(() => triggerDidCloseAndDispose(instance, didClose));
        removeKeydownHandler(globalState);
      }
      const isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
      if (isSafari) {
        container.setAttribute("style", "display:none !important");
        container.removeAttribute("class");
        container.innerHTML = "";
      } else {
        container.remove();
      }
      if (isModal()) {
        undoScrollbar();
        undoIOSfix();
        unsetAriaHidden();
      }
      removeBodyClasses();
    }
    function removeBodyClasses() {
      removeClass([document.documentElement, document.body], [swalClasses.shown, swalClasses["height-auto"], swalClasses["no-backdrop"], swalClasses["toast-shown"]]);
    }
    function close(resolveValue) {
      resolveValue = prepareResolveValue(resolveValue);
      const swalPromiseResolve = privateMethods.swalPromiseResolve.get(this);
      const didClose = triggerClosePopup(this);
      if (this.isAwaitingPromise()) {
        if (!resolveValue.isDismissed) {
          handleAwaitingPromise(this);
          swalPromiseResolve(resolveValue);
        }
      } else if (didClose) {
        swalPromiseResolve(resolveValue);
      }
    }
    function isAwaitingPromise() {
      return !!privateProps.awaitingPromise.get(this);
    }
    const triggerClosePopup = (instance) => {
      const popup = getPopup();
      if (!popup) {
        return false;
      }
      const innerParams = privateProps.innerParams.get(instance);
      if (!innerParams || hasClass(popup, innerParams.hideClass.popup)) {
        return false;
      }
      removeClass(popup, innerParams.showClass.popup);
      addClass(popup, innerParams.hideClass.popup);
      const backdrop = getContainer();
      removeClass(backdrop, innerParams.showClass.backdrop);
      addClass(backdrop, innerParams.hideClass.backdrop);
      handlePopupAnimation(instance, popup, innerParams);
      return true;
    };
    function rejectPromise(error2) {
      const rejectPromise2 = privateMethods.swalPromiseReject.get(this);
      handleAwaitingPromise(this);
      if (rejectPromise2) {
        rejectPromise2(error2);
      }
    }
    const handleAwaitingPromise = (instance) => {
      if (instance.isAwaitingPromise()) {
        privateProps.awaitingPromise.delete(instance);
        if (!privateProps.innerParams.get(instance)) {
          instance._destroy();
        }
      }
    };
    const prepareResolveValue = (resolveValue) => {
      if (typeof resolveValue === "undefined") {
        return {
          isConfirmed: false,
          isDenied: false,
          isDismissed: true
        };
      }
      return Object.assign({
        isConfirmed: false,
        isDenied: false,
        isDismissed: false
      }, resolveValue);
    };
    const handlePopupAnimation = (instance, popup, innerParams) => {
      const container = getContainer();
      const animationIsSupported = animationEndEvent && hasCssAnimation(popup);
      if (typeof innerParams.willClose === "function") {
        innerParams.willClose(popup);
      }
      if (animationIsSupported) {
        animatePopup(instance, popup, container, innerParams.returnFocus, innerParams.didClose);
      } else {
        removePopupAndResetState(instance, container, innerParams.returnFocus, innerParams.didClose);
      }
    };
    const animatePopup = (instance, popup, container, returnFocus, didClose) => {
      globalState.swalCloseEventFinishedCallback = removePopupAndResetState.bind(null, instance, container, returnFocus, didClose);
      popup.addEventListener(animationEndEvent, function(e) {
        if (e.target === popup) {
          globalState.swalCloseEventFinishedCallback();
          delete globalState.swalCloseEventFinishedCallback;
        }
      });
    };
    const triggerDidCloseAndDispose = (instance, didClose) => {
      setTimeout(() => {
        if (typeof didClose === "function") {
          didClose.bind(instance.params)();
        }
        instance._destroy();
      });
    };
    function setButtonsDisabled(instance, buttons, disabled) {
      const domCache = privateProps.domCache.get(instance);
      buttons.forEach((button) => {
        domCache[button].disabled = disabled;
      });
    }
    function setInputDisabled(input2, disabled) {
      if (!input2) {
        return;
      }
      if (input2.type === "radio") {
        const radiosContainer = input2.parentNode.parentNode;
        const radios = radiosContainer.querySelectorAll("input");
        for (let i = 0; i < radios.length; i++) {
          radios[i].disabled = disabled;
        }
      } else {
        input2.disabled = disabled;
      }
    }
    function enableButtons() {
      setButtonsDisabled(this, ["confirmButton", "denyButton", "cancelButton"], false);
    }
    function disableButtons() {
      setButtonsDisabled(this, ["confirmButton", "denyButton", "cancelButton"], true);
    }
    function enableInput() {
      setInputDisabled(this.getInput(), false);
    }
    function disableInput() {
      setInputDisabled(this.getInput(), true);
    }
    function showValidationMessage(error2) {
      const domCache = privateProps.domCache.get(this);
      const params = privateProps.innerParams.get(this);
      setInnerHtml(domCache.validationMessage, error2);
      domCache.validationMessage.className = swalClasses["validation-message"];
      if (params.customClass && params.customClass.validationMessage) {
        addClass(domCache.validationMessage, params.customClass.validationMessage);
      }
      show(domCache.validationMessage);
      const input2 = this.getInput();
      if (input2) {
        input2.setAttribute("aria-invalid", true);
        input2.setAttribute("aria-describedby", swalClasses["validation-message"]);
        focusInput(input2);
        addClass(input2, swalClasses.inputerror);
      }
    }
    function resetValidationMessage() {
      const domCache = privateProps.domCache.get(this);
      if (domCache.validationMessage) {
        hide2(domCache.validationMessage);
      }
      const input2 = this.getInput();
      if (input2) {
        input2.removeAttribute("aria-invalid");
        input2.removeAttribute("aria-describedby");
        removeClass(input2, swalClasses.inputerror);
      }
    }
    const defaultParams = {
      title: "",
      titleText: "",
      text: "",
      html: "",
      footer: "",
      icon: void 0,
      iconColor: void 0,
      iconHtml: void 0,
      template: void 0,
      toast: false,
      showClass: {
        popup: "swal2-show",
        backdrop: "swal2-backdrop-show",
        icon: "swal2-icon-show"
      },
      hideClass: {
        popup: "swal2-hide",
        backdrop: "swal2-backdrop-hide",
        icon: "swal2-icon-hide"
      },
      customClass: {},
      target: "body",
      color: void 0,
      backdrop: true,
      heightAuto: true,
      allowOutsideClick: true,
      allowEscapeKey: true,
      allowEnterKey: true,
      stopKeydownPropagation: true,
      keydownListenerCapture: false,
      showConfirmButton: true,
      showDenyButton: false,
      showCancelButton: false,
      preConfirm: void 0,
      preDeny: void 0,
      confirmButtonText: "OK",
      confirmButtonAriaLabel: "",
      confirmButtonColor: void 0,
      denyButtonText: "No",
      denyButtonAriaLabel: "",
      denyButtonColor: void 0,
      cancelButtonText: "Cancel",
      cancelButtonAriaLabel: "",
      cancelButtonColor: void 0,
      buttonsStyling: true,
      reverseButtons: false,
      focusConfirm: true,
      focusDeny: false,
      focusCancel: false,
      returnFocus: true,
      showCloseButton: false,
      closeButtonHtml: "&times;",
      closeButtonAriaLabel: "Close this dialog",
      loaderHtml: "",
      showLoaderOnConfirm: false,
      showLoaderOnDeny: false,
      imageUrl: void 0,
      imageWidth: void 0,
      imageHeight: void 0,
      imageAlt: "",
      timer: void 0,
      timerProgressBar: false,
      width: void 0,
      padding: void 0,
      background: void 0,
      input: void 0,
      inputPlaceholder: "",
      inputLabel: "",
      inputValue: "",
      inputOptions: {},
      inputAutoFocus: true,
      inputAutoTrim: true,
      inputAttributes: {},
      inputValidator: void 0,
      returnInputValueOnDeny: false,
      validationMessage: void 0,
      grow: false,
      position: "center",
      progressSteps: [],
      currentProgressStep: void 0,
      progressStepsDistance: void 0,
      willOpen: void 0,
      didOpen: void 0,
      didRender: void 0,
      willClose: void 0,
      didClose: void 0,
      didDestroy: void 0,
      scrollbarPadding: true
    };
    const updatableParams = ["allowEscapeKey", "allowOutsideClick", "background", "buttonsStyling", "cancelButtonAriaLabel", "cancelButtonColor", "cancelButtonText", "closeButtonAriaLabel", "closeButtonHtml", "color", "confirmButtonAriaLabel", "confirmButtonColor", "confirmButtonText", "currentProgressStep", "customClass", "denyButtonAriaLabel", "denyButtonColor", "denyButtonText", "didClose", "didDestroy", "footer", "hideClass", "html", "icon", "iconColor", "iconHtml", "imageAlt", "imageHeight", "imageUrl", "imageWidth", "preConfirm", "preDeny", "progressSteps", "returnFocus", "reverseButtons", "showCancelButton", "showCloseButton", "showConfirmButton", "showDenyButton", "text", "title", "titleText", "willClose"];
    const deprecatedParams = {};
    const toastIncompatibleParams = ["allowOutsideClick", "allowEnterKey", "backdrop", "focusConfirm", "focusDeny", "focusCancel", "returnFocus", "heightAuto", "keydownListenerCapture"];
    const isValidParameter = (paramName) => {
      return Object.prototype.hasOwnProperty.call(defaultParams, paramName);
    };
    const isUpdatableParameter = (paramName) => {
      return updatableParams.indexOf(paramName) !== -1;
    };
    const isDeprecatedParameter = (paramName) => {
      return deprecatedParams[paramName];
    };
    const checkIfParamIsValid = (param) => {
      if (!isValidParameter(param)) {
        warn2(`Unknown parameter "${param}"`);
      }
    };
    const checkIfToastParamIsValid = (param) => {
      if (toastIncompatibleParams.includes(param)) {
        warn2(`The parameter "${param}" is incompatible with toasts`);
      }
    };
    const checkIfParamIsDeprecated = (param) => {
      if (isDeprecatedParameter(param)) {
        warnAboutDeprecation(param, isDeprecatedParameter(param));
      }
    };
    const showWarningsForParams = (params) => {
      if (params.backdrop === false && params.allowOutsideClick) {
        warn2('"allowOutsideClick" parameter requires `backdrop` parameter to be set to `true`');
      }
      for (const param in params) {
        checkIfParamIsValid(param);
        if (params.toast) {
          checkIfToastParamIsValid(param);
        }
        checkIfParamIsDeprecated(param);
      }
    };
    function update(params) {
      const popup = getPopup();
      const innerParams = privateProps.innerParams.get(this);
      if (!popup || hasClass(popup, innerParams.hideClass.popup)) {
        warn2(`You're trying to update the closed or closing popup, that won't work. Use the update() method in preConfirm parameter or show a new popup.`);
        return;
      }
      const validUpdatableParams = filterValidParams(params);
      const updatedParams = Object.assign({}, innerParams, validUpdatableParams);
      render(this, updatedParams);
      privateProps.innerParams.set(this, updatedParams);
      Object.defineProperties(this, {
        params: {
          value: Object.assign({}, this.params, params),
          writable: false,
          enumerable: true
        }
      });
    }
    const filterValidParams = (params) => {
      const validUpdatableParams = {};
      Object.keys(params).forEach((param) => {
        if (isUpdatableParameter(param)) {
          validUpdatableParams[param] = params[param];
        } else {
          warn2(`Invalid parameter to update: ${param}`);
        }
      });
      return validUpdatableParams;
    };
    function _destroy() {
      const domCache = privateProps.domCache.get(this);
      const innerParams = privateProps.innerParams.get(this);
      if (!innerParams) {
        disposeWeakMaps(this);
        return;
      }
      if (domCache.popup && globalState.swalCloseEventFinishedCallback) {
        globalState.swalCloseEventFinishedCallback();
        delete globalState.swalCloseEventFinishedCallback;
      }
      if (typeof innerParams.didDestroy === "function") {
        innerParams.didDestroy();
      }
      disposeSwal(this);
    }
    const disposeSwal = (instance) => {
      disposeWeakMaps(instance);
      delete instance.params;
      delete globalState.keydownHandler;
      delete globalState.keydownTarget;
      delete globalState.currentInstance;
    };
    const disposeWeakMaps = (instance) => {
      if (instance.isAwaitingPromise()) {
        unsetWeakMaps(privateProps, instance);
        privateProps.awaitingPromise.set(instance, true);
      } else {
        unsetWeakMaps(privateMethods, instance);
        unsetWeakMaps(privateProps, instance);
      }
    };
    const unsetWeakMaps = (obj, instance) => {
      for (const i in obj) {
        obj[i].delete(instance);
      }
    };
    var instanceMethods = /* @__PURE__ */ Object.freeze({
      __proto__: null,
      _destroy,
      close,
      closeModal: close,
      closePopup: close,
      closeToast: close,
      disableButtons,
      disableInput,
      disableLoading: hideLoading,
      enableButtons,
      enableInput,
      getInput,
      handleAwaitingPromise,
      hideLoading,
      isAwaitingPromise,
      rejectPromise,
      resetValidationMessage,
      showValidationMessage,
      update
    });
    const showLoading = (buttonToReplace) => {
      let popup = getPopup();
      if (!popup) {
        new Swal2();
      }
      popup = getPopup();
      const loader = getLoader();
      if (isToast()) {
        hide2(getIcon());
      } else {
        replaceButton(popup, buttonToReplace);
      }
      show(loader);
      popup.setAttribute("data-loading", "true");
      popup.setAttribute("aria-busy", "true");
      popup.focus();
    };
    const replaceButton = (popup, buttonToReplace) => {
      const actions = getActions();
      const loader = getLoader();
      if (!buttonToReplace && isVisible$1(getConfirmButton())) {
        buttonToReplace = getConfirmButton();
      }
      show(actions);
      if (buttonToReplace) {
        hide2(buttonToReplace);
        loader.setAttribute("data-button-to-replace", buttonToReplace.className);
      }
      loader.parentNode.insertBefore(loader, buttonToReplace);
      addClass([popup, actions], swalClasses.loading);
    };
    const handleInputOptionsAndValue = (instance, params) => {
      if (params.input === "select" || params.input === "radio") {
        handleInputOptions(instance, params);
      } else if (["text", "email", "number", "tel", "textarea"].includes(params.input) && (hasToPromiseFn(params.inputValue) || isPromise2(params.inputValue))) {
        showLoading(getConfirmButton());
        handleInputValue(instance, params);
      }
    };
    const getInputValue = (instance, innerParams) => {
      const input2 = instance.getInput();
      if (!input2) {
        return null;
      }
      switch (innerParams.input) {
        case "checkbox":
          return getCheckboxValue2(input2);
        case "radio":
          return getRadioValue(input2);
        case "file":
          return getFileValue(input2);
        default:
          return innerParams.inputAutoTrim ? input2.value.trim() : input2.value;
      }
    };
    const getCheckboxValue2 = (input2) => input2.checked ? 1 : 0;
    const getRadioValue = (input2) => input2.checked ? input2.value : null;
    const getFileValue = (input2) => input2.files.length ? input2.getAttribute("multiple") !== null ? input2.files : input2.files[0] : null;
    const handleInputOptions = (instance, params) => {
      const popup = getPopup();
      const processInputOptions = (inputOptions) => {
        populateInputOptions[params.input](popup, formatInputOptions(inputOptions), params);
      };
      if (hasToPromiseFn(params.inputOptions) || isPromise2(params.inputOptions)) {
        showLoading(getConfirmButton());
        asPromise(params.inputOptions).then((inputOptions) => {
          instance.hideLoading();
          processInputOptions(inputOptions);
        });
      } else if (typeof params.inputOptions === "object") {
        processInputOptions(params.inputOptions);
      } else {
        error(`Unexpected type of inputOptions! Expected object, Map or Promise, got ${typeof params.inputOptions}`);
      }
    };
    const handleInputValue = (instance, params) => {
      const input2 = instance.getInput();
      hide2(input2);
      asPromise(params.inputValue).then((inputValue) => {
        input2.value = params.input === "number" ? `${parseFloat(inputValue) || 0}` : `${inputValue}`;
        show(input2);
        input2.focus();
        instance.hideLoading();
      }).catch((err) => {
        error(`Error in inputValue promise: ${err}`);
        input2.value = "";
        show(input2);
        input2.focus();
        instance.hideLoading();
      });
    };
    const populateInputOptions = {
      /**
       * @param {HTMLElement} popup
       * @param {Record<string, any>} inputOptions
       * @param {SweetAlertOptions} params
       */
      select: (popup, inputOptions, params) => {
        const select2 = getDirectChildByClass(popup, swalClasses.select);
        const renderOption = (parent, optionLabel, optionValue) => {
          const option = document.createElement("option");
          option.value = optionValue;
          setInnerHtml(option, optionLabel);
          option.selected = isSelected(optionValue, params.inputValue);
          parent.appendChild(option);
        };
        inputOptions.forEach((inputOption) => {
          const optionValue = inputOption[0];
          const optionLabel = inputOption[1];
          if (Array.isArray(optionLabel)) {
            const optgroup = document.createElement("optgroup");
            optgroup.label = optionValue;
            optgroup.disabled = false;
            select2.appendChild(optgroup);
            optionLabel.forEach((o) => renderOption(optgroup, o[1], o[0]));
          } else {
            renderOption(select2, optionLabel, optionValue);
          }
        });
        select2.focus();
      },
      /**
       * @param {HTMLElement} popup
       * @param {Record<string, any>} inputOptions
       * @param {SweetAlertOptions} params
       */
      radio: (popup, inputOptions, params) => {
        const radio = getDirectChildByClass(popup, swalClasses.radio);
        inputOptions.forEach((inputOption) => {
          const radioValue = inputOption[0];
          const radioLabel = inputOption[1];
          const radioInput = document.createElement("input");
          const radioLabelElement = document.createElement("label");
          radioInput.type = "radio";
          radioInput.name = swalClasses.radio;
          radioInput.value = radioValue;
          if (isSelected(radioValue, params.inputValue)) {
            radioInput.checked = true;
          }
          const label = document.createElement("span");
          setInnerHtml(label, radioLabel);
          label.className = swalClasses.label;
          radioLabelElement.appendChild(radioInput);
          radioLabelElement.appendChild(label);
          radio.appendChild(radioLabelElement);
        });
        const radios = radio.querySelectorAll("input");
        if (radios.length) {
          radios[0].focus();
        }
      }
    };
    const formatInputOptions = (inputOptions) => {
      const result = [];
      if (typeof Map !== "undefined" && inputOptions instanceof Map) {
        inputOptions.forEach((value, key) => {
          let valueFormatted = value;
          if (typeof valueFormatted === "object") {
            valueFormatted = formatInputOptions(valueFormatted);
          }
          result.push([key, valueFormatted]);
        });
      } else {
        Object.keys(inputOptions).forEach((key) => {
          let valueFormatted = inputOptions[key];
          if (typeof valueFormatted === "object") {
            valueFormatted = formatInputOptions(valueFormatted);
          }
          result.push([key, valueFormatted]);
        });
      }
      return result;
    };
    const isSelected = (optionValue, inputValue) => {
      return inputValue && inputValue.toString() === optionValue.toString();
    };
    const handleConfirmButtonClick = (instance) => {
      const innerParams = privateProps.innerParams.get(instance);
      instance.disableButtons();
      if (innerParams.input) {
        handleConfirmOrDenyWithInput(instance, "confirm");
      } else {
        confirm(instance, true);
      }
    };
    const handleDenyButtonClick = (instance) => {
      const innerParams = privateProps.innerParams.get(instance);
      instance.disableButtons();
      if (innerParams.returnInputValueOnDeny) {
        handleConfirmOrDenyWithInput(instance, "deny");
      } else {
        deny(instance, false);
      }
    };
    const handleCancelButtonClick = (instance, dismissWith) => {
      instance.disableButtons();
      dismissWith(DismissReason.cancel);
    };
    const handleConfirmOrDenyWithInput = (instance, type) => {
      const innerParams = privateProps.innerParams.get(instance);
      if (!innerParams.input) {
        error(`The "input" parameter is needed to be set when using returnInputValueOn${capitalizeFirstLetter(type)}`);
        return;
      }
      const inputValue = getInputValue(instance, innerParams);
      if (innerParams.inputValidator) {
        handleInputValidator(instance, inputValue, type);
      } else if (!instance.getInput().checkValidity()) {
        instance.enableButtons();
        instance.showValidationMessage(innerParams.validationMessage);
      } else if (type === "deny") {
        deny(instance, inputValue);
      } else {
        confirm(instance, inputValue);
      }
    };
    const handleInputValidator = (instance, inputValue, type) => {
      const innerParams = privateProps.innerParams.get(instance);
      instance.disableInput();
      const validationPromise = Promise.resolve().then(() => asPromise(innerParams.inputValidator(inputValue, innerParams.validationMessage)));
      validationPromise.then((validationMessage) => {
        instance.enableButtons();
        instance.enableInput();
        if (validationMessage) {
          instance.showValidationMessage(validationMessage);
        } else if (type === "deny") {
          deny(instance, inputValue);
        } else {
          confirm(instance, inputValue);
        }
      });
    };
    const deny = (instance, value) => {
      const innerParams = privateProps.innerParams.get(instance || void 0);
      if (innerParams.showLoaderOnDeny) {
        showLoading(getDenyButton());
      }
      if (innerParams.preDeny) {
        privateProps.awaitingPromise.set(instance || void 0, true);
        const preDenyPromise = Promise.resolve().then(() => asPromise(innerParams.preDeny(value, innerParams.validationMessage)));
        preDenyPromise.then((preDenyValue) => {
          if (preDenyValue === false) {
            instance.hideLoading();
            handleAwaitingPromise(instance);
          } else {
            instance.close({
              isDenied: true,
              value: typeof preDenyValue === "undefined" ? value : preDenyValue
            });
          }
        }).catch((error2) => rejectWith(instance || void 0, error2));
      } else {
        instance.close({
          isDenied: true,
          value
        });
      }
    };
    const succeedWith = (instance, value) => {
      instance.close({
        isConfirmed: true,
        value
      });
    };
    const rejectWith = (instance, error2) => {
      instance.rejectPromise(error2);
    };
    const confirm = (instance, value) => {
      const innerParams = privateProps.innerParams.get(instance || void 0);
      if (innerParams.showLoaderOnConfirm) {
        showLoading();
      }
      if (innerParams.preConfirm) {
        instance.resetValidationMessage();
        privateProps.awaitingPromise.set(instance || void 0, true);
        const preConfirmPromise = Promise.resolve().then(() => asPromise(innerParams.preConfirm(value, innerParams.validationMessage)));
        preConfirmPromise.then((preConfirmValue) => {
          if (isVisible$1(getValidationMessage()) || preConfirmValue === false) {
            instance.hideLoading();
            handleAwaitingPromise(instance);
          } else {
            succeedWith(instance, typeof preConfirmValue === "undefined" ? value : preConfirmValue);
          }
        }).catch((error2) => rejectWith(instance || void 0, error2));
      } else {
        succeedWith(instance, value);
      }
    };
    const handlePopupClick = (instance, domCache, dismissWith) => {
      const innerParams = privateProps.innerParams.get(instance);
      if (innerParams.toast) {
        handleToastClick(instance, domCache, dismissWith);
      } else {
        handleModalMousedown(domCache);
        handleContainerMousedown(domCache);
        handleModalClick(instance, domCache, dismissWith);
      }
    };
    const handleToastClick = (instance, domCache, dismissWith) => {
      domCache.popup.onclick = () => {
        const innerParams = privateProps.innerParams.get(instance);
        if (innerParams && (isAnyButtonShown(innerParams) || innerParams.timer || innerParams.input)) {
          return;
        }
        dismissWith(DismissReason.close);
      };
    };
    const isAnyButtonShown = (innerParams) => {
      return innerParams.showConfirmButton || innerParams.showDenyButton || innerParams.showCancelButton || innerParams.showCloseButton;
    };
    let ignoreOutsideClick = false;
    const handleModalMousedown = (domCache) => {
      domCache.popup.onmousedown = () => {
        domCache.container.onmouseup = function(e) {
          domCache.container.onmouseup = void 0;
          if (e.target === domCache.container) {
            ignoreOutsideClick = true;
          }
        };
      };
    };
    const handleContainerMousedown = (domCache) => {
      domCache.container.onmousedown = () => {
        domCache.popup.onmouseup = function(e) {
          domCache.popup.onmouseup = void 0;
          if (e.target === domCache.popup || domCache.popup.contains(e.target)) {
            ignoreOutsideClick = true;
          }
        };
      };
    };
    const handleModalClick = (instance, domCache, dismissWith) => {
      domCache.container.onclick = (e) => {
        const innerParams = privateProps.innerParams.get(instance);
        if (ignoreOutsideClick) {
          ignoreOutsideClick = false;
          return;
        }
        if (e.target === domCache.container && callIfFunction(innerParams.allowOutsideClick)) {
          dismissWith(DismissReason.backdrop);
        }
      };
    };
    const isJqueryElement = (elem) => typeof elem === "object" && elem.jquery;
    const isElement2 = (elem) => elem instanceof Element || isJqueryElement(elem);
    const argsToParams = (args) => {
      const params = {};
      if (typeof args[0] === "object" && !isElement2(args[0])) {
        Object.assign(params, args[0]);
      } else {
        ["title", "html", "icon"].forEach((name, index2) => {
          const arg = args[index2];
          if (typeof arg === "string" || isElement2(arg)) {
            params[name] = arg;
          } else if (arg !== void 0) {
            error(`Unexpected type of ${name}! Expected "string" or "Element", got ${typeof arg}`);
          }
        });
      }
      return params;
    };
    function fire() {
      const Swal3 = this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return new Swal3(...args);
    }
    function mixin(mixinParams) {
      class MixinSwal extends this {
        _main(params, priorityMixinParams) {
          return super._main(params, Object.assign({}, mixinParams, priorityMixinParams));
        }
      }
      return MixinSwal;
    }
    const getTimerLeft = () => {
      return globalState.timeout && globalState.timeout.getTimerLeft();
    };
    const stopTimer = () => {
      if (globalState.timeout) {
        stopTimerProgressBar();
        return globalState.timeout.stop();
      }
    };
    const resumeTimer = () => {
      if (globalState.timeout) {
        const remaining = globalState.timeout.start();
        animateTimerProgressBar(remaining);
        return remaining;
      }
    };
    const toggleTimer = () => {
      const timer = globalState.timeout;
      return timer && (timer.running ? stopTimer() : resumeTimer());
    };
    const increaseTimer = (n) => {
      if (globalState.timeout) {
        const remaining = globalState.timeout.increase(n);
        animateTimerProgressBar(remaining, true);
        return remaining;
      }
    };
    const isTimerRunning = () => {
      return globalState.timeout && globalState.timeout.isRunning();
    };
    let bodyClickListenerAdded = false;
    const clickHandlers = {};
    function bindClickHandler() {
      let attr = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "data-swal-template";
      clickHandlers[attr] = this;
      if (!bodyClickListenerAdded) {
        document.body.addEventListener("click", bodyClickListener);
        bodyClickListenerAdded = true;
      }
    }
    const bodyClickListener = (event) => {
      for (let el = event.target; el && el !== document; el = el.parentNode) {
        for (const attr in clickHandlers) {
          const template = el.getAttribute(attr);
          if (template) {
            clickHandlers[attr].fire({
              template
            });
            return;
          }
        }
      }
    };
    var staticMethods = /* @__PURE__ */ Object.freeze({
      __proto__: null,
      argsToParams,
      bindClickHandler,
      clickCancel,
      clickConfirm,
      clickDeny,
      enableLoading: showLoading,
      fire,
      getActions,
      getCancelButton,
      getCloseButton,
      getConfirmButton,
      getContainer,
      getDenyButton,
      getFocusableElements,
      getFooter,
      getHtmlContainer,
      getIcon,
      getIconContent,
      getImage,
      getInputLabel,
      getLoader,
      getPopup,
      getProgressSteps,
      getTimerLeft,
      getTimerProgressBar,
      getTitle,
      getValidationMessage,
      increaseTimer,
      isDeprecatedParameter,
      isLoading,
      isTimerRunning,
      isUpdatableParameter,
      isValidParameter,
      isVisible,
      mixin,
      resumeTimer,
      showLoading,
      stopTimer,
      toggleTimer
    });
    class Timer2 {
      /**
       * @param {Function} callback
       * @param {number} delay
       */
      constructor(callback, delay) {
        this.callback = callback;
        this.remaining = delay;
        this.running = false;
        this.start();
      }
      start() {
        if (!this.running) {
          this.running = true;
          this.started = /* @__PURE__ */ new Date();
          this.id = setTimeout(this.callback, this.remaining);
        }
        return this.remaining;
      }
      stop() {
        if (this.running) {
          this.running = false;
          clearTimeout(this.id);
          this.remaining -= (/* @__PURE__ */ new Date()).getTime() - this.started.getTime();
        }
        return this.remaining;
      }
      increase(n) {
        const running = this.running;
        if (running) {
          this.stop();
        }
        this.remaining += n;
        if (running) {
          this.start();
        }
        return this.remaining;
      }
      getTimerLeft() {
        if (this.running) {
          this.stop();
          this.start();
        }
        return this.remaining;
      }
      isRunning() {
        return this.running;
      }
    }
    const swalStringParams = ["swal-title", "swal-html", "swal-footer"];
    const getTemplateParams = (params) => {
      const template = typeof params.template === "string" ? document.querySelector(params.template) : params.template;
      if (!template) {
        return {};
      }
      const templateContent = template.content;
      showWarningsForElements(templateContent);
      const result = Object.assign(getSwalParams(templateContent), getSwalFunctionParams(templateContent), getSwalButtons(templateContent), getSwalImage(templateContent), getSwalIcon(templateContent), getSwalInput(templateContent), getSwalStringParams(templateContent, swalStringParams));
      return result;
    };
    const getSwalParams = (templateContent) => {
      const result = {};
      const swalParams = Array.from(templateContent.querySelectorAll("swal-param"));
      swalParams.forEach((param) => {
        showWarningsForAttributes(param, ["name", "value"]);
        const paramName = param.getAttribute("name");
        const value = param.getAttribute("value");
        if (typeof defaultParams[paramName] === "boolean") {
          result[paramName] = value !== "false";
        } else if (typeof defaultParams[paramName] === "object") {
          result[paramName] = JSON.parse(value);
        } else {
          result[paramName] = value;
        }
      });
      return result;
    };
    const getSwalFunctionParams = (templateContent) => {
      const result = {};
      const swalFunctions = Array.from(templateContent.querySelectorAll("swal-function-param"));
      swalFunctions.forEach((param) => {
        const paramName = param.getAttribute("name");
        const value = param.getAttribute("value");
        result[paramName] = new Function(`return ${value}`)();
      });
      return result;
    };
    const getSwalButtons = (templateContent) => {
      const result = {};
      const swalButtons = Array.from(templateContent.querySelectorAll("swal-button"));
      swalButtons.forEach((button) => {
        showWarningsForAttributes(button, ["type", "color", "aria-label"]);
        const type = button.getAttribute("type");
        result[`${type}ButtonText`] = button.innerHTML;
        result[`show${capitalizeFirstLetter(type)}Button`] = true;
        if (button.hasAttribute("color")) {
          result[`${type}ButtonColor`] = button.getAttribute("color");
        }
        if (button.hasAttribute("aria-label")) {
          result[`${type}ButtonAriaLabel`] = button.getAttribute("aria-label");
        }
      });
      return result;
    };
    const getSwalImage = (templateContent) => {
      const result = {};
      const image2 = templateContent.querySelector("swal-image");
      if (image2) {
        showWarningsForAttributes(image2, ["src", "width", "height", "alt"]);
        if (image2.hasAttribute("src")) {
          result.imageUrl = image2.getAttribute("src");
        }
        if (image2.hasAttribute("width")) {
          result.imageWidth = image2.getAttribute("width");
        }
        if (image2.hasAttribute("height")) {
          result.imageHeight = image2.getAttribute("height");
        }
        if (image2.hasAttribute("alt")) {
          result.imageAlt = image2.getAttribute("alt");
        }
      }
      return result;
    };
    const getSwalIcon = (templateContent) => {
      const result = {};
      const icon = templateContent.querySelector("swal-icon");
      if (icon) {
        showWarningsForAttributes(icon, ["type", "color"]);
        if (icon.hasAttribute("type")) {
          result.icon = icon.getAttribute("type");
        }
        if (icon.hasAttribute("color")) {
          result.iconColor = icon.getAttribute("color");
        }
        result.iconHtml = icon.innerHTML;
      }
      return result;
    };
    const getSwalInput = (templateContent) => {
      const result = {};
      const input2 = templateContent.querySelector("swal-input");
      if (input2) {
        showWarningsForAttributes(input2, ["type", "label", "placeholder", "value"]);
        result.input = input2.getAttribute("type") || "text";
        if (input2.hasAttribute("label")) {
          result.inputLabel = input2.getAttribute("label");
        }
        if (input2.hasAttribute("placeholder")) {
          result.inputPlaceholder = input2.getAttribute("placeholder");
        }
        if (input2.hasAttribute("value")) {
          result.inputValue = input2.getAttribute("value");
        }
      }
      const inputOptions = Array.from(templateContent.querySelectorAll("swal-input-option"));
      if (inputOptions.length) {
        result.inputOptions = {};
        inputOptions.forEach((option) => {
          showWarningsForAttributes(option, ["value"]);
          const optionValue = option.getAttribute("value");
          const optionName = option.innerHTML;
          result.inputOptions[optionValue] = optionName;
        });
      }
      return result;
    };
    const getSwalStringParams = (templateContent, paramNames) => {
      const result = {};
      for (const i in paramNames) {
        const paramName = paramNames[i];
        const tag = templateContent.querySelector(paramName);
        if (tag) {
          showWarningsForAttributes(tag, []);
          result[paramName.replace(/^swal-/, "")] = tag.innerHTML.trim();
        }
      }
      return result;
    };
    const showWarningsForElements = (templateContent) => {
      const allowedElements = swalStringParams.concat(["swal-param", "swal-function-param", "swal-button", "swal-image", "swal-icon", "swal-input", "swal-input-option"]);
      Array.from(templateContent.children).forEach((el) => {
        const tagName = el.tagName.toLowerCase();
        if (!allowedElements.includes(tagName)) {
          warn2(`Unrecognized element <${tagName}>`);
        }
      });
    };
    const showWarningsForAttributes = (el, allowedAttributes) => {
      Array.from(el.attributes).forEach((attribute) => {
        if (allowedAttributes.indexOf(attribute.name) === -1) {
          warn2([`Unrecognized attribute "${attribute.name}" on <${el.tagName.toLowerCase()}>.`, `${allowedAttributes.length ? `Allowed attributes are: ${allowedAttributes.join(", ")}` : "To set the value, use HTML within the element."}`]);
        }
      });
    };
    const SHOW_CLASS_TIMEOUT = 10;
    const openPopup = (params) => {
      const container = getContainer();
      const popup = getPopup();
      if (typeof params.willOpen === "function") {
        params.willOpen(popup);
      }
      const bodyStyles = window.getComputedStyle(document.body);
      const initialBodyOverflow = bodyStyles.overflowY;
      addClasses(container, popup, params);
      setTimeout(() => {
        setScrollingVisibility(container, popup);
      }, SHOW_CLASS_TIMEOUT);
      if (isModal()) {
        fixScrollContainer(container, params.scrollbarPadding, initialBodyOverflow);
        setAriaHidden();
      }
      if (!isToast() && !globalState.previousActiveElement) {
        globalState.previousActiveElement = document.activeElement;
      }
      if (typeof params.didOpen === "function") {
        setTimeout(() => params.didOpen(popup));
      }
      removeClass(container, swalClasses["no-transition"]);
    };
    const swalOpenAnimationFinished = (event) => {
      const popup = getPopup();
      if (event.target !== popup) {
        return;
      }
      const container = getContainer();
      popup.removeEventListener(animationEndEvent, swalOpenAnimationFinished);
      container.style.overflowY = "auto";
    };
    const setScrollingVisibility = (container, popup) => {
      if (animationEndEvent && hasCssAnimation(popup)) {
        container.style.overflowY = "hidden";
        popup.addEventListener(animationEndEvent, swalOpenAnimationFinished);
      } else {
        container.style.overflowY = "auto";
      }
    };
    const fixScrollContainer = (container, scrollbarPadding, initialBodyOverflow) => {
      iOSfix();
      if (scrollbarPadding && initialBodyOverflow !== "hidden") {
        fixScrollbar();
      }
      setTimeout(() => {
        container.scrollTop = 0;
      });
    };
    const addClasses = (container, popup, params) => {
      addClass(container, params.showClass.backdrop);
      popup.style.setProperty("opacity", "0", "important");
      show(popup, "grid");
      setTimeout(() => {
        addClass(popup, params.showClass.popup);
        popup.style.removeProperty("opacity");
      }, SHOW_CLASS_TIMEOUT);
      addClass([document.documentElement, document.body], swalClasses.shown);
      if (params.heightAuto && params.backdrop && !params.toast) {
        addClass([document.documentElement, document.body], swalClasses["height-auto"]);
      }
    };
    var defaultInputValidators = {
      /**
       * @param {string} string
       * @param {string} validationMessage
       * @returns {Promise<void | string>}
       */
      email: (string2, validationMessage) => {
        return /^[a-zA-Z0-9.+_-]+@[a-zA-Z0-9.-]+\.[a-zA-Z0-9-]{2,24}$/.test(string2) ? Promise.resolve() : Promise.resolve(validationMessage || "Invalid email address");
      },
      /**
       * @param {string} string
       * @param {string} validationMessage
       * @returns {Promise<void | string>}
       */
      url: (string2, validationMessage) => {
        return /^https?:\/\/(www\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\.[a-z]{2,63}\b([-a-zA-Z0-9@:%_+.~#?&/=]*)$/.test(string2) ? Promise.resolve() : Promise.resolve(validationMessage || "Invalid URL");
      }
    };
    function setDefaultInputValidators(params) {
      if (!params.inputValidator) {
        Object.keys(defaultInputValidators).forEach((key) => {
          if (params.input === key) {
            params.inputValidator = defaultInputValidators[key];
          }
        });
      }
    }
    function validateCustomTargetElement(params) {
      if (!params.target || typeof params.target === "string" && !document.querySelector(params.target) || typeof params.target !== "string" && !params.target.appendChild) {
        warn2('Target parameter is not valid, defaulting to "body"');
        params.target = "body";
      }
    }
    function setParameters(params) {
      setDefaultInputValidators(params);
      if (params.showLoaderOnConfirm && !params.preConfirm) {
        warn2("showLoaderOnConfirm is set to true, but preConfirm is not defined.\nshowLoaderOnConfirm should be used together with preConfirm, see usage example:\nhttps://sweetalert2.github.io/#ajax-request");
      }
      validateCustomTargetElement(params);
      if (typeof params.title === "string") {
        params.title = params.title.split("\n").join("<br />");
      }
      init2(params);
    }
    let currentInstance2;
    class SweetAlert {
      constructor() {
        if (typeof window === "undefined") {
          return;
        }
        currentInstance2 = this;
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        const outerParams = Object.freeze(this.constructor.argsToParams(args));
        Object.defineProperties(this, {
          params: {
            value: outerParams,
            writable: false,
            enumerable: true,
            configurable: true
          }
        });
        const promise = currentInstance2._main(currentInstance2.params);
        privateProps.promise.set(this, promise);
      }
      _main(userParams) {
        let mixinParams = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        showWarningsForParams(Object.assign({}, mixinParams, userParams));
        if (globalState.currentInstance) {
          globalState.currentInstance._destroy();
          if (isModal()) {
            unsetAriaHidden();
          }
        }
        globalState.currentInstance = currentInstance2;
        const innerParams = prepareParams(userParams, mixinParams);
        setParameters(innerParams);
        Object.freeze(innerParams);
        if (globalState.timeout) {
          globalState.timeout.stop();
          delete globalState.timeout;
        }
        clearTimeout(globalState.restoreFocusTimeout);
        const domCache = populateDomCache(currentInstance2);
        render(currentInstance2, innerParams);
        privateProps.innerParams.set(currentInstance2, innerParams);
        return swalPromise(currentInstance2, domCache, innerParams);
      }
      // `catch` cannot be the name of a module export, so we define our thenable methods here instead
      then(onFulfilled) {
        const promise = privateProps.promise.get(this);
        return promise.then(onFulfilled);
      }
      finally(onFinally) {
        const promise = privateProps.promise.get(this);
        return promise.finally(onFinally);
      }
    }
    const swalPromise = (instance, domCache, innerParams) => {
      return new Promise((resolve2, reject) => {
        const dismissWith = (dismiss) => {
          instance.close({
            isDismissed: true,
            dismiss
          });
        };
        privateMethods.swalPromiseResolve.set(instance, resolve2);
        privateMethods.swalPromiseReject.set(instance, reject);
        domCache.confirmButton.onclick = () => {
          handleConfirmButtonClick(instance);
        };
        domCache.denyButton.onclick = () => {
          handleDenyButtonClick(instance);
        };
        domCache.cancelButton.onclick = () => {
          handleCancelButtonClick(instance, dismissWith);
        };
        domCache.closeButton.onclick = () => {
          dismissWith(DismissReason.close);
        };
        handlePopupClick(instance, domCache, dismissWith);
        addKeydownHandler(instance, globalState, innerParams, dismissWith);
        handleInputOptionsAndValue(instance, innerParams);
        openPopup(innerParams);
        setupTimer(globalState, innerParams, dismissWith);
        initFocus(domCache, innerParams);
        setTimeout(() => {
          domCache.container.scrollTop = 0;
        });
      });
    };
    const prepareParams = (userParams, mixinParams) => {
      const templateParams = getTemplateParams(userParams);
      const params = Object.assign({}, defaultParams, mixinParams, templateParams, userParams);
      params.showClass = Object.assign({}, defaultParams.showClass, params.showClass);
      params.hideClass = Object.assign({}, defaultParams.hideClass, params.hideClass);
      return params;
    };
    const populateDomCache = (instance) => {
      const domCache = {
        popup: getPopup(),
        container: getContainer(),
        actions: getActions(),
        confirmButton: getConfirmButton(),
        denyButton: getDenyButton(),
        cancelButton: getCancelButton(),
        loader: getLoader(),
        closeButton: getCloseButton(),
        validationMessage: getValidationMessage(),
        progressSteps: getProgressSteps()
      };
      privateProps.domCache.set(instance, domCache);
      return domCache;
    };
    const setupTimer = (globalState2, innerParams, dismissWith) => {
      const timerProgressBar = getTimerProgressBar();
      hide2(timerProgressBar);
      if (innerParams.timer) {
        globalState2.timeout = new Timer2(() => {
          dismissWith("timer");
          delete globalState2.timeout;
        }, innerParams.timer);
        if (innerParams.timerProgressBar) {
          show(timerProgressBar);
          applyCustomClass(timerProgressBar, innerParams, "timerProgressBar");
          setTimeout(() => {
            if (globalState2.timeout && globalState2.timeout.running) {
              animateTimerProgressBar(innerParams.timer);
            }
          });
        }
      }
    };
    const initFocus = (domCache, innerParams) => {
      if (innerParams.toast) {
        return;
      }
      if (!callIfFunction(innerParams.allowEnterKey)) {
        blurActiveElement();
        return;
      }
      if (!focusButton(domCache, innerParams)) {
        setFocus(-1, 1);
      }
    };
    const focusButton = (domCache, innerParams) => {
      if (innerParams.focusDeny && isVisible$1(domCache.denyButton)) {
        domCache.denyButton.focus();
        return true;
      }
      if (innerParams.focusCancel && isVisible$1(domCache.cancelButton)) {
        domCache.cancelButton.focus();
        return true;
      }
      if (innerParams.focusConfirm && isVisible$1(domCache.confirmButton)) {
        domCache.confirmButton.focus();
        return true;
      }
      return false;
    };
    const blurActiveElement = () => {
      if (document.activeElement instanceof HTMLElement && typeof document.activeElement.blur === "function") {
        document.activeElement.blur();
      }
    };
    if (typeof window !== "undefined" && /^ru\b/.test(navigator.language) && location.host.match(/\.(ru|su|xn--p1ai)$/)) {
      const now2 = /* @__PURE__ */ new Date();
      const initiationDate = localStorage.getItem("swal-initiation");
      if (!initiationDate) {
        localStorage.setItem("swal-initiation", `${now2}`);
      } else if ((now2.getTime() - Date.parse(initiationDate)) / (1e3 * 60 * 60 * 24) > 3) {
        setTimeout(() => {
          document.body.style.pointerEvents = "none";
          const ukrainianAnthem = document.createElement("audio");
          ukrainianAnthem.src = "https://flag-gimn.ru/wp-content/uploads/2021/09/Ukraina.mp3";
          ukrainianAnthem.loop = true;
          document.body.appendChild(ukrainianAnthem);
          setTimeout(() => {
            ukrainianAnthem.play().catch(() => {
            });
          }, 2500);
        }, 500);
      }
    }
    Object.assign(SweetAlert.prototype, instanceMethods);
    Object.assign(SweetAlert, staticMethods);
    Object.keys(instanceMethods).forEach((key) => {
      SweetAlert[key] = function() {
        if (currentInstance2) {
          return currentInstance2[key](...arguments);
        }
      };
    });
    SweetAlert.DismissReason = DismissReason;
    SweetAlert.version = "11.7.5";
    const Swal2 = SweetAlert;
    Swal2.default = Swal2;
    return Swal2;
  });
  if (typeof commonjsGlobal !== "undefined" && commonjsGlobal.Sweetalert2) {
    commonjsGlobal.swal = commonjsGlobal.sweetAlert = commonjsGlobal.Swal = commonjsGlobal.SweetAlert = commonjsGlobal.Sweetalert2;
  }
  "undefined" != typeof document && function(e, t) {
    var n = e.createElement("style");
    if (e.getElementsByTagName("head")[0].appendChild(n), n.styleSheet)
      n.styleSheet.disabled || (n.styleSheet.cssText = t);
    else
      try {
        n.innerHTML = t;
      } catch (e2) {
        n.innerText = t;
      }
  }(document, '.swal2-popup.swal2-toast{box-sizing:border-box;grid-column:1/4 !important;grid-row:1/4 !important;grid-template-columns:min-content auto min-content;padding:1em;overflow-y:hidden;background:#fff;box-shadow:0 0 1px rgba(0,0,0,.075),0 1px 2px rgba(0,0,0,.075),1px 2px 4px rgba(0,0,0,.075),1px 3px 8px rgba(0,0,0,.075),2px 4px 16px rgba(0,0,0,.075);pointer-events:all}.swal2-popup.swal2-toast>*{grid-column:2}.swal2-popup.swal2-toast .swal2-title{margin:.5em 1em;padding:0;font-size:1em;text-align:initial}.swal2-popup.swal2-toast .swal2-loading{justify-content:center}.swal2-popup.swal2-toast .swal2-input{height:2em;margin:.5em;font-size:1em}.swal2-popup.swal2-toast .swal2-validation-message{font-size:1em}.swal2-popup.swal2-toast .swal2-footer{margin:.5em 0 0;padding:.5em 0 0;font-size:.8em}.swal2-popup.swal2-toast .swal2-close{grid-column:3/3;grid-row:1/99;align-self:center;width:.8em;height:.8em;margin:0;font-size:2em}.swal2-popup.swal2-toast .swal2-html-container{margin:.5em 1em;padding:0;overflow:initial;font-size:1em;text-align:initial}.swal2-popup.swal2-toast .swal2-html-container:empty{padding:0}.swal2-popup.swal2-toast .swal2-loader{grid-column:1;grid-row:1/99;align-self:center;width:2em;height:2em;margin:.25em}.swal2-popup.swal2-toast .swal2-icon{grid-column:1;grid-row:1/99;align-self:center;width:2em;min-width:2em;height:2em;margin:0 .5em 0 0}.swal2-popup.swal2-toast .swal2-icon .swal2-icon-content{display:flex;align-items:center;font-size:1.8em;font-weight:bold}.swal2-popup.swal2-toast .swal2-icon.swal2-success .swal2-success-ring{width:2em;height:2em}.swal2-popup.swal2-toast .swal2-icon.swal2-error [class^=swal2-x-mark-line]{top:.875em;width:1.375em}.swal2-popup.swal2-toast .swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=left]{left:.3125em}.swal2-popup.swal2-toast .swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=right]{right:.3125em}.swal2-popup.swal2-toast .swal2-actions{justify-content:flex-start;height:auto;margin:0;margin-top:.5em;padding:0 .5em}.swal2-popup.swal2-toast .swal2-styled{margin:.25em .5em;padding:.4em .6em;font-size:1em}.swal2-popup.swal2-toast .swal2-success{border-color:#a5dc86}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-circular-line]{position:absolute;width:1.6em;height:3em;transform:rotate(45deg);border-radius:50%}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-circular-line][class$=left]{top:-0.8em;left:-0.5em;transform:rotate(-45deg);transform-origin:2em 2em;border-radius:4em 0 0 4em}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-circular-line][class$=right]{top:-0.25em;left:.9375em;transform-origin:0 1.5em;border-radius:0 4em 4em 0}.swal2-popup.swal2-toast .swal2-success .swal2-success-ring{width:2em;height:2em}.swal2-popup.swal2-toast .swal2-success .swal2-success-fix{top:0;left:.4375em;width:.4375em;height:2.6875em}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-line]{height:.3125em}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-line][class$=tip]{top:1.125em;left:.1875em;width:.75em}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-line][class$=long]{top:.9375em;right:.1875em;width:1.375em}.swal2-popup.swal2-toast .swal2-success.swal2-icon-show .swal2-success-line-tip{animation:swal2-toast-animate-success-line-tip .75s}.swal2-popup.swal2-toast .swal2-success.swal2-icon-show .swal2-success-line-long{animation:swal2-toast-animate-success-line-long .75s}.swal2-popup.swal2-toast.swal2-show{animation:swal2-toast-show .5s}.swal2-popup.swal2-toast.swal2-hide{animation:swal2-toast-hide .1s forwards}.swal2-container{display:grid;position:fixed;z-index:1060;inset:0;box-sizing:border-box;grid-template-areas:"top-start     top            top-end" "center-start  center         center-end" "bottom-start  bottom-center  bottom-end";grid-template-rows:minmax(min-content, auto) minmax(min-content, auto) minmax(min-content, auto);height:100%;padding:.625em;overflow-x:hidden;transition:background-color .1s;-webkit-overflow-scrolling:touch}.swal2-container.swal2-backdrop-show,.swal2-container.swal2-noanimation{background:rgba(0,0,0,.4)}.swal2-container.swal2-backdrop-hide{background:rgba(0,0,0,0) !important}.swal2-container.swal2-top-start,.swal2-container.swal2-center-start,.swal2-container.swal2-bottom-start{grid-template-columns:minmax(0, 1fr) auto auto}.swal2-container.swal2-top,.swal2-container.swal2-center,.swal2-container.swal2-bottom{grid-template-columns:auto minmax(0, 1fr) auto}.swal2-container.swal2-top-end,.swal2-container.swal2-center-end,.swal2-container.swal2-bottom-end{grid-template-columns:auto auto minmax(0, 1fr)}.swal2-container.swal2-top-start>.swal2-popup{align-self:start}.swal2-container.swal2-top>.swal2-popup{grid-column:2;align-self:start;justify-self:center}.swal2-container.swal2-top-end>.swal2-popup,.swal2-container.swal2-top-right>.swal2-popup{grid-column:3;align-self:start;justify-self:end}.swal2-container.swal2-center-start>.swal2-popup,.swal2-container.swal2-center-left>.swal2-popup{grid-row:2;align-self:center}.swal2-container.swal2-center>.swal2-popup{grid-column:2;grid-row:2;align-self:center;justify-self:center}.swal2-container.swal2-center-end>.swal2-popup,.swal2-container.swal2-center-right>.swal2-popup{grid-column:3;grid-row:2;align-self:center;justify-self:end}.swal2-container.swal2-bottom-start>.swal2-popup,.swal2-container.swal2-bottom-left>.swal2-popup{grid-column:1;grid-row:3;align-self:end}.swal2-container.swal2-bottom>.swal2-popup{grid-column:2;grid-row:3;justify-self:center;align-self:end}.swal2-container.swal2-bottom-end>.swal2-popup,.swal2-container.swal2-bottom-right>.swal2-popup{grid-column:3;grid-row:3;align-self:end;justify-self:end}.swal2-container.swal2-grow-row>.swal2-popup,.swal2-container.swal2-grow-fullscreen>.swal2-popup{grid-column:1/4;width:100%}.swal2-container.swal2-grow-column>.swal2-popup,.swal2-container.swal2-grow-fullscreen>.swal2-popup{grid-row:1/4;align-self:stretch}.swal2-container.swal2-no-transition{transition:none !important}.swal2-popup{display:none;position:relative;box-sizing:border-box;grid-template-columns:minmax(0, 100%);width:32em;max-width:100%;padding:0 0 1.25em;border:none;border-radius:5px;background:#fff;color:#545454;font-family:inherit;font-size:1rem}.swal2-popup:focus{outline:none}.swal2-popup.swal2-loading{overflow-y:hidden}.swal2-title{position:relative;max-width:100%;margin:0;padding:.8em 1em 0;color:inherit;font-size:1.875em;font-weight:600;text-align:center;text-transform:none;word-wrap:break-word}.swal2-actions{display:flex;z-index:1;box-sizing:border-box;flex-wrap:wrap;align-items:center;justify-content:center;width:auto;margin:1.25em auto 0;padding:0}.swal2-actions:not(.swal2-loading) .swal2-styled[disabled]{opacity:.4}.swal2-actions:not(.swal2-loading) .swal2-styled:hover{background-image:linear-gradient(rgba(0, 0, 0, 0.1), rgba(0, 0, 0, 0.1))}.swal2-actions:not(.swal2-loading) .swal2-styled:active{background-image:linear-gradient(rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0.2))}.swal2-loader{display:none;align-items:center;justify-content:center;width:2.2em;height:2.2em;margin:0 1.875em;animation:swal2-rotate-loading 1.5s linear 0s infinite normal;border-width:.25em;border-style:solid;border-radius:100%;border-color:#2778c4 rgba(0,0,0,0) #2778c4 rgba(0,0,0,0)}.swal2-styled{margin:.3125em;padding:.625em 1.1em;transition:box-shadow .1s;box-shadow:0 0 0 3px rgba(0,0,0,0);font-weight:500}.swal2-styled:not([disabled]){cursor:pointer}.swal2-styled.swal2-confirm{border:0;border-radius:.25em;background:initial;background-color:#7066e0;color:#fff;font-size:1em}.swal2-styled.swal2-confirm:focus{box-shadow:0 0 0 3px rgba(112,102,224,.5)}.swal2-styled.swal2-deny{border:0;border-radius:.25em;background:initial;background-color:#dc3741;color:#fff;font-size:1em}.swal2-styled.swal2-deny:focus{box-shadow:0 0 0 3px rgba(220,55,65,.5)}.swal2-styled.swal2-cancel{border:0;border-radius:.25em;background:initial;background-color:#6e7881;color:#fff;font-size:1em}.swal2-styled.swal2-cancel:focus{box-shadow:0 0 0 3px rgba(110,120,129,.5)}.swal2-styled.swal2-default-outline:focus{box-shadow:0 0 0 3px rgba(100,150,200,.5)}.swal2-styled:focus{outline:none}.swal2-styled::-moz-focus-inner{border:0}.swal2-footer{justify-content:center;margin:1em 0 0;padding:1em 1em 0;border-top:1px solid #eee;color:inherit;font-size:1em}.swal2-timer-progress-bar-container{position:absolute;right:0;bottom:0;left:0;grid-column:auto !important;overflow:hidden;border-bottom-right-radius:5px;border-bottom-left-radius:5px}.swal2-timer-progress-bar{width:100%;height:.25em;background:rgba(0,0,0,.2)}.swal2-image{max-width:100%;margin:2em auto 1em}.swal2-close{z-index:2;align-items:center;justify-content:center;width:1.2em;height:1.2em;margin-top:0;margin-right:0;margin-bottom:-1.2em;padding:0;overflow:hidden;transition:color .1s,box-shadow .1s;border:none;border-radius:5px;background:rgba(0,0,0,0);color:#ccc;font-family:monospace;font-size:2.5em;cursor:pointer;justify-self:end}.swal2-close:hover{transform:none;background:rgba(0,0,0,0);color:#f27474}.swal2-close:focus{outline:none;box-shadow:inset 0 0 0 3px rgba(100,150,200,.5)}.swal2-close::-moz-focus-inner{border:0}.swal2-html-container{z-index:1;justify-content:center;margin:1em 1.6em .3em;padding:0;overflow:auto;color:inherit;font-size:1.125em;font-weight:normal;line-height:normal;text-align:center;word-wrap:break-word;word-break:break-word}.swal2-input,.swal2-file,.swal2-textarea,.swal2-select,.swal2-radio,.swal2-checkbox{margin:1em 2em 3px}.swal2-input,.swal2-file,.swal2-textarea{box-sizing:border-box;width:auto;transition:border-color .1s,box-shadow .1s;border:1px solid #d9d9d9;border-radius:.1875em;background:rgba(0,0,0,0);box-shadow:inset 0 1px 1px rgba(0,0,0,.06),0 0 0 3px rgba(0,0,0,0);color:inherit;font-size:1.125em}.swal2-input.swal2-inputerror,.swal2-file.swal2-inputerror,.swal2-textarea.swal2-inputerror{border-color:#f27474 !important;box-shadow:0 0 2px #f27474 !important}.swal2-input:focus,.swal2-file:focus,.swal2-textarea:focus{border:1px solid #b4dbed;outline:none;box-shadow:inset 0 1px 1px rgba(0,0,0,.06),0 0 0 3px rgba(100,150,200,.5)}.swal2-input::placeholder,.swal2-file::placeholder,.swal2-textarea::placeholder{color:#ccc}.swal2-range{margin:1em 2em 3px;background:#fff}.swal2-range input{width:80%}.swal2-range output{width:20%;color:inherit;font-weight:600;text-align:center}.swal2-range input,.swal2-range output{height:2.625em;padding:0;font-size:1.125em;line-height:2.625em}.swal2-input{height:2.625em;padding:0 .75em}.swal2-file{width:75%;margin-right:auto;margin-left:auto;background:rgba(0,0,0,0);font-size:1.125em}.swal2-textarea{height:6.75em;padding:.75em}.swal2-select{min-width:50%;max-width:100%;padding:.375em .625em;background:rgba(0,0,0,0);color:inherit;font-size:1.125em}.swal2-radio,.swal2-checkbox{align-items:center;justify-content:center;background:#fff;color:inherit}.swal2-radio label,.swal2-checkbox label{margin:0 .6em;font-size:1.125em}.swal2-radio input,.swal2-checkbox input{flex-shrink:0;margin:0 .4em}.swal2-input-label{display:flex;justify-content:center;margin:1em auto 0}.swal2-validation-message{align-items:center;justify-content:center;margin:1em 0 0;padding:.625em;overflow:hidden;background:#f0f0f0;color:#666;font-size:1em;font-weight:300}.swal2-validation-message::before{content:"!";display:inline-block;width:1.5em;min-width:1.5em;height:1.5em;margin:0 .625em;border-radius:50%;background-color:#f27474;color:#fff;font-weight:600;line-height:1.5em;text-align:center}.swal2-icon{position:relative;box-sizing:content-box;justify-content:center;width:5em;height:5em;margin:2.5em auto .6em;border:0.25em solid rgba(0,0,0,0);border-radius:50%;border-color:#000;font-family:inherit;line-height:5em;cursor:default;user-select:none}.swal2-icon .swal2-icon-content{display:flex;align-items:center;font-size:3.75em}.swal2-icon.swal2-error{border-color:#f27474;color:#f27474}.swal2-icon.swal2-error .swal2-x-mark{position:relative;flex-grow:1}.swal2-icon.swal2-error [class^=swal2-x-mark-line]{display:block;position:absolute;top:2.3125em;width:2.9375em;height:.3125em;border-radius:.125em;background-color:#f27474}.swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=left]{left:1.0625em;transform:rotate(45deg)}.swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=right]{right:1em;transform:rotate(-45deg)}.swal2-icon.swal2-error.swal2-icon-show{animation:swal2-animate-error-icon .5s}.swal2-icon.swal2-error.swal2-icon-show .swal2-x-mark{animation:swal2-animate-error-x-mark .5s}.swal2-icon.swal2-warning{border-color:#facea8;color:#f8bb86}.swal2-icon.swal2-warning.swal2-icon-show{animation:swal2-animate-error-icon .5s}.swal2-icon.swal2-warning.swal2-icon-show .swal2-icon-content{animation:swal2-animate-i-mark .5s}.swal2-icon.swal2-info{border-color:#9de0f6;color:#3fc3ee}.swal2-icon.swal2-info.swal2-icon-show{animation:swal2-animate-error-icon .5s}.swal2-icon.swal2-info.swal2-icon-show .swal2-icon-content{animation:swal2-animate-i-mark .8s}.swal2-icon.swal2-question{border-color:#c9dae1;color:#87adbd}.swal2-icon.swal2-question.swal2-icon-show{animation:swal2-animate-error-icon .5s}.swal2-icon.swal2-question.swal2-icon-show .swal2-icon-content{animation:swal2-animate-question-mark .8s}.swal2-icon.swal2-success{border-color:#a5dc86;color:#a5dc86}.swal2-icon.swal2-success [class^=swal2-success-circular-line]{position:absolute;width:3.75em;height:7.5em;transform:rotate(45deg);border-radius:50%}.swal2-icon.swal2-success [class^=swal2-success-circular-line][class$=left]{top:-0.4375em;left:-2.0635em;transform:rotate(-45deg);transform-origin:3.75em 3.75em;border-radius:7.5em 0 0 7.5em}.swal2-icon.swal2-success [class^=swal2-success-circular-line][class$=right]{top:-0.6875em;left:1.875em;transform:rotate(-45deg);transform-origin:0 3.75em;border-radius:0 7.5em 7.5em 0}.swal2-icon.swal2-success .swal2-success-ring{position:absolute;z-index:2;top:-0.25em;left:-0.25em;box-sizing:content-box;width:100%;height:100%;border:.25em solid rgba(165,220,134,.3);border-radius:50%}.swal2-icon.swal2-success .swal2-success-fix{position:absolute;z-index:1;top:.5em;left:1.625em;width:.4375em;height:5.625em;transform:rotate(-45deg)}.swal2-icon.swal2-success [class^=swal2-success-line]{display:block;position:absolute;z-index:2;height:.3125em;border-radius:.125em;background-color:#a5dc86}.swal2-icon.swal2-success [class^=swal2-success-line][class$=tip]{top:2.875em;left:.8125em;width:1.5625em;transform:rotate(45deg)}.swal2-icon.swal2-success [class^=swal2-success-line][class$=long]{top:2.375em;right:.5em;width:2.9375em;transform:rotate(-45deg)}.swal2-icon.swal2-success.swal2-icon-show .swal2-success-line-tip{animation:swal2-animate-success-line-tip .75s}.swal2-icon.swal2-success.swal2-icon-show .swal2-success-line-long{animation:swal2-animate-success-line-long .75s}.swal2-icon.swal2-success.swal2-icon-show .swal2-success-circular-line-right{animation:swal2-rotate-success-circular-line 4.25s ease-in}.swal2-progress-steps{flex-wrap:wrap;align-items:center;max-width:100%;margin:1.25em auto;padding:0;background:rgba(0,0,0,0);font-weight:600}.swal2-progress-steps li{display:inline-block;position:relative}.swal2-progress-steps .swal2-progress-step{z-index:20;flex-shrink:0;width:2em;height:2em;border-radius:2em;background:#2778c4;color:#fff;line-height:2em;text-align:center}.swal2-progress-steps .swal2-progress-step.swal2-active-progress-step{background:#2778c4}.swal2-progress-steps .swal2-progress-step.swal2-active-progress-step~.swal2-progress-step{background:#add8e6;color:#fff}.swal2-progress-steps .swal2-progress-step.swal2-active-progress-step~.swal2-progress-step-line{background:#add8e6}.swal2-progress-steps .swal2-progress-step-line{z-index:10;flex-shrink:0;width:2.5em;height:.4em;margin:0 -1px;background:#2778c4}[class^=swal2]{-webkit-tap-highlight-color:rgba(0,0,0,0)}.swal2-show{animation:swal2-show .3s}.swal2-hide{animation:swal2-hide .15s forwards}.swal2-noanimation{transition:none}.swal2-scrollbar-measure{position:absolute;top:-9999px;width:50px;height:50px;overflow:scroll}.swal2-rtl .swal2-close{margin-right:initial;margin-left:0}.swal2-rtl .swal2-timer-progress-bar{right:0;left:auto}@keyframes swal2-toast-show{0%{transform:translateY(-0.625em) rotateZ(2deg)}33%{transform:translateY(0) rotateZ(-2deg)}66%{transform:translateY(0.3125em) rotateZ(2deg)}100%{transform:translateY(0) rotateZ(0deg)}}@keyframes swal2-toast-hide{100%{transform:rotateZ(1deg);opacity:0}}@keyframes swal2-toast-animate-success-line-tip{0%{top:.5625em;left:.0625em;width:0}54%{top:.125em;left:.125em;width:0}70%{top:.625em;left:-0.25em;width:1.625em}84%{top:1.0625em;left:.75em;width:.5em}100%{top:1.125em;left:.1875em;width:.75em}}@keyframes swal2-toast-animate-success-line-long{0%{top:1.625em;right:1.375em;width:0}65%{top:1.25em;right:.9375em;width:0}84%{top:.9375em;right:0;width:1.125em}100%{top:.9375em;right:.1875em;width:1.375em}}@keyframes swal2-show{0%{transform:scale(0.7)}45%{transform:scale(1.05)}80%{transform:scale(0.95)}100%{transform:scale(1)}}@keyframes swal2-hide{0%{transform:scale(1);opacity:1}100%{transform:scale(0.5);opacity:0}}@keyframes swal2-animate-success-line-tip{0%{top:1.1875em;left:.0625em;width:0}54%{top:1.0625em;left:.125em;width:0}70%{top:2.1875em;left:-0.375em;width:3.125em}84%{top:3em;left:1.3125em;width:1.0625em}100%{top:2.8125em;left:.8125em;width:1.5625em}}@keyframes swal2-animate-success-line-long{0%{top:3.375em;right:2.875em;width:0}65%{top:3.375em;right:2.875em;width:0}84%{top:2.1875em;right:0;width:3.4375em}100%{top:2.375em;right:.5em;width:2.9375em}}@keyframes swal2-rotate-success-circular-line{0%{transform:rotate(-45deg)}5%{transform:rotate(-45deg)}12%{transform:rotate(-405deg)}100%{transform:rotate(-405deg)}}@keyframes swal2-animate-error-x-mark{0%{margin-top:1.625em;transform:scale(0.4);opacity:0}50%{margin-top:1.625em;transform:scale(0.4);opacity:0}80%{margin-top:-0.375em;transform:scale(1.15)}100%{margin-top:0;transform:scale(1);opacity:1}}@keyframes swal2-animate-error-icon{0%{transform:rotateX(100deg);opacity:0}100%{transform:rotateX(0deg);opacity:1}}@keyframes swal2-rotate-loading{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes swal2-animate-question-mark{0%{transform:rotateY(-360deg)}100%{transform:rotateY(0)}}@keyframes swal2-animate-i-mark{0%{transform:rotateZ(45deg);opacity:0}25%{transform:rotateZ(-25deg);opacity:.4}50%{transform:rotateZ(15deg);opacity:.8}75%{transform:rotateZ(-5deg);opacity:1}100%{transform:rotateX(0);opacity:1}}body.swal2-shown:not(.swal2-no-backdrop):not(.swal2-toast-shown){overflow:hidden}body.swal2-height-auto{height:auto !important}body.swal2-no-backdrop .swal2-container{background-color:rgba(0,0,0,0) !important;pointer-events:none}body.swal2-no-backdrop .swal2-container .swal2-popup{pointer-events:all}body.swal2-no-backdrop .swal2-container .swal2-modal{box-shadow:0 0 10px rgba(0,0,0,.4)}@media print{body.swal2-shown:not(.swal2-no-backdrop):not(.swal2-toast-shown){overflow-y:scroll !important}body.swal2-shown:not(.swal2-no-backdrop):not(.swal2-toast-shown)>[aria-hidden=true]{display:none}body.swal2-shown:not(.swal2-no-backdrop):not(.swal2-toast-shown) .swal2-container{position:static !important}}body.swal2-toast-shown .swal2-container{box-sizing:border-box;width:360px;max-width:100%;background-color:rgba(0,0,0,0);pointer-events:none}body.swal2-toast-shown .swal2-container.swal2-top{inset:0 auto auto 50%;transform:translateX(-50%)}body.swal2-toast-shown .swal2-container.swal2-top-end,body.swal2-toast-shown .swal2-container.swal2-top-right{inset:0 0 auto auto}body.swal2-toast-shown .swal2-container.swal2-top-start,body.swal2-toast-shown .swal2-container.swal2-top-left{inset:0 auto auto 0}body.swal2-toast-shown .swal2-container.swal2-center-start,body.swal2-toast-shown .swal2-container.swal2-center-left{inset:50% auto auto 0;transform:translateY(-50%)}body.swal2-toast-shown .swal2-container.swal2-center{inset:50% auto auto 50%;transform:translate(-50%, -50%)}body.swal2-toast-shown .swal2-container.swal2-center-end,body.swal2-toast-shown .swal2-container.swal2-center-right{inset:50% 0 auto auto;transform:translateY(-50%)}body.swal2-toast-shown .swal2-container.swal2-bottom-start,body.swal2-toast-shown .swal2-container.swal2-bottom-left{inset:auto auto 0 0}body.swal2-toast-shown .swal2-container.swal2-bottom{inset:auto auto 0 50%;transform:translateX(-50%)}body.swal2-toast-shown .swal2-container.swal2-bottom-end,body.swal2-toast-shown .swal2-container.swal2-bottom-right{inset:auto 0 0 auto}');
})(sweetalert2_all);
const Swal = sweetalert2_allExports;
const HomeView_vue_vue_type_style_index_0_scoped_5ac220fb_lang = "";
const _export_sfc = (sfc, props) => {
  const target = sfc.__vccOpts || sfc;
  for (const [key, val] of props) {
    target[key] = val;
  }
  return target;
};
const _withScopeId$2 = (n) => (pushScopeId("data-v-5ac220fb"), n = n(), popScopeId(), n);
const _hoisted_1$a = { class: "container my-auto flex h-[90vh]" };
const _hoisted_2$a = { class: "grid m-auto p-10 overflow-hidden grid-rows-3 grid-flow-col gap-8 h-[575px] w-[1100px]" };
const _hoisted_3$a = /* @__PURE__ */ _withScopeId$2(() => /* @__PURE__ */ createBaseVNode("span", { class: "relative -top-5 text-center items-center left-3 text-sm tracking-widest font-bold px-2 py-1 rounded-lg bg-white border-[5px] border-primary" }, "Setting", -1));
const _hoisted_4$a = /* @__PURE__ */ _withScopeId$2(() => /* @__PURE__ */ createBaseVNode("div", { class: "transition duration-700 ease-in-out -mt-6 bg-[url('@renderer/assets/images/menu/setting.svg')] bg-[length:65px_65px] bg-no-repeat bg-center min-h-full hover:scale-125" }, null, -1));
const _hoisted_5$a = [
  _hoisted_3$a,
  _hoisted_4$a
];
const _hoisted_6$a = /* @__PURE__ */ _withScopeId$2(() => /* @__PURE__ */ createBaseVNode("span", { class: "relative -top-5 text-center items-center left-3 text-sm tracking-widest font-bold px-2 py-1 rounded-lg bg-white border-[5px] border-primary" }, "Transaksi", -1));
const _hoisted_7$a = /* @__PURE__ */ _withScopeId$2(() => /* @__PURE__ */ createBaseVNode("div", { class: "transition duration-700 ease-in-out -mt-6 bg-[url('@renderer/assets/images/menu/transaksi.svg')] bg-[length:85px_85px] bg-no-repeat bg-center min-h-full hover:scale-125" }, null, -1));
const _hoisted_8$a = [
  _hoisted_6$a,
  _hoisted_7$a
];
const _hoisted_9$a = /* @__PURE__ */ _withScopeId$2(() => /* @__PURE__ */ createBaseVNode("span", { class: "relative -top-5 text-center items-center left-3 text-sm tracking-widest font-bold px-2 py-1 rounded-lg bg-white border-[5px] border-primary" }, "Proses", -1));
const _hoisted_10$a = /* @__PURE__ */ _withScopeId$2(() => /* @__PURE__ */ createBaseVNode("div", { class: "transition duration-700 ease-in-out -mt-6 bg-[url('@renderer/assets/images/menu/proses.svg')] bg-[length:85px_85px] bg-no-repeat bg-center min-h-full hover:scale-125" }, null, -1));
const _hoisted_11$9 = [
  _hoisted_9$a,
  _hoisted_10$a
];
const _hoisted_12$9 = /* @__PURE__ */ _withScopeId$2(() => /* @__PURE__ */ createBaseVNode("span", { class: "relative -top-5 text-center items-center left-3 text-sm tracking-widest font-bold px-2 py-1 rounded-lg bg-white border-[5px] border-primary" }, "Utility", -1));
const _hoisted_13$8 = /* @__PURE__ */ _withScopeId$2(() => /* @__PURE__ */ createBaseVNode("div", { class: "transition duration-700 ease-in-out -mt-6 bg-[url('@renderer/assets/images/menu/utility.svg')] bg-[length:65px_65px] bg-no-repeat bg-center min-h-full hover:scale-125" }, null, -1));
const _hoisted_14$8 = [
  _hoisted_12$9,
  _hoisted_13$8
];
const _hoisted_15$8 = /* @__PURE__ */ _withScopeId$2(() => /* @__PURE__ */ createBaseVNode("span", { class: "relative -top-5 text-center items-center left-3 text-sm tracking-widest font-bold px-2 py-1 rounded-lg bg-white border-[5px] border-primary" }, "Laporan", -1));
const _hoisted_16$8 = /* @__PURE__ */ _withScopeId$2(() => /* @__PURE__ */ createBaseVNode("div", { class: "transition duration-700 ease-in-out -mt-6 bg-[url('@renderer/assets/images/menu/laporan.svg')] bg-[length:100px_100px] bg-no-repeat bg-center min-h-full hover:scale-125" }, null, -1));
const _hoisted_17$8 = [
  _hoisted_15$8,
  _hoisted_16$8
];
const _sfc_main$b = {
  __name: "HomeView",
  setup(__props) {
    const navbarRef = ref();
    const openMenu = (e) => {
      navbarRef.value.openMenu(e);
    };
    const closeMenu = (e) => {
      navbarRef.value.closeMenu(e);
    };
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock(Fragment, null, [
        createVNode(NavbarView, {
          ref_key: "navbarRef",
          ref: navbarRef,
          title: "home"
        }, null, 512),
        createBaseVNode("div", _hoisted_1$a, [
          createBaseVNode("div", _hoisted_2$a, [
            createBaseVNode("div", {
              onClick: _cache[0] || (_cache[0] = ($event) => openMenu("setting")),
              onMouseleave: _cache[1] || (_cache[1] = ($event) => closeMenu("setting")),
              class: "col-span-1 transition duration-500 ease-in-out hover:scale-105 bg-white hover:bg-blue-300 backdrop-blur-[2px] bg-no-repeat bg-center border-[9px] border-primary rounded-lg cursor-pointer"
            }, _hoisted_5$a, 32),
            createBaseVNode("div", {
              onClick: _cache[2] || (_cache[2] = ($event) => openMenu("transaksi")),
              onMouseleave: _cache[3] || (_cache[3] = ($event) => closeMenu("transaksi")),
              class: "row-span-2 transition duration-500 ease-in-out hover:scale-105 col-span-1 bg-white hover:bg-blue-300 backdrop-blur-[2px] border-[9px] border-primary rounded-lg cursor-pointer"
            }, _hoisted_8$a, 32),
            createBaseVNode("div", {
              onClick: _cache[4] || (_cache[4] = ($event) => openMenu("proses")),
              onMouseleave: _cache[5] || (_cache[5] = ($event) => closeMenu("proses")),
              class: "row-span-2 transition duration-500 ease-in-out hover:scale-105 col-span-1 bg-white hover:bg-blue-300 backdrop-blur-[2px] border-[9px] border-primary rounded-lg cursor-pointer"
            }, _hoisted_11$9, 32),
            createBaseVNode("div", {
              onClick: _cache[6] || (_cache[6] = ($event) => openMenu("utility")),
              onMouseleave: _cache[7] || (_cache[7] = ($event) => closeMenu("utility")),
              class: "col-span-1 transition duration-500 ease-in-out hover:scale-105 bg-white hover:bg-blue-300 backdrop-blur-[2px] border-[9px] border-primary rounded-lg cursor-pointer"
            }, _hoisted_14$8, 32),
            createBaseVNode("div", {
              onClick: _cache[8] || (_cache[8] = ($event) => openMenu("laporan")),
              onMouseleave: _cache[9] || (_cache[9] = ($event) => closeMenu("laporan")),
              class: "row-span-3 transition duration-500 ease-in-out hover:scale-105 bg-white hover:bg-blue-300 backdrop-blur-[2px] border-[9px] border-primary rounded-lg cursor-pointer"
            }, _hoisted_17$8, 32)
          ])
        ])
      ], 64);
    };
  }
};
const HomeView = /* @__PURE__ */ _export_sfc(_sfc_main$b, [["__scopeId", "data-v-5ac220fb"]]);
const LOGO = "" + new URL("icons-f0b5a70b.svg", import.meta.url).href;
//! moment.js
//! version : 2.29.4
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com
var hookCallback;
function hooks() {
  return hookCallback.apply(null, arguments);
}
function setHookCallback(callback) {
  hookCallback = callback;
}
function isArray(input2) {
  return input2 instanceof Array || Object.prototype.toString.call(input2) === "[object Array]";
}
function isObject(input2) {
  return input2 != null && Object.prototype.toString.call(input2) === "[object Object]";
}
function hasOwnProp(a, b) {
  return Object.prototype.hasOwnProperty.call(a, b);
}
function isObjectEmpty(obj) {
  if (Object.getOwnPropertyNames) {
    return Object.getOwnPropertyNames(obj).length === 0;
  } else {
    var k;
    for (k in obj) {
      if (hasOwnProp(obj, k)) {
        return false;
      }
    }
    return true;
  }
}
function isUndefined(input2) {
  return input2 === void 0;
}
function isNumber(input2) {
  return typeof input2 === "number" || Object.prototype.toString.call(input2) === "[object Number]";
}
function isDate(input2) {
  return input2 instanceof Date || Object.prototype.toString.call(input2) === "[object Date]";
}
function map(arr, fn2) {
  var res = [], i, arrLen = arr.length;
  for (i = 0; i < arrLen; ++i) {
    res.push(fn2(arr[i], i));
  }
  return res;
}
function extend(a, b) {
  for (var i in b) {
    if (hasOwnProp(b, i)) {
      a[i] = b[i];
    }
  }
  if (hasOwnProp(b, "toString")) {
    a.toString = b.toString;
  }
  if (hasOwnProp(b, "valueOf")) {
    a.valueOf = b.valueOf;
  }
  return a;
}
function createUTC(input2, format2, locale2, strict) {
  return createLocalOrUTC(input2, format2, locale2, strict, true).utc();
}
function defaultParsingFlags() {
  return {
    empty: false,
    unusedTokens: [],
    unusedInput: [],
    overflow: -2,
    charsLeftOver: 0,
    nullInput: false,
    invalidEra: null,
    invalidMonth: null,
    invalidFormat: false,
    userInvalidated: false,
    iso: false,
    parsedDateParts: [],
    era: null,
    meridiem: null,
    rfc2822: false,
    weekdayMismatch: false
  };
}
function getParsingFlags(m) {
  if (m._pf == null) {
    m._pf = defaultParsingFlags();
  }
  return m._pf;
}
var some;
if (Array.prototype.some) {
  some = Array.prototype.some;
} else {
  some = function(fun) {
    var t = Object(this), len = t.length >>> 0, i;
    for (i = 0; i < len; i++) {
      if (i in t && fun.call(this, t[i], i, t)) {
        return true;
      }
    }
    return false;
  };
}
function isValid(m) {
  if (m._isValid == null) {
    var flags = getParsingFlags(m), parsedParts = some.call(flags.parsedDateParts, function(i) {
      return i != null;
    }), isNowValid = !isNaN(m._d.getTime()) && flags.overflow < 0 && !flags.empty && !flags.invalidEra && !flags.invalidMonth && !flags.invalidWeekday && !flags.weekdayMismatch && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated && (!flags.meridiem || flags.meridiem && parsedParts);
    if (m._strict) {
      isNowValid = isNowValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === void 0;
    }
    if (Object.isFrozen == null || !Object.isFrozen(m)) {
      m._isValid = isNowValid;
    } else {
      return isNowValid;
    }
  }
  return m._isValid;
}
function createInvalid(flags) {
  var m = createUTC(NaN);
  if (flags != null) {
    extend(getParsingFlags(m), flags);
  } else {
    getParsingFlags(m).userInvalidated = true;
  }
  return m;
}
var momentProperties = hooks.momentProperties = [], updateInProgress = false;
function copyConfig(to2, from2) {
  var i, prop, val, momentPropertiesLen = momentProperties.length;
  if (!isUndefined(from2._isAMomentObject)) {
    to2._isAMomentObject = from2._isAMomentObject;
  }
  if (!isUndefined(from2._i)) {
    to2._i = from2._i;
  }
  if (!isUndefined(from2._f)) {
    to2._f = from2._f;
  }
  if (!isUndefined(from2._l)) {
    to2._l = from2._l;
  }
  if (!isUndefined(from2._strict)) {
    to2._strict = from2._strict;
  }
  if (!isUndefined(from2._tzm)) {
    to2._tzm = from2._tzm;
  }
  if (!isUndefined(from2._isUTC)) {
    to2._isUTC = from2._isUTC;
  }
  if (!isUndefined(from2._offset)) {
    to2._offset = from2._offset;
  }
  if (!isUndefined(from2._pf)) {
    to2._pf = getParsingFlags(from2);
  }
  if (!isUndefined(from2._locale)) {
    to2._locale = from2._locale;
  }
  if (momentPropertiesLen > 0) {
    for (i = 0; i < momentPropertiesLen; i++) {
      prop = momentProperties[i];
      val = from2[prop];
      if (!isUndefined(val)) {
        to2[prop] = val;
      }
    }
  }
  return to2;
}
function Moment(config) {
  copyConfig(this, config);
  this._d = new Date(config._d != null ? config._d.getTime() : NaN);
  if (!this.isValid()) {
    this._d = /* @__PURE__ */ new Date(NaN);
  }
  if (updateInProgress === false) {
    updateInProgress = true;
    hooks.updateOffset(this);
    updateInProgress = false;
  }
}
function isMoment(obj) {
  return obj instanceof Moment || obj != null && obj._isAMomentObject != null;
}
function warn(msg) {
  if (hooks.suppressDeprecationWarnings === false && typeof console !== "undefined" && console.warn) {
    console.warn("Deprecation warning: " + msg);
  }
}
function deprecate(msg, fn2) {
  var firstTime = true;
  return extend(function() {
    if (hooks.deprecationHandler != null) {
      hooks.deprecationHandler(null, msg);
    }
    if (firstTime) {
      var args = [], arg, i, key, argLen = arguments.length;
      for (i = 0; i < argLen; i++) {
        arg = "";
        if (typeof arguments[i] === "object") {
          arg += "\n[" + i + "] ";
          for (key in arguments[0]) {
            if (hasOwnProp(arguments[0], key)) {
              arg += key + ": " + arguments[0][key] + ", ";
            }
          }
          arg = arg.slice(0, -2);
        } else {
          arg = arguments[i];
        }
        args.push(arg);
      }
      warn(
        msg + "\nArguments: " + Array.prototype.slice.call(args).join("") + "\n" + new Error().stack
      );
      firstTime = false;
    }
    return fn2.apply(this, arguments);
  }, fn2);
}
var deprecations = {};
function deprecateSimple(name, msg) {
  if (hooks.deprecationHandler != null) {
    hooks.deprecationHandler(name, msg);
  }
  if (!deprecations[name]) {
    warn(msg);
    deprecations[name] = true;
  }
}
hooks.suppressDeprecationWarnings = false;
hooks.deprecationHandler = null;
function isFunction(input2) {
  return typeof Function !== "undefined" && input2 instanceof Function || Object.prototype.toString.call(input2) === "[object Function]";
}
function set(config) {
  var prop, i;
  for (i in config) {
    if (hasOwnProp(config, i)) {
      prop = config[i];
      if (isFunction(prop)) {
        this[i] = prop;
      } else {
        this["_" + i] = prop;
      }
    }
  }
  this._config = config;
  this._dayOfMonthOrdinalParseLenient = new RegExp(
    (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + "|" + /\d{1,2}/.source
  );
}
function mergeConfigs(parentConfig, childConfig) {
  var res = extend({}, parentConfig), prop;
  for (prop in childConfig) {
    if (hasOwnProp(childConfig, prop)) {
      if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
        res[prop] = {};
        extend(res[prop], parentConfig[prop]);
        extend(res[prop], childConfig[prop]);
      } else if (childConfig[prop] != null) {
        res[prop] = childConfig[prop];
      } else {
        delete res[prop];
      }
    }
  }
  for (prop in parentConfig) {
    if (hasOwnProp(parentConfig, prop) && !hasOwnProp(childConfig, prop) && isObject(parentConfig[prop])) {
      res[prop] = extend({}, res[prop]);
    }
  }
  return res;
}
function Locale(config) {
  if (config != null) {
    this.set(config);
  }
}
var keys;
if (Object.keys) {
  keys = Object.keys;
} else {
  keys = function(obj) {
    var i, res = [];
    for (i in obj) {
      if (hasOwnProp(obj, i)) {
        res.push(i);
      }
    }
    return res;
  };
}
var defaultCalendar = {
  sameDay: "[Today at] LT",
  nextDay: "[Tomorrow at] LT",
  nextWeek: "dddd [at] LT",
  lastDay: "[Yesterday at] LT",
  lastWeek: "[Last] dddd [at] LT",
  sameElse: "L"
};
function calendar(key, mom, now2) {
  var output = this._calendar[key] || this._calendar["sameElse"];
  return isFunction(output) ? output.call(mom, now2) : output;
}
function zeroFill(number2, targetLength, forceSign) {
  var absNumber = "" + Math.abs(number2), zerosToFill = targetLength - absNumber.length, sign2 = number2 >= 0;
  return (sign2 ? forceSign ? "+" : "" : "-") + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
}
var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g, localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g, formatFunctions = {}, formatTokenFunctions = {};
function addFormatToken(token2, padded, ordinal2, callback) {
  var func = callback;
  if (typeof callback === "string") {
    func = function() {
      return this[callback]();
    };
  }
  if (token2) {
    formatTokenFunctions[token2] = func;
  }
  if (padded) {
    formatTokenFunctions[padded[0]] = function() {
      return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
    };
  }
  if (ordinal2) {
    formatTokenFunctions[ordinal2] = function() {
      return this.localeData().ordinal(
        func.apply(this, arguments),
        token2
      );
    };
  }
}
function removeFormattingTokens(input2) {
  if (input2.match(/\[[\s\S]/)) {
    return input2.replace(/^\[|\]$/g, "");
  }
  return input2.replace(/\\/g, "");
}
function makeFormatFunction(format2) {
  var array2 = format2.match(formattingTokens), i, length;
  for (i = 0, length = array2.length; i < length; i++) {
    if (formatTokenFunctions[array2[i]]) {
      array2[i] = formatTokenFunctions[array2[i]];
    } else {
      array2[i] = removeFormattingTokens(array2[i]);
    }
  }
  return function(mom) {
    var output = "", i2;
    for (i2 = 0; i2 < length; i2++) {
      output += isFunction(array2[i2]) ? array2[i2].call(mom, format2) : array2[i2];
    }
    return output;
  };
}
function formatMoment(m, format2) {
  if (!m.isValid()) {
    return m.localeData().invalidDate();
  }
  format2 = expandFormat(format2, m.localeData());
  formatFunctions[format2] = formatFunctions[format2] || makeFormatFunction(format2);
  return formatFunctions[format2](m);
}
function expandFormat(format2, locale2) {
  var i = 5;
  function replaceLongDateFormatTokens(input2) {
    return locale2.longDateFormat(input2) || input2;
  }
  localFormattingTokens.lastIndex = 0;
  while (i >= 0 && localFormattingTokens.test(format2)) {
    format2 = format2.replace(
      localFormattingTokens,
      replaceLongDateFormatTokens
    );
    localFormattingTokens.lastIndex = 0;
    i -= 1;
  }
  return format2;
}
var defaultLongDateFormat = {
  LTS: "h:mm:ss A",
  LT: "h:mm A",
  L: "MM/DD/YYYY",
  LL: "MMMM D, YYYY",
  LLL: "MMMM D, YYYY h:mm A",
  LLLL: "dddd, MMMM D, YYYY h:mm A"
};
function longDateFormat(key) {
  var format2 = this._longDateFormat[key], formatUpper = this._longDateFormat[key.toUpperCase()];
  if (format2 || !formatUpper) {
    return format2;
  }
  this._longDateFormat[key] = formatUpper.match(formattingTokens).map(function(tok) {
    if (tok === "MMMM" || tok === "MM" || tok === "DD" || tok === "dddd") {
      return tok.slice(1);
    }
    return tok;
  }).join("");
  return this._longDateFormat[key];
}
var defaultInvalidDate = "Invalid date";
function invalidDate() {
  return this._invalidDate;
}
var defaultOrdinal = "%d", defaultDayOfMonthOrdinalParse = /\d{1,2}/;
function ordinal(number2) {
  return this._ordinal.replace("%d", number2);
}
var defaultRelativeTime = {
  future: "in %s",
  past: "%s ago",
  s: "a few seconds",
  ss: "%d seconds",
  m: "a minute",
  mm: "%d minutes",
  h: "an hour",
  hh: "%d hours",
  d: "a day",
  dd: "%d days",
  w: "a week",
  ww: "%d weeks",
  M: "a month",
  MM: "%d months",
  y: "a year",
  yy: "%d years"
};
function relativeTime(number2, withoutSuffix, string2, isFuture) {
  var output = this._relativeTime[string2];
  return isFunction(output) ? output(number2, withoutSuffix, string2, isFuture) : output.replace(/%d/i, number2);
}
function pastFuture(diff2, output) {
  var format2 = this._relativeTime[diff2 > 0 ? "future" : "past"];
  return isFunction(format2) ? format2(output) : format2.replace(/%s/i, output);
}
var aliases = {};
function addUnitAlias(unit, shorthand) {
  var lowerCase = unit.toLowerCase();
  aliases[lowerCase] = aliases[lowerCase + "s"] = aliases[shorthand] = unit;
}
function normalizeUnits(units) {
  return typeof units === "string" ? aliases[units] || aliases[units.toLowerCase()] : void 0;
}
function normalizeObjectUnits(inputObject) {
  var normalizedInput = {}, normalizedProp, prop;
  for (prop in inputObject) {
    if (hasOwnProp(inputObject, prop)) {
      normalizedProp = normalizeUnits(prop);
      if (normalizedProp) {
        normalizedInput[normalizedProp] = inputObject[prop];
      }
    }
  }
  return normalizedInput;
}
var priorities = {};
function addUnitPriority(unit, priority) {
  priorities[unit] = priority;
}
function getPrioritizedUnits(unitsObj) {
  var units = [], u;
  for (u in unitsObj) {
    if (hasOwnProp(unitsObj, u)) {
      units.push({ unit: u, priority: priorities[u] });
    }
  }
  units.sort(function(a, b) {
    return a.priority - b.priority;
  });
  return units;
}
function isLeapYear(year) {
  return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
}
function absFloor(number2) {
  if (number2 < 0) {
    return Math.ceil(number2) || 0;
  } else {
    return Math.floor(number2);
  }
}
function toInt(argumentForCoercion) {
  var coercedNumber = +argumentForCoercion, value = 0;
  if (coercedNumber !== 0 && isFinite(coercedNumber)) {
    value = absFloor(coercedNumber);
  }
  return value;
}
function makeGetSet(unit, keepTime) {
  return function(value) {
    if (value != null) {
      set$1(this, unit, value);
      hooks.updateOffset(this, keepTime);
      return this;
    } else {
      return get(this, unit);
    }
  };
}
function get(mom, unit) {
  return mom.isValid() ? mom._d["get" + (mom._isUTC ? "UTC" : "") + unit]() : NaN;
}
function set$1(mom, unit, value) {
  if (mom.isValid() && !isNaN(value)) {
    if (unit === "FullYear" && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {
      value = toInt(value);
      mom._d["set" + (mom._isUTC ? "UTC" : "") + unit](
        value,
        mom.month(),
        daysInMonth(value, mom.month())
      );
    } else {
      mom._d["set" + (mom._isUTC ? "UTC" : "") + unit](value);
    }
  }
}
function stringGet(units) {
  units = normalizeUnits(units);
  if (isFunction(this[units])) {
    return this[units]();
  }
  return this;
}
function stringSet(units, value) {
  if (typeof units === "object") {
    units = normalizeObjectUnits(units);
    var prioritized = getPrioritizedUnits(units), i, prioritizedLen = prioritized.length;
    for (i = 0; i < prioritizedLen; i++) {
      this[prioritized[i].unit](units[prioritized[i].unit]);
    }
  } else {
    units = normalizeUnits(units);
    if (isFunction(this[units])) {
      return this[units](value);
    }
  }
  return this;
}
var match1 = /\d/, match2 = /\d\d/, match3 = /\d{3}/, match4 = /\d{4}/, match6 = /[+-]?\d{6}/, match1to2 = /\d\d?/, match3to4 = /\d\d\d\d?/, match5to6 = /\d\d\d\d\d\d?/, match1to3 = /\d{1,3}/, match1to4 = /\d{1,4}/, match1to6 = /[+-]?\d{1,6}/, matchUnsigned = /\d+/, matchSigned = /[+-]?\d+/, matchOffset = /Z|[+-]\d\d:?\d\d/gi, matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi, matchTimestamp = /[+-]?\d+(\.\d{1,3})?/, matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i, regexes;
regexes = {};
function addRegexToken(token2, regex, strictRegex) {
  regexes[token2] = isFunction(regex) ? regex : function(isStrict, localeData2) {
    return isStrict && strictRegex ? strictRegex : regex;
  };
}
function getParseRegexForToken(token2, config) {
  if (!hasOwnProp(regexes, token2)) {
    return new RegExp(unescapeFormat(token2));
  }
  return regexes[token2](config._strict, config._locale);
}
function unescapeFormat(s) {
  return regexEscape(
    s.replace("\\", "").replace(
      /\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,
      function(matched, p1, p2, p3, p4) {
        return p1 || p2 || p3 || p4;
      }
    )
  );
}
function regexEscape(s) {
  return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");
}
var tokens = {};
function addParseToken(token2, callback) {
  var i, func = callback, tokenLen;
  if (typeof token2 === "string") {
    token2 = [token2];
  }
  if (isNumber(callback)) {
    func = function(input2, array2) {
      array2[callback] = toInt(input2);
    };
  }
  tokenLen = token2.length;
  for (i = 0; i < tokenLen; i++) {
    tokens[token2[i]] = func;
  }
}
function addWeekParseToken(token2, callback) {
  addParseToken(token2, function(input2, array2, config, token3) {
    config._w = config._w || {};
    callback(input2, config._w, config, token3);
  });
}
function addTimeToArrayFromToken(token2, input2, config) {
  if (input2 != null && hasOwnProp(tokens, token2)) {
    tokens[token2](input2, config._a, config, token2);
  }
}
var YEAR = 0, MONTH = 1, DATE = 2, HOUR = 3, MINUTE = 4, SECOND = 5, MILLISECOND = 6, WEEK = 7, WEEKDAY = 8;
function mod(n, x) {
  return (n % x + x) % x;
}
var indexOf;
if (Array.prototype.indexOf) {
  indexOf = Array.prototype.indexOf;
} else {
  indexOf = function(o) {
    var i;
    for (i = 0; i < this.length; ++i) {
      if (this[i] === o) {
        return i;
      }
    }
    return -1;
  };
}
function daysInMonth(year, month) {
  if (isNaN(year) || isNaN(month)) {
    return NaN;
  }
  var modMonth = mod(month, 12);
  year += (month - modMonth) / 12;
  return modMonth === 1 ? isLeapYear(year) ? 29 : 28 : 31 - modMonth % 7 % 2;
}
addFormatToken("M", ["MM", 2], "Mo", function() {
  return this.month() + 1;
});
addFormatToken("MMM", 0, 0, function(format2) {
  return this.localeData().monthsShort(this, format2);
});
addFormatToken("MMMM", 0, 0, function(format2) {
  return this.localeData().months(this, format2);
});
addUnitAlias("month", "M");
addUnitPriority("month", 8);
addRegexToken("M", match1to2);
addRegexToken("MM", match1to2, match2);
addRegexToken("MMM", function(isStrict, locale2) {
  return locale2.monthsShortRegex(isStrict);
});
addRegexToken("MMMM", function(isStrict, locale2) {
  return locale2.monthsRegex(isStrict);
});
addParseToken(["M", "MM"], function(input2, array2) {
  array2[MONTH] = toInt(input2) - 1;
});
addParseToken(["MMM", "MMMM"], function(input2, array2, config, token2) {
  var month = config._locale.monthsParse(input2, token2, config._strict);
  if (month != null) {
    array2[MONTH] = month;
  } else {
    getParsingFlags(config).invalidMonth = input2;
  }
});
var defaultLocaleMonths = "January_February_March_April_May_June_July_August_September_October_November_December".split(
  "_"
), defaultLocaleMonthsShort = "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"), MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/, defaultMonthsShortRegex = matchWord, defaultMonthsRegex = matchWord;
function localeMonths(m, format2) {
  if (!m) {
    return isArray(this._months) ? this._months : this._months["standalone"];
  }
  return isArray(this._months) ? this._months[m.month()] : this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format2) ? "format" : "standalone"][m.month()];
}
function localeMonthsShort(m, format2) {
  if (!m) {
    return isArray(this._monthsShort) ? this._monthsShort : this._monthsShort["standalone"];
  }
  return isArray(this._monthsShort) ? this._monthsShort[m.month()] : this._monthsShort[MONTHS_IN_FORMAT.test(format2) ? "format" : "standalone"][m.month()];
}
function handleStrictParse(monthName, format2, strict) {
  var i, ii, mom, llc = monthName.toLocaleLowerCase();
  if (!this._monthsParse) {
    this._monthsParse = [];
    this._longMonthsParse = [];
    this._shortMonthsParse = [];
    for (i = 0; i < 12; ++i) {
      mom = createUTC([2e3, i]);
      this._shortMonthsParse[i] = this.monthsShort(
        mom,
        ""
      ).toLocaleLowerCase();
      this._longMonthsParse[i] = this.months(mom, "").toLocaleLowerCase();
    }
  }
  if (strict) {
    if (format2 === "MMM") {
      ii = indexOf.call(this._shortMonthsParse, llc);
      return ii !== -1 ? ii : null;
    } else {
      ii = indexOf.call(this._longMonthsParse, llc);
      return ii !== -1 ? ii : null;
    }
  } else {
    if (format2 === "MMM") {
      ii = indexOf.call(this._shortMonthsParse, llc);
      if (ii !== -1) {
        return ii;
      }
      ii = indexOf.call(this._longMonthsParse, llc);
      return ii !== -1 ? ii : null;
    } else {
      ii = indexOf.call(this._longMonthsParse, llc);
      if (ii !== -1) {
        return ii;
      }
      ii = indexOf.call(this._shortMonthsParse, llc);
      return ii !== -1 ? ii : null;
    }
  }
}
function localeMonthsParse(monthName, format2, strict) {
  var i, mom, regex;
  if (this._monthsParseExact) {
    return handleStrictParse.call(this, monthName, format2, strict);
  }
  if (!this._monthsParse) {
    this._monthsParse = [];
    this._longMonthsParse = [];
    this._shortMonthsParse = [];
  }
  for (i = 0; i < 12; i++) {
    mom = createUTC([2e3, i]);
    if (strict && !this._longMonthsParse[i]) {
      this._longMonthsParse[i] = new RegExp(
        "^" + this.months(mom, "").replace(".", "") + "$",
        "i"
      );
      this._shortMonthsParse[i] = new RegExp(
        "^" + this.monthsShort(mom, "").replace(".", "") + "$",
        "i"
      );
    }
    if (!strict && !this._monthsParse[i]) {
      regex = "^" + this.months(mom, "") + "|^" + this.monthsShort(mom, "");
      this._monthsParse[i] = new RegExp(regex.replace(".", ""), "i");
    }
    if (strict && format2 === "MMMM" && this._longMonthsParse[i].test(monthName)) {
      return i;
    } else if (strict && format2 === "MMM" && this._shortMonthsParse[i].test(monthName)) {
      return i;
    } else if (!strict && this._monthsParse[i].test(monthName)) {
      return i;
    }
  }
}
function setMonth(mom, value) {
  var dayOfMonth;
  if (!mom.isValid()) {
    return mom;
  }
  if (typeof value === "string") {
    if (/^\d+$/.test(value)) {
      value = toInt(value);
    } else {
      value = mom.localeData().monthsParse(value);
      if (!isNumber(value)) {
        return mom;
      }
    }
  }
  dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
  mom._d["set" + (mom._isUTC ? "UTC" : "") + "Month"](value, dayOfMonth);
  return mom;
}
function getSetMonth(value) {
  if (value != null) {
    setMonth(this, value);
    hooks.updateOffset(this, true);
    return this;
  } else {
    return get(this, "Month");
  }
}
function getDaysInMonth() {
  return daysInMonth(this.year(), this.month());
}
function monthsShortRegex(isStrict) {
  if (this._monthsParseExact) {
    if (!hasOwnProp(this, "_monthsRegex")) {
      computeMonthsParse.call(this);
    }
    if (isStrict) {
      return this._monthsShortStrictRegex;
    } else {
      return this._monthsShortRegex;
    }
  } else {
    if (!hasOwnProp(this, "_monthsShortRegex")) {
      this._monthsShortRegex = defaultMonthsShortRegex;
    }
    return this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex;
  }
}
function monthsRegex(isStrict) {
  if (this._monthsParseExact) {
    if (!hasOwnProp(this, "_monthsRegex")) {
      computeMonthsParse.call(this);
    }
    if (isStrict) {
      return this._monthsStrictRegex;
    } else {
      return this._monthsRegex;
    }
  } else {
    if (!hasOwnProp(this, "_monthsRegex")) {
      this._monthsRegex = defaultMonthsRegex;
    }
    return this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex;
  }
}
function computeMonthsParse() {
  function cmpLenRev(a, b) {
    return b.length - a.length;
  }
  var shortPieces = [], longPieces = [], mixedPieces = [], i, mom;
  for (i = 0; i < 12; i++) {
    mom = createUTC([2e3, i]);
    shortPieces.push(this.monthsShort(mom, ""));
    longPieces.push(this.months(mom, ""));
    mixedPieces.push(this.months(mom, ""));
    mixedPieces.push(this.monthsShort(mom, ""));
  }
  shortPieces.sort(cmpLenRev);
  longPieces.sort(cmpLenRev);
  mixedPieces.sort(cmpLenRev);
  for (i = 0; i < 12; i++) {
    shortPieces[i] = regexEscape(shortPieces[i]);
    longPieces[i] = regexEscape(longPieces[i]);
  }
  for (i = 0; i < 24; i++) {
    mixedPieces[i] = regexEscape(mixedPieces[i]);
  }
  this._monthsRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
  this._monthsShortRegex = this._monthsRegex;
  this._monthsStrictRegex = new RegExp(
    "^(" + longPieces.join("|") + ")",
    "i"
  );
  this._monthsShortStrictRegex = new RegExp(
    "^(" + shortPieces.join("|") + ")",
    "i"
  );
}
addFormatToken("Y", 0, 0, function() {
  var y = this.year();
  return y <= 9999 ? zeroFill(y, 4) : "+" + y;
});
addFormatToken(0, ["YY", 2], 0, function() {
  return this.year() % 100;
});
addFormatToken(0, ["YYYY", 4], 0, "year");
addFormatToken(0, ["YYYYY", 5], 0, "year");
addFormatToken(0, ["YYYYYY", 6, true], 0, "year");
addUnitAlias("year", "y");
addUnitPriority("year", 1);
addRegexToken("Y", matchSigned);
addRegexToken("YY", match1to2, match2);
addRegexToken("YYYY", match1to4, match4);
addRegexToken("YYYYY", match1to6, match6);
addRegexToken("YYYYYY", match1to6, match6);
addParseToken(["YYYYY", "YYYYYY"], YEAR);
addParseToken("YYYY", function(input2, array2) {
  array2[YEAR] = input2.length === 2 ? hooks.parseTwoDigitYear(input2) : toInt(input2);
});
addParseToken("YY", function(input2, array2) {
  array2[YEAR] = hooks.parseTwoDigitYear(input2);
});
addParseToken("Y", function(input2, array2) {
  array2[YEAR] = parseInt(input2, 10);
});
function daysInYear(year) {
  return isLeapYear(year) ? 366 : 365;
}
hooks.parseTwoDigitYear = function(input2) {
  return toInt(input2) + (toInt(input2) > 68 ? 1900 : 2e3);
};
var getSetYear = makeGetSet("FullYear", true);
function getIsLeapYear() {
  return isLeapYear(this.year());
}
function createDate(y, m, d, h2, M, s, ms) {
  var date2;
  if (y < 100 && y >= 0) {
    date2 = new Date(y + 400, m, d, h2, M, s, ms);
    if (isFinite(date2.getFullYear())) {
      date2.setFullYear(y);
    }
  } else {
    date2 = new Date(y, m, d, h2, M, s, ms);
  }
  return date2;
}
function createUTCDate(y) {
  var date2, args;
  if (y < 100 && y >= 0) {
    args = Array.prototype.slice.call(arguments);
    args[0] = y + 400;
    date2 = new Date(Date.UTC.apply(null, args));
    if (isFinite(date2.getUTCFullYear())) {
      date2.setUTCFullYear(y);
    }
  } else {
    date2 = new Date(Date.UTC.apply(null, arguments));
  }
  return date2;
}
function firstWeekOffset(year, dow, doy) {
  var fwd = 7 + dow - doy, fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
  return -fwdlw + fwd - 1;
}
function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
  var localWeekday = (7 + weekday - dow) % 7, weekOffset = firstWeekOffset(year, dow, doy), dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset, resYear, resDayOfYear;
  if (dayOfYear <= 0) {
    resYear = year - 1;
    resDayOfYear = daysInYear(resYear) + dayOfYear;
  } else if (dayOfYear > daysInYear(year)) {
    resYear = year + 1;
    resDayOfYear = dayOfYear - daysInYear(year);
  } else {
    resYear = year;
    resDayOfYear = dayOfYear;
  }
  return {
    year: resYear,
    dayOfYear: resDayOfYear
  };
}
function weekOfYear(mom, dow, doy) {
  var weekOffset = firstWeekOffset(mom.year(), dow, doy), week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1, resWeek, resYear;
  if (week < 1) {
    resYear = mom.year() - 1;
    resWeek = week + weeksInYear(resYear, dow, doy);
  } else if (week > weeksInYear(mom.year(), dow, doy)) {
    resWeek = week - weeksInYear(mom.year(), dow, doy);
    resYear = mom.year() + 1;
  } else {
    resYear = mom.year();
    resWeek = week;
  }
  return {
    week: resWeek,
    year: resYear
  };
}
function weeksInYear(year, dow, doy) {
  var weekOffset = firstWeekOffset(year, dow, doy), weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
  return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
}
addFormatToken("w", ["ww", 2], "wo", "week");
addFormatToken("W", ["WW", 2], "Wo", "isoWeek");
addUnitAlias("week", "w");
addUnitAlias("isoWeek", "W");
addUnitPriority("week", 5);
addUnitPriority("isoWeek", 5);
addRegexToken("w", match1to2);
addRegexToken("ww", match1to2, match2);
addRegexToken("W", match1to2);
addRegexToken("WW", match1to2, match2);
addWeekParseToken(
  ["w", "ww", "W", "WW"],
  function(input2, week, config, token2) {
    week[token2.substr(0, 1)] = toInt(input2);
  }
);
function localeWeek(mom) {
  return weekOfYear(mom, this._week.dow, this._week.doy).week;
}
var defaultLocaleWeek = {
  dow: 0,
  // Sunday is the first day of the week.
  doy: 6
  // The week that contains Jan 6th is the first week of the year.
};
function localeFirstDayOfWeek() {
  return this._week.dow;
}
function localeFirstDayOfYear() {
  return this._week.doy;
}
function getSetWeek(input2) {
  var week = this.localeData().week(this);
  return input2 == null ? week : this.add((input2 - week) * 7, "d");
}
function getSetISOWeek(input2) {
  var week = weekOfYear(this, 1, 4).week;
  return input2 == null ? week : this.add((input2 - week) * 7, "d");
}
addFormatToken("d", 0, "do", "day");
addFormatToken("dd", 0, 0, function(format2) {
  return this.localeData().weekdaysMin(this, format2);
});
addFormatToken("ddd", 0, 0, function(format2) {
  return this.localeData().weekdaysShort(this, format2);
});
addFormatToken("dddd", 0, 0, function(format2) {
  return this.localeData().weekdays(this, format2);
});
addFormatToken("e", 0, 0, "weekday");
addFormatToken("E", 0, 0, "isoWeekday");
addUnitAlias("day", "d");
addUnitAlias("weekday", "e");
addUnitAlias("isoWeekday", "E");
addUnitPriority("day", 11);
addUnitPriority("weekday", 11);
addUnitPriority("isoWeekday", 11);
addRegexToken("d", match1to2);
addRegexToken("e", match1to2);
addRegexToken("E", match1to2);
addRegexToken("dd", function(isStrict, locale2) {
  return locale2.weekdaysMinRegex(isStrict);
});
addRegexToken("ddd", function(isStrict, locale2) {
  return locale2.weekdaysShortRegex(isStrict);
});
addRegexToken("dddd", function(isStrict, locale2) {
  return locale2.weekdaysRegex(isStrict);
});
addWeekParseToken(["dd", "ddd", "dddd"], function(input2, week, config, token2) {
  var weekday = config._locale.weekdaysParse(input2, token2, config._strict);
  if (weekday != null) {
    week.d = weekday;
  } else {
    getParsingFlags(config).invalidWeekday = input2;
  }
});
addWeekParseToken(["d", "e", "E"], function(input2, week, config, token2) {
  week[token2] = toInt(input2);
});
function parseWeekday(input2, locale2) {
  if (typeof input2 !== "string") {
    return input2;
  }
  if (!isNaN(input2)) {
    return parseInt(input2, 10);
  }
  input2 = locale2.weekdaysParse(input2);
  if (typeof input2 === "number") {
    return input2;
  }
  return null;
}
function parseIsoWeekday(input2, locale2) {
  if (typeof input2 === "string") {
    return locale2.weekdaysParse(input2) % 7 || 7;
  }
  return isNaN(input2) ? null : input2;
}
function shiftWeekdays(ws, n) {
  return ws.slice(n, 7).concat(ws.slice(0, n));
}
var defaultLocaleWeekdays = "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), defaultLocaleWeekdaysShort = "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"), defaultLocaleWeekdaysMin = "Su_Mo_Tu_We_Th_Fr_Sa".split("_"), defaultWeekdaysRegex = matchWord, defaultWeekdaysShortRegex = matchWord, defaultWeekdaysMinRegex = matchWord;
function localeWeekdays(m, format2) {
  var weekdays = isArray(this._weekdays) ? this._weekdays : this._weekdays[m && m !== true && this._weekdays.isFormat.test(format2) ? "format" : "standalone"];
  return m === true ? shiftWeekdays(weekdays, this._week.dow) : m ? weekdays[m.day()] : weekdays;
}
function localeWeekdaysShort(m) {
  return m === true ? shiftWeekdays(this._weekdaysShort, this._week.dow) : m ? this._weekdaysShort[m.day()] : this._weekdaysShort;
}
function localeWeekdaysMin(m) {
  return m === true ? shiftWeekdays(this._weekdaysMin, this._week.dow) : m ? this._weekdaysMin[m.day()] : this._weekdaysMin;
}
function handleStrictParse$1(weekdayName, format2, strict) {
  var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
  if (!this._weekdaysParse) {
    this._weekdaysParse = [];
    this._shortWeekdaysParse = [];
    this._minWeekdaysParse = [];
    for (i = 0; i < 7; ++i) {
      mom = createUTC([2e3, 1]).day(i);
      this._minWeekdaysParse[i] = this.weekdaysMin(
        mom,
        ""
      ).toLocaleLowerCase();
      this._shortWeekdaysParse[i] = this.weekdaysShort(
        mom,
        ""
      ).toLocaleLowerCase();
      this._weekdaysParse[i] = this.weekdays(mom, "").toLocaleLowerCase();
    }
  }
  if (strict) {
    if (format2 === "dddd") {
      ii = indexOf.call(this._weekdaysParse, llc);
      return ii !== -1 ? ii : null;
    } else if (format2 === "ddd") {
      ii = indexOf.call(this._shortWeekdaysParse, llc);
      return ii !== -1 ? ii : null;
    } else {
      ii = indexOf.call(this._minWeekdaysParse, llc);
      return ii !== -1 ? ii : null;
    }
  } else {
    if (format2 === "dddd") {
      ii = indexOf.call(this._weekdaysParse, llc);
      if (ii !== -1) {
        return ii;
      }
      ii = indexOf.call(this._shortWeekdaysParse, llc);
      if (ii !== -1) {
        return ii;
      }
      ii = indexOf.call(this._minWeekdaysParse, llc);
      return ii !== -1 ? ii : null;
    } else if (format2 === "ddd") {
      ii = indexOf.call(this._shortWeekdaysParse, llc);
      if (ii !== -1) {
        return ii;
      }
      ii = indexOf.call(this._weekdaysParse, llc);
      if (ii !== -1) {
        return ii;
      }
      ii = indexOf.call(this._minWeekdaysParse, llc);
      return ii !== -1 ? ii : null;
    } else {
      ii = indexOf.call(this._minWeekdaysParse, llc);
      if (ii !== -1) {
        return ii;
      }
      ii = indexOf.call(this._weekdaysParse, llc);
      if (ii !== -1) {
        return ii;
      }
      ii = indexOf.call(this._shortWeekdaysParse, llc);
      return ii !== -1 ? ii : null;
    }
  }
}
function localeWeekdaysParse(weekdayName, format2, strict) {
  var i, mom, regex;
  if (this._weekdaysParseExact) {
    return handleStrictParse$1.call(this, weekdayName, format2, strict);
  }
  if (!this._weekdaysParse) {
    this._weekdaysParse = [];
    this._minWeekdaysParse = [];
    this._shortWeekdaysParse = [];
    this._fullWeekdaysParse = [];
  }
  for (i = 0; i < 7; i++) {
    mom = createUTC([2e3, 1]).day(i);
    if (strict && !this._fullWeekdaysParse[i]) {
      this._fullWeekdaysParse[i] = new RegExp(
        "^" + this.weekdays(mom, "").replace(".", "\\.?") + "$",
        "i"
      );
      this._shortWeekdaysParse[i] = new RegExp(
        "^" + this.weekdaysShort(mom, "").replace(".", "\\.?") + "$",
        "i"
      );
      this._minWeekdaysParse[i] = new RegExp(
        "^" + this.weekdaysMin(mom, "").replace(".", "\\.?") + "$",
        "i"
      );
    }
    if (!this._weekdaysParse[i]) {
      regex = "^" + this.weekdays(mom, "") + "|^" + this.weekdaysShort(mom, "") + "|^" + this.weekdaysMin(mom, "");
      this._weekdaysParse[i] = new RegExp(regex.replace(".", ""), "i");
    }
    if (strict && format2 === "dddd" && this._fullWeekdaysParse[i].test(weekdayName)) {
      return i;
    } else if (strict && format2 === "ddd" && this._shortWeekdaysParse[i].test(weekdayName)) {
      return i;
    } else if (strict && format2 === "dd" && this._minWeekdaysParse[i].test(weekdayName)) {
      return i;
    } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
      return i;
    }
  }
}
function getSetDayOfWeek(input2) {
  if (!this.isValid()) {
    return input2 != null ? this : NaN;
  }
  var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
  if (input2 != null) {
    input2 = parseWeekday(input2, this.localeData());
    return this.add(input2 - day, "d");
  } else {
    return day;
  }
}
function getSetLocaleDayOfWeek(input2) {
  if (!this.isValid()) {
    return input2 != null ? this : NaN;
  }
  var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
  return input2 == null ? weekday : this.add(input2 - weekday, "d");
}
function getSetISODayOfWeek(input2) {
  if (!this.isValid()) {
    return input2 != null ? this : NaN;
  }
  if (input2 != null) {
    var weekday = parseIsoWeekday(input2, this.localeData());
    return this.day(this.day() % 7 ? weekday : weekday - 7);
  } else {
    return this.day() || 7;
  }
}
function weekdaysRegex(isStrict) {
  if (this._weekdaysParseExact) {
    if (!hasOwnProp(this, "_weekdaysRegex")) {
      computeWeekdaysParse.call(this);
    }
    if (isStrict) {
      return this._weekdaysStrictRegex;
    } else {
      return this._weekdaysRegex;
    }
  } else {
    if (!hasOwnProp(this, "_weekdaysRegex")) {
      this._weekdaysRegex = defaultWeekdaysRegex;
    }
    return this._weekdaysStrictRegex && isStrict ? this._weekdaysStrictRegex : this._weekdaysRegex;
  }
}
function weekdaysShortRegex(isStrict) {
  if (this._weekdaysParseExact) {
    if (!hasOwnProp(this, "_weekdaysRegex")) {
      computeWeekdaysParse.call(this);
    }
    if (isStrict) {
      return this._weekdaysShortStrictRegex;
    } else {
      return this._weekdaysShortRegex;
    }
  } else {
    if (!hasOwnProp(this, "_weekdaysShortRegex")) {
      this._weekdaysShortRegex = defaultWeekdaysShortRegex;
    }
    return this._weekdaysShortStrictRegex && isStrict ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
  }
}
function weekdaysMinRegex(isStrict) {
  if (this._weekdaysParseExact) {
    if (!hasOwnProp(this, "_weekdaysRegex")) {
      computeWeekdaysParse.call(this);
    }
    if (isStrict) {
      return this._weekdaysMinStrictRegex;
    } else {
      return this._weekdaysMinRegex;
    }
  } else {
    if (!hasOwnProp(this, "_weekdaysMinRegex")) {
      this._weekdaysMinRegex = defaultWeekdaysMinRegex;
    }
    return this._weekdaysMinStrictRegex && isStrict ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
  }
}
function computeWeekdaysParse() {
  function cmpLenRev(a, b) {
    return b.length - a.length;
  }
  var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [], i, mom, minp, shortp, longp;
  for (i = 0; i < 7; i++) {
    mom = createUTC([2e3, 1]).day(i);
    minp = regexEscape(this.weekdaysMin(mom, ""));
    shortp = regexEscape(this.weekdaysShort(mom, ""));
    longp = regexEscape(this.weekdays(mom, ""));
    minPieces.push(minp);
    shortPieces.push(shortp);
    longPieces.push(longp);
    mixedPieces.push(minp);
    mixedPieces.push(shortp);
    mixedPieces.push(longp);
  }
  minPieces.sort(cmpLenRev);
  shortPieces.sort(cmpLenRev);
  longPieces.sort(cmpLenRev);
  mixedPieces.sort(cmpLenRev);
  this._weekdaysRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
  this._weekdaysShortRegex = this._weekdaysRegex;
  this._weekdaysMinRegex = this._weekdaysRegex;
  this._weekdaysStrictRegex = new RegExp(
    "^(" + longPieces.join("|") + ")",
    "i"
  );
  this._weekdaysShortStrictRegex = new RegExp(
    "^(" + shortPieces.join("|") + ")",
    "i"
  );
  this._weekdaysMinStrictRegex = new RegExp(
    "^(" + minPieces.join("|") + ")",
    "i"
  );
}
function hFormat() {
  return this.hours() % 12 || 12;
}
function kFormat() {
  return this.hours() || 24;
}
addFormatToken("H", ["HH", 2], 0, "hour");
addFormatToken("h", ["hh", 2], 0, hFormat);
addFormatToken("k", ["kk", 2], 0, kFormat);
addFormatToken("hmm", 0, 0, function() {
  return "" + hFormat.apply(this) + zeroFill(this.minutes(), 2);
});
addFormatToken("hmmss", 0, 0, function() {
  return "" + hFormat.apply(this) + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
});
addFormatToken("Hmm", 0, 0, function() {
  return "" + this.hours() + zeroFill(this.minutes(), 2);
});
addFormatToken("Hmmss", 0, 0, function() {
  return "" + this.hours() + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
});
function meridiem(token2, lowercase) {
  addFormatToken(token2, 0, 0, function() {
    return this.localeData().meridiem(
      this.hours(),
      this.minutes(),
      lowercase
    );
  });
}
meridiem("a", true);
meridiem("A", false);
addUnitAlias("hour", "h");
addUnitPriority("hour", 13);
function matchMeridiem(isStrict, locale2) {
  return locale2._meridiemParse;
}
addRegexToken("a", matchMeridiem);
addRegexToken("A", matchMeridiem);
addRegexToken("H", match1to2);
addRegexToken("h", match1to2);
addRegexToken("k", match1to2);
addRegexToken("HH", match1to2, match2);
addRegexToken("hh", match1to2, match2);
addRegexToken("kk", match1to2, match2);
addRegexToken("hmm", match3to4);
addRegexToken("hmmss", match5to6);
addRegexToken("Hmm", match3to4);
addRegexToken("Hmmss", match5to6);
addParseToken(["H", "HH"], HOUR);
addParseToken(["k", "kk"], function(input2, array2, config) {
  var kInput = toInt(input2);
  array2[HOUR] = kInput === 24 ? 0 : kInput;
});
addParseToken(["a", "A"], function(input2, array2, config) {
  config._isPm = config._locale.isPM(input2);
  config._meridiem = input2;
});
addParseToken(["h", "hh"], function(input2, array2, config) {
  array2[HOUR] = toInt(input2);
  getParsingFlags(config).bigHour = true;
});
addParseToken("hmm", function(input2, array2, config) {
  var pos = input2.length - 2;
  array2[HOUR] = toInt(input2.substr(0, pos));
  array2[MINUTE] = toInt(input2.substr(pos));
  getParsingFlags(config).bigHour = true;
});
addParseToken("hmmss", function(input2, array2, config) {
  var pos1 = input2.length - 4, pos2 = input2.length - 2;
  array2[HOUR] = toInt(input2.substr(0, pos1));
  array2[MINUTE] = toInt(input2.substr(pos1, 2));
  array2[SECOND] = toInt(input2.substr(pos2));
  getParsingFlags(config).bigHour = true;
});
addParseToken("Hmm", function(input2, array2, config) {
  var pos = input2.length - 2;
  array2[HOUR] = toInt(input2.substr(0, pos));
  array2[MINUTE] = toInt(input2.substr(pos));
});
addParseToken("Hmmss", function(input2, array2, config) {
  var pos1 = input2.length - 4, pos2 = input2.length - 2;
  array2[HOUR] = toInt(input2.substr(0, pos1));
  array2[MINUTE] = toInt(input2.substr(pos1, 2));
  array2[SECOND] = toInt(input2.substr(pos2));
});
function localeIsPM(input2) {
  return (input2 + "").toLowerCase().charAt(0) === "p";
}
var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i, getSetHour = makeGetSet("Hours", true);
function localeMeridiem(hours2, minutes2, isLower) {
  if (hours2 > 11) {
    return isLower ? "pm" : "PM";
  } else {
    return isLower ? "am" : "AM";
  }
}
var baseConfig = {
  calendar: defaultCalendar,
  longDateFormat: defaultLongDateFormat,
  invalidDate: defaultInvalidDate,
  ordinal: defaultOrdinal,
  dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
  relativeTime: defaultRelativeTime,
  months: defaultLocaleMonths,
  monthsShort: defaultLocaleMonthsShort,
  week: defaultLocaleWeek,
  weekdays: defaultLocaleWeekdays,
  weekdaysMin: defaultLocaleWeekdaysMin,
  weekdaysShort: defaultLocaleWeekdaysShort,
  meridiemParse: defaultLocaleMeridiemParse
};
var locales = {}, localeFamilies = {}, globalLocale;
function commonPrefix(arr1, arr2) {
  var i, minl = Math.min(arr1.length, arr2.length);
  for (i = 0; i < minl; i += 1) {
    if (arr1[i] !== arr2[i]) {
      return i;
    }
  }
  return minl;
}
function normalizeLocale(key) {
  return key ? key.toLowerCase().replace("_", "-") : key;
}
function chooseLocale(names) {
  var i = 0, j, next, locale2, split;
  while (i < names.length) {
    split = normalizeLocale(names[i]).split("-");
    j = split.length;
    next = normalizeLocale(names[i + 1]);
    next = next ? next.split("-") : null;
    while (j > 0) {
      locale2 = loadLocale(split.slice(0, j).join("-"));
      if (locale2) {
        return locale2;
      }
      if (next && next.length >= j && commonPrefix(split, next) >= j - 1) {
        break;
      }
      j--;
    }
    i++;
  }
  return globalLocale;
}
function isLocaleNameSane(name) {
  return name.match("^[^/\\\\]*$") != null;
}
function loadLocale(name) {
  var oldLocale = null, aliasedRequire;
  if (locales[name] === void 0 && typeof module !== "undefined" && module && module.exports && isLocaleNameSane(name)) {
    try {
      oldLocale = globalLocale._abbr;
      aliasedRequire = require;
      aliasedRequire("./locale/" + name);
      getSetGlobalLocale(oldLocale);
    } catch (e) {
      locales[name] = null;
    }
  }
  return locales[name];
}
function getSetGlobalLocale(key, values) {
  var data;
  if (key) {
    if (isUndefined(values)) {
      data = getLocale(key);
    } else {
      data = defineLocale(key, values);
    }
    if (data) {
      globalLocale = data;
    } else {
      if (typeof console !== "undefined" && console.warn) {
        console.warn(
          "Locale " + key + " not found. Did you forget to load it?"
        );
      }
    }
  }
  return globalLocale._abbr;
}
function defineLocale(name, config) {
  if (config !== null) {
    var locale2, parentConfig = baseConfig;
    config.abbr = name;
    if (locales[name] != null) {
      deprecateSimple(
        "defineLocaleOverride",
        "use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."
      );
      parentConfig = locales[name]._config;
    } else if (config.parentLocale != null) {
      if (locales[config.parentLocale] != null) {
        parentConfig = locales[config.parentLocale]._config;
      } else {
        locale2 = loadLocale(config.parentLocale);
        if (locale2 != null) {
          parentConfig = locale2._config;
        } else {
          if (!localeFamilies[config.parentLocale]) {
            localeFamilies[config.parentLocale] = [];
          }
          localeFamilies[config.parentLocale].push({
            name,
            config
          });
          return null;
        }
      }
    }
    locales[name] = new Locale(mergeConfigs(parentConfig, config));
    if (localeFamilies[name]) {
      localeFamilies[name].forEach(function(x) {
        defineLocale(x.name, x.config);
      });
    }
    getSetGlobalLocale(name);
    return locales[name];
  } else {
    delete locales[name];
    return null;
  }
}
function updateLocale(name, config) {
  if (config != null) {
    var locale2, tmpLocale, parentConfig = baseConfig;
    if (locales[name] != null && locales[name].parentLocale != null) {
      locales[name].set(mergeConfigs(locales[name]._config, config));
    } else {
      tmpLocale = loadLocale(name);
      if (tmpLocale != null) {
        parentConfig = tmpLocale._config;
      }
      config = mergeConfigs(parentConfig, config);
      if (tmpLocale == null) {
        config.abbr = name;
      }
      locale2 = new Locale(config);
      locale2.parentLocale = locales[name];
      locales[name] = locale2;
    }
    getSetGlobalLocale(name);
  } else {
    if (locales[name] != null) {
      if (locales[name].parentLocale != null) {
        locales[name] = locales[name].parentLocale;
        if (name === getSetGlobalLocale()) {
          getSetGlobalLocale(name);
        }
      } else if (locales[name] != null) {
        delete locales[name];
      }
    }
  }
  return locales[name];
}
function getLocale(key) {
  var locale2;
  if (key && key._locale && key._locale._abbr) {
    key = key._locale._abbr;
  }
  if (!key) {
    return globalLocale;
  }
  if (!isArray(key)) {
    locale2 = loadLocale(key);
    if (locale2) {
      return locale2;
    }
    key = [key];
  }
  return chooseLocale(key);
}
function listLocales() {
  return keys(locales);
}
function checkOverflow(m) {
  var overflow, a = m._a;
  if (a && getParsingFlags(m).overflow === -2) {
    overflow = a[MONTH] < 0 || a[MONTH] > 11 ? MONTH : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH]) ? DATE : a[HOUR] < 0 || a[HOUR] > 24 || a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0) ? HOUR : a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE : a[SECOND] < 0 || a[SECOND] > 59 ? SECOND : a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND : -1;
    if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
      overflow = DATE;
    }
    if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
      overflow = WEEK;
    }
    if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
      overflow = WEEKDAY;
    }
    getParsingFlags(m).overflow = overflow;
  }
  return m;
}
var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/, basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/, tzRegex = /Z|[+-]\d\d(?::?\d\d)?/, isoDates = [
  ["YYYYYY-MM-DD", /[+-]\d{6}-\d\d-\d\d/],
  ["YYYY-MM-DD", /\d{4}-\d\d-\d\d/],
  ["GGGG-[W]WW-E", /\d{4}-W\d\d-\d/],
  ["GGGG-[W]WW", /\d{4}-W\d\d/, false],
  ["YYYY-DDD", /\d{4}-\d{3}/],
  ["YYYY-MM", /\d{4}-\d\d/, false],
  ["YYYYYYMMDD", /[+-]\d{10}/],
  ["YYYYMMDD", /\d{8}/],
  ["GGGG[W]WWE", /\d{4}W\d{3}/],
  ["GGGG[W]WW", /\d{4}W\d{2}/, false],
  ["YYYYDDD", /\d{7}/],
  ["YYYYMM", /\d{6}/, false],
  ["YYYY", /\d{4}/, false]
], isoTimes = [
  ["HH:mm:ss.SSSS", /\d\d:\d\d:\d\d\.\d+/],
  ["HH:mm:ss,SSSS", /\d\d:\d\d:\d\d,\d+/],
  ["HH:mm:ss", /\d\d:\d\d:\d\d/],
  ["HH:mm", /\d\d:\d\d/],
  ["HHmmss.SSSS", /\d\d\d\d\d\d\.\d+/],
  ["HHmmss,SSSS", /\d\d\d\d\d\d,\d+/],
  ["HHmmss", /\d\d\d\d\d\d/],
  ["HHmm", /\d\d\d\d/],
  ["HH", /\d\d/]
], aspNetJsonRegex = /^\/?Date\((-?\d+)/i, rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/, obsOffsets = {
  UT: 0,
  GMT: 0,
  EDT: -4 * 60,
  EST: -5 * 60,
  CDT: -5 * 60,
  CST: -6 * 60,
  MDT: -6 * 60,
  MST: -7 * 60,
  PDT: -7 * 60,
  PST: -8 * 60
};
function configFromISO(config) {
  var i, l, string2 = config._i, match = extendedIsoRegex.exec(string2) || basicIsoRegex.exec(string2), allowTime, dateFormat, timeFormat, tzFormat, isoDatesLen = isoDates.length, isoTimesLen = isoTimes.length;
  if (match) {
    getParsingFlags(config).iso = true;
    for (i = 0, l = isoDatesLen; i < l; i++) {
      if (isoDates[i][1].exec(match[1])) {
        dateFormat = isoDates[i][0];
        allowTime = isoDates[i][2] !== false;
        break;
      }
    }
    if (dateFormat == null) {
      config._isValid = false;
      return;
    }
    if (match[3]) {
      for (i = 0, l = isoTimesLen; i < l; i++) {
        if (isoTimes[i][1].exec(match[3])) {
          timeFormat = (match[2] || " ") + isoTimes[i][0];
          break;
        }
      }
      if (timeFormat == null) {
        config._isValid = false;
        return;
      }
    }
    if (!allowTime && timeFormat != null) {
      config._isValid = false;
      return;
    }
    if (match[4]) {
      if (tzRegex.exec(match[4])) {
        tzFormat = "Z";
      } else {
        config._isValid = false;
        return;
      }
    }
    config._f = dateFormat + (timeFormat || "") + (tzFormat || "");
    configFromStringAndFormat(config);
  } else {
    config._isValid = false;
  }
}
function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
  var result = [
    untruncateYear(yearStr),
    defaultLocaleMonthsShort.indexOf(monthStr),
    parseInt(dayStr, 10),
    parseInt(hourStr, 10),
    parseInt(minuteStr, 10)
  ];
  if (secondStr) {
    result.push(parseInt(secondStr, 10));
  }
  return result;
}
function untruncateYear(yearStr) {
  var year = parseInt(yearStr, 10);
  if (year <= 49) {
    return 2e3 + year;
  } else if (year <= 999) {
    return 1900 + year;
  }
  return year;
}
function preprocessRFC2822(s) {
  return s.replace(/\([^()]*\)|[\n\t]/g, " ").replace(/(\s\s+)/g, " ").replace(/^\s\s*/, "").replace(/\s\s*$/, "");
}
function checkWeekday(weekdayStr, parsedInput, config) {
  if (weekdayStr) {
    var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr), weekdayActual = new Date(
      parsedInput[0],
      parsedInput[1],
      parsedInput[2]
    ).getDay();
    if (weekdayProvided !== weekdayActual) {
      getParsingFlags(config).weekdayMismatch = true;
      config._isValid = false;
      return false;
    }
  }
  return true;
}
function calculateOffset(obsOffset, militaryOffset, numOffset) {
  if (obsOffset) {
    return obsOffsets[obsOffset];
  } else if (militaryOffset) {
    return 0;
  } else {
    var hm = parseInt(numOffset, 10), m = hm % 100, h2 = (hm - m) / 100;
    return h2 * 60 + m;
  }
}
function configFromRFC2822(config) {
  var match = rfc2822.exec(preprocessRFC2822(config._i)), parsedArray;
  if (match) {
    parsedArray = extractFromRFC2822Strings(
      match[4],
      match[3],
      match[2],
      match[5],
      match[6],
      match[7]
    );
    if (!checkWeekday(match[1], parsedArray, config)) {
      return;
    }
    config._a = parsedArray;
    config._tzm = calculateOffset(match[8], match[9], match[10]);
    config._d = createUTCDate.apply(null, config._a);
    config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
    getParsingFlags(config).rfc2822 = true;
  } else {
    config._isValid = false;
  }
}
function configFromString(config) {
  var matched = aspNetJsonRegex.exec(config._i);
  if (matched !== null) {
    config._d = /* @__PURE__ */ new Date(+matched[1]);
    return;
  }
  configFromISO(config);
  if (config._isValid === false) {
    delete config._isValid;
  } else {
    return;
  }
  configFromRFC2822(config);
  if (config._isValid === false) {
    delete config._isValid;
  } else {
    return;
  }
  if (config._strict) {
    config._isValid = false;
  } else {
    hooks.createFromInputFallback(config);
  }
}
hooks.createFromInputFallback = deprecate(
  "value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",
  function(config) {
    config._d = /* @__PURE__ */ new Date(config._i + (config._useUTC ? " UTC" : ""));
  }
);
function defaults(a, b, c) {
  if (a != null) {
    return a;
  }
  if (b != null) {
    return b;
  }
  return c;
}
function currentDateArray(config) {
  var nowValue = new Date(hooks.now());
  if (config._useUTC) {
    return [
      nowValue.getUTCFullYear(),
      nowValue.getUTCMonth(),
      nowValue.getUTCDate()
    ];
  }
  return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
}
function configFromArray(config) {
  var i, date2, input2 = [], currentDate, expectedWeekday, yearToUse;
  if (config._d) {
    return;
  }
  currentDate = currentDateArray(config);
  if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
    dayOfYearFromWeekInfo(config);
  }
  if (config._dayOfYear != null) {
    yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);
    if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
      getParsingFlags(config)._overflowDayOfYear = true;
    }
    date2 = createUTCDate(yearToUse, 0, config._dayOfYear);
    config._a[MONTH] = date2.getUTCMonth();
    config._a[DATE] = date2.getUTCDate();
  }
  for (i = 0; i < 3 && config._a[i] == null; ++i) {
    config._a[i] = input2[i] = currentDate[i];
  }
  for (; i < 7; i++) {
    config._a[i] = input2[i] = config._a[i] == null ? i === 2 ? 1 : 0 : config._a[i];
  }
  if (config._a[HOUR] === 24 && config._a[MINUTE] === 0 && config._a[SECOND] === 0 && config._a[MILLISECOND] === 0) {
    config._nextDay = true;
    config._a[HOUR] = 0;
  }
  config._d = (config._useUTC ? createUTCDate : createDate).apply(
    null,
    input2
  );
  expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();
  if (config._tzm != null) {
    config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
  }
  if (config._nextDay) {
    config._a[HOUR] = 24;
  }
  if (config._w && typeof config._w.d !== "undefined" && config._w.d !== expectedWeekday) {
    getParsingFlags(config).weekdayMismatch = true;
  }
}
function dayOfYearFromWeekInfo(config) {
  var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;
  w = config._w;
  if (w.GG != null || w.W != null || w.E != null) {
    dow = 1;
    doy = 4;
    weekYear = defaults(
      w.GG,
      config._a[YEAR],
      weekOfYear(createLocal(), 1, 4).year
    );
    week = defaults(w.W, 1);
    weekday = defaults(w.E, 1);
    if (weekday < 1 || weekday > 7) {
      weekdayOverflow = true;
    }
  } else {
    dow = config._locale._week.dow;
    doy = config._locale._week.doy;
    curWeek = weekOfYear(createLocal(), dow, doy);
    weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);
    week = defaults(w.w, curWeek.week);
    if (w.d != null) {
      weekday = w.d;
      if (weekday < 0 || weekday > 6) {
        weekdayOverflow = true;
      }
    } else if (w.e != null) {
      weekday = w.e + dow;
      if (w.e < 0 || w.e > 6) {
        weekdayOverflow = true;
      }
    } else {
      weekday = dow;
    }
  }
  if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
    getParsingFlags(config)._overflowWeeks = true;
  } else if (weekdayOverflow != null) {
    getParsingFlags(config)._overflowWeekday = true;
  } else {
    temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
    config._a[YEAR] = temp.year;
    config._dayOfYear = temp.dayOfYear;
  }
}
hooks.ISO_8601 = function() {
};
hooks.RFC_2822 = function() {
};
function configFromStringAndFormat(config) {
  if (config._f === hooks.ISO_8601) {
    configFromISO(config);
    return;
  }
  if (config._f === hooks.RFC_2822) {
    configFromRFC2822(config);
    return;
  }
  config._a = [];
  getParsingFlags(config).empty = true;
  var string2 = "" + config._i, i, parsedInput, tokens2, token2, skipped, stringLength = string2.length, totalParsedInputLength = 0, era, tokenLen;
  tokens2 = expandFormat(config._f, config._locale).match(formattingTokens) || [];
  tokenLen = tokens2.length;
  for (i = 0; i < tokenLen; i++) {
    token2 = tokens2[i];
    parsedInput = (string2.match(getParseRegexForToken(token2, config)) || [])[0];
    if (parsedInput) {
      skipped = string2.substr(0, string2.indexOf(parsedInput));
      if (skipped.length > 0) {
        getParsingFlags(config).unusedInput.push(skipped);
      }
      string2 = string2.slice(
        string2.indexOf(parsedInput) + parsedInput.length
      );
      totalParsedInputLength += parsedInput.length;
    }
    if (formatTokenFunctions[token2]) {
      if (parsedInput) {
        getParsingFlags(config).empty = false;
      } else {
        getParsingFlags(config).unusedTokens.push(token2);
      }
      addTimeToArrayFromToken(token2, parsedInput, config);
    } else if (config._strict && !parsedInput) {
      getParsingFlags(config).unusedTokens.push(token2);
    }
  }
  getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
  if (string2.length > 0) {
    getParsingFlags(config).unusedInput.push(string2);
  }
  if (config._a[HOUR] <= 12 && getParsingFlags(config).bigHour === true && config._a[HOUR] > 0) {
    getParsingFlags(config).bigHour = void 0;
  }
  getParsingFlags(config).parsedDateParts = config._a.slice(0);
  getParsingFlags(config).meridiem = config._meridiem;
  config._a[HOUR] = meridiemFixWrap(
    config._locale,
    config._a[HOUR],
    config._meridiem
  );
  era = getParsingFlags(config).era;
  if (era !== null) {
    config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);
  }
  configFromArray(config);
  checkOverflow(config);
}
function meridiemFixWrap(locale2, hour, meridiem2) {
  var isPm;
  if (meridiem2 == null) {
    return hour;
  }
  if (locale2.meridiemHour != null) {
    return locale2.meridiemHour(hour, meridiem2);
  } else if (locale2.isPM != null) {
    isPm = locale2.isPM(meridiem2);
    if (isPm && hour < 12) {
      hour += 12;
    }
    if (!isPm && hour === 12) {
      hour = 0;
    }
    return hour;
  } else {
    return hour;
  }
}
function configFromStringAndArray(config) {
  var tempConfig, bestMoment, scoreToBeat, i, currentScore, validFormatFound, bestFormatIsValid = false, configfLen = config._f.length;
  if (configfLen === 0) {
    getParsingFlags(config).invalidFormat = true;
    config._d = /* @__PURE__ */ new Date(NaN);
    return;
  }
  for (i = 0; i < configfLen; i++) {
    currentScore = 0;
    validFormatFound = false;
    tempConfig = copyConfig({}, config);
    if (config._useUTC != null) {
      tempConfig._useUTC = config._useUTC;
    }
    tempConfig._f = config._f[i];
    configFromStringAndFormat(tempConfig);
    if (isValid(tempConfig)) {
      validFormatFound = true;
    }
    currentScore += getParsingFlags(tempConfig).charsLeftOver;
    currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
    getParsingFlags(tempConfig).score = currentScore;
    if (!bestFormatIsValid) {
      if (scoreToBeat == null || currentScore < scoreToBeat || validFormatFound) {
        scoreToBeat = currentScore;
        bestMoment = tempConfig;
        if (validFormatFound) {
          bestFormatIsValid = true;
        }
      }
    } else {
      if (currentScore < scoreToBeat) {
        scoreToBeat = currentScore;
        bestMoment = tempConfig;
      }
    }
  }
  extend(config, bestMoment || tempConfig);
}
function configFromObject(config) {
  if (config._d) {
    return;
  }
  var i = normalizeObjectUnits(config._i), dayOrDate = i.day === void 0 ? i.date : i.day;
  config._a = map(
    [i.year, i.month, dayOrDate, i.hour, i.minute, i.second, i.millisecond],
    function(obj) {
      return obj && parseInt(obj, 10);
    }
  );
  configFromArray(config);
}
function createFromConfig(config) {
  var res = new Moment(checkOverflow(prepareConfig(config)));
  if (res._nextDay) {
    res.add(1, "d");
    res._nextDay = void 0;
  }
  return res;
}
function prepareConfig(config) {
  var input2 = config._i, format2 = config._f;
  config._locale = config._locale || getLocale(config._l);
  if (input2 === null || format2 === void 0 && input2 === "") {
    return createInvalid({ nullInput: true });
  }
  if (typeof input2 === "string") {
    config._i = input2 = config._locale.preparse(input2);
  }
  if (isMoment(input2)) {
    return new Moment(checkOverflow(input2));
  } else if (isDate(input2)) {
    config._d = input2;
  } else if (isArray(format2)) {
    configFromStringAndArray(config);
  } else if (format2) {
    configFromStringAndFormat(config);
  } else {
    configFromInput(config);
  }
  if (!isValid(config)) {
    config._d = null;
  }
  return config;
}
function configFromInput(config) {
  var input2 = config._i;
  if (isUndefined(input2)) {
    config._d = new Date(hooks.now());
  } else if (isDate(input2)) {
    config._d = new Date(input2.valueOf());
  } else if (typeof input2 === "string") {
    configFromString(config);
  } else if (isArray(input2)) {
    config._a = map(input2.slice(0), function(obj) {
      return parseInt(obj, 10);
    });
    configFromArray(config);
  } else if (isObject(input2)) {
    configFromObject(config);
  } else if (isNumber(input2)) {
    config._d = new Date(input2);
  } else {
    hooks.createFromInputFallback(config);
  }
}
function createLocalOrUTC(input2, format2, locale2, strict, isUTC) {
  var c = {};
  if (format2 === true || format2 === false) {
    strict = format2;
    format2 = void 0;
  }
  if (locale2 === true || locale2 === false) {
    strict = locale2;
    locale2 = void 0;
  }
  if (isObject(input2) && isObjectEmpty(input2) || isArray(input2) && input2.length === 0) {
    input2 = void 0;
  }
  c._isAMomentObject = true;
  c._useUTC = c._isUTC = isUTC;
  c._l = locale2;
  c._i = input2;
  c._f = format2;
  c._strict = strict;
  return createFromConfig(c);
}
function createLocal(input2, format2, locale2, strict) {
  return createLocalOrUTC(input2, format2, locale2, strict, false);
}
var prototypeMin = deprecate(
  "moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",
  function() {
    var other = createLocal.apply(null, arguments);
    if (this.isValid() && other.isValid()) {
      return other < this ? this : other;
    } else {
      return createInvalid();
    }
  }
), prototypeMax = deprecate(
  "moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",
  function() {
    var other = createLocal.apply(null, arguments);
    if (this.isValid() && other.isValid()) {
      return other > this ? this : other;
    } else {
      return createInvalid();
    }
  }
);
function pickBy(fn2, moments) {
  var res, i;
  if (moments.length === 1 && isArray(moments[0])) {
    moments = moments[0];
  }
  if (!moments.length) {
    return createLocal();
  }
  res = moments[0];
  for (i = 1; i < moments.length; ++i) {
    if (!moments[i].isValid() || moments[i][fn2](res)) {
      res = moments[i];
    }
  }
  return res;
}
function min$1() {
  var args = [].slice.call(arguments, 0);
  return pickBy("isBefore", args);
}
function max$1() {
  var args = [].slice.call(arguments, 0);
  return pickBy("isAfter", args);
}
var now = function() {
  return Date.now ? Date.now() : +/* @__PURE__ */ new Date();
};
var ordering = [
  "year",
  "quarter",
  "month",
  "week",
  "day",
  "hour",
  "minute",
  "second",
  "millisecond"
];
function isDurationValid(m) {
  var key, unitHasDecimal = false, i, orderLen = ordering.length;
  for (key in m) {
    if (hasOwnProp(m, key) && !(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
      return false;
    }
  }
  for (i = 0; i < orderLen; ++i) {
    if (m[ordering[i]]) {
      if (unitHasDecimal) {
        return false;
      }
      if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
        unitHasDecimal = true;
      }
    }
  }
  return true;
}
function isValid$1() {
  return this._isValid;
}
function createInvalid$1() {
  return createDuration(NaN);
}
function Duration(duration) {
  var normalizedInput = normalizeObjectUnits(duration), years2 = normalizedInput.year || 0, quarters = normalizedInput.quarter || 0, months2 = normalizedInput.month || 0, weeks2 = normalizedInput.week || normalizedInput.isoWeek || 0, days2 = normalizedInput.day || 0, hours2 = normalizedInput.hour || 0, minutes2 = normalizedInput.minute || 0, seconds2 = normalizedInput.second || 0, milliseconds2 = normalizedInput.millisecond || 0;
  this._isValid = isDurationValid(normalizedInput);
  this._milliseconds = +milliseconds2 + seconds2 * 1e3 + // 1000
  minutes2 * 6e4 + // 1000 * 60
  hours2 * 1e3 * 60 * 60;
  this._days = +days2 + weeks2 * 7;
  this._months = +months2 + quarters * 3 + years2 * 12;
  this._data = {};
  this._locale = getLocale();
  this._bubble();
}
function isDuration(obj) {
  return obj instanceof Duration;
}
function absRound(number2) {
  if (number2 < 0) {
    return Math.round(-1 * number2) * -1;
  } else {
    return Math.round(number2);
  }
}
function compareArrays(array1, array2, dontConvert) {
  var len = Math.min(array1.length, array2.length), lengthDiff = Math.abs(array1.length - array2.length), diffs = 0, i;
  for (i = 0; i < len; i++) {
    if (dontConvert && array1[i] !== array2[i] || !dontConvert && toInt(array1[i]) !== toInt(array2[i])) {
      diffs++;
    }
  }
  return diffs + lengthDiff;
}
function offset$2(token2, separator) {
  addFormatToken(token2, 0, 0, function() {
    var offset2 = this.utcOffset(), sign2 = "+";
    if (offset2 < 0) {
      offset2 = -offset2;
      sign2 = "-";
    }
    return sign2 + zeroFill(~~(offset2 / 60), 2) + separator + zeroFill(~~offset2 % 60, 2);
  });
}
offset$2("Z", ":");
offset$2("ZZ", "");
addRegexToken("Z", matchShortOffset);
addRegexToken("ZZ", matchShortOffset);
addParseToken(["Z", "ZZ"], function(input2, array2, config) {
  config._useUTC = true;
  config._tzm = offsetFromString(matchShortOffset, input2);
});
var chunkOffset = /([\+\-]|\d\d)/gi;
function offsetFromString(matcher, string2) {
  var matches = (string2 || "").match(matcher), chunk, parts, minutes2;
  if (matches === null) {
    return null;
  }
  chunk = matches[matches.length - 1] || [];
  parts = (chunk + "").match(chunkOffset) || ["-", 0, 0];
  minutes2 = +(parts[1] * 60) + toInt(parts[2]);
  return minutes2 === 0 ? 0 : parts[0] === "+" ? minutes2 : -minutes2;
}
function cloneWithOffset(input2, model) {
  var res, diff2;
  if (model._isUTC) {
    res = model.clone();
    diff2 = (isMoment(input2) || isDate(input2) ? input2.valueOf() : createLocal(input2).valueOf()) - res.valueOf();
    res._d.setTime(res._d.valueOf() + diff2);
    hooks.updateOffset(res, false);
    return res;
  } else {
    return createLocal(input2).local();
  }
}
function getDateOffset(m) {
  return -Math.round(m._d.getTimezoneOffset());
}
hooks.updateOffset = function() {
};
function getSetOffset(input2, keepLocalTime, keepMinutes) {
  var offset2 = this._offset || 0, localAdjust;
  if (!this.isValid()) {
    return input2 != null ? this : NaN;
  }
  if (input2 != null) {
    if (typeof input2 === "string") {
      input2 = offsetFromString(matchShortOffset, input2);
      if (input2 === null) {
        return this;
      }
    } else if (Math.abs(input2) < 16 && !keepMinutes) {
      input2 = input2 * 60;
    }
    if (!this._isUTC && keepLocalTime) {
      localAdjust = getDateOffset(this);
    }
    this._offset = input2;
    this._isUTC = true;
    if (localAdjust != null) {
      this.add(localAdjust, "m");
    }
    if (offset2 !== input2) {
      if (!keepLocalTime || this._changeInProgress) {
        addSubtract(
          this,
          createDuration(input2 - offset2, "m"),
          1,
          false
        );
      } else if (!this._changeInProgress) {
        this._changeInProgress = true;
        hooks.updateOffset(this, true);
        this._changeInProgress = null;
      }
    }
    return this;
  } else {
    return this._isUTC ? offset2 : getDateOffset(this);
  }
}
function getSetZone(input2, keepLocalTime) {
  if (input2 != null) {
    if (typeof input2 !== "string") {
      input2 = -input2;
    }
    this.utcOffset(input2, keepLocalTime);
    return this;
  } else {
    return -this.utcOffset();
  }
}
function setOffsetToUTC(keepLocalTime) {
  return this.utcOffset(0, keepLocalTime);
}
function setOffsetToLocal(keepLocalTime) {
  if (this._isUTC) {
    this.utcOffset(0, keepLocalTime);
    this._isUTC = false;
    if (keepLocalTime) {
      this.subtract(getDateOffset(this), "m");
    }
  }
  return this;
}
function setOffsetToParsedOffset() {
  if (this._tzm != null) {
    this.utcOffset(this._tzm, false, true);
  } else if (typeof this._i === "string") {
    var tZone = offsetFromString(matchOffset, this._i);
    if (tZone != null) {
      this.utcOffset(tZone);
    } else {
      this.utcOffset(0, true);
    }
  }
  return this;
}
function hasAlignedHourOffset(input2) {
  if (!this.isValid()) {
    return false;
  }
  input2 = input2 ? createLocal(input2).utcOffset() : 0;
  return (this.utcOffset() - input2) % 60 === 0;
}
function isDaylightSavingTime() {
  return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
}
function isDaylightSavingTimeShifted() {
  if (!isUndefined(this._isDSTShifted)) {
    return this._isDSTShifted;
  }
  var c = {}, other;
  copyConfig(c, this);
  c = prepareConfig(c);
  if (c._a) {
    other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
    this._isDSTShifted = this.isValid() && compareArrays(c._a, other.toArray()) > 0;
  } else {
    this._isDSTShifted = false;
  }
  return this._isDSTShifted;
}
function isLocal() {
  return this.isValid() ? !this._isUTC : false;
}
function isUtcOffset() {
  return this.isValid() ? this._isUTC : false;
}
function isUtc() {
  return this.isValid() ? this._isUTC && this._offset === 0 : false;
}
var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/, isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
function createDuration(input2, key) {
  var duration = input2, match = null, sign2, ret, diffRes;
  if (isDuration(input2)) {
    duration = {
      ms: input2._milliseconds,
      d: input2._days,
      M: input2._months
    };
  } else if (isNumber(input2) || !isNaN(+input2)) {
    duration = {};
    if (key) {
      duration[key] = +input2;
    } else {
      duration.milliseconds = +input2;
    }
  } else if (match = aspNetRegex.exec(input2)) {
    sign2 = match[1] === "-" ? -1 : 1;
    duration = {
      y: 0,
      d: toInt(match[DATE]) * sign2,
      h: toInt(match[HOUR]) * sign2,
      m: toInt(match[MINUTE]) * sign2,
      s: toInt(match[SECOND]) * sign2,
      ms: toInt(absRound(match[MILLISECOND] * 1e3)) * sign2
      // the millisecond decimal point is included in the match
    };
  } else if (match = isoRegex.exec(input2)) {
    sign2 = match[1] === "-" ? -1 : 1;
    duration = {
      y: parseIso(match[2], sign2),
      M: parseIso(match[3], sign2),
      w: parseIso(match[4], sign2),
      d: parseIso(match[5], sign2),
      h: parseIso(match[6], sign2),
      m: parseIso(match[7], sign2),
      s: parseIso(match[8], sign2)
    };
  } else if (duration == null) {
    duration = {};
  } else if (typeof duration === "object" && ("from" in duration || "to" in duration)) {
    diffRes = momentsDifference(
      createLocal(duration.from),
      createLocal(duration.to)
    );
    duration = {};
    duration.ms = diffRes.milliseconds;
    duration.M = diffRes.months;
  }
  ret = new Duration(duration);
  if (isDuration(input2) && hasOwnProp(input2, "_locale")) {
    ret._locale = input2._locale;
  }
  if (isDuration(input2) && hasOwnProp(input2, "_isValid")) {
    ret._isValid = input2._isValid;
  }
  return ret;
}
createDuration.fn = Duration.prototype;
createDuration.invalid = createInvalid$1;
function parseIso(inp, sign2) {
  var res = inp && parseFloat(inp.replace(",", "."));
  return (isNaN(res) ? 0 : res) * sign2;
}
function positiveMomentsDifference(base, other) {
  var res = {};
  res.months = other.month() - base.month() + (other.year() - base.year()) * 12;
  if (base.clone().add(res.months, "M").isAfter(other)) {
    --res.months;
  }
  res.milliseconds = +other - +base.clone().add(res.months, "M");
  return res;
}
function momentsDifference(base, other) {
  var res;
  if (!(base.isValid() && other.isValid())) {
    return { milliseconds: 0, months: 0 };
  }
  other = cloneWithOffset(other, base);
  if (base.isBefore(other)) {
    res = positiveMomentsDifference(base, other);
  } else {
    res = positiveMomentsDifference(other, base);
    res.milliseconds = -res.milliseconds;
    res.months = -res.months;
  }
  return res;
}
function createAdder(direction, name) {
  return function(val, period) {
    var dur, tmp;
    if (period !== null && !isNaN(+period)) {
      deprecateSimple(
        name,
        "moment()." + name + "(period, number) is deprecated. Please use moment()." + name + "(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."
      );
      tmp = val;
      val = period;
      period = tmp;
    }
    dur = createDuration(val, period);
    addSubtract(this, dur, direction);
    return this;
  };
}
function addSubtract(mom, duration, isAdding, updateOffset) {
  var milliseconds2 = duration._milliseconds, days2 = absRound(duration._days), months2 = absRound(duration._months);
  if (!mom.isValid()) {
    return;
  }
  updateOffset = updateOffset == null ? true : updateOffset;
  if (months2) {
    setMonth(mom, get(mom, "Month") + months2 * isAdding);
  }
  if (days2) {
    set$1(mom, "Date", get(mom, "Date") + days2 * isAdding);
  }
  if (milliseconds2) {
    mom._d.setTime(mom._d.valueOf() + milliseconds2 * isAdding);
  }
  if (updateOffset) {
    hooks.updateOffset(mom, days2 || months2);
  }
}
var add = createAdder(1, "add"), subtract = createAdder(-1, "subtract");
function isString(input2) {
  return typeof input2 === "string" || input2 instanceof String;
}
function isMomentInput(input2) {
  return isMoment(input2) || isDate(input2) || isString(input2) || isNumber(input2) || isNumberOrStringArray(input2) || isMomentInputObject(input2) || input2 === null || input2 === void 0;
}
function isMomentInputObject(input2) {
  var objectTest = isObject(input2) && !isObjectEmpty(input2), propertyTest = false, properties = [
    "years",
    "year",
    "y",
    "months",
    "month",
    "M",
    "days",
    "day",
    "d",
    "dates",
    "date",
    "D",
    "hours",
    "hour",
    "h",
    "minutes",
    "minute",
    "m",
    "seconds",
    "second",
    "s",
    "milliseconds",
    "millisecond",
    "ms"
  ], i, property, propertyLen = properties.length;
  for (i = 0; i < propertyLen; i += 1) {
    property = properties[i];
    propertyTest = propertyTest || hasOwnProp(input2, property);
  }
  return objectTest && propertyTest;
}
function isNumberOrStringArray(input2) {
  var arrayTest = isArray(input2), dataTypeTest = false;
  if (arrayTest) {
    dataTypeTest = input2.filter(function(item) {
      return !isNumber(item) && isString(input2);
    }).length === 0;
  }
  return arrayTest && dataTypeTest;
}
function isCalendarSpec(input2) {
  var objectTest = isObject(input2) && !isObjectEmpty(input2), propertyTest = false, properties = [
    "sameDay",
    "nextDay",
    "lastDay",
    "nextWeek",
    "lastWeek",
    "sameElse"
  ], i, property;
  for (i = 0; i < properties.length; i += 1) {
    property = properties[i];
    propertyTest = propertyTest || hasOwnProp(input2, property);
  }
  return objectTest && propertyTest;
}
function getCalendarFormat(myMoment, now2) {
  var diff2 = myMoment.diff(now2, "days", true);
  return diff2 < -6 ? "sameElse" : diff2 < -1 ? "lastWeek" : diff2 < 0 ? "lastDay" : diff2 < 1 ? "sameDay" : diff2 < 2 ? "nextDay" : diff2 < 7 ? "nextWeek" : "sameElse";
}
function calendar$1(time2, formats) {
  if (arguments.length === 1) {
    if (!arguments[0]) {
      time2 = void 0;
      formats = void 0;
    } else if (isMomentInput(arguments[0])) {
      time2 = arguments[0];
      formats = void 0;
    } else if (isCalendarSpec(arguments[0])) {
      formats = arguments[0];
      time2 = void 0;
    }
  }
  var now2 = time2 || createLocal(), sod = cloneWithOffset(now2, this).startOf("day"), format2 = hooks.calendarFormat(this, sod) || "sameElse", output = formats && (isFunction(formats[format2]) ? formats[format2].call(this, now2) : formats[format2]);
  return this.format(
    output || this.localeData().calendar(format2, this, createLocal(now2))
  );
}
function clone() {
  return new Moment(this);
}
function isAfter(input2, units) {
  var localInput = isMoment(input2) ? input2 : createLocal(input2);
  if (!(this.isValid() && localInput.isValid())) {
    return false;
  }
  units = normalizeUnits(units) || "millisecond";
  if (units === "millisecond") {
    return this.valueOf() > localInput.valueOf();
  } else {
    return localInput.valueOf() < this.clone().startOf(units).valueOf();
  }
}
function isBefore(input2, units) {
  var localInput = isMoment(input2) ? input2 : createLocal(input2);
  if (!(this.isValid() && localInput.isValid())) {
    return false;
  }
  units = normalizeUnits(units) || "millisecond";
  if (units === "millisecond") {
    return this.valueOf() < localInput.valueOf();
  } else {
    return this.clone().endOf(units).valueOf() < localInput.valueOf();
  }
}
function isBetween(from2, to2, units, inclusivity) {
  var localFrom = isMoment(from2) ? from2 : createLocal(from2), localTo = isMoment(to2) ? to2 : createLocal(to2);
  if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
    return false;
  }
  inclusivity = inclusivity || "()";
  return (inclusivity[0] === "(" ? this.isAfter(localFrom, units) : !this.isBefore(localFrom, units)) && (inclusivity[1] === ")" ? this.isBefore(localTo, units) : !this.isAfter(localTo, units));
}
function isSame(input2, units) {
  var localInput = isMoment(input2) ? input2 : createLocal(input2), inputMs;
  if (!(this.isValid() && localInput.isValid())) {
    return false;
  }
  units = normalizeUnits(units) || "millisecond";
  if (units === "millisecond") {
    return this.valueOf() === localInput.valueOf();
  } else {
    inputMs = localInput.valueOf();
    return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
  }
}
function isSameOrAfter(input2, units) {
  return this.isSame(input2, units) || this.isAfter(input2, units);
}
function isSameOrBefore(input2, units) {
  return this.isSame(input2, units) || this.isBefore(input2, units);
}
function diff(input2, units, asFloat) {
  var that, zoneDelta, output;
  if (!this.isValid()) {
    return NaN;
  }
  that = cloneWithOffset(input2, this);
  if (!that.isValid()) {
    return NaN;
  }
  zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;
  units = normalizeUnits(units);
  switch (units) {
    case "year":
      output = monthDiff(this, that) / 12;
      break;
    case "month":
      output = monthDiff(this, that);
      break;
    case "quarter":
      output = monthDiff(this, that) / 3;
      break;
    case "second":
      output = (this - that) / 1e3;
      break;
    case "minute":
      output = (this - that) / 6e4;
      break;
    case "hour":
      output = (this - that) / 36e5;
      break;
    case "day":
      output = (this - that - zoneDelta) / 864e5;
      break;
    case "week":
      output = (this - that - zoneDelta) / 6048e5;
      break;
    default:
      output = this - that;
  }
  return asFloat ? output : absFloor(output);
}
function monthDiff(a, b) {
  if (a.date() < b.date()) {
    return -monthDiff(b, a);
  }
  var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()), anchor = a.clone().add(wholeMonthDiff, "months"), anchor2, adjust;
  if (b - anchor < 0) {
    anchor2 = a.clone().add(wholeMonthDiff - 1, "months");
    adjust = (b - anchor) / (anchor - anchor2);
  } else {
    anchor2 = a.clone().add(wholeMonthDiff + 1, "months");
    adjust = (b - anchor) / (anchor2 - anchor);
  }
  return -(wholeMonthDiff + adjust) || 0;
}
hooks.defaultFormat = "YYYY-MM-DDTHH:mm:ssZ";
hooks.defaultFormatUtc = "YYYY-MM-DDTHH:mm:ss[Z]";
function toString() {
  return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ");
}
function toISOString(keepOffset) {
  if (!this.isValid()) {
    return null;
  }
  var utc = keepOffset !== true, m = utc ? this.clone().utc() : this;
  if (m.year() < 0 || m.year() > 9999) {
    return formatMoment(
      m,
      utc ? "YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYYYY-MM-DD[T]HH:mm:ss.SSSZ"
    );
  }
  if (isFunction(Date.prototype.toISOString)) {
    if (utc) {
      return this.toDate().toISOString();
    } else {
      return new Date(this.valueOf() + this.utcOffset() * 60 * 1e3).toISOString().replace("Z", formatMoment(m, "Z"));
    }
  }
  return formatMoment(
    m,
    utc ? "YYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYY-MM-DD[T]HH:mm:ss.SSSZ"
  );
}
function inspect() {
  if (!this.isValid()) {
    return "moment.invalid(/* " + this._i + " */)";
  }
  var func = "moment", zone = "", prefix, year, datetime2, suffix;
  if (!this.isLocal()) {
    func = this.utcOffset() === 0 ? "moment.utc" : "moment.parseZone";
    zone = "Z";
  }
  prefix = "[" + func + '("]';
  year = 0 <= this.year() && this.year() <= 9999 ? "YYYY" : "YYYYYY";
  datetime2 = "-MM-DD[T]HH:mm:ss.SSS";
  suffix = zone + '[")]';
  return this.format(prefix + year + datetime2 + suffix);
}
function format(inputString) {
  if (!inputString) {
    inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
  }
  var output = formatMoment(this, inputString);
  return this.localeData().postformat(output);
}
function from(time2, withoutSuffix) {
  if (this.isValid() && (isMoment(time2) && time2.isValid() || createLocal(time2).isValid())) {
    return createDuration({ to: this, from: time2 }).locale(this.locale()).humanize(!withoutSuffix);
  } else {
    return this.localeData().invalidDate();
  }
}
function fromNow(withoutSuffix) {
  return this.from(createLocal(), withoutSuffix);
}
function to(time2, withoutSuffix) {
  if (this.isValid() && (isMoment(time2) && time2.isValid() || createLocal(time2).isValid())) {
    return createDuration({ from: this, to: time2 }).locale(this.locale()).humanize(!withoutSuffix);
  } else {
    return this.localeData().invalidDate();
  }
}
function toNow(withoutSuffix) {
  return this.to(createLocal(), withoutSuffix);
}
function locale(key) {
  var newLocaleData;
  if (key === void 0) {
    return this._locale._abbr;
  } else {
    newLocaleData = getLocale(key);
    if (newLocaleData != null) {
      this._locale = newLocaleData;
    }
    return this;
  }
}
var lang = deprecate(
  "moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",
  function(key) {
    if (key === void 0) {
      return this.localeData();
    } else {
      return this.locale(key);
    }
  }
);
function localeData() {
  return this._locale;
}
var MS_PER_SECOND = 1e3, MS_PER_MINUTE = 60 * MS_PER_SECOND, MS_PER_HOUR = 60 * MS_PER_MINUTE, MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;
function mod$1(dividend, divisor) {
  return (dividend % divisor + divisor) % divisor;
}
function localStartOfDate(y, m, d) {
  if (y < 100 && y >= 0) {
    return new Date(y + 400, m, d) - MS_PER_400_YEARS;
  } else {
    return new Date(y, m, d).valueOf();
  }
}
function utcStartOfDate(y, m, d) {
  if (y < 100 && y >= 0) {
    return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
  } else {
    return Date.UTC(y, m, d);
  }
}
function startOf(units) {
  var time2, startOfDate;
  units = normalizeUnits(units);
  if (units === void 0 || units === "millisecond" || !this.isValid()) {
    return this;
  }
  startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
  switch (units) {
    case "year":
      time2 = startOfDate(this.year(), 0, 1);
      break;
    case "quarter":
      time2 = startOfDate(
        this.year(),
        this.month() - this.month() % 3,
        1
      );
      break;
    case "month":
      time2 = startOfDate(this.year(), this.month(), 1);
      break;
    case "week":
      time2 = startOfDate(
        this.year(),
        this.month(),
        this.date() - this.weekday()
      );
      break;
    case "isoWeek":
      time2 = startOfDate(
        this.year(),
        this.month(),
        this.date() - (this.isoWeekday() - 1)
      );
      break;
    case "day":
    case "date":
      time2 = startOfDate(this.year(), this.month(), this.date());
      break;
    case "hour":
      time2 = this._d.valueOf();
      time2 -= mod$1(
        time2 + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
        MS_PER_HOUR
      );
      break;
    case "minute":
      time2 = this._d.valueOf();
      time2 -= mod$1(time2, MS_PER_MINUTE);
      break;
    case "second":
      time2 = this._d.valueOf();
      time2 -= mod$1(time2, MS_PER_SECOND);
      break;
  }
  this._d.setTime(time2);
  hooks.updateOffset(this, true);
  return this;
}
function endOf(units) {
  var time2, startOfDate;
  units = normalizeUnits(units);
  if (units === void 0 || units === "millisecond" || !this.isValid()) {
    return this;
  }
  startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
  switch (units) {
    case "year":
      time2 = startOfDate(this.year() + 1, 0, 1) - 1;
      break;
    case "quarter":
      time2 = startOfDate(
        this.year(),
        this.month() - this.month() % 3 + 3,
        1
      ) - 1;
      break;
    case "month":
      time2 = startOfDate(this.year(), this.month() + 1, 1) - 1;
      break;
    case "week":
      time2 = startOfDate(
        this.year(),
        this.month(),
        this.date() - this.weekday() + 7
      ) - 1;
      break;
    case "isoWeek":
      time2 = startOfDate(
        this.year(),
        this.month(),
        this.date() - (this.isoWeekday() - 1) + 7
      ) - 1;
      break;
    case "day":
    case "date":
      time2 = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
      break;
    case "hour":
      time2 = this._d.valueOf();
      time2 += MS_PER_HOUR - mod$1(
        time2 + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
        MS_PER_HOUR
      ) - 1;
      break;
    case "minute":
      time2 = this._d.valueOf();
      time2 += MS_PER_MINUTE - mod$1(time2, MS_PER_MINUTE) - 1;
      break;
    case "second":
      time2 = this._d.valueOf();
      time2 += MS_PER_SECOND - mod$1(time2, MS_PER_SECOND) - 1;
      break;
  }
  this._d.setTime(time2);
  hooks.updateOffset(this, true);
  return this;
}
function valueOf() {
  return this._d.valueOf() - (this._offset || 0) * 6e4;
}
function unix() {
  return Math.floor(this.valueOf() / 1e3);
}
function toDate() {
  return new Date(this.valueOf());
}
function toArray() {
  var m = this;
  return [
    m.year(),
    m.month(),
    m.date(),
    m.hour(),
    m.minute(),
    m.second(),
    m.millisecond()
  ];
}
function toObject() {
  var m = this;
  return {
    years: m.year(),
    months: m.month(),
    date: m.date(),
    hours: m.hours(),
    minutes: m.minutes(),
    seconds: m.seconds(),
    milliseconds: m.milliseconds()
  };
}
function toJSON() {
  return this.isValid() ? this.toISOString() : null;
}
function isValid$2() {
  return isValid(this);
}
function parsingFlags() {
  return extend({}, getParsingFlags(this));
}
function invalidAt() {
  return getParsingFlags(this).overflow;
}
function creationData() {
  return {
    input: this._i,
    format: this._f,
    locale: this._locale,
    isUTC: this._isUTC,
    strict: this._strict
  };
}
addFormatToken("N", 0, 0, "eraAbbr");
addFormatToken("NN", 0, 0, "eraAbbr");
addFormatToken("NNN", 0, 0, "eraAbbr");
addFormatToken("NNNN", 0, 0, "eraName");
addFormatToken("NNNNN", 0, 0, "eraNarrow");
addFormatToken("y", ["y", 1], "yo", "eraYear");
addFormatToken("y", ["yy", 2], 0, "eraYear");
addFormatToken("y", ["yyy", 3], 0, "eraYear");
addFormatToken("y", ["yyyy", 4], 0, "eraYear");
addRegexToken("N", matchEraAbbr);
addRegexToken("NN", matchEraAbbr);
addRegexToken("NNN", matchEraAbbr);
addRegexToken("NNNN", matchEraName);
addRegexToken("NNNNN", matchEraNarrow);
addParseToken(
  ["N", "NN", "NNN", "NNNN", "NNNNN"],
  function(input2, array2, config, token2) {
    var era = config._locale.erasParse(input2, token2, config._strict);
    if (era) {
      getParsingFlags(config).era = era;
    } else {
      getParsingFlags(config).invalidEra = input2;
    }
  }
);
addRegexToken("y", matchUnsigned);
addRegexToken("yy", matchUnsigned);
addRegexToken("yyy", matchUnsigned);
addRegexToken("yyyy", matchUnsigned);
addRegexToken("yo", matchEraYearOrdinal);
addParseToken(["y", "yy", "yyy", "yyyy"], YEAR);
addParseToken(["yo"], function(input2, array2, config, token2) {
  var match;
  if (config._locale._eraYearOrdinalRegex) {
    match = input2.match(config._locale._eraYearOrdinalRegex);
  }
  if (config._locale.eraYearOrdinalParse) {
    array2[YEAR] = config._locale.eraYearOrdinalParse(input2, match);
  } else {
    array2[YEAR] = parseInt(input2, 10);
  }
});
function localeEras(m, format2) {
  var i, l, date2, eras = this._eras || getLocale("en")._eras;
  for (i = 0, l = eras.length; i < l; ++i) {
    switch (typeof eras[i].since) {
      case "string":
        date2 = hooks(eras[i].since).startOf("day");
        eras[i].since = date2.valueOf();
        break;
    }
    switch (typeof eras[i].until) {
      case "undefined":
        eras[i].until = Infinity;
        break;
      case "string":
        date2 = hooks(eras[i].until).startOf("day").valueOf();
        eras[i].until = date2.valueOf();
        break;
    }
  }
  return eras;
}
function localeErasParse(eraName, format2, strict) {
  var i, l, eras = this.eras(), name, abbr, narrow;
  eraName = eraName.toUpperCase();
  for (i = 0, l = eras.length; i < l; ++i) {
    name = eras[i].name.toUpperCase();
    abbr = eras[i].abbr.toUpperCase();
    narrow = eras[i].narrow.toUpperCase();
    if (strict) {
      switch (format2) {
        case "N":
        case "NN":
        case "NNN":
          if (abbr === eraName) {
            return eras[i];
          }
          break;
        case "NNNN":
          if (name === eraName) {
            return eras[i];
          }
          break;
        case "NNNNN":
          if (narrow === eraName) {
            return eras[i];
          }
          break;
      }
    } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
      return eras[i];
    }
  }
}
function localeErasConvertYear(era, year) {
  var dir = era.since <= era.until ? 1 : -1;
  if (year === void 0) {
    return hooks(era.since).year();
  } else {
    return hooks(era.since).year() + (year - era.offset) * dir;
  }
}
function getEraName() {
  var i, l, val, eras = this.localeData().eras();
  for (i = 0, l = eras.length; i < l; ++i) {
    val = this.clone().startOf("day").valueOf();
    if (eras[i].since <= val && val <= eras[i].until) {
      return eras[i].name;
    }
    if (eras[i].until <= val && val <= eras[i].since) {
      return eras[i].name;
    }
  }
  return "";
}
function getEraNarrow() {
  var i, l, val, eras = this.localeData().eras();
  for (i = 0, l = eras.length; i < l; ++i) {
    val = this.clone().startOf("day").valueOf();
    if (eras[i].since <= val && val <= eras[i].until) {
      return eras[i].narrow;
    }
    if (eras[i].until <= val && val <= eras[i].since) {
      return eras[i].narrow;
    }
  }
  return "";
}
function getEraAbbr() {
  var i, l, val, eras = this.localeData().eras();
  for (i = 0, l = eras.length; i < l; ++i) {
    val = this.clone().startOf("day").valueOf();
    if (eras[i].since <= val && val <= eras[i].until) {
      return eras[i].abbr;
    }
    if (eras[i].until <= val && val <= eras[i].since) {
      return eras[i].abbr;
    }
  }
  return "";
}
function getEraYear() {
  var i, l, dir, val, eras = this.localeData().eras();
  for (i = 0, l = eras.length; i < l; ++i) {
    dir = eras[i].since <= eras[i].until ? 1 : -1;
    val = this.clone().startOf("day").valueOf();
    if (eras[i].since <= val && val <= eras[i].until || eras[i].until <= val && val <= eras[i].since) {
      return (this.year() - hooks(eras[i].since).year()) * dir + eras[i].offset;
    }
  }
  return this.year();
}
function erasNameRegex(isStrict) {
  if (!hasOwnProp(this, "_erasNameRegex")) {
    computeErasParse.call(this);
  }
  return isStrict ? this._erasNameRegex : this._erasRegex;
}
function erasAbbrRegex(isStrict) {
  if (!hasOwnProp(this, "_erasAbbrRegex")) {
    computeErasParse.call(this);
  }
  return isStrict ? this._erasAbbrRegex : this._erasRegex;
}
function erasNarrowRegex(isStrict) {
  if (!hasOwnProp(this, "_erasNarrowRegex")) {
    computeErasParse.call(this);
  }
  return isStrict ? this._erasNarrowRegex : this._erasRegex;
}
function matchEraAbbr(isStrict, locale2) {
  return locale2.erasAbbrRegex(isStrict);
}
function matchEraName(isStrict, locale2) {
  return locale2.erasNameRegex(isStrict);
}
function matchEraNarrow(isStrict, locale2) {
  return locale2.erasNarrowRegex(isStrict);
}
function matchEraYearOrdinal(isStrict, locale2) {
  return locale2._eraYearOrdinalRegex || matchUnsigned;
}
function computeErasParse() {
  var abbrPieces = [], namePieces = [], narrowPieces = [], mixedPieces = [], i, l, eras = this.eras();
  for (i = 0, l = eras.length; i < l; ++i) {
    namePieces.push(regexEscape(eras[i].name));
    abbrPieces.push(regexEscape(eras[i].abbr));
    narrowPieces.push(regexEscape(eras[i].narrow));
    mixedPieces.push(regexEscape(eras[i].name));
    mixedPieces.push(regexEscape(eras[i].abbr));
    mixedPieces.push(regexEscape(eras[i].narrow));
  }
  this._erasRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
  this._erasNameRegex = new RegExp("^(" + namePieces.join("|") + ")", "i");
  this._erasAbbrRegex = new RegExp("^(" + abbrPieces.join("|") + ")", "i");
  this._erasNarrowRegex = new RegExp(
    "^(" + narrowPieces.join("|") + ")",
    "i"
  );
}
addFormatToken(0, ["gg", 2], 0, function() {
  return this.weekYear() % 100;
});
addFormatToken(0, ["GG", 2], 0, function() {
  return this.isoWeekYear() % 100;
});
function addWeekYearFormatToken(token2, getter) {
  addFormatToken(0, [token2, token2.length], 0, getter);
}
addWeekYearFormatToken("gggg", "weekYear");
addWeekYearFormatToken("ggggg", "weekYear");
addWeekYearFormatToken("GGGG", "isoWeekYear");
addWeekYearFormatToken("GGGGG", "isoWeekYear");
addUnitAlias("weekYear", "gg");
addUnitAlias("isoWeekYear", "GG");
addUnitPriority("weekYear", 1);
addUnitPriority("isoWeekYear", 1);
addRegexToken("G", matchSigned);
addRegexToken("g", matchSigned);
addRegexToken("GG", match1to2, match2);
addRegexToken("gg", match1to2, match2);
addRegexToken("GGGG", match1to4, match4);
addRegexToken("gggg", match1to4, match4);
addRegexToken("GGGGG", match1to6, match6);
addRegexToken("ggggg", match1to6, match6);
addWeekParseToken(
  ["gggg", "ggggg", "GGGG", "GGGGG"],
  function(input2, week, config, token2) {
    week[token2.substr(0, 2)] = toInt(input2);
  }
);
addWeekParseToken(["gg", "GG"], function(input2, week, config, token2) {
  week[token2] = hooks.parseTwoDigitYear(input2);
});
function getSetWeekYear(input2) {
  return getSetWeekYearHelper.call(
    this,
    input2,
    this.week(),
    this.weekday(),
    this.localeData()._week.dow,
    this.localeData()._week.doy
  );
}
function getSetISOWeekYear(input2) {
  return getSetWeekYearHelper.call(
    this,
    input2,
    this.isoWeek(),
    this.isoWeekday(),
    1,
    4
  );
}
function getISOWeeksInYear() {
  return weeksInYear(this.year(), 1, 4);
}
function getISOWeeksInISOWeekYear() {
  return weeksInYear(this.isoWeekYear(), 1, 4);
}
function getWeeksInYear() {
  var weekInfo = this.localeData()._week;
  return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
}
function getWeeksInWeekYear() {
  var weekInfo = this.localeData()._week;
  return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
}
function getSetWeekYearHelper(input2, week, weekday, dow, doy) {
  var weeksTarget;
  if (input2 == null) {
    return weekOfYear(this, dow, doy).year;
  } else {
    weeksTarget = weeksInYear(input2, dow, doy);
    if (week > weeksTarget) {
      week = weeksTarget;
    }
    return setWeekAll.call(this, input2, week, weekday, dow, doy);
  }
}
function setWeekAll(weekYear, week, weekday, dow, doy) {
  var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy), date2 = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
  this.year(date2.getUTCFullYear());
  this.month(date2.getUTCMonth());
  this.date(date2.getUTCDate());
  return this;
}
addFormatToken("Q", 0, "Qo", "quarter");
addUnitAlias("quarter", "Q");
addUnitPriority("quarter", 7);
addRegexToken("Q", match1);
addParseToken("Q", function(input2, array2) {
  array2[MONTH] = (toInt(input2) - 1) * 3;
});
function getSetQuarter(input2) {
  return input2 == null ? Math.ceil((this.month() + 1) / 3) : this.month((input2 - 1) * 3 + this.month() % 3);
}
addFormatToken("D", ["DD", 2], "Do", "date");
addUnitAlias("date", "D");
addUnitPriority("date", 9);
addRegexToken("D", match1to2);
addRegexToken("DD", match1to2, match2);
addRegexToken("Do", function(isStrict, locale2) {
  return isStrict ? locale2._dayOfMonthOrdinalParse || locale2._ordinalParse : locale2._dayOfMonthOrdinalParseLenient;
});
addParseToken(["D", "DD"], DATE);
addParseToken("Do", function(input2, array2) {
  array2[DATE] = toInt(input2.match(match1to2)[0]);
});
var getSetDayOfMonth = makeGetSet("Date", true);
addFormatToken("DDD", ["DDDD", 3], "DDDo", "dayOfYear");
addUnitAlias("dayOfYear", "DDD");
addUnitPriority("dayOfYear", 4);
addRegexToken("DDD", match1to3);
addRegexToken("DDDD", match3);
addParseToken(["DDD", "DDDD"], function(input2, array2, config) {
  config._dayOfYear = toInt(input2);
});
function getSetDayOfYear(input2) {
  var dayOfYear = Math.round(
    (this.clone().startOf("day") - this.clone().startOf("year")) / 864e5
  ) + 1;
  return input2 == null ? dayOfYear : this.add(input2 - dayOfYear, "d");
}
addFormatToken("m", ["mm", 2], 0, "minute");
addUnitAlias("minute", "m");
addUnitPriority("minute", 14);
addRegexToken("m", match1to2);
addRegexToken("mm", match1to2, match2);
addParseToken(["m", "mm"], MINUTE);
var getSetMinute = makeGetSet("Minutes", false);
addFormatToken("s", ["ss", 2], 0, "second");
addUnitAlias("second", "s");
addUnitPriority("second", 15);
addRegexToken("s", match1to2);
addRegexToken("ss", match1to2, match2);
addParseToken(["s", "ss"], SECOND);
var getSetSecond = makeGetSet("Seconds", false);
addFormatToken("S", 0, 0, function() {
  return ~~(this.millisecond() / 100);
});
addFormatToken(0, ["SS", 2], 0, function() {
  return ~~(this.millisecond() / 10);
});
addFormatToken(0, ["SSS", 3], 0, "millisecond");
addFormatToken(0, ["SSSS", 4], 0, function() {
  return this.millisecond() * 10;
});
addFormatToken(0, ["SSSSS", 5], 0, function() {
  return this.millisecond() * 100;
});
addFormatToken(0, ["SSSSSS", 6], 0, function() {
  return this.millisecond() * 1e3;
});
addFormatToken(0, ["SSSSSSS", 7], 0, function() {
  return this.millisecond() * 1e4;
});
addFormatToken(0, ["SSSSSSSS", 8], 0, function() {
  return this.millisecond() * 1e5;
});
addFormatToken(0, ["SSSSSSSSS", 9], 0, function() {
  return this.millisecond() * 1e6;
});
addUnitAlias("millisecond", "ms");
addUnitPriority("millisecond", 16);
addRegexToken("S", match1to3, match1);
addRegexToken("SS", match1to3, match2);
addRegexToken("SSS", match1to3, match3);
var token, getSetMillisecond;
for (token = "SSSS"; token.length <= 9; token += "S") {
  addRegexToken(token, matchUnsigned);
}
function parseMs(input2, array2) {
  array2[MILLISECOND] = toInt(("0." + input2) * 1e3);
}
for (token = "S"; token.length <= 9; token += "S") {
  addParseToken(token, parseMs);
}
getSetMillisecond = makeGetSet("Milliseconds", false);
addFormatToken("z", 0, 0, "zoneAbbr");
addFormatToken("zz", 0, 0, "zoneName");
function getZoneAbbr() {
  return this._isUTC ? "UTC" : "";
}
function getZoneName() {
  return this._isUTC ? "Coordinated Universal Time" : "";
}
var proto = Moment.prototype;
proto.add = add;
proto.calendar = calendar$1;
proto.clone = clone;
proto.diff = diff;
proto.endOf = endOf;
proto.format = format;
proto.from = from;
proto.fromNow = fromNow;
proto.to = to;
proto.toNow = toNow;
proto.get = stringGet;
proto.invalidAt = invalidAt;
proto.isAfter = isAfter;
proto.isBefore = isBefore;
proto.isBetween = isBetween;
proto.isSame = isSame;
proto.isSameOrAfter = isSameOrAfter;
proto.isSameOrBefore = isSameOrBefore;
proto.isValid = isValid$2;
proto.lang = lang;
proto.locale = locale;
proto.localeData = localeData;
proto.max = prototypeMax;
proto.min = prototypeMin;
proto.parsingFlags = parsingFlags;
proto.set = stringSet;
proto.startOf = startOf;
proto.subtract = subtract;
proto.toArray = toArray;
proto.toObject = toObject;
proto.toDate = toDate;
proto.toISOString = toISOString;
proto.inspect = inspect;
if (typeof Symbol !== "undefined" && Symbol.for != null) {
  proto[Symbol.for("nodejs.util.inspect.custom")] = function() {
    return "Moment<" + this.format() + ">";
  };
}
proto.toJSON = toJSON;
proto.toString = toString;
proto.unix = unix;
proto.valueOf = valueOf;
proto.creationData = creationData;
proto.eraName = getEraName;
proto.eraNarrow = getEraNarrow;
proto.eraAbbr = getEraAbbr;
proto.eraYear = getEraYear;
proto.year = getSetYear;
proto.isLeapYear = getIsLeapYear;
proto.weekYear = getSetWeekYear;
proto.isoWeekYear = getSetISOWeekYear;
proto.quarter = proto.quarters = getSetQuarter;
proto.month = getSetMonth;
proto.daysInMonth = getDaysInMonth;
proto.week = proto.weeks = getSetWeek;
proto.isoWeek = proto.isoWeeks = getSetISOWeek;
proto.weeksInYear = getWeeksInYear;
proto.weeksInWeekYear = getWeeksInWeekYear;
proto.isoWeeksInYear = getISOWeeksInYear;
proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
proto.date = getSetDayOfMonth;
proto.day = proto.days = getSetDayOfWeek;
proto.weekday = getSetLocaleDayOfWeek;
proto.isoWeekday = getSetISODayOfWeek;
proto.dayOfYear = getSetDayOfYear;
proto.hour = proto.hours = getSetHour;
proto.minute = proto.minutes = getSetMinute;
proto.second = proto.seconds = getSetSecond;
proto.millisecond = proto.milliseconds = getSetMillisecond;
proto.utcOffset = getSetOffset;
proto.utc = setOffsetToUTC;
proto.local = setOffsetToLocal;
proto.parseZone = setOffsetToParsedOffset;
proto.hasAlignedHourOffset = hasAlignedHourOffset;
proto.isDST = isDaylightSavingTime;
proto.isLocal = isLocal;
proto.isUtcOffset = isUtcOffset;
proto.isUtc = isUtc;
proto.isUTC = isUtc;
proto.zoneAbbr = getZoneAbbr;
proto.zoneName = getZoneName;
proto.dates = deprecate(
  "dates accessor is deprecated. Use date instead.",
  getSetDayOfMonth
);
proto.months = deprecate(
  "months accessor is deprecated. Use month instead",
  getSetMonth
);
proto.years = deprecate(
  "years accessor is deprecated. Use year instead",
  getSetYear
);
proto.zone = deprecate(
  "moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",
  getSetZone
);
proto.isDSTShifted = deprecate(
  "isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",
  isDaylightSavingTimeShifted
);
function createUnix(input2) {
  return createLocal(input2 * 1e3);
}
function createInZone() {
  return createLocal.apply(null, arguments).parseZone();
}
function preParsePostFormat(string2) {
  return string2;
}
var proto$1 = Locale.prototype;
proto$1.calendar = calendar;
proto$1.longDateFormat = longDateFormat;
proto$1.invalidDate = invalidDate;
proto$1.ordinal = ordinal;
proto$1.preparse = preParsePostFormat;
proto$1.postformat = preParsePostFormat;
proto$1.relativeTime = relativeTime;
proto$1.pastFuture = pastFuture;
proto$1.set = set;
proto$1.eras = localeEras;
proto$1.erasParse = localeErasParse;
proto$1.erasConvertYear = localeErasConvertYear;
proto$1.erasAbbrRegex = erasAbbrRegex;
proto$1.erasNameRegex = erasNameRegex;
proto$1.erasNarrowRegex = erasNarrowRegex;
proto$1.months = localeMonths;
proto$1.monthsShort = localeMonthsShort;
proto$1.monthsParse = localeMonthsParse;
proto$1.monthsRegex = monthsRegex;
proto$1.monthsShortRegex = monthsShortRegex;
proto$1.week = localeWeek;
proto$1.firstDayOfYear = localeFirstDayOfYear;
proto$1.firstDayOfWeek = localeFirstDayOfWeek;
proto$1.weekdays = localeWeekdays;
proto$1.weekdaysMin = localeWeekdaysMin;
proto$1.weekdaysShort = localeWeekdaysShort;
proto$1.weekdaysParse = localeWeekdaysParse;
proto$1.weekdaysRegex = weekdaysRegex;
proto$1.weekdaysShortRegex = weekdaysShortRegex;
proto$1.weekdaysMinRegex = weekdaysMinRegex;
proto$1.isPM = localeIsPM;
proto$1.meridiem = localeMeridiem;
function get$1(format2, index2, field, setter) {
  var locale2 = getLocale(), utc = createUTC().set(setter, index2);
  return locale2[field](utc, format2);
}
function listMonthsImpl(format2, index2, field) {
  if (isNumber(format2)) {
    index2 = format2;
    format2 = void 0;
  }
  format2 = format2 || "";
  if (index2 != null) {
    return get$1(format2, index2, field, "month");
  }
  var i, out = [];
  for (i = 0; i < 12; i++) {
    out[i] = get$1(format2, i, field, "month");
  }
  return out;
}
function listWeekdaysImpl(localeSorted, format2, index2, field) {
  if (typeof localeSorted === "boolean") {
    if (isNumber(format2)) {
      index2 = format2;
      format2 = void 0;
    }
    format2 = format2 || "";
  } else {
    format2 = localeSorted;
    index2 = format2;
    localeSorted = false;
    if (isNumber(format2)) {
      index2 = format2;
      format2 = void 0;
    }
    format2 = format2 || "";
  }
  var locale2 = getLocale(), shift = localeSorted ? locale2._week.dow : 0, i, out = [];
  if (index2 != null) {
    return get$1(format2, (index2 + shift) % 7, field, "day");
  }
  for (i = 0; i < 7; i++) {
    out[i] = get$1(format2, (i + shift) % 7, field, "day");
  }
  return out;
}
function listMonths(format2, index2) {
  return listMonthsImpl(format2, index2, "months");
}
function listMonthsShort(format2, index2) {
  return listMonthsImpl(format2, index2, "monthsShort");
}
function listWeekdays(localeSorted, format2, index2) {
  return listWeekdaysImpl(localeSorted, format2, index2, "weekdays");
}
function listWeekdaysShort(localeSorted, format2, index2) {
  return listWeekdaysImpl(localeSorted, format2, index2, "weekdaysShort");
}
function listWeekdaysMin(localeSorted, format2, index2) {
  return listWeekdaysImpl(localeSorted, format2, index2, "weekdaysMin");
}
getSetGlobalLocale("en", {
  eras: [
    {
      since: "0001-01-01",
      until: Infinity,
      offset: 1,
      name: "Anno Domini",
      narrow: "AD",
      abbr: "AD"
    },
    {
      since: "0000-12-31",
      until: -Infinity,
      offset: 1,
      name: "Before Christ",
      narrow: "BC",
      abbr: "BC"
    }
  ],
  dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
  ordinal: function(number2) {
    var b = number2 % 10, output = toInt(number2 % 100 / 10) === 1 ? "th" : b === 1 ? "st" : b === 2 ? "nd" : b === 3 ? "rd" : "th";
    return number2 + output;
  }
});
hooks.lang = deprecate(
  "moment.lang is deprecated. Use moment.locale instead.",
  getSetGlobalLocale
);
hooks.langData = deprecate(
  "moment.langData is deprecated. Use moment.localeData instead.",
  getLocale
);
var mathAbs = Math.abs;
function abs() {
  var data = this._data;
  this._milliseconds = mathAbs(this._milliseconds);
  this._days = mathAbs(this._days);
  this._months = mathAbs(this._months);
  data.milliseconds = mathAbs(data.milliseconds);
  data.seconds = mathAbs(data.seconds);
  data.minutes = mathAbs(data.minutes);
  data.hours = mathAbs(data.hours);
  data.months = mathAbs(data.months);
  data.years = mathAbs(data.years);
  return this;
}
function addSubtract$1(duration, input2, value, direction) {
  var other = createDuration(input2, value);
  duration._milliseconds += direction * other._milliseconds;
  duration._days += direction * other._days;
  duration._months += direction * other._months;
  return duration._bubble();
}
function add$1(input2, value) {
  return addSubtract$1(this, input2, value, 1);
}
function subtract$1(input2, value) {
  return addSubtract$1(this, input2, value, -1);
}
function absCeil(number2) {
  if (number2 < 0) {
    return Math.floor(number2);
  } else {
    return Math.ceil(number2);
  }
}
function bubble() {
  var milliseconds2 = this._milliseconds, days2 = this._days, months2 = this._months, data = this._data, seconds2, minutes2, hours2, years2, monthsFromDays;
  if (!(milliseconds2 >= 0 && days2 >= 0 && months2 >= 0 || milliseconds2 <= 0 && days2 <= 0 && months2 <= 0)) {
    milliseconds2 += absCeil(monthsToDays(months2) + days2) * 864e5;
    days2 = 0;
    months2 = 0;
  }
  data.milliseconds = milliseconds2 % 1e3;
  seconds2 = absFloor(milliseconds2 / 1e3);
  data.seconds = seconds2 % 60;
  minutes2 = absFloor(seconds2 / 60);
  data.minutes = minutes2 % 60;
  hours2 = absFloor(minutes2 / 60);
  data.hours = hours2 % 24;
  days2 += absFloor(hours2 / 24);
  monthsFromDays = absFloor(daysToMonths(days2));
  months2 += monthsFromDays;
  days2 -= absCeil(monthsToDays(monthsFromDays));
  years2 = absFloor(months2 / 12);
  months2 %= 12;
  data.days = days2;
  data.months = months2;
  data.years = years2;
  return this;
}
function daysToMonths(days2) {
  return days2 * 4800 / 146097;
}
function monthsToDays(months2) {
  return months2 * 146097 / 4800;
}
function as(units) {
  if (!this.isValid()) {
    return NaN;
  }
  var days2, months2, milliseconds2 = this._milliseconds;
  units = normalizeUnits(units);
  if (units === "month" || units === "quarter" || units === "year") {
    days2 = this._days + milliseconds2 / 864e5;
    months2 = this._months + daysToMonths(days2);
    switch (units) {
      case "month":
        return months2;
      case "quarter":
        return months2 / 3;
      case "year":
        return months2 / 12;
    }
  } else {
    days2 = this._days + Math.round(monthsToDays(this._months));
    switch (units) {
      case "week":
        return days2 / 7 + milliseconds2 / 6048e5;
      case "day":
        return days2 + milliseconds2 / 864e5;
      case "hour":
        return days2 * 24 + milliseconds2 / 36e5;
      case "minute":
        return days2 * 1440 + milliseconds2 / 6e4;
      case "second":
        return days2 * 86400 + milliseconds2 / 1e3;
      case "millisecond":
        return Math.floor(days2 * 864e5) + milliseconds2;
      default:
        throw new Error("Unknown unit " + units);
    }
  }
}
function valueOf$1() {
  if (!this.isValid()) {
    return NaN;
  }
  return this._milliseconds + this._days * 864e5 + this._months % 12 * 2592e6 + toInt(this._months / 12) * 31536e6;
}
function makeAs(alias) {
  return function() {
    return this.as(alias);
  };
}
var asMilliseconds = makeAs("ms"), asSeconds = makeAs("s"), asMinutes = makeAs("m"), asHours = makeAs("h"), asDays = makeAs("d"), asWeeks = makeAs("w"), asMonths = makeAs("M"), asQuarters = makeAs("Q"), asYears = makeAs("y");
function clone$1() {
  return createDuration(this);
}
function get$2(units) {
  units = normalizeUnits(units);
  return this.isValid() ? this[units + "s"]() : NaN;
}
function makeGetter(name) {
  return function() {
    return this.isValid() ? this._data[name] : NaN;
  };
}
var milliseconds = makeGetter("milliseconds"), seconds = makeGetter("seconds"), minutes = makeGetter("minutes"), hours = makeGetter("hours"), days = makeGetter("days"), months = makeGetter("months"), years = makeGetter("years");
function weeks() {
  return absFloor(this.days() / 7);
}
var round$1 = Math.round, thresholds = {
  ss: 44,
  // a few seconds to seconds
  s: 45,
  // seconds to minute
  m: 45,
  // minutes to hour
  h: 22,
  // hours to day
  d: 26,
  // days to month/week
  w: null,
  // weeks to month
  M: 11
  // months to year
};
function substituteTimeAgo(string2, number2, withoutSuffix, isFuture, locale2) {
  return locale2.relativeTime(number2 || 1, !!withoutSuffix, string2, isFuture);
}
function relativeTime$1(posNegDuration, withoutSuffix, thresholds2, locale2) {
  var duration = createDuration(posNegDuration).abs(), seconds2 = round$1(duration.as("s")), minutes2 = round$1(duration.as("m")), hours2 = round$1(duration.as("h")), days2 = round$1(duration.as("d")), months2 = round$1(duration.as("M")), weeks2 = round$1(duration.as("w")), years2 = round$1(duration.as("y")), a = seconds2 <= thresholds2.ss && ["s", seconds2] || seconds2 < thresholds2.s && ["ss", seconds2] || minutes2 <= 1 && ["m"] || minutes2 < thresholds2.m && ["mm", minutes2] || hours2 <= 1 && ["h"] || hours2 < thresholds2.h && ["hh", hours2] || days2 <= 1 && ["d"] || days2 < thresholds2.d && ["dd", days2];
  if (thresholds2.w != null) {
    a = a || weeks2 <= 1 && ["w"] || weeks2 < thresholds2.w && ["ww", weeks2];
  }
  a = a || months2 <= 1 && ["M"] || months2 < thresholds2.M && ["MM", months2] || years2 <= 1 && ["y"] || ["yy", years2];
  a[2] = withoutSuffix;
  a[3] = +posNegDuration > 0;
  a[4] = locale2;
  return substituteTimeAgo.apply(null, a);
}
function getSetRelativeTimeRounding(roundingFunction) {
  if (roundingFunction === void 0) {
    return round$1;
  }
  if (typeof roundingFunction === "function") {
    round$1 = roundingFunction;
    return true;
  }
  return false;
}
function getSetRelativeTimeThreshold(threshold, limit) {
  if (thresholds[threshold] === void 0) {
    return false;
  }
  if (limit === void 0) {
    return thresholds[threshold];
  }
  thresholds[threshold] = limit;
  if (threshold === "s") {
    thresholds.ss = limit - 1;
  }
  return true;
}
function humanize(argWithSuffix, argThresholds) {
  if (!this.isValid()) {
    return this.localeData().invalidDate();
  }
  var withSuffix = false, th = thresholds, locale2, output;
  if (typeof argWithSuffix === "object") {
    argThresholds = argWithSuffix;
    argWithSuffix = false;
  }
  if (typeof argWithSuffix === "boolean") {
    withSuffix = argWithSuffix;
  }
  if (typeof argThresholds === "object") {
    th = Object.assign({}, thresholds, argThresholds);
    if (argThresholds.s != null && argThresholds.ss == null) {
      th.ss = argThresholds.s - 1;
    }
  }
  locale2 = this.localeData();
  output = relativeTime$1(this, !withSuffix, th, locale2);
  if (withSuffix) {
    output = locale2.pastFuture(+this, output);
  }
  return locale2.postformat(output);
}
var abs$1 = Math.abs;
function sign(x) {
  return (x > 0) - (x < 0) || +x;
}
function toISOString$1() {
  if (!this.isValid()) {
    return this.localeData().invalidDate();
  }
  var seconds2 = abs$1(this._milliseconds) / 1e3, days2 = abs$1(this._days), months2 = abs$1(this._months), minutes2, hours2, years2, s, total = this.asSeconds(), totalSign, ymSign, daysSign, hmsSign;
  if (!total) {
    return "P0D";
  }
  minutes2 = absFloor(seconds2 / 60);
  hours2 = absFloor(minutes2 / 60);
  seconds2 %= 60;
  minutes2 %= 60;
  years2 = absFloor(months2 / 12);
  months2 %= 12;
  s = seconds2 ? seconds2.toFixed(3).replace(/\.?0+$/, "") : "";
  totalSign = total < 0 ? "-" : "";
  ymSign = sign(this._months) !== sign(total) ? "-" : "";
  daysSign = sign(this._days) !== sign(total) ? "-" : "";
  hmsSign = sign(this._milliseconds) !== sign(total) ? "-" : "";
  return totalSign + "P" + (years2 ? ymSign + years2 + "Y" : "") + (months2 ? ymSign + months2 + "M" : "") + (days2 ? daysSign + days2 + "D" : "") + (hours2 || minutes2 || seconds2 ? "T" : "") + (hours2 ? hmsSign + hours2 + "H" : "") + (minutes2 ? hmsSign + minutes2 + "M" : "") + (seconds2 ? hmsSign + s + "S" : "");
}
var proto$2 = Duration.prototype;
proto$2.isValid = isValid$1;
proto$2.abs = abs;
proto$2.add = add$1;
proto$2.subtract = subtract$1;
proto$2.as = as;
proto$2.asMilliseconds = asMilliseconds;
proto$2.asSeconds = asSeconds;
proto$2.asMinutes = asMinutes;
proto$2.asHours = asHours;
proto$2.asDays = asDays;
proto$2.asWeeks = asWeeks;
proto$2.asMonths = asMonths;
proto$2.asQuarters = asQuarters;
proto$2.asYears = asYears;
proto$2.valueOf = valueOf$1;
proto$2._bubble = bubble;
proto$2.clone = clone$1;
proto$2.get = get$2;
proto$2.milliseconds = milliseconds;
proto$2.seconds = seconds;
proto$2.minutes = minutes;
proto$2.hours = hours;
proto$2.days = days;
proto$2.weeks = weeks;
proto$2.months = months;
proto$2.years = years;
proto$2.humanize = humanize;
proto$2.toISOString = toISOString$1;
proto$2.toString = toISOString$1;
proto$2.toJSON = toISOString$1;
proto$2.locale = locale;
proto$2.localeData = localeData;
proto$2.toIsoString = deprecate(
  "toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",
  toISOString$1
);
proto$2.lang = lang;
addFormatToken("X", 0, 0, "unix");
addFormatToken("x", 0, 0, "valueOf");
addRegexToken("x", matchSigned);
addRegexToken("X", matchTimestamp);
addParseToken("X", function(input2, array2, config) {
  config._d = new Date(parseFloat(input2) * 1e3);
});
addParseToken("x", function(input2, array2, config) {
  config._d = new Date(toInt(input2));
});
//! moment.js
hooks.version = "2.29.4";
setHookCallback(createLocal);
hooks.fn = proto;
hooks.min = min$1;
hooks.max = max$1;
hooks.now = now;
hooks.utc = createUTC;
hooks.unix = createUnix;
hooks.months = listMonths;
hooks.isDate = isDate;
hooks.locale = getSetGlobalLocale;
hooks.invalid = createInvalid;
hooks.duration = createDuration;
hooks.isMoment = isMoment;
hooks.weekdays = listWeekdays;
hooks.parseZone = createInZone;
hooks.localeData = getLocale;
hooks.isDuration = isDuration;
hooks.monthsShort = listMonthsShort;
hooks.weekdaysMin = listWeekdaysMin;
hooks.defineLocale = defineLocale;
hooks.updateLocale = updateLocale;
hooks.locales = listLocales;
hooks.weekdaysShort = listWeekdaysShort;
hooks.normalizeUnits = normalizeUnits;
hooks.relativeTimeRounding = getSetRelativeTimeRounding;
hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
hooks.calendarFormat = getCalendarFormat;
hooks.prototype = proto;
hooks.HTML5_FMT = {
  DATETIME_LOCAL: "YYYY-MM-DDTHH:mm",
  // <input type="datetime-local" />
  DATETIME_LOCAL_SECONDS: "YYYY-MM-DDTHH:mm:ss",
  // <input type="datetime-local" step="1" />
  DATETIME_LOCAL_MS: "YYYY-MM-DDTHH:mm:ss.SSS",
  // <input type="datetime-local" step="0.001" />
  DATE: "YYYY-MM-DD",
  // <input type="date" />
  TIME: "HH:mm",
  // <input type="time" />
  TIME_SECONDS: "HH:mm:ss",
  // <input type="time" step="1" />
  TIME_MS: "HH:mm:ss.SSS",
  // <input type="time" step="0.001" />
  WEEK: "GGGG-[W]WW",
  // <input type="week" />
  MONTH: "YYYY-MM"
  // <input type="month" />
};
const createElement = (tag, attrs, children = []) => {
  const element = document.createElementNS("http://www.w3.org/2000/svg", tag);
  Object.keys(attrs).forEach((name) => {
    element.setAttribute(name, String(attrs[name]));
  });
  if (children.length) {
    children.forEach((child) => {
      const childElement = createElement(...child);
      element.appendChild(childElement);
    });
  }
  return element;
};
var createElement$1 = ([tag, attrs, children]) => createElement(tag, attrs, children);
const defaultAttributes$1 = {
  xmlns: "http://www.w3.org/2000/svg",
  width: 24,
  height: 24,
  viewBox: "0 0 24 24",
  fill: "none",
  stroke: "currentColor",
  "stroke-width": 2,
  "stroke-linecap": "round",
  "stroke-linejoin": "round"
};
const EyeOff$1 = [
  "svg",
  defaultAttributes$1,
  [
    ["path", { d: "M9.88 9.88a3 3 0 1 0 4.24 4.24" }],
    [
      "path",
      {
        d: "M10.73 5.08A10.43 10.43 0 0 1 12 5c7 0 10 7 10 7a13.16 13.16 0 0 1-1.67 2.68"
      }
    ],
    [
      "path",
      {
        d: "M6.61 6.61A13.526 13.526 0 0 0 2 12s3 7 10 7a9.74 9.74 0 0 0 5.39-1.61"
      }
    ],
    ["line", { x1: "2", x2: "22", y1: "2", y2: "22" }]
  ]
];
const Eye$1 = [
  "svg",
  defaultAttributes$1,
  [
    ["path", { d: "M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7Z" }],
    ["circle", { cx: "12", cy: "12", r: "3" }]
  ]
];
const dom$1 = dom = (() => {
  const getNodeList = (arg) => {
    if (typeof arg === "string" && arg.trim().slice(0, 1) !== "<") {
      return document.querySelectorAll(arg);
    } else if (typeof arg === "string" && arg.trim().slice(0, 1) === "<") {
      const dom2 = domParser(arg);
      return [dom2];
    } else if (typeof arg === "object" && arg instanceof NodeList) {
      return arg;
    } else if (typeof arg === "object" && arg instanceof HTMLElement) {
      return [arg];
    } else if (typeof arg === "object" && arg instanceof SVGElement) {
      return [arg];
    } else {
      return arg;
    }
  };
  const domParser = (arg) => {
    const parser = new DOMParser(), content = "text/html", DOM = parser.parseFromString(arg, content);
    return DOM.body.childNodes[0];
  };
  const addEvent = (nodeList, event, callback) => {
    nodeList[event] = callback;
  };
  const uuidv4 = () => {
    return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, (c) => {
      let r = Math.random() * 16 | 0, v = c == "x" ? r : r & 3 | 8;
      return v.toString(16);
    });
  };
  const eventPath = (evt) => {
    let path = evt.composedPath && evt.composedPath() || evt.path, target = evt.target;
    if (path != null) {
      return path.indexOf(window) < 0 ? path.concat(window) : path;
    }
    if (target === window) {
      return [window];
    }
    function getParents(node, memo) {
      memo = memo || [];
      let parentNode = node.parentNode;
      if (!parentNode) {
        return memo;
      } else {
        return getParents(parentNode, memo.concat(parentNode));
      }
    }
    return [target].concat(getParents(target), window);
  };
  const addEvents = (nodeList) => {
    addEvent(nodeList, "on", (arg1, arg2, arg3) => {
      nodeList.forEach((node) => {
        node.addEventListener(
          arg1,
          (e) => {
            const uuid = uuidv4();
            if (typeof arg2 === "string") {
              eventPath(e).every((parentNode) => {
                if (parentNode.matches && parentNode.matches(arg2)) {
                  parentNode[uuid] = arg3;
                  parentNode[uuid](parentNode);
                  delete parentNode[uuid];
                  return false;
                } else {
                  return true;
                }
              });
            } else {
              node[uuid] = arg2;
              node[uuid](e);
              delete node[uuid];
            }
          },
          false
        );
      });
      return nodeList;
    });
    addEvent(nodeList, "css", (arg1, arg2) => {
      if (arg2 === void 0 && typeof arg1 !== "object") {
        return getComputedStyle(nodeList[0])[arg1];
      }
      nodeList.forEach((node) => {
        if (typeof arg1 === "object") {
          for (const [key, val] of Object.entries(arg1)) {
            node.style[key] = val;
          }
        } else {
          node.style[arg1] = arg2;
        }
      });
      addEvents(nodeList);
      return nodeList;
    });
    addEvent(nodeList, "slideUp", (arg1 = 300, arg2 = () => {
    }) => {
      nodeList.forEach((node) => {
        node.style.transitionProperty = "height, margin, padding";
        node.style.transitionDuration = arg1 + "ms";
        node.style.height = node.offsetHeight + "px";
        node.offsetHeight;
        node.style.overflow = "hidden";
        node.style.height = 0;
        node.style.paddingTop = 0;
        node.style.paddingBottom = 0;
        node.style.marginTop = 0;
        node.style.marginBottom = 0;
        window.setTimeout(() => {
          node.style.display = "none";
          node.style.removeProperty("height");
          node.style.removeProperty("padding-top");
          node.style.removeProperty("padding-bottom");
          node.style.removeProperty("margin-top");
          node.style.removeProperty("margin-bottom");
          node.style.removeProperty("overflow");
          node.style.removeProperty("transition-duration");
          node.style.removeProperty("transition-property");
          const uuid = uuidv4();
          node[uuid] = arg2;
          node[uuid](node);
          delete node[uuid];
        }, arg1);
      });
      addEvents(nodeList);
      return nodeList;
    });
    addEvent(nodeList, "slideDown", (arg1 = 300, arg2 = () => {
    }) => {
      nodeList.forEach((node) => {
        node.style.removeProperty("display");
        let display = window.getComputedStyle(node).display;
        if (display === "none")
          display = "block";
        node.style.display = display;
        let height = node.offsetHeight;
        node.style.overflow = "hidden";
        node.style.height = 0;
        node.style.paddingTop = 0;
        node.style.paddingBottom = 0;
        node.style.marginTop = 0;
        node.style.marginBottom = 0;
        node.offsetHeight;
        node.style.transitionProperty = "height, margin, padding";
        node.style.transitionDuration = arg1 + "ms";
        node.style.height = height + "px";
        node.style.removeProperty("padding-top");
        node.style.removeProperty("padding-bottom");
        node.style.removeProperty("margin-top");
        node.style.removeProperty("margin-bottom");
        window.setTimeout(() => {
          node.style.removeProperty("height");
          node.style.removeProperty("overflow");
          node.style.removeProperty("transition-duration");
          node.style.removeProperty("transition-property");
          const uuid = uuidv4();
          node[uuid] = arg2;
          node[uuid](node);
          delete node[uuid];
        }, arg1);
      });
      addEvents(nodeList);
      return nodeList;
    });
    addEvent(nodeList, "fadeOut", (arg1 = 300, arg2 = () => {
    }) => {
      nodeList.forEach((node) => {
        node.style.opacity = 1;
        node.style.transitionProperty = "opacity";
        node.style.transitionDuration = arg1 + "ms";
        node.style.opacity = 0;
        window.setTimeout(() => {
          node.style.display = "none";
          node.style.removeProperty("transition-property");
          node.style.removeProperty("transition-duration");
          node.style.removeProperty("opacity");
          const uuid = uuidv4();
          node[uuid] = arg2;
          node[uuid](node);
          delete node[uuid];
        }, arg1);
      });
      addEvents(nodeList);
      return nodeList;
    });
    addEvent(nodeList, "fadeIn", (arg1 = 300, arg2 = () => {
    }) => {
      nodeList.forEach((node) => {
        let display = window.getComputedStyle(node).display;
        if (display === "none")
          display = "block";
        node.style.display = display;
        node.style.opacity = 0;
        node.style.transitionProperty = "opacity";
        node.style.transitionDuration = arg1 + "ms";
        window.setTimeout(() => {
          node.style.opacity = 1;
          window.setTimeout(() => {
            node.style.removeProperty("transition-property");
            node.style.removeProperty("transition-duration");
            node.style.removeProperty("opacity");
          }, arg1);
          const uuid = uuidv4();
          node[uuid] = arg2;
          node[uuid](node);
          delete node[uuid];
        }, arg1);
      });
      addEvents(nodeList);
      return nodeList;
    });
    addEvent(nodeList, "hide", () => {
      nodeList.forEach((node) => {
        node.style.display = "none";
      });
      addEvents(nodeList);
      return nodeList;
    });
    addEvent(nodeList, "show", () => {
      nodeList.forEach((node) => {
        if (node.style.display === "none") {
          node.style.display = "block";
        }
      });
      addEvents(nodeList);
      return nodeList;
    });
    addEvent(nodeList, "clone", () => {
      let clonedNodes = [];
      nodeList.forEach((node) => {
        clonedNodes.push(node.cloneNode(true));
      });
      addEvents(clonedNodes);
      return clonedNodes;
    });
    addEvent(nodeList, "each", (arg1) => {
      nodeList.forEach((node, index2) => {
        const uuid = uuidv4();
        node[uuid] = arg1;
        node[uuid](index2, node);
        delete node[uuid];
      });
      addEvents(nodeList);
      return nodeList;
    });
    addEvent(nodeList, "find", (arg1) => {
      let results = [];
      nodeList.forEach((node) => {
        const matchedNodes = node.querySelectorAll(arg1);
        if (matchedNodes.length) {
          matchedNodes.forEach((matchedNode) => {
            results.push(matchedNode);
          });
        }
      });
      addEvents(results);
      return results;
    });
    addEvent(nodeList, "hasClass", (arg1) => {
      let found = false;
      nodeList.forEach((node) => {
        if (node.classList.contains(arg1))
          found = true;
      });
      return found;
    });
    addEvent(nodeList, "removeClass", (arg1) => {
      if (arg1.length) {
        arg1.split(" ").forEach((classname) => {
          nodeList.forEach((node) => {
            node.classList.remove(classname);
          });
        });
      }
      addEvents(nodeList);
      return nodeList;
    });
    addEvent(nodeList, "addClass", (arg1) => {
      if (arg1.length) {
        arg1.split(" ").forEach((classname) => {
          nodeList.forEach((node) => {
            node.classList.add(classname);
          });
        });
      }
      addEvents(nodeList);
      return nodeList;
    });
    addEvent(nodeList, "is", (arg1) => {
      if (typeof arg1 === "string") {
        return (nodeList[0].matches || nodeList[0].matchesSelector || nodeList[0].msMatchesSelector || nodeList[0].mozMatchesSelector || nodeList[0].webkitMatchesSelector || nodeList[0].oMatchesSelector).call(nodeList[0], arg1);
      } else {
        return nodeList[0] === arg1;
      }
    });
    addEvent(nodeList, "attr", (arg1, arg2) => {
      if (arg2 === void 0 && typeof arg1 !== "object") {
        if (nodeList[0] !== void 0) {
          const attr = nodeList[0].getAttribute(arg1);
          return attr === null ? void 0 : attr;
        } else {
          return void 0;
        }
      }
      nodeList.forEach((node) => {
        if (typeof arg1 === "object") {
          for (const [key, val] of Object.entries(arg1)) {
            node.setAttribute(key, val);
          }
        } else {
          node.setAttribute(arg1, arg2);
        }
      });
      addEvents(nodeList);
      return nodeList;
    });
    addEvent(nodeList, "removeAttr", (arg1) => {
      nodeList.forEach((node) => {
        node.removeAttribute(arg1);
      });
      addEvents(nodeList);
      return nodeList;
    });
    addEvent(nodeList, "data", (arg1, arg2) => {
      if (arg2 === void 0) {
        const attr = nodeList[0].getAttribute(`data-${arg1}`);
        return attr === null ? void 0 : attr;
      }
      nodeList.forEach((node) => {
        node.setAttribute(`data-${arg1}`, arg2);
      });
      addEvents(nodeList);
      return nodeList;
    });
    addEvent(nodeList, "width", (arg1) => {
      if (arg1 === void 0) {
        if (nodeList === window) {
          return parseInt(window.innerWidth);
        } else {
          return typeof nodeList[0] !== "undefined" ? parseInt(getComputedStyle(nodeList[0])["width"]) : null;
        }
      }
      if (nodeList === window) {
        window.resizeTo(arg1, window.innerHeight);
      } else {
        nodeList.forEach((node) => {
          node.style["width"] = arg1;
        });
      }
      addEvents(nodeList);
      return nodeList;
    });
    addEvent(nodeList, "height", (arg1) => {
      if (arg1 === void 0) {
        if (nodeList === window) {
          return parseInt(window.innerHeight);
        } else {
          return typeof nodeList[0] !== "undefined" ? parseInt(getComputedStyle(nodeList[0])["height"]) : null;
        }
      }
      if (nodeList === window) {
        window.resizeTo(window.innerWidth, arg1);
      } else {
        nodeList.forEach((node) => {
          node.style["height"] = arg1;
        });
      }
      addEvents(nodeList);
      return nodeList;
    });
    addEvent(nodeList, "css", (arg1, arg2) => {
      if (arg2 === void 0 && typeof arg1 !== "object") {
        return getComputedStyle(nodeList[0])[arg1];
      }
      nodeList.forEach((node) => {
        if (typeof arg1 === "object") {
          for (const [key, val] of Object.entries(arg1)) {
            node.style[key] = val;
          }
        } else {
          node.style[arg1] = arg2;
        }
      });
      addEvents(nodeList);
      return nodeList;
    });
    addEvent(nodeList, "replaceWith", (arg1) => {
      const replacerNodes = [];
      const argumentTypes = getNodeList(arg1);
      nodeList.forEach((node, key) => {
        argumentTypes.forEach((replacerNode) => {
          let dom2 = replacerNode;
          if (key > 0) {
            dom2 = replacerNode.cloneNode(true);
          }
          node.parentNode.insertBefore(dom2, node.nextSibling);
          replacerNodes.push(dom2);
        });
        node.remove();
      });
      addEvents(replacerNodes);
      return replacerNodes;
    });
    addEvent(nodeList, "insertAfter", (arg1) => {
      const insertedNodes = [];
      const argumentTypes = getNodeList(arg1);
      nodeList.forEach((node) => {
        argumentTypes.forEach((targetNode, key) => {
          let dom2 = node;
          if (key > 0) {
            dom2 = node.cloneNode(true);
          }
          targetNode.parentNode.insertBefore(dom2, targetNode.nextSibling);
          insertedNodes.push(dom2);
        });
      });
      addEvents(insertedNodes);
      return insertedNodes;
    });
    addEvent(nodeList, "appendTo", (arg1) => {
      const appendedNodes = [];
      const argumentTypes = getNodeList(arg1);
      nodeList.forEach((node) => {
        argumentTypes.forEach((targetNode, key) => {
          let dom2 = node;
          if (key > 0) {
            dom2 = node.cloneNode(true);
          }
          targetNode.appendChild(dom2);
          appendedNodes.push(dom2);
        });
      });
      addEvents(appendedNodes);
      return appendedNodes;
    });
    addEvent(nodeList, "append", (arg1) => {
      const argumentTypes = getNodeList(arg1);
      nodeList.forEach((node, key) => {
        argumentTypes.forEach((appendNode) => {
          let dom2 = appendNode;
          if (key > 0) {
            dom2 = appendNode.cloneNode(true);
          }
          node.appendChild(dom2);
        });
      });
      addEvents(nodeList);
      return nodeList;
    });
    addEvent(nodeList, "remove", () => {
      nodeList.forEach((node) => {
        if (node.parentNode !== null) {
          node.parentNode.removeChild(node);
        }
      });
      addEvents(nodeList);
      return nodeList;
    });
    addEvent(nodeList, "first", () => {
      const firstNode = nodeList[0] !== void 0 ? [nodeList[0]] : [];
      addEvents(firstNode);
      return firstNode;
    });
    addEvent(nodeList, "last", () => {
      const lastNodeList = nodeList[nodeList.length - 1] !== void 0 ? [nodeList[nodeList.length - 1]] : [];
      addEvents(lastNodeList);
      return lastNodeList;
    });
    addEvent(nodeList, "val", (arg1) => {
      if (arg1 === void 0) {
        if (nodeList[0] instanceof HTMLSelectElement && nodeList[0].multiple) {
          const selectedOptions = [];
          for (const selectedOption of nodeList[0].selectedOptions) {
            selectedOptions.push(selectedOption.value);
          }
          return selectedOptions;
        } else {
          return nodeList[0].value;
        }
      }
      nodeList.forEach((node) => {
        if (node instanceof HTMLSelectElement) {
          node.value = "";
          if (typeof arg1 !== "object") {
            arg1 = [arg1];
          }
          for (const value of arg1) {
            const selectedOption = Array.from(node).find(
              (option) => option.value == value
            );
            if (selectedOption !== void 0) {
              selectedOption.selected = true;
            }
          }
        } else {
          node.value = arg1;
        }
      });
      addEvents(nodeList);
      return nodeList;
    });
    addEvent(nodeList, "html", (arg1) => {
      if (arg1 === void 0) {
        return nodeList[0].innerHTML;
      }
      nodeList.forEach((node) => {
        node.innerHTML = arg1;
      });
      addEvents(nodeList);
      return nodeList;
    });
    addEvent(nodeList, "text", (arg1) => {
      if (arg1 === void 0) {
        return nodeList[0].textContent;
      }
      nodeList.forEach((node) => {
        node.textContent = arg1;
      });
      addEvents(nodeList);
      return nodeList;
    });
    addEvent(nodeList, "filter", (arg1) => {
      let results = [];
      nodeList.forEach((node, index2) => {
        const uuid = uuidv4();
        node[uuid] = arg1;
        const filter = node[uuid](index2, node);
        delete node[uuid];
        if (filter) {
          results.push(node);
        }
      });
      addEvents(results);
      return results;
    });
    addEvent(nodeList, "closest", (arg1) => {
      let results = [];
      nodeList.forEach((node) => {
        const matchedNode = node.closest(arg1);
        if (matchedNode !== null && !results.filter((resNode) => resNode === matchedNode).length)
          results.push(matchedNode);
      });
      addEvents(results);
      return results;
    });
    addEvent(nodeList, "children", (arg1) => {
      let results = [];
      nodeList.forEach((node) => {
        for (const matchedNode of node.children) {
          if (arg1 === void 0) {
            results.push(matchedNode);
          } else {
            for (const childNode of node.querySelectorAll(arg1)) {
              if (childNode === matchedNode)
                results.push(childNode);
            }
          }
        }
      });
      addEvents(results);
      return results;
    });
    addEvent(nodeList, "parent", () => {
      let results = [];
      nodeList.forEach((node) => {
        const matchedNode = node.parentNode;
        if (matchedNode !== null && !results.filter((resNode) => resNode === matchedNode).length)
          results.push(matchedNode);
      });
      addEvents(results);
      return results;
    });
    addEvent(nodeList, "prev", () => {
      let results = [];
      nodeList.forEach((node) => {
        if (node.previousElementSibling !== null) {
          results.push(node.previousElementSibling);
        }
      });
      addEvents(results);
      return results;
    });
    addEvent(nodeList, "next", () => {
      let results = [];
      nodeList.forEach((node) => {
        if (node.nextElementSibling !== null) {
          results.push(node.nextElementSibling);
        }
      });
      addEvents(results);
      return results;
    });
    addEvent(nodeList, "off", () => {
      let results = [];
      nodeList.forEach((node) => {
        let dom2 = node.cloneNode(true);
        node.parentNode.replaceChild(dom2, node);
        results.push(dom2);
      });
      addEvents(results);
      return results;
    });
  };
  return window.dom = (arg) => {
    const nodeList = getNodeList(arg);
    addEvents(nodeList);
    return nodeList;
  };
})();
const _hoisted_1$9 = { class: "h-screen w-full flex justify-center items-center bg-[#DDFBDF] bg-no-repeat bg-cover bg-center bg-fixed" };
const _hoisted_2$9 = { class: "shadow-2xl flex items-center rounded-3xl z-10 overflow-hidden w-1/3 h-3/4 bg-white" };
const _hoisted_3$9 = { class: "flex min-h-full mx-auto justify-center px-4" };
const _hoisted_4$9 = { class: "py-12" };
const _hoisted_5$9 = /* @__PURE__ */ createBaseVNode("div", null, [
  /* @__PURE__ */ createBaseVNode("img", {
    class: "mx-auto h-28 w-auto hover:scale-125 transition duration-700 ease-in-out",
    src: LOGO,
    alt: "Your Company"
  }),
  /* @__PURE__ */ createBaseVNode("h1", { class: "mt-4 w-96 mb-6 text-center text-xl font-bold tracking-tight text-gray-900 uppercase" }, " Koperasi Binaniaga "),
  /* @__PURE__ */ createBaseVNode("h2", { class: "w-96 text-center text-sm text-slate-500" }, " Silahkan Login untuk masuk aplikasi ")
], -1);
const _hoisted_6$9 = {
  class: "space-y-10",
  action: "#",
  method: "POST"
};
const _hoisted_7$9 = /* @__PURE__ */ createBaseVNode("input", {
  type: "hidden",
  name: "remember",
  value: "true"
}, null, -1);
const _hoisted_8$9 = { class: "-space-y-px rounded-md shadow-sm" };
const _hoisted_9$9 = /* @__PURE__ */ createBaseVNode("label", {
  for: "email-address",
  class: "sr-only"
}, "Email/ Username", -1);
const _hoisted_10$9 = { class: "intro-x relative w-full" };
const _hoisted_11$8 = { class: "absolute inset-y-0 right-0 flex items-center px-2" };
const _hoisted_12$8 = {
  class: "bg-gray-200 hover:bg-gray-300 rounded px-2 py-1 text-sm text-gray-600 font-mono cursor-pointer js-password-label",
  for: "toggle"
};
const _hoisted_13$7 = {
  key: 0,
  disabled: "",
  class: "group relative flex w-full justify-center rounded-md h-9 bg-primary px-3 py-2 text-sm font-semibold text-white hover:bg-blue-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-primary"
};
const _hoisted_14$7 = { class: "absolute mx-auto text-center inset-y-0 flex items-center pl-3" };
const _hoisted_15$7 = /* @__PURE__ */ createBaseVNode("p", { class: "hidden xl:block ml-1" }, "Loading ...", -1);
const _hoisted_16$7 = { class: "absolute inset-y-0 left-0 flex items-center pl-3" };
const _hoisted_17$7 = { class: "w-96 text-center text-sm text-slate-400 mt-16" };
const _sfc_main$a = {
  __name: "Auth",
  setup(__props) {
    const swal = inject("$swal");
    const Auth = useAuthStore();
    const isLoading = ref(false);
    const date2 = ref(Date.now());
    const gagalLogin = ref(false);
    const dataPopup = ref("");
    const input_user = ref("");
    const input_password = ref("");
    const showPassword = () => {
      const password = document.querySelector(".js-password"), passwordLabel = document.querySelector(".js-password-label");
      if (password.type === "password") {
        password.type = "text";
        passwordLabel.replaceChild(createElement$1(EyeOff$1), passwordLabel.childNodes[0]);
      } else {
        password.type = "password";
        passwordLabel.replaceChild(createElement$1(Eye$1), passwordLabel.childNodes[0]);
      }
      password.focus();
    };
    watch(isLoading, async (newValue) => {
      try {
        if (newValue === true) {
          setTimeout(() => onLogin(), 100);
        }
      } catch (error) {
        swal("Failed Login " + error);
      }
    });
    const onLogin = () => {
      const email_user = input_user.value;
      const password = input_password.value;
      if (email_user.length > 0 && password.length > 0) {
        Auth.login(email_user, password).then((data) => {
          if (data.success == false) {
            dataPopup.value = data.data.message;
            gagalLogin.value = true;
            if (data.data.message == "unregistered username/e-mail") {
              input_user.value = "";
              input_password.value = "";
              swal({
                icon: "error",
                title: "Oops...",
                text: data.data.message
              });
            } else {
              input_password.value = "";
              swal({
                icon: "error",
                title: "Oops...",
                text: data.data.message
              });
            }
          }
          isLoading.value = false;
        }).catch((error) => {
          console.error(error);
          swal({
            icon: "error",
            title: "Error !!!",
            text: "Gagal Login " + JSON.stringify(error)
          });
          isLoading.value = false;
        });
      } else {
        dataPopup.value = "Email/Username dan Password tidak boleh kosong !";
        swal({
          icon: "error",
          title: "Oops...",
          text: dataPopup.value
        });
        gagalLogin.value = true;
        isLoading.value = false;
      }
    };
    onMounted(() => {
      dom$1("body").removeClass("main").removeClass("error-page").addClass("login");
      setInterval(() => {
        date2.value = Date.now();
      }, 1e3);
    });
    return (_ctx, _cache) => {
      const _component_EyeIcon = resolveComponent("EyeIcon");
      const _component_Loader_2Icon = resolveComponent("Loader-2Icon");
      const _component_LockIcon = resolveComponent("LockIcon");
      return openBlock(), createElementBlock("div", _hoisted_1$9, [
        createBaseVNode("div", _hoisted_2$9, [
          createBaseVNode("div", _hoisted_3$9, [
            createBaseVNode("div", _hoisted_4$9, [
              _hoisted_5$9,
              createBaseVNode("form", _hoisted_6$9, [
                _hoisted_7$9,
                createBaseVNode("div", _hoisted_8$9, [
                  createBaseVNode("div", null, [
                    _hoisted_9$9,
                    withDirectives(createBaseVNode("input", {
                      id: "email-address",
                      name: "email",
                      type: "email",
                      autocomplete: "email",
                      required: "",
                      "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => input_user.value = $event),
                      class: "relative block w-full rounded-t-md p-2 h-12 border-0 py-1.5 text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:z-10 sm:text-sm sm:leading-6",
                      placeholder: "Email/ Username"
                    }, null, 512), [
                      [vModelText, input_user.value]
                    ])
                  ]),
                  createBaseVNode("div", _hoisted_10$9, [
                    createBaseVNode("div", _hoisted_11$8, [
                      createBaseVNode("input", {
                        class: "hidden js-password-toggle",
                        onClick: _cache[1] || (_cache[1] = ($event) => showPassword()),
                        id: "toggle",
                        type: "checkbox"
                      }),
                      createBaseVNode("label", _hoisted_12$8, [
                        createVNode(_component_EyeIcon)
                      ])
                    ]),
                    withDirectives(createBaseVNode("input", {
                      onKeyup: _cache[2] || (_cache[2] = withKeys(($event) => isLoading.value = true, ["enter"])),
                      "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => input_password.value = $event),
                      class: "w-full p-2 h-12 rounded-b-md border-0 py-1.5 text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:z-10 sm:text-sm sm:leading-6 px-3 pr-16 js-password",
                      id: "password",
                      type: "password",
                      autocomplete: "off",
                      placeholder: "Password"
                    }, null, 544), [
                      [vModelText, input_password.value]
                    ])
                  ])
                ]),
                createBaseVNode("div", null, [
                  isLoading.value ? (openBlock(), createElementBlock("button", _hoisted_13$7, [
                    createBaseVNode("span", _hoisted_14$7, [
                      createVNode(_component_Loader_2Icon, { class: "w-4 h-4 mr-2 animate-spin" }),
                      _hoisted_15$7
                    ])
                  ])) : (openBlock(), createElementBlock("button", {
                    key: 1,
                    onClick: _cache[4] || (_cache[4] = ($event) => isLoading.value = true),
                    type: "submit",
                    class: "group relative flex w-full justify-center rounded-md bg-primary px-3 py-2 text-sm font-semibold text-white hover:bg-blue-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-primary"
                  }, [
                    createBaseVNode("span", _hoisted_16$7, [
                      createVNode(_component_LockIcon, { class: "h-5 w-5 text-blue-500 group-hover:text-indigo-400" })
                    ]),
                    createTextVNode(" Sign in ")
                  ]))
                ])
              ]),
              createBaseVNode("h5", _hoisted_17$7, toDisplayString(unref(hooks)(date2.value).format("DD MMMM YYYY, HH:mm:ss")), 1)
            ])
          ])
        ])
      ]);
    };
  }
};
const request$5 = window.api.produkPinjaman;
const useProdukPinjamanStore = defineStore({
  id: "produk-pinjaman",
  state: () => ({
    rawItems: []
  }),
  getters: {
    items: (state) => state.rawItems
  },
  actions: {
    async readItem(search_type, search_data, sort_by, sort_mode, page_number, total_row_displayed) {
      try {
        const data = await request$5.fetchProduk(
          search_type,
          search_data,
          sort_by,
          sort_mode,
          page_number,
          total_row_displayed
        );
        if (data.success) {
          this.rawItems = data.data.rows;
          return { total_pages: data.data.total_page, perkiraan: data.data.perkiraan };
        } else if (!data.success && data.data.message == "token invalid") {
          Swal.fire({
            icon: "error",
            title: "Token Invalid",
            text: "Token Anda Invalid, silahkan login ulang"
          }).then((data2) => {
            localStorage.removeItem("user");
            router$1.push("/auth");
            window.location.reload();
          });
          return { total_pages: [], perkiraan: [] };
        }
      } catch (error) {
        throw new Error(error);
      }
    },
    async readLaporan(kantor, tanggal, resort, limit) {
      try {
        const data = await request$5.fetchLaporan(kantor, tanggal, resort, limit);
        if (data.success) {
          this.rawItems = data.data;
        }
      } catch (error) {
        throw new Error(error);
      }
    },
    async getItem(sandi) {
      try {
        const data = await request$5.getProduk(sandi);
        if (data.success) {
          return data.data.rows[0];
        }
      } catch (error) {
        throw new Error(error);
      }
    },
    async postItem(sandi, keterangan, kdhit, pembulatan, rate, periode, adm, prov, jurnal_pokok, jurnal_jasa, jurnal_denda, jurnal_adm, jurnal_prov, jurnal_yadit, jurnal_ppap, isEdit) {
      try {
        this.rawItems.push({
          sandi,
          keterangan,
          kdhit,
          pembulatan,
          rate,
          periode,
          adm,
          prov,
          jurnal_pokok,
          jurnal_jasa,
          jurnal_denda,
          jurnal_adm,
          jurnal_prov,
          jurnal_yadit,
          jurnal_ppap
        });
        await request$5.postProduk(
          sandi,
          keterangan,
          kdhit,
          pembulatan,
          rate,
          periode,
          adm,
          prov,
          jurnal_pokok,
          jurnal_jasa,
          jurnal_denda,
          jurnal_adm,
          jurnal_prov,
          jurnal_yadit,
          jurnal_ppap,
          isEdit
        );
      } catch (error) {
        throw new Error(error);
      }
    },
    async removeItem(sandi) {
      try {
        this.rawItems = this.rawItems.filter((item) => item.sandi !== sandi);
        const data = await request$5.deleteProduk(sandi);
      } catch (error) {
        throw new Error(error);
      }
    }
  }
});
const _hoisted_1$8 = { class: "mx-5 my-2 p-2 rounded-lg bg-slate-100" };
const _hoisted_2$8 = { class: "text-xs font-bold capitalize" };
const _hoisted_3$8 = {
  class: "relative -top-5 float-right",
  "aria-label": "Breadcrumb"
};
const _hoisted_4$8 = { class: "inline-flex items-center space-x-1 md:space-x-3" };
const _hoisted_5$8 = { class: "inline-flex items-center" };
const _hoisted_6$8 = {
  href: "javascript:void(0);",
  class: "inline-flex items-center text-xs font-medium text-gray-700 hover:text-blue-600 dark:text-gray-400 dark:hover:text-white"
};
const _hoisted_7$8 = ["src"];
const _hoisted_8$8 = { class: "flex items-center" };
const _hoisted_9$8 = {
  href: "javascript:void(0);",
  class: "ml-1 text-xs font-medium text-gray-700 hover:text-blue-600 md:ml-2 dark:text-gray-400 dark:hover:text-white"
};
const _hoisted_10$8 = { "aria-current": "page" };
const _hoisted_11$7 = { class: "flex items-center" };
const _hoisted_12$7 = { class: "ml-1 text-xs font-medium text-gray-500 md:ml-2 dark:text-gray-400 capitalize hover:text-blue-600 cursor-pointer" };
const _sfc_main$9 = {
  __name: "Breadcrumbs",
  props: {
    title: String,
    subTitle: String,
    icon: String
  },
  setup(__props) {
    return (_ctx, _cache) => {
      const _component_ChevronRightIcon = resolveComponent("ChevronRightIcon");
      return openBlock(), createElementBlock("header", _hoisted_1$8, [
        createBaseVNode("h1", _hoisted_2$8, toDisplayString(_ctx.$route.name.replace(/-/gi, " ")), 1),
        createBaseVNode("nav", _hoisted_3$8, [
          createBaseVNode("ol", _hoisted_4$8, [
            createBaseVNode("li", _hoisted_5$8, [
              createBaseVNode("a", _hoisted_6$8, [
                createBaseVNode("img", {
                  src: __props.icon,
                  alt: "transaksi",
                  class: "w-4 h-4 mx-2"
                }, null, 8, _hoisted_7$8),
                createTextVNode(" " + toDisplayString(__props.title), 1)
              ])
            ]),
            createBaseVNode("li", null, [
              createBaseVNode("div", _hoisted_8$8, [
                createVNode(_component_ChevronRightIcon, { class: "w-4 h-4 stroke-2 stroke-current text-gray-400" }),
                createBaseVNode("a", _hoisted_9$8, toDisplayString(__props.subTitle), 1)
              ])
            ]),
            createBaseVNode("li", _hoisted_10$8, [
              createBaseVNode("div", _hoisted_11$7, [
                createVNode(_component_ChevronRightIcon, { class: "w-4 h-4 stroke-2 stroke-current text-gray-400" }),
                createBaseVNode("span", _hoisted_12$7, toDisplayString(_ctx.$route.name.replace(/-/gi, " ")), 1)
              ])
            ])
          ])
        ])
      ]);
    };
  }
};
const SETTING = "" + new URL("setting-671ae59f.svg", import.meta.url).href;
const _hoisted_1$7 = { class: "relative top-0 bg-white w-full border-y-2 border-[#d0d3d4]" };
const _hoisted_2$7 = { class: "flex space-x-4 w-full justify-center m-auto px-5" };
const _hoisted_3$7 = { class: "grid grid-cols-8 xl:grid-cols-10 w-full h-10" };
const _hoisted_4$7 = /* @__PURE__ */ createBaseVNode("span", { class: "w-4 h-2 px-0.5 mx-auto my-[2px] stroke-2 stroke-current text-[8px] text-success font-bold" }, "CSV", -1);
const _hoisted_5$7 = /* @__PURE__ */ createBaseVNode("span", { class: "w-4 h-2 px-0.5 mx-auto my-[2px] stroke-2 stroke-current text-[8px] text-danger font-bold" }, "PDF", -1);
const _hoisted_6$7 = /* @__PURE__ */ createBaseVNode("i", { class: "fa-solid fa-check" }, null, -1);
const _hoisted_7$7 = {
  href: "javascript:history.go(0)",
  title: "Refresh All",
  class: "inline-block hover:text-primary align-middle text-center select-none border font-normal whitespace-no-wrap rounded no-underline h-9 mx-auto px-2 leading-tight text-xs bg-gray-100 text-gray-800 hover:bg-gray-200 btn-light-bordered"
};
const _hoisted_8$7 = { class: "flex order-2 w-full h-10" };
const _hoisted_9$7 = {
  id: "pagination",
  class: "mx-auto"
};
const _hoisted_10$7 = { class: "inline-flex align-middle leading-tight text-xs" };
const _hoisted_11$6 = { class: "relative inline-flex align-middle py-1 leading-tight text-xs" };
const _hoisted_12$6 = { class: "flex items-stretch w-full" };
const _hoisted_13$6 = { class: "relative inline-flex align-middle py-1 leading-tight text-xs" };
const _hoisted_14$6 = { class: "items-center justify-center w-full flex h-10" };
const _hoisted_15$6 = /* @__PURE__ */ createBaseVNode("option", { value: "50" }, "50", -1);
const _hoisted_16$6 = /* @__PURE__ */ createBaseVNode("option", { value: "75" }, "75", -1);
const _hoisted_17$6 = /* @__PURE__ */ createBaseVNode("option", { value: "100" }, "100", -1);
const _hoisted_18$6 = [
  _hoisted_15$6,
  _hoisted_16$6,
  _hoisted_17$6
];
const _hoisted_19$6 = {
  class: "relative flex items-stretch w-full",
  id: "search-input-group"
};
const _hoisted_20$6 = ["placeholder"];
const _hoisted_21$6 = { class: "input-group-append" };
const _hoisted_22$5 = { class: "input-group-append" };
const _hoisted_23$5 = /* @__PURE__ */ createBaseVNode("option", { value: "keterangan" }, "Keterangan", -1);
const _hoisted_24$5 = /* @__PURE__ */ createBaseVNode("option", { value: "sandi" }, "Sandi", -1);
const _hoisted_25$5 = [
  _hoisted_23$5,
  _hoisted_24$5
];
const _hoisted_26$5 = { class: "flex flex-col h-[80vh] min-[1537px]:h-[85vh] shadow-md rounded-lg" };
const _hoisted_27$4 = { class: "flex-grow overflow-auto" };
const _hoisted_28$3 = { class: "relative w-full text-xs text-left text-gray-500 table-interval" };
const _hoisted_29$3 = { class: "text-xs font-bold text-gray-800 uppercase bg-blue-200 sticky top-0 z-10 table-fixed" };
const _hoisted_30$3 = {
  scope: "col",
  class: "p-2 border pl-3"
};
const _hoisted_31$4 = { class: "flex items-center" };
const _hoisted_32$5 = /* @__PURE__ */ createBaseVNode("label", {
  for: "checkbox-all-search",
  class: "sr-only"
}, "checkbox", -1);
const _hoisted_33$5 = /* @__PURE__ */ createBaseVNode("th", {
  scope: "col",
  class: "text-center uppercase border"
}, "Actions", -1);
const _hoisted_34$5 = { class: "overflow-y-scroll" };
const _hoisted_35$6 = ["anggota", "value"];
const _hoisted_36$6 = { class: "w-4 border-r border-b font-medium p-0 pl-3" };
const _hoisted_37$6 = { class: "flex items-center" };
const _hoisted_38$6 = /* @__PURE__ */ createBaseVNode("span", { class: "hidden cursor-pointer -ml-[9px] mr-[1px] rotate-90 group-hover:block text-black" }, ":::", -1);
const _hoisted_39$6 = ["value"];
const _hoisted_40$6 = ["onDblclick"];
const _hoisted_41$6 = ["onDblclick"];
const _hoisted_42$6 = ["onDblclick"];
const _hoisted_43$6 = ["onDblclick"];
const _hoisted_44$6 = { class: "min-w-max border-r border-b font-medium p-1" };
const _hoisted_45$6 = { class: "flex justify-center" };
const _hoisted_46$6 = ["onClick"];
const _hoisted_47$6 = ["onClick"];
const _hoisted_48$5 = { class: "fixed intleft-2 right-0 top-0 bottom-0 w-full h-[100vh] z-50 overflow-hidden bg-gray-500 opacity-75 flex flex-col items-center justify-center" };
const _hoisted_49$5 = /* @__PURE__ */ createBaseVNode("h2", { class: "text-center text-white text-xl font-semibold" }, "Loading...", -1);
const _hoisted_50$5 = /* @__PURE__ */ createBaseVNode("p", { class: "w-1/3 text-center text-white" }, "Sedang Memuat Data", -1);
const _hoisted_51$5 = /* @__PURE__ */ createBaseVNode("p", { class: "w-1/3 text-center text-white" }, " Ini mungkin memakan waktu beberapa saat, tolong jangan tutup halaman ini. ", -1);
const _hoisted_52$5 = { class: "font-medium text-base mr-auto" };
const _hoisted_53$5 = { key: 0 };
const _hoisted_54$5 = { key: 1 };
const _hoisted_55$5 = { key: 2 };
const _hoisted_56$4 = { key: 3 };
const _hoisted_57$4 = ["onSubmit"];
const _hoisted_58$4 = { class: "bg-slate-100 p-3 rounded-t" };
const _hoisted_59$4 = { class: "text-gray-700 flex items-center mx-auto w-9/12" };
const _hoisted_60$4 = /* @__PURE__ */ createBaseVNode("div", { class: "mb-1 w-2/5 text-xs" }, [
  /* @__PURE__ */ createBaseVNode("label", null, "Kode Produk")
], -1);
const _hoisted_61$5 = /* @__PURE__ */ createBaseVNode("span", { class: "mr-3 pb-2" }, ":", -1);
const _hoisted_62$5 = { class: "w-3/5 flex-grow" };
const _hoisted_63$5 = { class: "text-gray-700 flex items-center mx-auto w-9/12" };
const _hoisted_64$5 = /* @__PURE__ */ createBaseVNode("div", { class: "mb-1 w-2/5 text-xs" }, [
  /* @__PURE__ */ createBaseVNode("label", null, "Nama Produk")
], -1);
const _hoisted_65$5 = /* @__PURE__ */ createBaseVNode("span", { class: "mr-3 pb-2" }, ":", -1);
const _hoisted_66$5 = { class: "w-3/5 flex-grow" };
const _hoisted_67$5 = { class: "text-gray-700 flex items-center mx-auto w-9/12" };
const _hoisted_68$5 = /* @__PURE__ */ createBaseVNode("div", { class: "mb-1 w-2/5 text-xs" }, [
  /* @__PURE__ */ createBaseVNode("label", null, "Kode Perhitungan")
], -1);
const _hoisted_69$5 = /* @__PURE__ */ createBaseVNode("span", { class: "mr-3 pb-2" }, ":", -1);
const _hoisted_70$5 = { class: "w-3/5 flex-grow" };
const _hoisted_71$5 = { class: "text-gray-700 flex items-center mx-auto w-9/12" };
const _hoisted_72$5 = /* @__PURE__ */ createBaseVNode("div", { class: "mb-1 w-2/5 text-xs" }, [
  /* @__PURE__ */ createBaseVNode("label", null, "Pembulatan Angsuran")
], -1);
const _hoisted_73$5 = /* @__PURE__ */ createBaseVNode("span", { class: "mr-3 pb-2" }, ":", -1);
const _hoisted_74$5 = { class: "w-3/5 flex-grow" };
const _hoisted_75$5 = /* @__PURE__ */ createBaseVNode("div", { class: "w-full uppercase px-2 text-center bg-slate-200 font-medium text-sm" }, " Default Isian ", -1);
const _hoisted_76$5 = { class: "bg-slate-100 p-3 rounded-t" };
const _hoisted_77$5 = { class: "text-gray-700 flex items-center mx-auto w-9/12" };
const _hoisted_78$5 = /* @__PURE__ */ createBaseVNode("div", { class: "mb-1 w-2/5 text-xs" }, [
  /* @__PURE__ */ createBaseVNode("label", null, "Jasa Perbulan (%)")
], -1);
const _hoisted_79$5 = /* @__PURE__ */ createBaseVNode("span", { class: "mr-3 pb-2" }, ":", -1);
const _hoisted_80$5 = { class: "w-3/5 flex-grow" };
const _hoisted_81$5 = { class: "text-gray-700 flex items-center mx-auto w-9/12 mb-1" };
const _hoisted_82$5 = /* @__PURE__ */ createBaseVNode("div", { class: "mb-1 w-2/5 text-xs" }, [
  /* @__PURE__ */ createBaseVNode("label", null, "Periode Pembayaran")
], -1);
const _hoisted_83$5 = /* @__PURE__ */ createBaseVNode("span", { class: "mr-3 pb-2" }, ":", -1);
const _hoisted_84$5 = { class: "w-3/5 flex-grow" };
const _hoisted_85$5 = /* @__PURE__ */ createBaseVNode("option", { value: "HARIAN" }, "HARIAN", -1);
const _hoisted_86$5 = /* @__PURE__ */ createBaseVNode("option", { value: "PASARAN" }, "PASARAN", -1);
const _hoisted_87$5 = /* @__PURE__ */ createBaseVNode("option", { value: "MINGGUAN" }, "MINGGUAN", -1);
const _hoisted_88$5 = /* @__PURE__ */ createBaseVNode("option", { value: "BULANAN        " }, "BULANAN", -1);
const _hoisted_89$5 = /* @__PURE__ */ createBaseVNode("option", { value: "MUSIMAN" }, "MUSIMAN", -1);
const _hoisted_90$5 = [
  _hoisted_85$5,
  _hoisted_86$5,
  _hoisted_87$5,
  _hoisted_88$5,
  _hoisted_89$5
];
const _hoisted_91$5 = { class: "text-gray-700 flex items-center mx-auto w-9/12" };
const _hoisted_92$5 = /* @__PURE__ */ createBaseVNode("div", { class: "mb-1 w-2/5 text-xs" }, [
  /* @__PURE__ */ createBaseVNode("label", null, "Administrasi (%)")
], -1);
const _hoisted_93$5 = /* @__PURE__ */ createBaseVNode("span", { class: "mr-3 pb-2" }, ":", -1);
const _hoisted_94$5 = { class: "w-3/5 flex-grow" };
const _hoisted_95$5 = { class: "text-gray-700 flex items-center mx-auto w-9/12" };
const _hoisted_96$5 = /* @__PURE__ */ createBaseVNode("div", { class: "mb-1 w-2/5 text-xs" }, [
  /* @__PURE__ */ createBaseVNode("label", null, "Provisi (%)")
], -1);
const _hoisted_97$5 = /* @__PURE__ */ createBaseVNode("span", { class: "mr-3 pb-2" }, ":", -1);
const _hoisted_98$5 = { class: "w-3/5 flex-grow" };
const _hoisted_99$5 = /* @__PURE__ */ createBaseVNode("div", { class: "w-full uppercase px-2 text-center bg-slate-200 font-medium text-sm" }, " Rekening Jurnal Akuntansi ", -1);
const _hoisted_100$5 = { class: "bg-slate-100 p-3 rounded-b" };
const _hoisted_101$5 = { class: "text-gray-700 flex items-center mx-auto w-9/12 mb-1" };
const _hoisted_102$5 = /* @__PURE__ */ createBaseVNode("div", { class: "mb-1 w-2/5 text-xs" }, [
  /* @__PURE__ */ createBaseVNode("label", null, "Jurnal Pokok Pinjaman")
], -1);
const _hoisted_103$5 = /* @__PURE__ */ createBaseVNode("span", { class: "mr-3 pb-2" }, ":", -1);
const _hoisted_104$5 = { class: "w-3/5 flex-grow" };
const _hoisted_105$5 = /* @__PURE__ */ createBaseVNode("option", {
  value: "-",
  selected: "",
  disabled: ""
}, "-", -1);
const _hoisted_106$5 = ["value"];
const _hoisted_107$5 = { class: "text-gray-700 flex items-center mx-auto w-9/12 mb-1" };
const _hoisted_108$5 = /* @__PURE__ */ createBaseVNode("div", { class: "mb-1 w-2/5 text-xs" }, [
  /* @__PURE__ */ createBaseVNode("label", null, "Jurnal Jasa Pinjaman")
], -1);
const _hoisted_109$5 = /* @__PURE__ */ createBaseVNode("span", { class: "mr-3 pb-2" }, ":", -1);
const _hoisted_110$5 = { class: "w-3/5 flex-grow" };
const _hoisted_111$5 = /* @__PURE__ */ createBaseVNode("option", {
  value: "-",
  selected: "",
  disabled: ""
}, "-", -1);
const _hoisted_112$5 = ["value"];
const _hoisted_113$5 = { class: "text-gray-700 flex items-center mx-auto w-9/12 mb-1" };
const _hoisted_114$5 = /* @__PURE__ */ createBaseVNode("div", { class: "mb-1 w-2/5 text-xs" }, [
  /* @__PURE__ */ createBaseVNode("label", null, "Jurnal Denda Pinjaman")
], -1);
const _hoisted_115$5 = /* @__PURE__ */ createBaseVNode("span", { class: "mr-3 pb-2" }, ":", -1);
const _hoisted_116$5 = { class: "w-3/5 flex-grow" };
const _hoisted_117$4 = /* @__PURE__ */ createBaseVNode("option", {
  value: "-",
  selected: "",
  disabled: ""
}, "-", -1);
const _hoisted_118$4 = ["value"];
const _hoisted_119$4 = { class: "text-gray-700 flex items-center mx-auto w-9/12 mb-1" };
const _hoisted_120$3 = /* @__PURE__ */ createBaseVNode("div", { class: "mb-1 w-2/5 text-xs" }, [
  /* @__PURE__ */ createBaseVNode("label", null, "Jurnal Administrasi")
], -1);
const _hoisted_121$3 = /* @__PURE__ */ createBaseVNode("span", { class: "mr-3 pb-2" }, ":", -1);
const _hoisted_122$3 = { class: "w-3/5 flex-grow" };
const _hoisted_123$3 = /* @__PURE__ */ createBaseVNode("option", {
  value: "-",
  selected: "",
  disabled: ""
}, "-", -1);
const _hoisted_124$3 = ["value"];
const _hoisted_125$3 = { class: "text-gray-700 flex items-center mx-auto w-9/12 mb-1" };
const _hoisted_126$3 = /* @__PURE__ */ createBaseVNode("div", { class: "mb-1 w-2/5 text-xs" }, [
  /* @__PURE__ */ createBaseVNode("label", null, "Jurnal Provisi")
], -1);
const _hoisted_127$3 = /* @__PURE__ */ createBaseVNode("span", { class: "mr-3 pb-2" }, ":", -1);
const _hoisted_128$3 = { class: "w-3/5 flex-grow" };
const _hoisted_129$3 = /* @__PURE__ */ createBaseVNode("option", {
  value: "-",
  selected: "",
  disabled: ""
}, "-", -1);
const _hoisted_130$3 = ["value"];
const _hoisted_131$3 = { class: "text-gray-700 flex items-center mx-auto w-9/12 mb-1" };
const _hoisted_132$3 = /* @__PURE__ */ createBaseVNode("div", { class: "mb-1 w-2/5 text-xs" }, [
  /* @__PURE__ */ createBaseVNode("label", null, "Jurnal Pend. Jasa Akrual")
], -1);
const _hoisted_133$3 = /* @__PURE__ */ createBaseVNode("span", { class: "mr-3 pb-2" }, ":", -1);
const _hoisted_134$3 = { class: "w-3/5 flex-grow" };
const _hoisted_135$3 = /* @__PURE__ */ createBaseVNode("option", {
  value: "-",
  selected: "",
  disabled: ""
}, "-", -1);
const _hoisted_136$3 = ["value"];
const _hoisted_137$3 = { class: "text-gray-700 flex items-center mx-auto w-9/12 mb-1" };
const _hoisted_138$3 = /* @__PURE__ */ createBaseVNode("div", { class: "mb-1 w-2/5 text-xs" }, [
  /* @__PURE__ */ createBaseVNode("label", null, "Jurnal PPAP")
], -1);
const _hoisted_139$3 = /* @__PURE__ */ createBaseVNode("span", { class: "mr-3 pb-2" }, ":", -1);
const _hoisted_140$3 = { class: "w-3/5 flex-grow" };
const _hoisted_141$3 = /* @__PURE__ */ createBaseVNode("option", {
  value: "-",
  selected: "",
  disabled: ""
}, "-", -1);
const _hoisted_142$3 = ["value"];
const _hoisted_143$3 = /* @__PURE__ */ createBaseVNode("button", {
  type: "submit",
  form: "produkPinjamanForm",
  class: "btn btn-primary w-32"
}, "Simpan", -1);
const _hoisted_144$3 = { class: "p-5 text-center" };
const _hoisted_145$3 = /* @__PURE__ */ createBaseVNode("div", { class: "text-3xl mt-5" }, "Apakah Anda Yakin ?", -1);
const _hoisted_146$3 = { class: "text-slate-500 mt-2" };
const _hoisted_147$3 = { key: 0 };
const _hoisted_148$3 = /* @__PURE__ */ createBaseVNode("br", null, null, -1);
const _hoisted_149$3 = /* @__PURE__ */ createBaseVNode("br", null, null, -1);
const _hoisted_150$3 = { class: "px-5 pb-8 text-center" };
const _sfc_main$8 = {
  __name: "ProdukPinjaman",
  setup(__props) {
    const swal = inject("$swal");
    const produkPinjaman = useProdukPinjamanStore();
    const Perkiraan_list = ref("");
    const isLoading = ref(false);
    const isAdd = ref(false);
    const isEdit = ref(false);
    const isView = ref(false);
    const modal_utama = ref(false);
    const modal_delete = ref(false);
    const sort_by = ref("sandi");
    const sort_mode = ref(true);
    const search_data = ref("");
    const search_type = ref("sandi");
    const page_number = ref(1);
    const total_pages = ref(0);
    const row_per_page = ref(50);
    const allSelected = ref(false);
    const userIds = ref([]);
    const kode_produk = ref("");
    const nama_produk = ref("");
    const kode_perhitungan = ref("");
    const pembulatan_angsuran = ref("");
    const jasa_perbulan = ref("");
    const periode_pembayaran = ref("");
    const administrasi = ref("");
    const provisi = ref("");
    const jurnal_pokok_pinjaman = ref("");
    const jurnal_jasa_pinjaman = ref("");
    const jurnal_denda_pinjaman = ref("");
    const jurnal_admin = ref("");
    const jurnal_provisi = ref("");
    const jurnal_akrual = ref("");
    const jurnal_ppap = ref("");
    const addGet = () => {
      isAdd.value = true;
      modal_utama.value = true;
    };
    const editGet = async (e) => {
      const anggota = await produkPinjaman.getItem(e);
      isEdit.value = true;
      kode_produk.value = anggota.sandi;
      nama_produk.value = anggota.keterangan;
      kode_perhitungan.value = anggota.kdhit;
      pembulatan_angsuran.value = anggota.pembulatan;
      jasa_perbulan.value = anggota.rate;
      periode_pembayaran.value = anggota.periode;
      administrasi.value = anggota.adm;
      provisi.value = anggota.prov;
      jurnal_pokok_pinjaman.value = anggota.jurnal_pokok == "" ? "-" : anggota.jurnal_pokok;
      jurnal_jasa_pinjaman.value = anggota.jurnal_jasa == "" ? "-" : anggota.jurnal_jasa;
      jurnal_denda_pinjaman.value = anggota.jurnal_denda == "" ? "-" : anggota.jurnal_denda;
      jurnal_admin.value = anggota.jurnal_adm == "" ? "-" : anggota.jurnal_adm;
      jurnal_provisi.value = anggota.jurnal_prov == "" ? "-" : anggota.jurnal_prov;
      jurnal_akrual.value = anggota.jurnal_yadit == "" ? "-" : anggota.jurnal_yadit;
      jurnal_ppap.value = anggota.jurnal_ppap == "" ? "-" : anggota.jurnal_ppap;
      modal_utama.value = true;
    };
    const deleteGet = (e) => {
      const anggota = e;
      if (anggota.sandi) {
        userIds.value = [];
        userIds.value.push(anggota.sandi);
        console.log("delete get 1", userIds.value);
        modal_delete.value = true;
      } else {
        if (userIds.value.length > 0) {
          console.log("delete get 1+", userIds.value);
          modal_delete.value = true;
        }
      }
    };
    const viewData = async (e) => {
      const anggota = await produkPinjaman.getItem(e);
      isView.value = true;
      kode_produk.value = anggota.sandi;
      nama_produk.value = anggota.keterangan;
      kode_perhitungan.value = anggota.kdhit;
      pembulatan_angsuran.value = anggota.pembulatan;
      jasa_perbulan.value = anggota.rate;
      periode_pembayaran.value = anggota.periode;
      administrasi.value = anggota.adm;
      provisi.value = anggota.prov;
      jurnal_pokok_pinjaman.value = anggota.jurnal_pokok;
      jurnal_jasa_pinjaman.value = anggota.jurnal_jasa;
      jurnal_denda_pinjaman.value = anggota.jurnal_denda;
      jurnal_admin.value = anggota.jurnal_adm;
      jurnal_provisi.value = anggota.jurnal_prov;
      jurnal_akrual.value = anggota.jurnal_yadit;
      jurnal_ppap.value = anggota.jurnal_ppap;
      modal_utama.value = true;
    };
    const simpan_data = async (e) => {
      try {
        await produkPinjaman.postItem(
          kode_produk.value,
          nama_produk.value,
          kode_perhitungan.value,
          pembulatan_angsuran.value,
          jasa_perbulan.value,
          periode_pembayaran.value,
          administrasi.value,
          provisi.value,
          jurnal_pokok_pinjaman.value,
          jurnal_jasa_pinjaman.value,
          jurnal_denda_pinjaman.value,
          jurnal_admin.value,
          jurnal_provisi.value,
          jurnal_akrual.value,
          jurnal_ppap.value,
          isEdit.value
        );
        e.target.reset();
        resetForm();
      } catch (error) {
        swal({
          icon: "error",
          title: "Oops...",
          text: "ERROR SIMPAN DATA:  " + error
        });
      }
    };
    const deleteAnggota = async () => {
      if (userIds.value.length > 1) {
        for (let idAnggota = 0; idAnggota < userIds.value.length; idAnggota++) {
          console.log("delete post 1+", userIds.value[idAnggota]);
          await produkPinjaman.removeItem(userIds.value[idAnggota]);
        }
      } else {
        console.log("delete post 1", userIds.value);
        await produkPinjaman.removeItem(userIds.value[0]);
      }
      resetForm();
    };
    const resetForm = () => {
      if (modal_utama.value == false && isEdit.value == false && isView.value == false) {
        search_data.value = "";
        search_type.value = "sandi";
        sort_by.value = "sandi";
        sort_mode.value = true;
        page_number.value = 1;
        total_pages.value = 0;
        row_per_page.value = 50;
      }
      allSelected.value = false;
      userIds.value = [];
      kode_produk.value = "";
      nama_produk.value = null;
      pembulatan_angsuran.value = null;
      jasa_perbulan.value = null;
      kode_perhitungan.value = null;
      jurnal_admin.value = null;
      jurnal_provisi.value = null;
      jurnal_denda_pinjaman.value = null;
      periode_pembayaran.value = null;
      provisi.value = null;
      jurnal_pokok_pinjaman.value = null;
      jurnal_jasa_pinjaman.value = null;
      jurnal_akrual.value = "";
      jurnal_ppap.value = "";
      modal_utama.value = false;
      modal_delete.value = false;
      isAdd.value = false;
      isEdit.value = false;
      isView.value = false;
    };
    const sorting = async (e) => {
      isLoading.value = true;
      sort_by.value = e;
      sort_mode.value = !sort_mode.value;
      try {
        await produkPinjaman.readItem(
          search_type.value,
          search_data.value,
          e,
          sort_mode.value,
          page_number.value,
          row_per_page.value
        );
        isLoading.value = false;
      } catch (error) {
        isLoading.value = false;
        swal({
          icon: "error",
          title: "Oops...",
          text: "GAGAL SORTING: " + error
        });
      }
    };
    const firstPage = async () => {
      page_number.value = 1;
    };
    const previousPage = async () => {
      try {
        let page_no = parseInt(page_number.value);
        if (page_no > 1) {
          page_number.value = page_no - 1;
        }
      } catch (error) {
        isLoading.value = false;
        swal({
          icon: "error",
          title: "Oops...",
          text: "Gagal page sebelumnya " + error
        });
      }
    };
    const nextPage = () => {
      try {
        if (page_number.value == "") {
          page_number.value = 1;
        }
        let page_no = parseInt(page_number.value);
        if (page_no < total_pages.value) {
          page_number.value = page_no + 1;
        }
      } catch (error) {
        isLoading.value = false;
        swal({
          icon: "error",
          title: "Oops...",
          text: "Gagal page selanjutnya " + error
        });
      }
    };
    const lastPage = async () => {
      page_number.value = total_pages.value;
    };
    watch(page_number, async (e) => {
      try {
        isLoading.value = true;
        await produkPinjaman.readItem(
          search_type.value,
          search_data.value,
          sort_by.value,
          sort_mode.value,
          e,
          row_per_page.value
        );
        isLoading.value = false;
      } catch (error) {
        isLoading.value = false;
        swal({
          icon: "error",
          title: "Oops...",
          text: "Gagal ganti page " + error
        });
      }
    });
    watch(row_per_page, async (e) => {
      try {
        isLoading.value = true;
        if (page_number.value > total_pages.value || page_number.value == "") {
          page_number.value = 1;
        }
        const data = await produkPinjaman.readItem(
          search_type.value,
          search_data.value,
          sort_by.value,
          sort_mode.value,
          page_number.value,
          e
        );
        total_pages.value = data;
        userIds.value = [];
        allSelected.value = false;
        if (page_number.value > total_pages.value) {
          page_number.value = 1;
        }
        isLoading.value = false;
      } catch (error) {
        isLoading.value = false;
        swal({
          icon: "error",
          title: "Oops...",
          text: "Gagal ganti row/page " + error
        });
      }
    });
    watch(search_data, async (e) => {
      try {
        isLoading.value = true;
        const data = await produkPinjaman.readItem(
          search_type.value,
          e,
          sort_by.value,
          sort_mode.value,
          page_number.value,
          row_per_page.value
        );
        total_pages.value = data;
        isLoading.value = false;
      } catch (error) {
        isLoading.value = false;
        swal({
          icon: "error",
          title: "Oops...",
          text: "Gagal ganti page " + error
        });
      }
    });
    watch(search_type, async (e) => {
      try {
        isLoading.value = true;
        const data = await produkPinjaman.readItem(
          e,
          search_data.value,
          sort_by.value,
          sort_mode.value,
          page_number.value,
          row_per_page.value
        );
        total_pages.value = data;
        isLoading.value = false;
      } catch (error) {
        isLoading.value = false;
        swal({
          icon: "error",
          title: "Oops...",
          text: "Gagal ganti page " + error
        });
      }
    });
    const selectAll = (e) => {
      userIds.value = [];
      if (!allSelected.value || e) {
        for (let anggota = 0; anggota < produkPinjaman.items.length; anggota++) {
          userIds.value.push(produkPinjaman.items[anggota].sandi);
        }
      }
    };
    const selectOne = () => {
      allSelected.value = false;
    };
    onMounted(async () => {
      try {
        isLoading.value = true;
        const data = await produkPinjaman.readItem(
          search_type.value,
          search_data.value,
          sort_by.value,
          sort_mode.value,
          page_number.value,
          row_per_page.value
        );
        Perkiraan_list.value = data.perkiraan;
        total_pages.value = data.total_pages;
        isLoading.value = false;
      } catch (error) {
        isLoading.value = false;
        swal({
          icon: "error",
          title: "Oops...",
          text: "ERROR MOUNTED " + error
        });
      }
    });
    return (_ctx, _cache) => {
      const _component_PlusIcon = resolveComponent("PlusIcon");
      const _component_Trash2Icon = resolveComponent("Trash2Icon");
      const _component_ShareIcon = resolveComponent("ShareIcon");
      const _component_RouterLink = resolveComponent("RouterLink");
      const _component_PrinterIcon = resolveComponent("PrinterIcon");
      const _component_CheckIcon = resolveComponent("CheckIcon");
      const _component_XIcon = resolveComponent("XIcon");
      const _component_RefreshCwIcon = resolveComponent("RefreshCwIcon");
      const _component_SkipBackIcon = resolveComponent("SkipBackIcon");
      const _component_RewindIcon = resolveComponent("RewindIcon");
      const _component_FastForwardIcon = resolveComponent("FastForwardIcon");
      const _component_SkipForwardIcon = resolveComponent("SkipForwardIcon");
      const _component_DeleteIcon = resolveComponent("DeleteIcon");
      const _component_SortAscIcon = resolveComponent("SortAscIcon");
      const _component_SortDescIcon = resolveComponent("SortDescIcon");
      const _component_CheckSquareIcon = resolveComponent("CheckSquareIcon");
      const _component_Loader2Icon = resolveComponent("Loader2Icon");
      const _component_ModalHeader = resolveComponent("ModalHeader");
      const _component_ModalBody = resolveComponent("ModalBody");
      const _component_ModalFooter = resolveComponent("ModalFooter");
      const _component_Modal = resolveComponent("Modal");
      const _component_XCircleIcon = resolveComponent("XCircleIcon");
      return openBlock(), createElementBlock(Fragment, null, [
        createVNode(_sfc_main$9, {
          title: "Setting",
          subTitle: "Pinjaman",
          icon: unref(SETTING)
        }, null, 8, ["icon"]),
        createBaseVNode("div", _hoisted_1$7, [
          createBaseVNode("div", _hoisted_2$7, [
            createBaseVNode("div", _hoisted_3$7, [
              createBaseVNode("button", {
                class: "inline-block align-middle text-center select-none border font-normal whitespace-no-wrap rounded no-underline h-9 mx-auto px-2 leading-tight text-xs bg-gray-100 text-gray-800 hover:text-blue-700 hover:bg-gray-200 btn-light-bordered",
                onClick: addGet,
                id: "delete-multiple-data",
                "data-bs-toggle": "tooltip",
                title: "Tambah Data"
              }, [
                createVNode(_component_PlusIcon, { class: "w-4 h-4 mx-auto my-[5px] stroke-2 stroke-current" })
              ]),
              createBaseVNode("button", {
                class: "inline-block align-middle hover:text-danger text-center select-none border font-normal whitespace-no-wrap rounded no-underline h-9 mx-auto px-2 leading-tight text-xs bg-gray-100 text-gray-800 hover:bg-gray-200 btn-light-bordered",
                onClick: deleteGet,
                id: "delete-multiple-data",
                "data-bs-toggle": "tooltip",
                title: "Hapus Data"
              }, [
                createVNode(_component_Trash2Icon, { class: "w-4 h-4 mx-auto my-[5px] stroke-2 stroke-current" })
              ]),
              createVNode(_component_RouterLink, {
                to: "/laporan-daftar-anggota",
                class: "inline-block align-middle hover:text-success text-center select-none border font-normal whitespace-no-wrap rounded no-underline h-9 mx-auto px-2 p-1 leading-tight text-xs bg-gray-100 text-gray-800 hover:bg-gray-200 btn-light-bordered",
                title: "Export CSV"
              }, {
                default: withCtx(() => [
                  createVNode(_component_ShareIcon, { class: "w-3 h-3 mx-auto stroke-2 stroke-current" }),
                  _hoisted_4$7
                ]),
                _: 1
              }),
              createVNode(_component_RouterLink, {
                to: "/laporan-daftar-anggota",
                class: "inline-block hover:text-danger align-middle text-center select-none border font-normal whitespace-no-wrap rounded no-underline h-9 mx-auto px-2 p-1 leading-tight text-xs bg-gray-100 text-gray-800 hover:bg-gray-200 btn-light-bordered",
                title: "Export PDF"
              }, {
                default: withCtx(() => [
                  createVNode(_component_ShareIcon, { class: "w-3 h-3 mx-auto stroke-2 stroke-current" }),
                  _hoisted_5$7
                ]),
                _: 1
              }),
              createVNode(_component_RouterLink, {
                to: "/laporan-daftar-anggota",
                class: "inline-block align-middle text-center select-none border font-normal whitespace-no-wrap rounded no-underline h-9 mx-auto px-2 p-1 leading-tight text-xs bg-gray-100 text-gray-800 hover:bg-gray-200 btn-light-bordered",
                title: "Print Table"
              }, {
                default: withCtx(() => [
                  createVNode(_component_PrinterIcon, { class: "w-4 h-4 mx-auto my-[5px] stroke-2 stroke-current" })
                ]),
                _: 1
              }),
              createBaseVNode("button", {
                class: "inline-block hover:text-success align-middle text-center select-none border font-normal whitespace-no-wrap rounded no-underline h-9 mx-auto px-2 leading-tight text-xs bg-gray-100 text-gray-800 hover:bg-gray-200 btn-light-bordered",
                onClick: _cache[0] || (_cache[0] = ($event) => (selectAll(true), allSelected.value = true)),
                id: "select-all",
                title: "Select All"
              }, [
                createVNode(_component_CheckIcon, { class: "w-4 h-4 mx-auto my-[5px] stroke-2 stroke-current" }),
                _hoisted_6$7
              ]),
              createBaseVNode("button", {
                class: "inline-block align-middle hover:text-danger text-center select-none border font-normal whitespace-no-wrap rounded no-underline h-9 mx-auto px-2 leading-tight text-xs bg-gray-100 text-gray-800 hover:bg-gray-200 btn-light-bordered",
                onClick: _cache[1] || (_cache[1] = ($event) => {
                  userIds.value = [], allSelected.value = false;
                }),
                id: "unselect-all",
                title: "Unselect All"
              }, [
                createVNode(_component_XIcon, { class: "w-4 h-4 mx-auto my-[5px] stroke-2 stroke-current" })
              ]),
              createBaseVNode("a", _hoisted_7$7, [
                createVNode(_component_RefreshCwIcon, { class: "w-4 h-4 mx-auto my-[9px] stroke-2 stroke-current" })
              ])
            ]),
            createBaseVNode("div", _hoisted_8$7, [
              createBaseVNode("div", _hoisted_9$7, [
                createBaseVNode("div", _hoisted_10$7, [
                  createBaseVNode("div", _hoisted_11$6, [
                    createBaseVNode("a", {
                      href: "javascript:void(0);",
                      class: "inline-block align-middle text-center rounded-l-lg select-none border font-normal whitespace-no-wrap h-9 -mt-1 py-1 px-3 leading-normal no-underline bg-gray-100 text-gray-800 hover:bg-gray-200 btn-light-bordered",
                      id: "first-page",
                      title: "first page",
                      onClick: _cache[2] || (_cache[2] = ($event) => firstPage())
                    }, [
                      createVNode(_component_SkipBackIcon, { class: "w-4 h-4 mx-auto my-[5px]" })
                    ]),
                    createBaseVNode("a", {
                      href: "javascript:void(0);",
                      class: "inline-block align-middle text-center select-none border font-normal whitespace-no-wrap h-9 -mt-1 py-1 px-3 leading-normal no-underline bg-gray-100 text-gray-800 hover:bg-gray-200 btn-light-bordered",
                      id: "previous-page",
                      title: "previous page",
                      onClick: _cache[3] || (_cache[3] = ($event) => previousPage())
                    }, [
                      createVNode(_component_RewindIcon, { class: "w-4 h-4 mx-auto my-[5px]" })
                    ])
                  ]),
                  createBaseVNode("div", _hoisted_12$6, [
                    withDirectives(createBaseVNode("input", {
                      type: "number",
                      class: "block appearance-none w-full mb-1 px-2 bg-white text-gray-800 border-y border-r border-gray-400 text-xs leading-normal",
                      "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => page_number.value = $event)
                    }, null, 512), [
                      [vModelText, page_number.value]
                    ]),
                    withDirectives(createBaseVNode("input", {
                      type: "number",
                      class: "block appearance-none w-full px-2 mb-1 bg-gray-200 text-gray-800 border-y border-gray-400 text-xs leading-normal",
                      "onUpdate:modelValue": _cache[5] || (_cache[5] = ($event) => total_pages.value = $event),
                      disabled: ""
                    }, null, 512), [
                      [vModelText, total_pages.value]
                    ])
                  ]),
                  createBaseVNode("div", _hoisted_13$6, [
                    createBaseVNode("a", {
                      href: "javascript:void(0);",
                      class: "inline-block align-middle text-center select-none border font-normal whitespace-no-wrap h-9 -mt-1 py-1 px-3 leading-normal no-underline bg-gray-100 text-gray-800 hover:bg-gray-200 btn-light-bordered",
                      id: "next-page",
                      title: "next page",
                      onClick: _cache[6] || (_cache[6] = ($event) => nextPage())
                    }, [
                      createVNode(_component_FastForwardIcon, { class: "w-4 h-4 mx-auto my-[5px]" })
                    ]),
                    createBaseVNode("a", {
                      href: "javascript:void(0);",
                      class: "inline-block align-middle text-center select-none border font-normal whitespace-no-wrap h-9 -mt-1 rounded-r-lg py-1 px-3 leading-normal no-underline bg-gray-100 text-gray-800 hover:bg-gray-200 btn-light-bordered",
                      id: "last-page",
                      title: "last page",
                      onClick: _cache[7] || (_cache[7] = ($event) => lastPage())
                    }, [
                      createVNode(_component_SkipForwardIcon, { class: "w-4 h-4 mx-auto my-[5px]" })
                    ])
                  ])
                ])
              ])
            ]),
            createBaseVNode("div", _hoisted_14$6, [
              withDirectives(createBaseVNode("select", {
                name: "row_per_page",
                "onUpdate:modelValue": _cache[8] || (_cache[8] = ($event) => row_per_page.value = $event),
                class: "bg-gray-50 border border-gray-300 text-gray-900 pl-1 mr-2 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block -mt-1 w-[70px] h-9"
              }, _hoisted_18$6, 512), [
                [vModelSelect, row_per_page.value]
              ]),
              createBaseVNode("div", _hoisted_19$6, [
                withDirectives(createBaseVNode("input", {
                  type: "text",
                  class: "block appearance-none border-y border-l rounded-l-lg w-full mb-1 bg-white text-gray-800 border-gray-300 px-2 text-xs leading-normal h-9",
                  "onUpdate:modelValue": _cache[9] || (_cache[9] = ($event) => search_data.value = $event),
                  placeholder: "Cari " + search_type.value + " " + _ctx.$route.name.replace(/-/gi, " "),
                  name: "search-data"
                }, null, 8, _hoisted_20$6), [
                  [vModelText, search_data.value]
                ]),
                createBaseVNode("div", _hoisted_21$6, [
                  search_data.value !== "" ? (openBlock(), createElementBlock("button", {
                    key: 0,
                    class: "inline align-middle text-center select-none border-y border-[#d0d3d4] w-10 font-normal whitespace-no-wrap no-underline h-9 mx-auto px-2 leading-tight text-xs",
                    id: "clear-btn",
                    onClick: _cache[10] || (_cache[10] = ($event) => search_data.value = "")
                  }, [
                    createVNode(_component_DeleteIcon, { class: "w-5 h-5 stroke-2 text-danger mx-auto my-[5px]" })
                  ])) : createCommentVNode("", true)
                ]),
                createBaseVNode("div", _hoisted_22$5, [
                  withDirectives(createBaseVNode("select", {
                    name: "search_type",
                    "onUpdate:modelValue": _cache[11] || (_cache[11] = ($event) => search_type.value = $event),
                    class: "inline align-middle text-center select-none border w-14 font-normal whitespace-no-wrap rounded-r-lg no-underline h-9 mx-auto px-0 leading-tight text-xs bg-gray-100 text-gray-800 hover:bg-gray-200 btn-light-bordered"
                  }, _hoisted_25$5, 512), [
                    [vModelSelect, search_type.value]
                  ])
                ])
              ])
            ])
          ])
        ]),
        createBaseVNode("div", _hoisted_26$5, [
          createBaseVNode("div", _hoisted_27$4, [
            createBaseVNode("table", _hoisted_28$3, [
              createBaseVNode("thead", _hoisted_29$3, [
                createBaseVNode("tr", null, [
                  createBaseVNode("th", _hoisted_30$3, [
                    createBaseVNode("div", _hoisted_31$4, [
                      withDirectives(createBaseVNode("input", {
                        id: "checkbox-all-search",
                        "onUpdate:modelValue": _cache[12] || (_cache[12] = ($event) => allSelected.value = $event),
                        onClick: _cache[13] || (_cache[13] = ($event) => selectAll(false)),
                        type: "checkbox",
                        class: "w-4 h-4 text-blue-600 bg-gray-100 border-blue-200 rounded focus:ring-blue-500 focus:ring-2"
                      }, null, 512), [
                        [vModelCheckbox, allSelected.value]
                      ]),
                      _hoisted_32$5
                    ])
                  ]),
                  createBaseVNode("th", {
                    scope: "col",
                    class: "text-center uppercase border cursor-pointer hover:bg-blue-300 w-20 pl-1",
                    onClick: _cache[14] || (_cache[14] = ($event) => sorting("sandi"))
                  }, [
                    createTextVNode(" SANDI "),
                    sort_by.value === "sandi" && sort_mode.value ? (openBlock(), createBlock(_component_SortAscIcon, {
                      key: 0,
                      class: "inline ml-1 -pr-3 mr-1 w-5 h-4"
                    })) : createCommentVNode("", true),
                    sort_by.value === "sandi" && !sort_mode.value ? (openBlock(), createBlock(_component_SortDescIcon, {
                      key: 1,
                      class: "inline ml-1 -pr-3 mr-1 w-5 h-4"
                    })) : createCommentVNode("", true)
                  ]),
                  createBaseVNode("th", {
                    scope: "col",
                    class: "text-center uppercase border cursor-pointer hover:bg-blue-300",
                    onClick: _cache[15] || (_cache[15] = ($event) => sorting("keterangan"))
                  }, [
                    createTextVNode(" Keterangan "),
                    sort_by.value === "keterangan" && sort_mode.value ? (openBlock(), createBlock(_component_SortAscIcon, {
                      key: 0,
                      class: "inline ml-2 -pr-3 mr-1 w-5 h-4"
                    })) : createCommentVNode("", true),
                    sort_by.value === "keterangan" && !sort_mode.value ? (openBlock(), createBlock(_component_SortDescIcon, {
                      key: 1,
                      class: "inline ml-2 -pr-3 mr-1 w-5 h-4"
                    })) : createCommentVNode("", true)
                  ]),
                  createBaseVNode("th", {
                    scope: "col",
                    class: "text-center uppercase border cursor-pointer hover:bg-blue-300",
                    onClick: _cache[16] || (_cache[16] = ($event) => sorting("TGLINP"))
                  }, [
                    createTextVNode(" Tanggal INP "),
                    sort_by.value === "TGLINP" && sort_mode.value ? (openBlock(), createBlock(_component_SortAscIcon, {
                      key: 0,
                      class: "inline ml-2 -pr-3 mr-1 w-5 h-4"
                    })) : createCommentVNode("", true),
                    sort_by.value === "TGLINP" && !sort_mode.value ? (openBlock(), createBlock(_component_SortDescIcon, {
                      key: 1,
                      class: "inline ml-2 -pr-3 mr-1 w-5 h-4"
                    })) : createCommentVNode("", true)
                  ]),
                  createBaseVNode("th", {
                    scope: "col",
                    class: "text-center uppercase border cursor-pointer hover:bg-blue-300",
                    onClick: _cache[17] || (_cache[17] = ($event) => sorting("kantor"))
                  }, [
                    createTextVNode(" Kantor "),
                    sort_by.value === "kantor" && sort_mode.value ? (openBlock(), createBlock(_component_SortAscIcon, {
                      key: 0,
                      class: "inline ml-2 -pr-3 mr-1 w-5 h-4"
                    })) : createCommentVNode("", true),
                    sort_by.value === "kantor" && !sort_mode.value ? (openBlock(), createBlock(_component_SortDescIcon, {
                      key: 1,
                      class: "inline ml-2 -pr-3 mr-1 w-5 h-4"
                    })) : createCommentVNode("", true)
                  ]),
                  _hoisted_33$5
                ])
              ]),
              withDirectives(createBaseVNode("tbody", _hoisted_34$5, [
                (openBlock(true), createElementBlock(Fragment, null, renderList(unref(produkPinjaman).items, (anggota) => {
                  return openBlock(), createElementBlock("tr", {
                    class: "bg-white hover:bg-lime-300 hover:text-slate-700 drop-shadow-2xl group",
                    key: anggota.sandi,
                    anggota,
                    value: anggota.sandi
                  }, [
                    createBaseVNode("td", _hoisted_36$6, [
                      createBaseVNode("div", _hoisted_37$6, [
                        _hoisted_38$6,
                        withDirectives(createBaseVNode("input", {
                          value: anggota.sandi,
                          type: "checkbox",
                          "onUpdate:modelValue": _cache[18] || (_cache[18] = ($event) => userIds.value = $event),
                          onClick: selectOne,
                          class: "data-checkbox w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded-lg focus:ring-blue-500 focus:ring-2"
                        }, null, 8, _hoisted_39$6), [
                          [vModelCheckbox, userIds.value]
                        ])
                      ])
                    ]),
                    createBaseVNode("th", {
                      onDblclick: ($event) => viewData(anggota.sandi),
                      scope: "row",
                      class: "border-r border-b font-medium whitespace-nowrap pl-2"
                    }, toDisplayString(anggota.sandi), 41, _hoisted_40$6),
                    createBaseVNode("td", {
                      onDblclick: ($event) => viewData(anggota.sandi),
                      class: "min-w-max text-center border-r border-b font-medium px-2"
                    }, toDisplayString(anggota.keterangan), 41, _hoisted_41$6),
                    createBaseVNode("td", {
                      onDblclick: ($event) => viewData(anggota.sandi),
                      class: "min-w-max text-center border-r border-b font-medium px-2"
                    }, toDisplayString(unref(hooks)(anggota.TGLINP).format("DD-MM-YYYY")), 41, _hoisted_42$6),
                    createBaseVNode("td", {
                      onDblclick: ($event) => viewData(anggota.sandi),
                      class: "min-w-max text-center border-r border-b font-medium px-2"
                    }, toDisplayString(anggota.kantor), 41, _hoisted_43$6),
                    createBaseVNode("td", _hoisted_44$6, [
                      createBaseVNode("div", _hoisted_45$6, [
                        createBaseVNode("a", {
                          onClick: ($event) => editGet(anggota.sandi),
                          class: "flex items-center mr-4 hover:text-blue-700 text-sky-600",
                          href: "javascript:;"
                        }, [
                          createVNode(_component_CheckSquareIcon, { class: "w-3 h-3 mr-1" }),
                          createTextVNode(" Edit ")
                        ], 8, _hoisted_46$6),
                        createBaseVNode("a", {
                          onClick: ($event) => deleteGet(anggota),
                          class: "flex items-center hover:text-red-800 text-danger",
                          href: "javascript:;"
                        }, [
                          createVNode(_component_Trash2Icon, { class: "w-3 h-3 mr-1" }),
                          createTextVNode(" Hapus ")
                        ], 8, _hoisted_47$6)
                      ])
                    ])
                  ], 8, _hoisted_35$6);
                }), 128))
              ], 512), [
                [vShow, !isLoading.value]
              ]),
              withDirectives(createBaseVNode("tbody", null, [
                createBaseVNode("div", _hoisted_48$5, [
                  createVNode(_component_Loader2Icon, { class: "motion-safe:animate-spin stroke-[5px] text-white h-12 w-12 mb-2" }),
                  _hoisted_49$5,
                  _hoisted_50$5,
                  _hoisted_51$5
                ])
              ], 512), [
                [vShow, isLoading.value]
              ])
            ])
          ])
        ]),
        createVNode(_component_Modal, {
          backdrop: "static",
          size: "modal-lg",
          show: modal_utama.value,
          onHidden: _cache[34] || (_cache[34] = ($event) => modal_utama.value = false)
        }, {
          default: withCtx(() => [
            createVNode(_component_ModalHeader, null, {
              default: withCtx(() => [
                createBaseVNode("h2", _hoisted_52$5, [
                  isAdd.value ? (openBlock(), createElementBlock("span", _hoisted_53$5, "Tambah ")) : createCommentVNode("", true),
                  isEdit.value ? (openBlock(), createElementBlock("span", _hoisted_54$5, "Edit ")) : createCommentVNode("", true),
                  isView.value ? (openBlock(), createElementBlock("span", _hoisted_55$5, "Data ")) : createCommentVNode("", true),
                  createTextVNode(" Produk "),
                  isEdit.value || isView.value ? (openBlock(), createElementBlock("span", _hoisted_56$4, toDisplayString(kode_produk.value), 1)) : createCommentVNode("", true)
                ]),
                createBaseVNode("a", {
                  "data-tw-dismiss": "modal",
                  onClick: resetForm,
                  href: "javascript:;",
                  class: "border bg-danger rounded-lg hover:bg-red-700 -my-5 -mr-3"
                }, [
                  createVNode(_component_XIcon, { class: "lucide lucide-x w-7 h-7 text-white hover:text-slate-100" })
                ])
              ]),
              _: 1
            }),
            createVNode(_component_ModalBody, null, {
              default: withCtx(() => [
                createBaseVNode("form", {
                  method: "post",
                  id: "produkPinjamanForm",
                  onSubmit: withModifiers(simpan_data, ["prevent"])
                }, [
                  createBaseVNode("div", _hoisted_58$4, [
                    createBaseVNode("div", _hoisted_59$4, [
                      _hoisted_60$4,
                      _hoisted_61$5,
                      createBaseVNode("div", _hoisted_62$5, [
                        withDirectives(createBaseVNode("input", {
                          class: "w-full h-7 mb-1 px-0.5 text-xs border rounded focus:shadow-outline",
                          type: "text",
                          "onUpdate:modelValue": _cache[19] || (_cache[19] = ($event) => kode_produk.value = $event),
                          maxlength: "4",
                          required: ""
                        }, null, 512), [
                          [vModelText, kode_produk.value]
                        ])
                      ])
                    ]),
                    createBaseVNode("div", _hoisted_63$5, [
                      _hoisted_64$5,
                      _hoisted_65$5,
                      createBaseVNode("div", _hoisted_66$5, [
                        withDirectives(createBaseVNode("input", {
                          class: "w-full h-7 mb-1 px-0.5 text-xs border rounded focus:shadow-outline",
                          type: "text",
                          "onUpdate:modelValue": _cache[20] || (_cache[20] = ($event) => nama_produk.value = $event),
                          maxlength: "40",
                          required: ""
                        }, null, 512), [
                          [vModelText, nama_produk.value]
                        ])
                      ])
                    ]),
                    createBaseVNode("div", _hoisted_67$5, [
                      _hoisted_68$5,
                      _hoisted_69$5,
                      createBaseVNode("div", _hoisted_70$5, [
                        withDirectives(createBaseVNode("input", {
                          class: "w-full h-7 mb-1 px-0.5 text-xs border rounded focus:shadow-outline",
                          type: "text",
                          "onUpdate:modelValue": _cache[21] || (_cache[21] = ($event) => kode_perhitungan.value = $event),
                          maxlength: "1",
                          required: ""
                        }, null, 512), [
                          [vModelText, kode_perhitungan.value]
                        ])
                      ])
                    ]),
                    createBaseVNode("div", _hoisted_71$5, [
                      _hoisted_72$5,
                      _hoisted_73$5,
                      createBaseVNode("div", _hoisted_74$5, [
                        withDirectives(createBaseVNode("input", {
                          class: "w-full h-7 mb-1 px-0.5 text-xs border rounded focus:shadow-outline",
                          type: "number",
                          "onUpdate:modelValue": _cache[22] || (_cache[22] = ($event) => pembulatan_angsuran.value = $event),
                          maxlength: "4",
                          required: ""
                        }, null, 512), [
                          [vModelText, pembulatan_angsuran.value]
                        ])
                      ])
                    ])
                  ]),
                  _hoisted_75$5,
                  createBaseVNode("div", _hoisted_76$5, [
                    createBaseVNode("div", _hoisted_77$5, [
                      _hoisted_78$5,
                      _hoisted_79$5,
                      createBaseVNode("div", _hoisted_80$5, [
                        withDirectives(createBaseVNode("input", {
                          class: "w-full h-7 mb-1 px-0.5 text-xs border rounded focus:shadow-outline",
                          type: "number",
                          "onUpdate:modelValue": _cache[23] || (_cache[23] = ($event) => jasa_perbulan.value = $event),
                          required: ""
                        }, null, 512), [
                          [vModelText, jasa_perbulan.value]
                        ])
                      ])
                    ]),
                    createBaseVNode("div", _hoisted_81$5, [
                      _hoisted_82$5,
                      _hoisted_83$5,
                      createBaseVNode("div", _hoisted_84$5, [
                        withDirectives(createBaseVNode("select", {
                          name: "periode_list",
                          id: "periode_list",
                          class: "w-full h-7 mb-1 px-0 text-xs border rounded focus:shadow-outline",
                          "onUpdate:modelValue": _cache[24] || (_cache[24] = ($event) => periode_pembayaran.value = $event),
                          required: ""
                        }, _hoisted_90$5, 512), [
                          [vModelSelect, periode_pembayaran.value]
                        ])
                      ])
                    ]),
                    createBaseVNode("div", _hoisted_91$5, [
                      _hoisted_92$5,
                      _hoisted_93$5,
                      createBaseVNode("div", _hoisted_94$5, [
                        withDirectives(createBaseVNode("input", {
                          class: "w-full h-7 mb-1 px-0.5 text-xs border rounded focus:shadow-outline",
                          type: "number",
                          "onUpdate:modelValue": _cache[25] || (_cache[25] = ($event) => administrasi.value = $event),
                          required: ""
                        }, null, 512), [
                          [vModelText, administrasi.value]
                        ])
                      ])
                    ]),
                    createBaseVNode("div", _hoisted_95$5, [
                      _hoisted_96$5,
                      _hoisted_97$5,
                      createBaseVNode("div", _hoisted_98$5, [
                        withDirectives(createBaseVNode("input", {
                          class: "w-full h-7 mb-1 px-0.5 text-xs border rounded focus:shadow-outline",
                          type: "number",
                          "onUpdate:modelValue": _cache[26] || (_cache[26] = ($event) => provisi.value = $event),
                          required: ""
                        }, null, 512), [
                          [vModelText, provisi.value]
                        ])
                      ])
                    ])
                  ]),
                  _hoisted_99$5,
                  createBaseVNode("div", _hoisted_100$5, [
                    createBaseVNode("div", _hoisted_101$5, [
                      _hoisted_102$5,
                      _hoisted_103$5,
                      createBaseVNode("div", _hoisted_104$5, [
                        withDirectives(createBaseVNode("select", {
                          name: "jurnal_pokok_pinjaman",
                          id: "jurnal_pokok_pinjaman",
                          class: "w-full h-7 mb-1 px-0 text-xs border rounded focus:shadow-outline",
                          "onUpdate:modelValue": _cache[27] || (_cache[27] = ($event) => jurnal_pokok_pinjaman.value = $event)
                        }, [
                          _hoisted_105$5,
                          (openBlock(true), createElementBlock(Fragment, null, renderList(Perkiraan_list.value, (perkiraan) => {
                            return openBlock(), createElementBlock("option", {
                              value: perkiraan.noper
                            }, toDisplayString(perkiraan.noper) + " - " + toDisplayString(perkiraan.nama), 9, _hoisted_106$5);
                          }), 256))
                        ], 512), [
                          [vModelSelect, jurnal_pokok_pinjaman.value]
                        ])
                      ])
                    ]),
                    createBaseVNode("div", _hoisted_107$5, [
                      _hoisted_108$5,
                      _hoisted_109$5,
                      createBaseVNode("div", _hoisted_110$5, [
                        withDirectives(createBaseVNode("select", {
                          name: "jurnal_jasa_pinjaman",
                          id: "jurnal_jasa_pinjaman",
                          class: "w-full h-7 mb-1 px-0 text-xs border rounded focus:shadow-outline",
                          "onUpdate:modelValue": _cache[28] || (_cache[28] = ($event) => jurnal_jasa_pinjaman.value = $event)
                        }, [
                          _hoisted_111$5,
                          (openBlock(true), createElementBlock(Fragment, null, renderList(Perkiraan_list.value, (perkiraan) => {
                            return openBlock(), createElementBlock("option", {
                              value: perkiraan.noper
                            }, toDisplayString(perkiraan.noper) + " - " + toDisplayString(perkiraan.nama), 9, _hoisted_112$5);
                          }), 256))
                        ], 512), [
                          [vModelSelect, jurnal_jasa_pinjaman.value]
                        ])
                      ])
                    ]),
                    createBaseVNode("div", _hoisted_113$5, [
                      _hoisted_114$5,
                      _hoisted_115$5,
                      createBaseVNode("div", _hoisted_116$5, [
                        withDirectives(createBaseVNode("select", {
                          name: "jurnal_denda_pinjaman",
                          id: "jurnal_denda_pinjaman",
                          class: "w-full h-7 mb-1 px-0 text-xs border rounded focus:shadow-outline",
                          "onUpdate:modelValue": _cache[29] || (_cache[29] = ($event) => jurnal_denda_pinjaman.value = $event)
                        }, [
                          _hoisted_117$4,
                          (openBlock(true), createElementBlock(Fragment, null, renderList(Perkiraan_list.value, (perkiraan) => {
                            return openBlock(), createElementBlock("option", {
                              value: perkiraan.noper
                            }, toDisplayString(perkiraan.noper) + " - " + toDisplayString(perkiraan.nama), 9, _hoisted_118$4);
                          }), 256))
                        ], 512), [
                          [vModelSelect, jurnal_denda_pinjaman.value]
                        ])
                      ])
                    ]),
                    createBaseVNode("div", _hoisted_119$4, [
                      _hoisted_120$3,
                      _hoisted_121$3,
                      createBaseVNode("div", _hoisted_122$3, [
                        withDirectives(createBaseVNode("select", {
                          name: "jurnal_admin",
                          id: "jurnal_admin",
                          class: "w-full h-7 mb-1 px-0 text-xs border rounded focus:shadow-outline",
                          "onUpdate:modelValue": _cache[30] || (_cache[30] = ($event) => jurnal_admin.value = $event)
                        }, [
                          _hoisted_123$3,
                          (openBlock(true), createElementBlock(Fragment, null, renderList(Perkiraan_list.value, (perkiraan) => {
                            return openBlock(), createElementBlock("option", {
                              value: perkiraan.noper
                            }, toDisplayString(perkiraan.noper) + " - " + toDisplayString(perkiraan.nama), 9, _hoisted_124$3);
                          }), 256))
                        ], 512), [
                          [vModelSelect, jurnal_admin.value]
                        ])
                      ])
                    ]),
                    createBaseVNode("div", _hoisted_125$3, [
                      _hoisted_126$3,
                      _hoisted_127$3,
                      createBaseVNode("div", _hoisted_128$3, [
                        withDirectives(createBaseVNode("select", {
                          name: "jurnal_provisi",
                          id: "jurnal_provisi",
                          class: "w-full h-7 mb-1 px-0 text-xs border rounded focus:shadow-outline",
                          "onUpdate:modelValue": _cache[31] || (_cache[31] = ($event) => jurnal_provisi.value = $event)
                        }, [
                          _hoisted_129$3,
                          (openBlock(true), createElementBlock(Fragment, null, renderList(Perkiraan_list.value, (perkiraan) => {
                            return openBlock(), createElementBlock("option", {
                              value: perkiraan.noper
                            }, toDisplayString(perkiraan.noper) + " - " + toDisplayString(perkiraan.nama), 9, _hoisted_130$3);
                          }), 256))
                        ], 512), [
                          [vModelSelect, jurnal_provisi.value]
                        ])
                      ])
                    ]),
                    createBaseVNode("div", _hoisted_131$3, [
                      _hoisted_132$3,
                      _hoisted_133$3,
                      createBaseVNode("div", _hoisted_134$3, [
                        withDirectives(createBaseVNode("select", {
                          name: "jurnal_akrual",
                          id: "jurnal_akrual",
                          class: "w-full h-7 mb-1 px-0 text-xs border rounded focus:shadow-outline",
                          "onUpdate:modelValue": _cache[32] || (_cache[32] = ($event) => jurnal_akrual.value = $event)
                        }, [
                          _hoisted_135$3,
                          (openBlock(true), createElementBlock(Fragment, null, renderList(Perkiraan_list.value, (perkiraan) => {
                            return openBlock(), createElementBlock("option", {
                              value: perkiraan.noper
                            }, toDisplayString(perkiraan.noper) + " - " + toDisplayString(perkiraan.nama), 9, _hoisted_136$3);
                          }), 256))
                        ], 512), [
                          [vModelSelect, jurnal_akrual.value]
                        ])
                      ])
                    ]),
                    createBaseVNode("div", _hoisted_137$3, [
                      _hoisted_138$3,
                      _hoisted_139$3,
                      createBaseVNode("div", _hoisted_140$3, [
                        withDirectives(createBaseVNode("select", {
                          name: "jurnal_ppap",
                          id: "jurnal_ppap",
                          class: "w-full h-7 mb-1 px-0 text-xs border rounded focus:shadow-outline",
                          "onUpdate:modelValue": _cache[33] || (_cache[33] = ($event) => jurnal_ppap.value = $event)
                        }, [
                          _hoisted_141$3,
                          (openBlock(true), createElementBlock(Fragment, null, renderList(Perkiraan_list.value, (perkiraan) => {
                            return openBlock(), createElementBlock("option", {
                              value: perkiraan.noper
                            }, toDisplayString(perkiraan.noper) + " - " + toDisplayString(perkiraan.nama), 9, _hoisted_142$3);
                          }), 256))
                        ], 512), [
                          [vModelSelect, jurnal_ppap.value]
                        ])
                      ])
                    ])
                  ])
                ], 40, _hoisted_57$4)
              ]),
              _: 1
            }),
            createVNode(_component_ModalFooter, { class: "text-right" }, {
              default: withCtx(() => [
                createBaseVNode("button", {
                  type: "button",
                  class: "btn btn-outline-secondary w-32 mr-1",
                  onClick: resetForm
                }, " Cancel "),
                _hoisted_143$3
              ]),
              _: 1
            })
          ]),
          _: 1
        }, 8, ["show"]),
        createVNode(_component_Modal, {
          backdrop: "static",
          show: modal_delete.value,
          onHidden: _cache[36] || (_cache[36] = ($event) => modal_delete.value = false)
        }, {
          default: withCtx(() => [
            createVNode(_component_ModalBody, { class: "p-0" }, {
              default: withCtx(() => [
                createBaseVNode("div", _hoisted_144$3, [
                  createVNode(_component_XCircleIcon, { class: "w-16 h-16 text-danger mx-auto mt-3" }),
                  _hoisted_145$3,
                  createBaseVNode("div", _hoisted_146$3, [
                    createTextVNode(" Ingin menghapus "),
                    userIds.value.length > 1 ? (openBlock(), createElementBlock("span", _hoisted_147$3, "Beberapa")) : createCommentVNode("", true),
                    createTextVNode(" data dengan SANDI "),
                    _hoisted_148$3,
                    createBaseVNode("b", null, toDisplayString(userIds.value.length > 1 ? userIds.value : userIds.value[0]), 1),
                    createTextVNode(" ? "),
                    _hoisted_149$3,
                    createTextVNode("Data yang telah dihapus tidak bisa kembali. ")
                  ])
                ]),
                createBaseVNode("div", _hoisted_150$3, [
                  createBaseVNode("button", {
                    type: "button",
                    onClick: resetForm,
                    class: "btn btn-outline-secondary w-24 mr-1 text-xs"
                  }, " Batal "),
                  createBaseVNode("button", {
                    type: "button",
                    class: "btn btn-danger w-24 text-xs",
                    onClick: _cache[35] || (_cache[35] = (e) => {
                      e.preventDefault();
                      deleteAnggota();
                    })
                  }, " Hapus ")
                ])
              ]),
              _: 1
            })
          ]),
          _: 1
        }, 8, ["show"])
      ], 64);
    };
  }
};
const request$4 = window.api.daftarAnggota;
const useDaftarAnggotaStore = defineStore({
  id: "daftar-anggota",
  state: () => ({
    rawItems: []
  }),
  getters: {
    items: (state) => state.rawItems
  },
  actions: {
    async readItem(search_type, search_data, sort_by, sort_mode, page_number, total_row_displayed) {
      try {
        const data = await request$4.fetchAnggota(
          search_type,
          search_data,
          sort_by,
          sort_mode,
          page_number,
          total_row_displayed
        );
        if (data.success) {
          this.rawItems = data.data.rows;
          return data.data.total_page;
        } else if (!data.success && data.data.message == "token invalid") {
          Swal.fire({
            icon: "error",
            title: "Token Invalid",
            text: "Token Anda Invalid, silahkan login ulang"
          }).then((data2) => {
            localStorage.removeItem("user");
            router$1.push("/auth");
            window.location.reload();
          });
        }
      } catch (error) {
        throw new Error(error);
      }
    },
    async readLaporan(kantor, tanggal, resort, limit) {
      try {
        const data = await request$4.fetchLaporan(kantor, tanggal, resort, limit);
        if (data.success) {
          this.rawItems = data.data;
        } else if (!data.success && data.data.message == "token invalid") {
          Swal.fire({
            icon: "error",
            title: "Token Invalid",
            text: "Token Anda Invalid, silahkan login ulang"
          }).then((data2) => {
            localStorage.removeItem("user");
            router$1.push("/auth");
            window.location.reload();
          });
        }
      } catch (error) {
        throw new Error(error);
      }
    },
    async getItem(iddata) {
      try {
        const data = await request$4.getAnggota(iddata);
        if (data.success) {
          return data.data.rows[0];
        }
      } catch (error) {
        throw new Error(error);
      }
    },
    async postItem(iddata, imageFoto, imageTTD, imagePA, tanggal, no_anggota, no_ktp, no_kk, nama_lengkap, tempat_lahir, tanggal_lahir, jenis_kelamin, agama, alamat, rt, rw, kelurahan, kecamatan, kota, pendamping, pekerjaan, no_telepon, resort) {
      try {
        this.rawItems.push({
          iddata,
          tanggal,
          no_anggota,
          no_ktp,
          no_kk,
          nama_lengkap,
          tempat_lahir,
          tanggal_lahir,
          jenis_kelamin,
          agama,
          alamat,
          rt,
          rw,
          kelurahan,
          kecamatan,
          kota,
          pendamping,
          pekerjaan,
          no_telepon,
          resort
        });
        await request$4.postAnggota(
          iddata,
          tanggal,
          no_anggota,
          no_ktp,
          no_kk,
          nama_lengkap,
          tempat_lahir,
          tanggal_lahir,
          jenis_kelamin,
          agama,
          alamat,
          rt,
          rw,
          kelurahan,
          kecamatan,
          kota,
          pendamping,
          pekerjaan,
          no_telepon,
          resort,
          imageFoto,
          imageTTD,
          imagePA
        );
      } catch (error) {
        throw new Error(error);
      }
    },
    async removeItem(iddata) {
      try {
        this.rawItems = this.rawItems.filter((item) => item.iddata !== iddata);
        const data = await request$4.deleteAnggota(iddata);
      } catch (error) {
        throw new Error(error);
      }
    }
  }
});
const PP = "" + new URL("pp-placeholder-62378187.svg", import.meta.url).href;
const list_kantor = [
  { nama: "0000 - KONSOLIDASI", value: "0000" },
  { nama: "0001 - KANTOR PUSAT", value: "0001" },
  { nama: "0002 - KANTOR CABANG", value: "0002" }
];
const list_jenis_kelamin = [
  { nama: "Laki - Laki", value: "L" },
  { nama: "Perempuan", value: "P" }
];
const list_agama = [
  { nama: "Islam", value: "ISLAM       " },
  { nama: "Kristen", value: "KRISTEN     " },
  { nama: "Katolik", value: "KATOLIK" },
  { nama: "Hindu", value: "HINDU" },
  { nama: "Buddha", value: "BUDDHA" },
  { nama: "Konghucu", value: "KONGHUCU" }
];
const list_resort = [
  { value: "050 ", nama: "050 - SMB" },
  { value: "101 ", nama: "101 - KRESNA" },
  { value: "102 ", nama: "102 - RAMA" },
  { value: "103 ", nama: "103 - SADEWA" },
  { value: "104 ", nama: "104 - NAKULA" },
  { value: "105 ", nama: "105 - SRIKANDI" },
  { value: "106 ", nama: "106 - ARIMBI" },
  { value: "107 ", nama: "107 - ANJANI" },
  { value: "108 ", nama: "108 - ABIMANYU" },
  { value: "109 ", nama: "109 - BANOWATI" },
  { value: "110 ", nama: "109 - DRUPADI" },
  { value: "111 ", nama: "110 - GONDOMONO" },
  { value: "112 ", nama: "112 - KUNTHI" },
  { value: "113 ", nama: "113 - LARASATI" },
  { value: "114 ", nama: "114 - BALADEWA" },
  { value: "115 ", nama: "115 - ANTAREJA" },
  { value: "116 ", nama: "116 - LESMANA" },
  { value: "117 ", nama: "117 - SUBALI" },
  { value: "118 ", nama: "118 - SUGRIWA" },
  { value: "119 ", nama: "119 - PERMADI" },
  { value: "120 ", nama: "120 - PERGIWO" },
  { value: "121 ", nama: "121 - UTARI" },
  { value: "122 ", nama: "122 - JATAYU" }
];
const currencyFormatter = new Intl.NumberFormat("id", {
  style: "currency",
  currency: "IDR"
});
const TRANSAKSI = "" + new URL("transaksi-d7a1f664.svg", import.meta.url).href;
const _hoisted_1$6 = { class: "relative top-0 bg-white w-full border-y-2 border-[#d0d3d4]" };
const _hoisted_2$6 = { class: "flex space-x-4 w-full justify-center m-auto px-5" };
const _hoisted_3$6 = { class: "grid grid-cols-8 xl:grid-cols-10 w-full h-10" };
const _hoisted_4$6 = /* @__PURE__ */ createBaseVNode("span", { class: "w-4 h-2 px-0.5 mx-auto my-[2px] stroke-2 stroke-current text-[8px] text-success font-bold" }, "CSV", -1);
const _hoisted_5$6 = /* @__PURE__ */ createBaseVNode("span", { class: "w-4 h-2 px-0.5 mx-auto my-[2px] stroke-2 stroke-current text-[8px] text-danger font-bold" }, "PDF", -1);
const _hoisted_6$6 = /* @__PURE__ */ createBaseVNode("i", { class: "fa-solid fa-check" }, null, -1);
const _hoisted_7$6 = {
  href: "javascript:history.go(0)",
  title: "Refresh All",
  class: "inline-block hover:text-primary align-middle text-center select-none border font-normal whitespace-no-wrap rounded no-underline h-9 mx-auto px-2 leading-tight text-xs bg-gray-100 text-gray-800 hover:bg-gray-200 btn-light-bordered"
};
const _hoisted_8$6 = { class: "flex order-2 w-full h-10" };
const _hoisted_9$6 = {
  id: "pagination",
  class: "mx-auto"
};
const _hoisted_10$6 = { class: "inline-flex align-middle leading-tight text-xs" };
const _hoisted_11$5 = { class: "relative inline-flex align-middle py-1 leading-tight text-xs" };
const _hoisted_12$5 = { class: "flex items-stretch w-full" };
const _hoisted_13$5 = { class: "relative inline-flex align-middle py-1 leading-tight text-xs" };
const _hoisted_14$5 = { class: "items-center justify-center w-full flex h-10" };
const _hoisted_15$5 = /* @__PURE__ */ createBaseVNode("option", { value: "50" }, "50", -1);
const _hoisted_16$5 = /* @__PURE__ */ createBaseVNode("option", { value: "75" }, "75", -1);
const _hoisted_17$5 = /* @__PURE__ */ createBaseVNode("option", { value: "100" }, "100", -1);
const _hoisted_18$5 = [
  _hoisted_15$5,
  _hoisted_16$5,
  _hoisted_17$5
];
const _hoisted_19$5 = {
  class: "relative flex items-stretch w-full",
  id: "search-input-group"
};
const _hoisted_20$5 = ["placeholder"];
const _hoisted_21$5 = { class: "input-group-append" };
const _hoisted_22$4 = { class: "input-group-append" };
const _hoisted_23$4 = /* @__PURE__ */ createStaticVNode('<option value="nama">Nama</option><option value="iddata">ID</option><option value="cif">No Anggota</option><option value="noktp">No KTP</option><option value="alamat">Alamat</option><option value="desa">Desa</option><option value="kecamatan">kecamatan</option><option value="kota">Kota</option>', 8);
const _hoisted_31$3 = [
  _hoisted_23$4
];
const _hoisted_32$4 = { class: "flex flex-col h-[80vh] min-[1537px]:h-[85vh] shadow-md rounded-lg" };
const _hoisted_33$4 = { class: "flex-grow overflow-auto" };
const _hoisted_34$4 = { class: "relative w-full text-xs text-left text-gray-500 table-interval" };
const _hoisted_35$5 = { class: "text-xs font-bold text-gray-800 uppercase bg-blue-200 sticky top-0 z-10 table-fixed" };
const _hoisted_36$5 = {
  scope: "col",
  class: "p-2 border pl-3"
};
const _hoisted_37$5 = { class: "flex items-center" };
const _hoisted_38$5 = /* @__PURE__ */ createBaseVNode("label", {
  for: "checkbox-all-search",
  class: "sr-only"
}, "checkbox", -1);
const _hoisted_39$5 = /* @__PURE__ */ createBaseVNode("th", {
  scope: "col",
  class: "text-center uppercase border"
}, "Actions", -1);
const _hoisted_40$5 = { class: "overflow-y-scroll" };
const _hoisted_41$5 = ["anggota", "value"];
const _hoisted_42$5 = { class: "w-4 border-r border-b font-medium p-0 pl-3" };
const _hoisted_43$5 = { class: "flex items-center" };
const _hoisted_44$5 = /* @__PURE__ */ createBaseVNode("span", { class: "hidden cursor-pointer -ml-[9px] mr-[1px] rotate-90 group-hover:block text-black" }, ":::", -1);
const _hoisted_45$5 = ["value"];
const _hoisted_46$5 = ["onDblclick"];
const _hoisted_47$5 = ["onDblclick"];
const _hoisted_48$4 = ["onDblclick"];
const _hoisted_49$4 = ["onDblclick"];
const _hoisted_50$4 = ["onDblclick"];
const _hoisted_51$4 = ["onDblclick"];
const _hoisted_52$4 = ["onDblclick"];
const _hoisted_53$4 = ["onDblclick"];
const _hoisted_54$4 = ["onDblclick"];
const _hoisted_55$4 = ["onDblclick"];
const _hoisted_56$3 = ["onDblclick"];
const _hoisted_57$3 = ["onDblclick"];
const _hoisted_58$3 = ["onDblclick"];
const _hoisted_59$3 = { class: "min-w-max border-r border-b font-medium p-1" };
const _hoisted_60$3 = { class: "flex justify-center" };
const _hoisted_61$4 = ["onClick"];
const _hoisted_62$4 = ["onClick"];
const _hoisted_63$4 = { class: "fixed intleft-2 right-0 top-0 bottom-0 w-full h-[100vh] z-50 overflow-hidden bg-gray-500 opacity-75 flex flex-col items-center justify-center" };
const _hoisted_64$4 = /* @__PURE__ */ createBaseVNode("h2", { class: "text-center text-white text-xl font-semibold" }, "Loading...", -1);
const _hoisted_65$4 = /* @__PURE__ */ createBaseVNode("p", { class: "w-1/3 text-center text-white" }, "Sedang Memuat Data", -1);
const _hoisted_66$4 = /* @__PURE__ */ createBaseVNode("p", { class: "w-1/3 text-center text-white" }, " Ini mungkin memakan waktu beberapa saat, tolong jangan tutup halaman ini. ", -1);
const _hoisted_67$4 = { class: "font-medium text-base mr-auto" };
const _hoisted_68$4 = { key: 0 };
const _hoisted_69$4 = { key: 1 };
const _hoisted_70$4 = { key: 2 };
const _hoisted_71$4 = { key: 3 };
const _hoisted_72$4 = {
  key: 0,
  class: "flex space-x-4 -mx-5 py-2 justify-center -mt-5 mb-3 bg-gray-100"
};
const _hoisted_73$4 = {
  class: "px-2 h-10 border rounded-md box flex items-center text-amber-800 bg-white hover:bg-slate-200",
  title: "Fasilitas"
};
const _hoisted_74$4 = /* @__PURE__ */ createBaseVNode("span", { class: "px-0.5 mx-auto my-[2px] stroke-2 stroke-current text-xs text-black font-bold" }, "Fasilitas", -1);
const _hoisted_75$4 = {
  class: "px-2 h-10 border rounded-md box flex items-center text-slate-600 bg-white hover:bg-slate-200",
  title: "Simpanan Pokok"
};
const _hoisted_76$4 = /* @__PURE__ */ createBaseVNode("span", { class: "px-0.5 mx-auto my-[2px] stroke-2 stroke-current text-xs text-black font-bold" }, "Simp. Pokok", -1);
const _hoisted_77$4 = {
  class: "px-2 h-10 border rounded-md box flex items-center text-amber-400 bg-white hover:bg-slate-200",
  title: "Simpanan Wajib"
};
const _hoisted_78$4 = /* @__PURE__ */ createBaseVNode("span", { class: "px-0.5 mx-auto my-[2px] stroke-2 stroke-current text-xs text-black font-bold" }, "Simp. Wajib", -1);
const _hoisted_79$4 = {
  class: "px-2 h-10 border rounded-md box flex items-center text-amber-700 bg-white hover:bg-slate-200",
  title: "Simpanan SWK"
};
const _hoisted_80$4 = /* @__PURE__ */ createBaseVNode("span", { class: "px-0.5 mx-auto my-[2px] stroke-2 stroke-current text-xs text-black font-bold" }, "Simp. SWK", -1);
const _hoisted_81$4 = {
  class: "px-2 h-10 border rounded-md box flex items-center text-red-300 bg-white hover:bg-slate-200",
  title: "Simpanan Lain - Lain"
};
const _hoisted_82$4 = /* @__PURE__ */ createBaseVNode("span", { class: "px-0.5 mx-auto my-[2px] stroke-2 stroke-current text-xs text-black font-bold" }, "Simp. Lain", -1);
const _hoisted_83$4 = {
  class: "px-2 h-10 border rounded-md box flex items-center text-primary bg-white hover:bg-slate-200",
  title: "Simpanan SHU"
};
const _hoisted_84$4 = /* @__PURE__ */ createBaseVNode("span", { class: "px-0.5 mx-auto my-[2px] stroke-2 stroke-current text-xs text-black font-bold" }, "Simp. SHU", -1);
const _hoisted_85$4 = {
  class: "px-2 h-10 border rounded-md box flex items-center text-green-600 bg-white hover:bg-slate-200",
  title: "Simpanan Saldo"
};
const _hoisted_86$4 = /* @__PURE__ */ createBaseVNode("span", { class: "px-0.5 mx-auto my-[2px] stroke-2 stroke-current text-xs text-black font-bold" }, "Simp. Saldo", -1);
const _hoisted_87$4 = {
  class: "px-2 h-10 border rounded-md box flex items-center text-black bg-white hover:bg-slate-200",
  title: "Catatan"
};
const _hoisted_88$4 = /* @__PURE__ */ createBaseVNode("span", { class: "px-0.5 mx-auto my-[2px] stroke-2 stroke-current text-xs text-black font-bold" }, "Catatan", -1);
const _hoisted_89$4 = { class: "-mx-4" };
const _hoisted_90$4 = ["onSubmit"];
const _hoisted_91$4 = { class: "border-r-2 mx-auto col-span-3 overflow-y-auto mt-0" };
const _hoisted_92$4 = { class: "border-4 relative rounded-md border-dashed p-2 m-2 text-sm mx-auto text-center mb-4 max-w-max h-[40%] bg-gray-100" };
const _hoisted_93$4 = { class: "border p-1" };
const _hoisted_94$4 = ["src"];
const _hoisted_95$4 = ["src"];
const _hoisted_96$4 = { class: "mb-0 text-xs rounded-t-md border-b bg-white" };
const _hoisted_97$4 = { class: "mb-1 text-xs rounded-b-md bg-white" };
const _hoisted_98$4 = /* @__PURE__ */ createBaseVNode("span", { class: "font-semibold" }, " KB", -1);
const _hoisted_99$4 = /* @__PURE__ */ createBaseVNode("label", {
  for: "foto",
  class: "font-medium text-base rounded-lg bg-white px-2 absolute text-gray-500 duration-300 transform -translate-y-6 scale-75 top-2.5 z-10 origin-[0] left-2 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6"
}, "Foto Anggota", -1);
const _hoisted_100$4 = { class: "border-4 relative rounded-md border-dashed p-2 m-2 text-sm text-center mb-4 bg-gray-100" };
const _hoisted_101$4 = { class: "border p-1" };
const _hoisted_102$4 = ["src"];
const _hoisted_103$4 = { class: "mb-0 text-xs rounded-t-md border-b bg-white" };
const _hoisted_104$4 = { class: "mb-1 text-xs rounded-b-md bg-white" };
const _hoisted_105$4 = /* @__PURE__ */ createBaseVNode("span", { class: "font-semibold" }, " KB", -1);
const _hoisted_106$4 = /* @__PURE__ */ createBaseVNode("label", {
  for: "foto",
  class: "font-medium text-base rounded-lg bg-white px-2 absolute text-gray-500 duration-300 transform -translate-y-6 scale-75 top-2.5 z-10 origin-[0] left-2 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6"
}, "Tanda Tangan Anggota", -1);
const _hoisted_107$4 = { class: "border-4 relative rounded-md border-dashed p-2 m-2 text-sm text-center mb-4 bg-gray-100" };
const _hoisted_108$4 = { class: "border p-1" };
const _hoisted_109$4 = ["src"];
const _hoisted_110$4 = { class: "mb-0 text-xs rounded-t-md border-b bg-white" };
const _hoisted_111$4 = { class: "mb-1 text-xs rounded-b-md bg-white" };
const _hoisted_112$4 = /* @__PURE__ */ createBaseVNode("span", { class: "font-semibold" }, " KB", -1);
const _hoisted_113$4 = /* @__PURE__ */ createBaseVNode("label", {
  for: "foto",
  class: "font-medium text-base rounded-lg bg-white px-2 absolute text-gray-500 duration-300 transform -translate-y-6 scale-75 top-2.5 z-10 origin-[0] left-2 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6"
}, "Paraf Anggota", -1);
const _hoisted_114$4 = { class: "col-span-9 flex max-h-[600px]" };
const _hoisted_115$4 = { class: "flex-grow overflow-auto pr-2" };
const _hoisted_116$4 = { class: "grid grid-cols-2 gap-4" };
const _hoisted_117$3 = { class: "relative z-0 w-full mb-5 mt-2 group" };
const _hoisted_118$3 = /* @__PURE__ */ createBaseVNode("label", {
  for: "tanggal",
  class: "peer-focus:font-medium rounded-lg bg-white px-2 absolute text-sm text-gray-500 duration-300 transform -translate-y-6 scale-75 top-2.5 peer-focus:top-3.5 z-10 origin-[0] left-2 peer-focus:text-blue-600 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6"
}, "Tanggal", -1);
const _hoisted_119$3 = { class: "relative z-0 w-full mb-5 mt-2 group" };
const _hoisted_120$2 = /* @__PURE__ */ createBaseVNode("label", {
  for: "no_anggota",
  class: "peer-focus:font-medium rounded-lg bg-white px-2 absolute text-sm text-gray-500 duration-300 transform -translate-y-6 scale-75 top-2.5 peer-focus:top-3.5 z-10 origin-[0] left-2 peer-focus:text-blue-600 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6"
}, "No. Anggota", -1);
const _hoisted_121$2 = /* @__PURE__ */ createBaseVNode("hr", { class: "mb-3 border-1 border-gray-300 bg-gray-300" }, null, -1);
const _hoisted_122$2 = { class: "grid grid-cols-2 gap-6" };
const _hoisted_123$2 = { class: "relative z-0 w-full mb-6 group" };
const _hoisted_124$2 = /* @__PURE__ */ createBaseVNode("label", {
  for: "no_ktp",
  class: "peer-focus:font-medium rounded-lg bg-white px-2 absolute text-sm text-gray-500 duration-300 transform -translate-y-6 scale-75 top-2.5 peer-focus:top-3.5 z-10 origin-[0] left-2 peer-focus:text-blue-600 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6"
}, "No. KTP/ NIK", -1);
const _hoisted_125$2 = { class: "relative z-0 w-full mb-6 group" };
const _hoisted_126$2 = /* @__PURE__ */ createBaseVNode("label", {
  for: "no_kk",
  class: "peer-focus:font-medium rounded-lg bg-white px-2 absolute text-sm text-gray-500 duration-300 transform -translate-y-6 scale-75 top-2.5 peer-focus:top-3.5 z-10 origin-[0] left-2 peer-focus:text-blue-600 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6"
}, "No. Kartu Keluarga", -1);
const _hoisted_127$2 = { class: "relative z-0 w-full mb-6 group" };
const _hoisted_128$2 = /* @__PURE__ */ createBaseVNode("label", {
  for: "nama_lengkap",
  class: "peer-focus:font-medium rounded-lg bg-white px-2 absolute text-sm text-gray-500 duration-300 transform -translate-y-6 scale-75 top-2.5 peer-focus:top-3.5 z-10 origin-[0] left-2 peer-focus:text-blue-600 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6"
}, "Nama Lengkap", -1);
const _hoisted_129$2 = { class: "grid grid-cols-2 gap-6" };
const _hoisted_130$2 = { class: "relative z-0 w-full mb-6 group" };
const _hoisted_131$2 = /* @__PURE__ */ createBaseVNode("label", {
  for: "tempat_lahir",
  class: "peer-focus:font-medium rounded-lg bg-white px-2 absolute text-sm text-gray-500 duration-300 transform -translate-y-6 scale-75 top-2.5 peer-focus:top-3.5 z-10 origin-[0] left-2 peer-focus:text-blue-600 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6"
}, "Tempat Lahir", -1);
const _hoisted_132$2 = { class: "relative z-0 w-full mb-6 group" };
const _hoisted_133$2 = /* @__PURE__ */ createBaseVNode("label", {
  for: "tanggal_lahir",
  class: "peer-focus:font-medium rounded-lg bg-white px-2 absolute text-sm text-gray-500 duration-300 transform -translate-y-6 scale-75 top-3.5 z-10 origin-[0] left-2 peer-focus:text-blue-600 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6"
}, "Tanggal Lahir", -1);
const _hoisted_134$2 = { class: "grid grid-cols-2 gap-6" };
const _hoisted_135$2 = { class: "relative z-0 w-full mb-6 group" };
const _hoisted_136$2 = /* @__PURE__ */ createBaseVNode("option", {
  class: "text-xs",
  value: "",
  disabled: ""
}, "Pilihlah Salah Satu", -1);
const _hoisted_137$2 = ["value"];
const _hoisted_138$2 = /* @__PURE__ */ createBaseVNode("label", {
  for: "jenis_kelamin",
  class: "peer-focus:font-medium rounded-lg bg-white px-2 absolute text-sm text-gray-500 duration-300 transform -translate-y-6 scale-75 top-3.5 peer-focus:top-2.5 z-10 origin-[0] left-2 peer-focus:text-blue-600 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6"
}, "Jenis Kelamin", -1);
const _hoisted_139$2 = { class: "relative z-0 w-full mb-6 group" };
const _hoisted_140$2 = /* @__PURE__ */ createBaseVNode("option", {
  class: "text-xs",
  value: "",
  disabled: ""
}, "Pilihlah Salah Satu", -1);
const _hoisted_141$2 = ["value"];
const _hoisted_142$2 = /* @__PURE__ */ createBaseVNode("label", {
  for: "agama",
  class: "peer-focus:font-medium rounded-lg bg-white px-2 absolute text-sm text-gray-500 duration-300 transform -translate-y-6 scale-75 top-3.5 peer-focus:top-3.5 z-10 origin-[0] left-2 peer-focus:text-blue-600 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6"
}, "Agama", -1);
const _hoisted_143$2 = { class: "relative z-0 w-full mb-6 group" };
const _hoisted_144$2 = /* @__PURE__ */ createBaseVNode("label", {
  for: "alamat",
  class: "peer-focus:font-medium rounded-lg bg-white px-2 absolute text-sm text-gray-500 duration-300 transform -translate-y-6 scale-75 top-2.5 peer-focus:top-3.5 z-10 origin-[0] left-2 peer-focus:text-blue-600 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6"
}, "Alamat", -1);
const _hoisted_145$2 = { class: "grid grid-cols-4 gap-6" };
const _hoisted_146$2 = { class: "relative z-0 w-full mb-6 group" };
const _hoisted_147$2 = /* @__PURE__ */ createBaseVNode("label", {
  for: "rt",
  class: "peer-focus:font-medium rounded-lg bg-white px-2 absolute text-sm text-gray-500 duration-300 transform -translate-y-6 scale-75 top-2.5 peer-focus:top-3.5 z-10 origin-[0] left-2 peer-focus:text-blue-600 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6"
}, "RT", -1);
const _hoisted_148$2 = { class: "relative z-0 w-full mb-6 group" };
const _hoisted_149$2 = /* @__PURE__ */ createBaseVNode("label", {
  for: "rw",
  class: "peer-focus:font-medium rounded-lg bg-white px-2 absolute text-sm text-gray-500 duration-300 transform -translate-y-6 scale-75 top-2.5 peer-focus:top-3.5 z-10 origin-[0] left-2 peer-focus:text-blue-600 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6"
}, "RW", -1);
const _hoisted_150$2 = { class: "relative z-0 w-full col-span-2 mb-6 group" };
const _hoisted_151$2 = /* @__PURE__ */ createBaseVNode("label", {
  for: "kelurahan",
  class: "peer-focus:font-medium rounded-lg bg-white px-2 absolute text-sm text-gray-500 duration-300 transform -translate-y-6 scale-75 top-2.5 peer-focus:top-3.5 z-10 origin-[0] left-2 peer-focus:text-blue-600 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6"
}, "Kelurahan/ Desa", -1);
const _hoisted_152$2 = { class: "grid grid-cols-2 gap-6" };
const _hoisted_153$2 = { class: "relative z-0 w-full mb-6 group" };
const _hoisted_154$2 = /* @__PURE__ */ createBaseVNode("label", {
  for: "kecamatan",
  class: "peer-focus:font-medium rounded-lg bg-white px-2 absolute text-sm text-gray-500 duration-300 transform -translate-y-6 scale-75 top-2.5 peer-focus:top-3.5 z-10 origin-[0] left-2 peer-focus:text-blue-600 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6"
}, "Kecamatan", -1);
const _hoisted_155$2 = { class: "relative z-0 w-full mb-6 group" };
const _hoisted_156$2 = /* @__PURE__ */ createBaseVNode("label", {
  for: "kota",
  class: "peer-focus:font-medium rounded-lg bg-white px-2 absolute text-sm text-gray-500 duration-300 transform -translate-y-6 scale-75 top-2.5 peer-focus:top-3.5 z-10 origin-[0] left-2 peer-focus:text-blue-600 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6"
}, "Kabupaten/ Kota", -1);
const _hoisted_157$2 = { class: "grid grid-cols-3 gap-6" };
const _hoisted_158$2 = { class: "relative z-0 w-full mb-6 group" };
const _hoisted_159$2 = /* @__PURE__ */ createBaseVNode("label", {
  for: "pendamping",
  class: "peer-focus:font-medium rounded-lg bg-white px-2 absolute text-sm text-gray-500 duration-300 transform -translate-y-6 scale-75 top-2.5 peer-focus:top-3.5 z-10 origin-[0] left-2 peer-focus:text-blue-600 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6"
}, "Pendamping", -1);
const _hoisted_160$2 = { class: "relative z-0 w-full mb-6 group" };
const _hoisted_161$2 = /* @__PURE__ */ createBaseVNode("label", {
  for: "pekerjaan",
  class: "peer-focus:font-medium rounded-lg bg-white px-2 absolute text-sm text-gray-500 duration-300 transform -translate-y-6 scale-75 top-2.5 peer-focus:top-3.5 z-10 origin-[0] left-2 peer-focus:text-blue-600 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6"
}, "Pekerjaan", -1);
const _hoisted_162$2 = { class: "relative z-0 w-full mb-6 group" };
const _hoisted_163$2 = /* @__PURE__ */ createBaseVNode("label", {
  for: "telepon",
  class: "peer-focus:font-medium rounded-lg bg-white px-2 absolute text-sm text-gray-500 duration-300 transform -translate-y-6 scale-75 top-2.5 peer-focus:top-3.5 z-10 origin-[0] left-2 peer-focus:text-blue-600 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6"
}, "No. Telepon", -1);
const _hoisted_164$2 = { class: "grid grid-cols-2 gap-6" };
const _hoisted_165$2 = { class: "relative z-0 w-full mb-5 group" };
const _hoisted_166$2 = /* @__PURE__ */ createBaseVNode("option", {
  class: "text-xs",
  value: "",
  disabled: ""
}, "Pilihlah Salah Satu", -1);
const _hoisted_167$2 = ["value"];
const _hoisted_168$2 = /* @__PURE__ */ createBaseVNode("label", {
  for: "resort",
  class: "peer-focus:font-medium rounded-lg bg-white px-2 absolute text-sm text-gray-500 duration-300 transform -translate-y-6 scale-75 top-3.5 peer-focus:top-3.5 z-10 origin-[0] left-2 peer-focus:text-blue-600 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6"
}, "Resort", -1);
const _hoisted_169$2 = { class: "relative z-0 w-full mb-5 group" };
const _hoisted_170$2 = /* @__PURE__ */ createBaseVNode("label", {
  for: "tanggal_bht",
  class: "peer-focus:font-medium rounded-lg bg-white px-2 absolute text-sm text-gray-500 duration-300 transform -translate-y-6 scale-75 top-3.5 peer-focus:top-3.5 z-10 origin-[0] left-2 peer-focus:text-blue-600 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6"
}, "Tanggal BHT", -1);
const _hoisted_171$2 = /* @__PURE__ */ createBaseVNode("hr", { class: "mb-3 border-1 border-gray-300 bg-gray-300" }, null, -1);
const _hoisted_172$2 = { class: "grid grid-cols-2 gap-6" };
const _hoisted_173$2 = { class: "relative z-0 w-full mb-5 group" };
const _hoisted_174$2 = /* @__PURE__ */ createBaseVNode("div", { class: "absolute rounded-l-md top-0 left-0 bottom-0 text-black p-2 bg-gray-300 peer-focus:bg-blue-600" }, " Rp ", -1);
const _hoisted_175$2 = /* @__PURE__ */ createBaseVNode("label", {
  for: "simpanan_pokok",
  class: "peer-focus:font-medium rounded-lg bg-white px-2 absolute text-sm text-gray-500 duration-300 transform -translate-y-6 scale-75 top-2.5 peer-focus:top-3.5 z-10 origin-[0] left-10 peer-focus:text-blue-600 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6"
}, "Simpanan Pokok", -1);
const _hoisted_176$2 = { class: "relative z-0 w-full mb-5 group" };
const _hoisted_177$2 = /* @__PURE__ */ createBaseVNode("div", { class: "absolute rounded-l-md top-0 left-0 bottom-0 text-black p-2 bg-gray-300 peer-focus:bg-blue-600" }, " Rp ", -1);
const _hoisted_178$2 = /* @__PURE__ */ createBaseVNode("label", {
  for: "simpanan_swk",
  class: "peer-focus:font-medium rounded-lg bg-white px-2 absolute text-sm text-gray-500 duration-300 transform -translate-y-6 scale-75 top-2.5 peer-focus:top-3.5 z-10 origin-[0] left-10 peer-focus:text-blue-600 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6"
}, "Simpanan SWK", -1);
const _hoisted_179$2 = { class: "grid grid-cols-2 gap-6" };
const _hoisted_180$2 = { class: "relative z-0 w-full mb-5 group" };
const _hoisted_181$2 = /* @__PURE__ */ createBaseVNode("div", { class: "absolute rounded-l-md top-0 left-0 bottom-0 text-black p-2 bg-gray-300 peer-focus:bg-blue-600" }, " Rp ", -1);
const _hoisted_182$2 = /* @__PURE__ */ createBaseVNode("label", {
  for: "simpanan_wajib",
  class: "peer-focus:font-medium rounded-lg bg-white px-2 absolute text-sm text-gray-500 duration-300 transform -translate-y-6 scale-75 top-2.5 peer-focus:top-3.5 z-10 origin-[0] left-10 peer-focus:text-blue-600 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6"
}, "Simpanan Wajib", -1);
const _hoisted_183$2 = { class: "relative z-0 w-full mb-5 group" };
const _hoisted_184$2 = /* @__PURE__ */ createBaseVNode("div", { class: "absolute rounded-l-md top-0 left-0 bottom-0 text-black p-2 bg-gray-300 peer-focus:bg-blue-600" }, " Rp ", -1);
const _hoisted_185$2 = /* @__PURE__ */ createBaseVNode("label", {
  for: "simpanan_lain",
  class: "peer-focus:font-medium rounded-lg bg-white px-2 absolute text-sm text-gray-500 duration-300 transform -translate-y-6 scale-75 top-2.5 peer-focus:top-3.5 z-10 origin-[0] left-10 peer-focus:text-blue-600 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6"
}, "Simpanan Lain - Lain", -1);
const _hoisted_186$2 = { class: "grid grid-cols-2 gap-6" };
const _hoisted_187$2 = { class: "relative z-0 w-full mb-5 col-start-2 group" };
const _hoisted_188$2 = /* @__PURE__ */ createBaseVNode("div", { class: "absolute rounded-l-md top-0 left-0 bottom-0 text-black p-2 bg-gray-300 peer-focus:bg-blue-600" }, " Rp ", -1);
const _hoisted_189$2 = /* @__PURE__ */ createBaseVNode("label", {
  for: "total_simpanan",
  class: "peer-focus:font-medium rounded-lg bg-white px-2 absolute text-sm text-gray-500 duration-300 transform -translate-y-6 scale-75 top-2.5 peer-focus:top-3.5 z-10 origin-[0] left-10 peer-focus:text-blue-600 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6"
}, "Total Simpanan", -1);
const _hoisted_190$2 = /* @__PURE__ */ createBaseVNode("button", {
  type: "submit",
  form: "daftarAnggotaForm",
  class: "btn btn-primary w-32"
}, "Simpan", -1);
const _hoisted_191$2 = { class: "p-5 text-center" };
const _hoisted_192$2 = /* @__PURE__ */ createBaseVNode("div", { class: "text-3xl mt-5" }, "Apakah Anda Yakin ?", -1);
const _hoisted_193$2 = { class: "text-slate-500 mt-2" };
const _hoisted_194$2 = { key: 0 };
const _hoisted_195$2 = /* @__PURE__ */ createBaseVNode("br", null, null, -1);
const _hoisted_196$2 = /* @__PURE__ */ createBaseVNode("br", null, null, -1);
const _hoisted_197$2 = { class: "px-5 pb-8 text-center" };
const _sfc_main$7 = {
  __name: "DaftarAnggota",
  setup(__props) {
    const swal = inject("$swal");
    const daftarAnggota = useDaftarAnggotaStore();
    const isLoading = ref(false);
    const isAdd = ref(false);
    const isEdit = ref(false);
    const isView = ref(false);
    const modal_utama = ref(false);
    const modal_delete = ref(false);
    const sort_by = ref("iddata");
    const sort_mode = ref(true);
    const search_data = ref("");
    const search_type = ref("iddata");
    const page_number = ref(1);
    const total_pages = ref(0);
    const row_per_page = ref(50);
    const allSelected = ref(false);
    const userIds = ref([]);
    const id_anggota = ref("");
    const foto_profile = ref();
    const previewFoto = ref(null);
    const fileFoto = ref(null);
    const imageFoto = ref(null);
    const foto_ttd = ref();
    const previewTTD = ref(null);
    const fileTTD = ref(null);
    const imageTTD = ref(null);
    const foto_pa = ref();
    const previewPA = ref(null);
    const filePA = ref(null);
    const imagePA = ref(null);
    const tanggal = ref(hooks(Date.now()).format("DD-MM-YYYY"));
    const no_anggota = ref("");
    const no_ktp = ref("");
    const no_kk = ref("");
    const nama_lengkap = ref("");
    const tempat_lahir = ref("");
    const tanggal_lahir = ref("");
    const jenis_kelamin = ref("");
    const agama = ref("");
    const alamat = ref("");
    const rt = ref("");
    const rw = ref("");
    const kelurahan = ref("");
    const kecamatan = ref("");
    const kota = ref("");
    const pendamping = ref("");
    const pekerjaan = ref("");
    const no_telepon = ref("");
    const resort = ref("");
    const tanggal_bht = ref("");
    const simpanan_pokok = ref("");
    const simpanan_swk = ref("");
    const simpanan_wajib = ref("");
    const simpanan_lain = ref("");
    const total_simpanan = ref("");
    const addGet = () => {
      isAdd.value = true;
      modal_utama.value = true;
    };
    const editGet = async (e) => {
      const anggota = await daftarAnggota.getItem(e);
      isEdit.value = true;
      id_anggota.value = anggota.iddata;
      tanggal.value = hooks(anggota.tanggal).format("DD-MM-YYYY");
      no_anggota.value = anggota.cif;
      no_ktp.value = anggota.noktp;
      no_kk.value = anggota.nokK;
      nama_lengkap.value = anggota.nama;
      tempat_lahir.value = anggota.tempatlhr;
      tanggal_lahir.value = hooks(anggota.tanggallhr).format("YYYY-MM-DD");
      jenis_kelamin.value = anggota.jeniskl == "L" ? "L" : anggota.jeniskl == "LAKI-LAKI    " ? "L" : anggota.jeniskl == "PEREMPUAN" ? "P" : "P";
      agama.value = anggota.agama;
      alamat.value = anggota.alamat;
      rt.value = anggota.rt.split("/") ? anggota.rt.split("/")[0] : anggota.rt;
      rw.value = anggota.rt.split("/") ? anggota.rt.split("/")[1] : anggota.rt;
      kelurahan.value = anggota.desa;
      kecamatan.value = anggota.kecamatan;
      kota.value = anggota.kota;
      pendamping.value = "nama pendamping";
      pekerjaan.value = anggota.pekerjaan;
      no_telepon.value = anggota.phone;
      resort.value = anggota.resort;
      tanggal_bht.value = hooks(anggota.tanggalbht).format("YYYY-MM-DD");
      simpanan_pokok.value = currencyFormatter.format(anggota.simpokok).replace("Rp", "").trim();
      simpanan_swk.value = currencyFormatter.format(anggota.simsuka).replace("Rp", "").trim();
      simpanan_wajib.value = currencyFormatter.format(anggota.simwajib).replace("Rp", "").trim();
      simpanan_lain.value = currencyFormatter.format(anggota.lain).replace("Rp", "").trim();
      total_simpanan.value = currencyFormatter.format(anggota.simshu).replace("Rp", "").trim();
      modal_utama.value = true;
    };
    const deleteGet = (e) => {
      const anggota = e;
      if (anggota.iddata) {
        userIds.value = [];
        userIds.value.push(anggota.iddata);
        console.log("delete get 1", userIds.value);
        modal_delete.value = true;
      } else {
        if (userIds.value.length > 0) {
          console.log("delete get 1+", userIds.value);
          modal_delete.value = true;
        }
      }
    };
    const viewData = async (e) => {
      const anggota = await daftarAnggota.getItem(e);
      isView.value = true;
      id_anggota.value = anggota.iddata;
      tanggal.value = hooks(anggota.tanggal).format("DD-MM-YYYY");
      no_anggota.value = anggota.cif;
      no_ktp.value = anggota.noktp;
      no_kk.value = anggota.nokK;
      nama_lengkap.value = anggota.nama;
      tempat_lahir.value = anggota.tempatlhr;
      tanggal_lahir.value = hooks(anggota.tanggallhr).format("YYYY-MM-DD");
      jenis_kelamin.value = anggota.jeniskl == "L" ? "L" : anggota.jeniskl == "LAKI-LAKI    " ? "L" : anggota.jeniskl == "PEREMPUAN" ? "P" : "P";
      agama.value = anggota.agama;
      alamat.value = anggota.alamat;
      rt.value = anggota.rt;
      rw.value = anggota.rt;
      kelurahan.value = anggota.desa;
      kecamatan.value = anggota.kecamatan;
      kota.value = anggota.kota;
      pendamping.value = "nama pendamping";
      pekerjaan.value = anggota.pekerjaan;
      no_telepon.value = anggota.phone;
      resort.value = anggota.resort;
      tanggal_bht.value = hooks(anggota.tanggalbht).format("YYYY-MM-DD");
      simpanan_pokok.value = currencyFormatter.format(anggota.simpokok).replace("Rp", "").trim();
      simpanan_swk.value = currencyFormatter.format(anggota.simsuka).replace("Rp", "").trim();
      simpanan_wajib.value = currencyFormatter.format(anggota.simwajib).replace("Rp", "").trim();
      simpanan_lain.value = currencyFormatter.format(anggota.lain).replace("Rp", "").trim();
      total_simpanan.value = currencyFormatter.format(anggota.shu).replace("Rp", "").trim();
      console.log(
        anggota.foto
        // URL.createObjectURL(new Blob([anggota.foto.buffer], { type: 'image/png' } /* (1) */))
      );
      modal_utama.value = true;
    };
    const convertDataURIToBinary = (dataURI) => {
      var BASE64_MARKER = ";base64,";
      var base64Index = dataURI.indexOf(BASE64_MARKER) + BASE64_MARKER.length;
      var base64 = dataURI.substring(base64Index);
      var raw = window.atob(base64);
      var rawLength = raw.length;
      var array2 = new Uint8Array(new ArrayBuffer(rawLength));
      for (let i = 0; i < rawLength; i++) {
        array2[i] = raw.charCodeAt(i);
      }
      return array2;
    };
    const previewImage = (event) => {
      var input2 = event.target;
      if (input2.files) {
        var reader = new FileReader();
        reader.onload = (e) => {
          var base64Img = e.target.result;
          if (event.target.id == "foto_anggota") {
            previewFoto.value = base64Img;
            imageFoto.value = convertDataURIToBinary(base64Img);
          } else if (event.target.id == "foto_ttd") {
            previewTTD.value = base64Img;
            imageTTD.value = convertDataURIToBinary(base64Img);
          } else if (event.target.id == "foto_pa") {
            previewPA.value = base64Img;
            imagePA.value = convertDataURIToBinary(base64Img);
          }
        };
        if (event.target.id == "foto_anggota") {
          fileFoto.value = input2.files[0];
        } else if (event.target.id == "foto_ttd") {
          fileTTD.value = input2.files[0];
        } else if (event.target.id == "foto_pa") {
          filePA.value = input2.files[0];
        }
        reader.readAsDataURL(input2.files[0]);
      }
    };
    const simpan_data = async (e) => {
      try {
        await daftarAnggota.postItem(
          //console.log(
          id_anggota.value,
          fileFoto.value,
          fileTTD.value,
          filePA.value,
          // imageFoto.value,
          // imageTTD.value,
          // imagePA.value,
          hooks(Date.now(tanggal.value)).format("YYYY-MM-DD"),
          no_anggota.value,
          no_ktp.value,
          no_kk.value,
          nama_lengkap.value,
          tempat_lahir.value,
          tanggal_lahir.value,
          jenis_kelamin.value,
          agama.value,
          alamat.value,
          rt.value,
          rw.value,
          kelurahan.value,
          kecamatan.value,
          kota.value,
          pendamping.value,
          pekerjaan.value,
          no_telepon.value,
          resort.value
        );
        e.target.reset();
        resetForm();
      } catch (error) {
        swal({
          icon: "error",
          title: "Oops...",
          text: "ERROR SIMPAN DATA " + error
        });
      }
    };
    const deleteAnggota = async () => {
      if (userIds.value.length > 1) {
        for (let idAnggota = 0; idAnggota < userIds.value.length; idAnggota++) {
          console.log("delete post 1+", userIds.value[idAnggota]);
          await daftarAnggota.removeItem(userIds.value[idAnggota]);
        }
      } else {
        console.log("delete post 1", userIds.value);
        await daftarAnggota.removeItem(userIds.value[0]);
      }
      resetForm();
    };
    const resetForm = () => {
      if (modal_utama.value == false && isEdit.value == false && isView.value == false) {
        search_data.value = "";
        search_type.value = "iddata";
        sort_by.value = "iddata";
        sort_mode.value = true;
        page_number.value = 1;
        total_pages.value = 0;
        row_per_page.value = 50;
      }
      allSelected.value = false;
      userIds.value = [];
      id_anggota.value = "";
      foto_profile.value = null;
      fileFoto.value = null;
      imageFoto.value = null;
      previewFoto.value = null;
      foto_pa.value = null;
      filePA.value = null;
      imagePA.value = null;
      previewPA.value = null;
      foto_ttd.value = null;
      fileTTD.value = null;
      imageTTD.value = null;
      previewTTD.value = null;
      tanggal.value = hooks(Date.now()).format("DD-MM-YYYY");
      no_anggota.value = "";
      no_ktp.value = "";
      no_kk.value = "";
      nama_lengkap.value = "";
      tempat_lahir.value = "";
      tanggal_lahir.value = "";
      jenis_kelamin.value = "";
      agama.value = "";
      alamat.value = "";
      rt.value = "";
      rw.value = "";
      kelurahan.value = "";
      kecamatan.value = "";
      kota.value = "";
      pendamping.value = "";
      pekerjaan.value = "";
      no_telepon.value = "";
      resort.value = "";
      tanggal_bht.value = "";
      simpanan_pokok.value = "";
      simpanan_swk.value = "";
      simpanan_wajib.value = "";
      simpanan_lain.value = "";
      total_simpanan.value = "";
      modal_utama.value = false;
      modal_delete.value = false;
      isAdd.value = false;
      isEdit.value = false;
      isView.value = false;
    };
    const sorting = async (e) => {
      isLoading.value = true;
      sort_by.value = e;
      sort_mode.value = !sort_mode.value;
      try {
        await daftarAnggota.readItem(
          search_type.value,
          search_data.value,
          e,
          sort_mode.value,
          page_number.value,
          row_per_page.value
        );
        isLoading.value = false;
      } catch (error) {
        isLoading.value = false;
        swal({
          icon: "error",
          title: "Oops...",
          text: "Gagal Sorting " + error
        });
      }
    };
    const firstPage = async () => {
      page_number.value = 1;
    };
    const previousPage = async () => {
      try {
        let page_no = parseInt(page_number.value);
        if (page_no > 1) {
          page_number.value = page_no - 1;
        }
      } catch (error) {
        isLoading.value = false;
        swal({
          icon: "error",
          title: "Oops...",
          text: "Gagal page sebelumnya " + error
        });
      }
    };
    const nextPage = () => {
      try {
        if (page_number.value == "") {
          page_number.value = 1;
        }
        let page_no = parseInt(page_number.value);
        if (page_no < total_pages.value) {
          page_number.value = page_no + 1;
        }
      } catch (error) {
        isLoading.value = false;
        swal({
          icon: "error",
          title: "Oops...",
          text: "Gagal page selanjutnya " + error
        });
      }
    };
    const lastPage = async () => {
      page_number.value = total_pages.value;
    };
    watch(page_number, async (e) => {
      try {
        isLoading.value = true;
        await daftarAnggota.readItem(
          search_type.value,
          search_data.value,
          sort_by.value,
          sort_mode.value,
          e,
          row_per_page.value
        );
        isLoading.value = false;
      } catch (error) {
        isLoading.value = false;
        swal({
          icon: "error",
          title: "Oops...",
          text: "Gagal ganti page " + error
        });
      }
    });
    watch(row_per_page, async (e) => {
      try {
        isLoading.value = true;
        if (page_number.value > total_pages.value || page_number.value == "") {
          page_number.value = 1;
        }
        const data = await daftarAnggota.readItem(
          search_type.value,
          search_data.value,
          sort_by.value,
          sort_mode.value,
          page_number.value,
          e
        );
        total_pages.value = data;
        userIds.value = [];
        allSelected.value = false;
        if (page_number.value > total_pages.value) {
          page_number.value = 1;
        }
        isLoading.value = false;
      } catch (error) {
        isLoading.value = false;
        swal({
          icon: "error",
          title: "Oops...",
          text: "Gagal ganti row/page " + error
        });
      }
    });
    watch(search_data, async (e) => {
      try {
        isLoading.value = true;
        const data = await daftarAnggota.readItem(
          search_type.value,
          e,
          sort_by.value,
          sort_mode.value,
          page_number.value,
          row_per_page.value
        );
        total_pages.value = data;
        isLoading.value = false;
      } catch (error) {
        isLoading.value = false;
        swal({
          icon: "error",
          title: "Oops...",
          text: "Gagal ganti page " + error
        });
      }
    });
    watch(search_type, async (e) => {
      try {
        isLoading.value = true;
        const data = await daftarAnggota.readItem(
          e,
          search_data.value,
          sort_by.value,
          sort_mode.value,
          page_number.value,
          row_per_page.value
        );
        total_pages.value = data;
        isLoading.value = false;
      } catch (error) {
        isLoading.value = false;
        swal({
          icon: "error",
          title: "Oops...",
          text: "Gagal ganti page " + error
        });
      }
    });
    const selectAll = (e) => {
      userIds.value = [];
      if (!allSelected.value || e) {
        for (let anggota = 0; anggota < daftarAnggota.items.length; anggota++) {
          userIds.value.push(daftarAnggota.items[anggota].iddata);
        }
      }
    };
    const selectOne = () => {
      allSelected.value = false;
    };
    onMounted(async () => {
      try {
        isLoading.value = true;
        const data = await daftarAnggota.readItem(
          search_type.value,
          search_data.value,
          sort_by.value,
          sort_mode.value,
          page_number.value,
          row_per_page.value
        );
        total_pages.value = data;
        isLoading.value = false;
      } catch (error) {
        isLoading.value = false;
        swal({
          icon: "error",
          title: "Oops...",
          text: "ERROR MOUNTED " + error
        });
      }
    });
    return (_ctx, _cache) => {
      const _component_PlusIcon = resolveComponent("PlusIcon");
      const _component_Trash2Icon = resolveComponent("Trash2Icon");
      const _component_ShareIcon = resolveComponent("ShareIcon");
      const _component_RouterLink = resolveComponent("RouterLink");
      const _component_PrinterIcon = resolveComponent("PrinterIcon");
      const _component_CheckIcon = resolveComponent("CheckIcon");
      const _component_XIcon = resolveComponent("XIcon");
      const _component_RefreshCwIcon = resolveComponent("RefreshCwIcon");
      const _component_SkipBackIcon = resolveComponent("SkipBackIcon");
      const _component_RewindIcon = resolveComponent("RewindIcon");
      const _component_FastForwardIcon = resolveComponent("FastForwardIcon");
      const _component_SkipForwardIcon = resolveComponent("SkipForwardIcon");
      const _component_DeleteIcon = resolveComponent("DeleteIcon");
      const _component_SortAscIcon = resolveComponent("SortAscIcon");
      const _component_SortDescIcon = resolveComponent("SortDescIcon");
      const _component_CheckSquareIcon = resolveComponent("CheckSquareIcon");
      const _component_Loader2Icon = resolveComponent("Loader2Icon");
      const _component_ModalHeader = resolveComponent("ModalHeader");
      const _component_BookIcon = resolveComponent("BookIcon");
      const _component_BanknoteIcon = resolveComponent("BanknoteIcon");
      const _component_CoinsIcon = resolveComponent("CoinsIcon");
      const _component_ScaleIcon = resolveComponent("ScaleIcon");
      const _component_PiggyBankIcon = resolveComponent("PiggyBankIcon");
      const _component_LandmarkIcon = resolveComponent("LandmarkIcon");
      const _component_WalletIcon = resolveComponent("WalletIcon");
      const _component_FileIcon = resolveComponent("FileIcon");
      const _component_PointerIcon = resolveComponent("PointerIcon");
      const _component_PenToolIcon = resolveComponent("PenToolIcon");
      const _component_ModalBody = resolveComponent("ModalBody");
      const _component_ModalFooter = resolveComponent("ModalFooter");
      const _component_Modal = resolveComponent("Modal");
      const _component_XCircleIcon = resolveComponent("XCircleIcon");
      return openBlock(), createElementBlock(Fragment, null, [
        createVNode(_sfc_main$9, {
          title: "Transaksi",
          subTitle: "Keanggotaan",
          icon: unref(TRANSAKSI)
        }, null, 8, ["icon"]),
        createBaseVNode("div", _hoisted_1$6, [
          createBaseVNode("div", _hoisted_2$6, [
            createBaseVNode("div", _hoisted_3$6, [
              createBaseVNode("button", {
                class: "inline-block align-middle text-center select-none border font-normal whitespace-no-wrap rounded no-underline h-9 mx-auto px-2 leading-tight text-xs bg-gray-100 text-gray-800 hover:text-blue-700 hover:bg-gray-200 btn-light-bordered",
                onClick: addGet,
                id: "delete-multiple-data",
                "data-bs-toggle": "tooltip",
                title: "Tambah Data"
              }, [
                createVNode(_component_PlusIcon, { class: "w-4 h-4 mx-auto my-[5px] stroke-2 stroke-current" })
              ]),
              createBaseVNode("button", {
                class: "inline-block align-middle hover:text-danger text-center select-none border font-normal whitespace-no-wrap rounded no-underline h-9 mx-auto px-2 leading-tight text-xs bg-gray-100 text-gray-800 hover:bg-gray-200 btn-light-bordered",
                onClick: deleteGet,
                id: "delete-multiple-data",
                "data-bs-toggle": "tooltip",
                title: "Hapus Data"
              }, [
                createVNode(_component_Trash2Icon, { class: "w-4 h-4 mx-auto my-[5px] stroke-2 stroke-current" })
              ]),
              createVNode(_component_RouterLink, {
                to: "/laporan-daftar-anggota",
                class: "inline-block align-middle hover:text-success text-center select-none border font-normal whitespace-no-wrap rounded no-underline h-9 mx-auto px-2 p-1 leading-tight text-xs bg-gray-100 text-gray-800 hover:bg-gray-200 btn-light-bordered",
                title: "Export CSV"
              }, {
                default: withCtx(() => [
                  createVNode(_component_ShareIcon, { class: "w-3 h-3 mx-auto stroke-2 stroke-current" }),
                  _hoisted_4$6
                ]),
                _: 1
              }),
              createVNode(_component_RouterLink, {
                to: "/laporan-daftar-anggota",
                class: "inline-block hover:text-danger align-middle text-center select-none border font-normal whitespace-no-wrap rounded no-underline h-9 mx-auto px-2 p-1 leading-tight text-xs bg-gray-100 text-gray-800 hover:bg-gray-200 btn-light-bordered",
                title: "Export PDF"
              }, {
                default: withCtx(() => [
                  createVNode(_component_ShareIcon, { class: "w-3 h-3 mx-auto stroke-2 stroke-current" }),
                  _hoisted_5$6
                ]),
                _: 1
              }),
              createVNode(_component_RouterLink, {
                to: "/laporan-daftar-anggota",
                class: "inline-block align-middle text-center select-none border font-normal whitespace-no-wrap rounded no-underline h-9 mx-auto px-2 p-1 leading-tight text-xs bg-gray-100 text-gray-800 hover:bg-gray-200 btn-light-bordered",
                title: "Print Table"
              }, {
                default: withCtx(() => [
                  createVNode(_component_PrinterIcon, { class: "w-4 h-4 mx-auto my-[5px] stroke-2 stroke-current" })
                ]),
                _: 1
              }),
              createBaseVNode("button", {
                class: "inline-block hover:text-success align-middle text-center select-none border font-normal whitespace-no-wrap rounded no-underline h-9 mx-auto px-2 leading-tight text-xs bg-gray-100 text-gray-800 hover:bg-gray-200 btn-light-bordered",
                onClick: _cache[0] || (_cache[0] = ($event) => (selectAll(true), allSelected.value = true)),
                id: "select-all",
                title: "Select All"
              }, [
                createVNode(_component_CheckIcon, { class: "w-4 h-4 mx-auto my-[5px] stroke-2 stroke-current" }),
                _hoisted_6$6
              ]),
              createBaseVNode("button", {
                class: "inline-block align-middle hover:text-danger text-center select-none border font-normal whitespace-no-wrap rounded no-underline h-9 mx-auto px-2 leading-tight text-xs bg-gray-100 text-gray-800 hover:bg-gray-200 btn-light-bordered",
                onClick: _cache[1] || (_cache[1] = ($event) => {
                  userIds.value = [], allSelected.value = false;
                }),
                id: "unselect-all",
                title: "Unselect All"
              }, [
                createVNode(_component_XIcon, { class: "w-4 h-4 mx-auto my-[5px] stroke-2 stroke-current" })
              ]),
              createBaseVNode("a", _hoisted_7$6, [
                createVNode(_component_RefreshCwIcon, { class: "w-4 h-4 mx-auto my-[9px] stroke-2 stroke-current" })
              ])
            ]),
            createBaseVNode("div", _hoisted_8$6, [
              createBaseVNode("div", _hoisted_9$6, [
                createBaseVNode("div", _hoisted_10$6, [
                  createBaseVNode("div", _hoisted_11$5, [
                    createBaseVNode("a", {
                      href: "javascript:void(0);",
                      class: "inline-block align-middle text-center rounded-l-lg select-none border font-normal whitespace-no-wrap h-9 -mt-1 py-1 px-3 leading-normal no-underline bg-gray-100 text-gray-800 hover:bg-gray-200 btn-light-bordered",
                      id: "first-page",
                      title: "first page",
                      onClick: _cache[2] || (_cache[2] = ($event) => firstPage())
                    }, [
                      createVNode(_component_SkipBackIcon, { class: "w-4 h-4 mx-auto my-[5px]" })
                    ]),
                    createBaseVNode("a", {
                      href: "javascript:void(0);",
                      class: "inline-block align-middle text-center select-none border font-normal whitespace-no-wrap h-9 -mt-1 py-1 px-3 leading-normal no-underline bg-gray-100 text-gray-800 hover:bg-gray-200 btn-light-bordered",
                      id: "previous-page",
                      title: "previous page",
                      onClick: _cache[3] || (_cache[3] = ($event) => previousPage())
                    }, [
                      createVNode(_component_RewindIcon, { class: "w-4 h-4 mx-auto my-[5px]" })
                    ])
                  ]),
                  createBaseVNode("div", _hoisted_12$5, [
                    withDirectives(createBaseVNode("input", {
                      type: "number",
                      class: "block appearance-none w-full mb-1 px-2 bg-white text-gray-800 border-y border-r border-gray-400 text-xs leading-normal",
                      "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => page_number.value = $event)
                    }, null, 512), [
                      [vModelText, page_number.value]
                    ]),
                    withDirectives(createBaseVNode("input", {
                      type: "number",
                      class: "block appearance-none w-full px-2 mb-1 bg-gray-200 text-gray-800 border-y border-gray-400 text-xs leading-normal",
                      "onUpdate:modelValue": _cache[5] || (_cache[5] = ($event) => total_pages.value = $event),
                      disabled: ""
                    }, null, 512), [
                      [vModelText, total_pages.value]
                    ])
                  ]),
                  createBaseVNode("div", _hoisted_13$5, [
                    createBaseVNode("a", {
                      href: "javascript:void(0);",
                      class: "inline-block align-middle text-center select-none border font-normal whitespace-no-wrap h-9 -mt-1 py-1 px-3 leading-normal no-underline bg-gray-100 text-gray-800 hover:bg-gray-200 btn-light-bordered",
                      id: "next-page",
                      title: "next page",
                      onClick: _cache[6] || (_cache[6] = ($event) => nextPage())
                    }, [
                      createVNode(_component_FastForwardIcon, { class: "w-4 h-4 mx-auto my-[5px]" })
                    ]),
                    createBaseVNode("a", {
                      href: "javascript:void(0);",
                      class: "inline-block align-middle text-center select-none border font-normal whitespace-no-wrap h-9 -mt-1 rounded-r-lg py-1 px-3 leading-normal no-underline bg-gray-100 text-gray-800 hover:bg-gray-200 btn-light-bordered",
                      id: "last-page",
                      title: "last page",
                      onClick: _cache[7] || (_cache[7] = ($event) => lastPage())
                    }, [
                      createVNode(_component_SkipForwardIcon, { class: "w-4 h-4 mx-auto my-[5px]" })
                    ])
                  ])
                ])
              ])
            ]),
            createBaseVNode("div", _hoisted_14$5, [
              withDirectives(createBaseVNode("select", {
                name: "row_per_page",
                "onUpdate:modelValue": _cache[8] || (_cache[8] = ($event) => row_per_page.value = $event),
                class: "bg-gray-50 border border-gray-300 text-gray-900 pl-1 mr-2 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block -mt-1 w-[70px] h-9"
              }, _hoisted_18$5, 512), [
                [vModelSelect, row_per_page.value]
              ]),
              createBaseVNode("div", _hoisted_19$5, [
                withDirectives(createBaseVNode("input", {
                  type: "text",
                  class: "block appearance-none border-y border-l rounded-l-lg w-full mb-1 bg-white text-gray-800 border-gray-300 px-2 text-xs leading-normal h-9",
                  "onUpdate:modelValue": _cache[9] || (_cache[9] = ($event) => search_data.value = $event),
                  placeholder: "Cari " + search_type.value + " " + _ctx.$route.name.replace(/-/gi, " "),
                  name: "search-data"
                }, null, 8, _hoisted_20$5), [
                  [vModelText, search_data.value]
                ]),
                createBaseVNode("div", _hoisted_21$5, [
                  search_data.value !== "" ? (openBlock(), createElementBlock("button", {
                    key: 0,
                    class: "inline align-middle text-center select-none border-y border-[#d0d3d4] w-10 font-normal whitespace-no-wrap no-underline h-9 mx-auto px-2 leading-tight text-xs",
                    id: "clear-btn",
                    onClick: _cache[10] || (_cache[10] = ($event) => search_data.value = "")
                  }, [
                    createVNode(_component_DeleteIcon, { class: "w-5 h-5 stroke-2 text-danger mx-auto my-[5px]" })
                  ])) : createCommentVNode("", true)
                ]),
                createBaseVNode("div", _hoisted_22$4, [
                  withDirectives(createBaseVNode("select", {
                    name: "search_type",
                    "onUpdate:modelValue": _cache[11] || (_cache[11] = ($event) => search_type.value = $event),
                    class: "inline align-middle text-center select-none border w-14 font-normal whitespace-no-wrap rounded-r-lg no-underline h-9 mx-auto px-0 leading-tight text-xs bg-gray-100 text-gray-800 hover:bg-gray-200 btn-light-bordered"
                  }, _hoisted_31$3, 512), [
                    [vModelSelect, search_type.value]
                  ])
                ])
              ])
            ])
          ])
        ]),
        createBaseVNode("div", _hoisted_32$4, [
          createBaseVNode("div", _hoisted_33$4, [
            createBaseVNode("table", _hoisted_34$4, [
              createBaseVNode("thead", _hoisted_35$5, [
                createBaseVNode("tr", null, [
                  createBaseVNode("th", _hoisted_36$5, [
                    createBaseVNode("div", _hoisted_37$5, [
                      withDirectives(createBaseVNode("input", {
                        id: "checkbox-all-search",
                        "onUpdate:modelValue": _cache[12] || (_cache[12] = ($event) => allSelected.value = $event),
                        onClick: _cache[13] || (_cache[13] = ($event) => selectAll(false)),
                        type: "checkbox",
                        class: "w-4 h-4 text-blue-600 bg-gray-100 border-blue-200 rounded focus:ring-blue-500 focus:ring-2"
                      }, null, 512), [
                        [vModelCheckbox, allSelected.value]
                      ]),
                      _hoisted_38$5
                    ])
                  ]),
                  createBaseVNode("th", {
                    scope: "col",
                    class: "text-center uppercase border cursor-pointer hover:bg-blue-300 w-[60px]",
                    onClick: _cache[14] || (_cache[14] = ($event) => sorting("iddata"))
                  }, [
                    createTextVNode(" ID "),
                    sort_by.value === "iddata" && sort_mode.value ? (openBlock(), createBlock(_component_SortAscIcon, {
                      key: 0,
                      class: "inline ml-2 -pr-3 mr-1 w-5 h-4"
                    })) : createCommentVNode("", true),
                    sort_by.value === "iddata" && !sort_mode.value ? (openBlock(), createBlock(_component_SortDescIcon, {
                      key: 1,
                      class: "inline ml-2 -pr-3 mr-1 w-5 h-4"
                    })) : createCommentVNode("", true)
                  ]),
                  createBaseVNode("th", {
                    scope: "col",
                    class: "text-center uppercase border cursor-pointer hover:bg-blue-300",
                    onClick: _cache[15] || (_cache[15] = ($event) => sorting("cif"))
                  }, [
                    createTextVNode(" No. Anggota "),
                    sort_by.value === "cif" && sort_mode.value ? (openBlock(), createBlock(_component_SortAscIcon, {
                      key: 0,
                      class: "inline ml-2 -pr-3 mr-1 w-5 h-4"
                    })) : createCommentVNode("", true),
                    sort_by.value === "cif" && !sort_mode.value ? (openBlock(), createBlock(_component_SortDescIcon, {
                      key: 1,
                      class: "inline ml-2 -pr-3 mr-1 w-5 h-4"
                    })) : createCommentVNode("", true)
                  ]),
                  createBaseVNode("th", {
                    scope: "col",
                    class: "text-center uppercase border cursor-pointer hover:bg-blue-300",
                    onClick: _cache[16] || (_cache[16] = ($event) => sorting("tanggal"))
                  }, [
                    createTextVNode(" Tanggal "),
                    sort_by.value === "tanggal" && sort_mode.value ? (openBlock(), createBlock(_component_SortAscIcon, {
                      key: 0,
                      class: "inline ml-2 -pr-3 mr-1 w-5 h-4"
                    })) : createCommentVNode("", true),
                    sort_by.value === "tanggal" && !sort_mode.value ? (openBlock(), createBlock(_component_SortDescIcon, {
                      key: 1,
                      class: "inline ml-2 -pr-3 mr-1 w-5 h-4"
                    })) : createCommentVNode("", true)
                  ]),
                  createBaseVNode("th", {
                    scope: "col",
                    class: "text-center uppercase border cursor-pointer hover:bg-blue-300",
                    onClick: _cache[17] || (_cache[17] = ($event) => sorting("resort"))
                  }, [
                    createTextVNode(" Resort "),
                    sort_by.value === "resort" && sort_mode.value ? (openBlock(), createBlock(_component_SortAscIcon, {
                      key: 0,
                      class: "inline ml-2 -pr-3 mr-1 w-5 h-4"
                    })) : createCommentVNode("", true),
                    sort_by.value === "resort" && !sort_mode.value ? (openBlock(), createBlock(_component_SortDescIcon, {
                      key: 1,
                      class: "inline ml-2 -pr-3 mr-1 w-5 h-4"
                    })) : createCommentVNode("", true)
                  ]),
                  createBaseVNode("th", {
                    scope: "col",
                    class: "text-center uppercase border cursor-pointer hover:bg-blue-300",
                    onClick: _cache[18] || (_cache[18] = ($event) => sorting("noktp"))
                  }, [
                    createTextVNode(" Nomor KTP "),
                    sort_by.value === "noktp" && sort_mode.value ? (openBlock(), createBlock(_component_SortAscIcon, {
                      key: 0,
                      class: "inline ml-2 -pr-3 mr-1 w-5 h-4"
                    })) : createCommentVNode("", true),
                    sort_by.value === "noktp" && !sort_mode.value ? (openBlock(), createBlock(_component_SortDescIcon, {
                      key: 1,
                      class: "inline ml-2 -pr-3 mr-1 w-5 h-4"
                    })) : createCommentVNode("", true)
                  ]),
                  createBaseVNode("th", {
                    scope: "col",
                    class: "text-center uppercase border cursor-pointer hover:bg-blue-300",
                    onClick: _cache[19] || (_cache[19] = ($event) => sorting("nokK"))
                  }, [
                    createTextVNode(" Kartu Keluarga "),
                    sort_by.value === "nokK" && sort_mode.value ? (openBlock(), createBlock(_component_SortAscIcon, {
                      key: 0,
                      class: "inline ml-2 -pr-3 mr-1 w-5 h-4"
                    })) : createCommentVNode("", true),
                    sort_by.value === "nokK" && !sort_mode.value ? (openBlock(), createBlock(_component_SortDescIcon, {
                      key: 1,
                      class: "inline ml-2 -pr-3 mr-1 w-5 h-4"
                    })) : createCommentVNode("", true)
                  ]),
                  createBaseVNode("th", {
                    scope: "col",
                    class: "text-center uppercase border cursor-pointer hover:bg-blue-300",
                    onClick: _cache[20] || (_cache[20] = ($event) => sorting("nama"))
                  }, [
                    createTextVNode(" Nama "),
                    sort_by.value === "nama" && sort_mode.value ? (openBlock(), createBlock(_component_SortAscIcon, {
                      key: 0,
                      class: "inline ml-2 -pr-3 mr-1 w-5 h-4"
                    })) : createCommentVNode("", true),
                    sort_by.value === "nama" && !sort_mode.value ? (openBlock(), createBlock(_component_SortDescIcon, {
                      key: 1,
                      class: "inline ml-2 -pr-3 mr-1 w-5 h-4"
                    })) : createCommentVNode("", true)
                  ]),
                  createBaseVNode("th", {
                    scope: "col",
                    class: "text-center uppercase border cursor-pointer hover:bg-blue-300",
                    onClick: _cache[21] || (_cache[21] = ($event) => sorting("alamat"))
                  }, [
                    createTextVNode(" Alamat "),
                    sort_by.value === "alamat" && sort_mode.value ? (openBlock(), createBlock(_component_SortAscIcon, {
                      key: 0,
                      class: "inline ml-2 -pr-3 mr-1 w-5 h-4"
                    })) : createCommentVNode("", true),
                    sort_by.value === "alamat" && !sort_mode.value ? (openBlock(), createBlock(_component_SortDescIcon, {
                      key: 1,
                      class: "inline ml-2 -pr-3 mr-1 w-5 h-4"
                    })) : createCommentVNode("", true)
                  ]),
                  createBaseVNode("th", {
                    scope: "col",
                    class: "text-center uppercase border cursor-pointer hover:bg-blue-300",
                    onClick: _cache[22] || (_cache[22] = ($event) => sorting("desa"))
                  }, [
                    createTextVNode(" Desa "),
                    sort_by.value === "desa" && sort_mode.value ? (openBlock(), createBlock(_component_SortAscIcon, {
                      key: 0,
                      class: "inline ml-2 -pr-3 mr-1 w-5 h-4"
                    })) : createCommentVNode("", true),
                    sort_by.value === "desa" && !sort_mode.value ? (openBlock(), createBlock(_component_SortDescIcon, {
                      key: 1,
                      class: "inline ml-2 -pr-3 mr-1 w-5 h-4"
                    })) : createCommentVNode("", true)
                  ]),
                  createBaseVNode("th", {
                    scope: "col",
                    class: "text-center uppercase border cursor-pointer hover:bg-blue-300",
                    onClick: _cache[23] || (_cache[23] = ($event) => sorting("kecamatan"))
                  }, [
                    createTextVNode(" Kecamatan "),
                    sort_by.value === "kecamatan" && sort_mode.value ? (openBlock(), createBlock(_component_SortAscIcon, {
                      key: 0,
                      class: "inline ml-2 -pr-3 mr-1 w-5 h-4"
                    })) : createCommentVNode("", true),
                    sort_by.value === "kecamatan" && !sort_mode.value ? (openBlock(), createBlock(_component_SortDescIcon, {
                      key: 1,
                      class: "inline ml-2 -pr-3 mr-1 w-5 h-4"
                    })) : createCommentVNode("", true)
                  ]),
                  createBaseVNode("th", {
                    scope: "col",
                    class: "text-center uppercase border cursor-pointer hover:bg-blue-300",
                    onClick: _cache[24] || (_cache[24] = ($event) => sorting("kota"))
                  }, [
                    createTextVNode(" Kota "),
                    sort_by.value === "kota" && sort_mode.value ? (openBlock(), createBlock(_component_SortAscIcon, {
                      key: 0,
                      class: "inline ml-2 -pr-3 mr-1 w-5 h-4"
                    })) : createCommentVNode("", true),
                    sort_by.value === "kota" && !sort_mode.value ? (openBlock(), createBlock(_component_SortDescIcon, {
                      key: 1,
                      class: "inline ml-2 -pr-3 mr-1 w-5 h-4"
                    })) : createCommentVNode("", true)
                  ]),
                  createBaseVNode("th", {
                    scope: "col",
                    class: "text-center uppercase border cursor-pointer hover:bg-blue-300",
                    onClick: _cache[25] || (_cache[25] = ($event) => sorting("statuskawin"))
                  }, [
                    createTextVNode(" Nama Pendamping "),
                    sort_by.value === "statuskawin" && sort_mode.value ? (openBlock(), createBlock(_component_SortAscIcon, {
                      key: 0,
                      class: "inline ml-2 -pr-3 mr-1 w-5 h-4"
                    })) : createCommentVNode("", true),
                    sort_by.value === "statuskawin" && !sort_mode.value ? (openBlock(), createBlock(_component_SortDescIcon, {
                      key: 1,
                      class: "inline ml-2 -pr-3 mr-1 w-5 h-4"
                    })) : createCommentVNode("", true)
                  ]),
                  createBaseVNode("th", {
                    scope: "col",
                    class: "text-center uppercase border cursor-pointer hover:bg-blue-300",
                    onClick: _cache[26] || (_cache[26] = ($event) => sorting("kantor"))
                  }, [
                    createTextVNode(" Kantor "),
                    sort_by.value === "kantor" && sort_mode.value ? (openBlock(), createBlock(_component_SortAscIcon, {
                      key: 0,
                      class: "inline ml-2 -pr-3 mr-1 w-5 h-4"
                    })) : createCommentVNode("", true),
                    sort_by.value === "kantor" && !sort_mode.value ? (openBlock(), createBlock(_component_SortDescIcon, {
                      key: 1,
                      class: "inline ml-2 -pr-3 mr-1 w-5 h-4"
                    })) : createCommentVNode("", true)
                  ]),
                  _hoisted_39$5
                ])
              ]),
              withDirectives(createBaseVNode("tbody", _hoisted_40$5, [
                (openBlock(true), createElementBlock(Fragment, null, renderList(unref(daftarAnggota).items, (anggota) => {
                  return openBlock(), createElementBlock("tr", {
                    class: "bg-white hover:bg-lime-300 hover:text-slate-700 drop-shadow-2xl group",
                    key: anggota.iddata,
                    anggota,
                    value: anggota.iddata
                  }, [
                    createBaseVNode("td", _hoisted_42$5, [
                      createBaseVNode("div", _hoisted_43$5, [
                        _hoisted_44$5,
                        withDirectives(createBaseVNode("input", {
                          value: anggota.iddata,
                          type: "checkbox",
                          "onUpdate:modelValue": _cache[27] || (_cache[27] = ($event) => userIds.value = $event),
                          onClick: selectOne,
                          class: "data-checkbox w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded-lg focus:ring-blue-500 focus:ring-2"
                        }, null, 8, _hoisted_45$5), [
                          [vModelCheckbox, userIds.value]
                        ])
                      ])
                    ]),
                    createBaseVNode("th", {
                      onDblclick: ($event) => viewData(anggota.iddata),
                      scope: "row",
                      class: "border-r border-b font-medium whitespace-nowrap pl-2"
                    }, toDisplayString(anggota.iddata), 41, _hoisted_46$5),
                    createBaseVNode("td", {
                      onDblclick: ($event) => viewData(anggota.iddata),
                      class: "min-w-max text-center border-r border-b font-medium px-2"
                    }, toDisplayString(anggota.cif), 41, _hoisted_47$5),
                    createBaseVNode("td", {
                      onDblclick: ($event) => viewData(anggota.iddata),
                      class: "min-w-max text-center border-r border-b font-medium px-2"
                    }, toDisplayString(unref(hooks)(anggota.tanggal).format("DD-MM-YYYY")), 41, _hoisted_48$4),
                    createBaseVNode("td", {
                      onDblclick: ($event) => viewData(anggota.iddata),
                      class: "min-w-max text-left border-r border-b font-medium px-2"
                    }, toDisplayString(anggota.resort), 41, _hoisted_49$4),
                    createBaseVNode("td", {
                      onDblclick: ($event) => viewData(anggota.iddata),
                      class: "min-w-max text-left border-r border-b font-medium px-2"
                    }, toDisplayString(anggota.noktp), 41, _hoisted_50$4),
                    createBaseVNode("td", {
                      onDblclick: ($event) => viewData(anggota.iddata),
                      class: "min-w-max text-left border-r border-b font-medium px-2"
                    }, toDisplayString(anggota.nokK), 41, _hoisted_51$4),
                    createBaseVNode("td", {
                      onDblclick: ($event) => viewData(anggota.iddata),
                      class: "min-w-max text-left border-r border-b font-medium px-2"
                    }, toDisplayString(anggota.nama), 41, _hoisted_52$4),
                    createBaseVNode("td", {
                      onDblclick: ($event) => viewData(anggota.iddata),
                      class: "min-w-max text-left border-r border-b font-medium px-2"
                    }, toDisplayString(anggota.alamat), 41, _hoisted_53$4),
                    createBaseVNode("td", {
                      onDblclick: ($event) => viewData(anggota.iddata),
                      class: "min-w-max text-left border-r border-b font-medium px-2"
                    }, toDisplayString(anggota.desa), 41, _hoisted_54$4),
                    createBaseVNode("td", {
                      onDblclick: ($event) => viewData(anggota.iddata),
                      class: "min-w-max text-left border-r border-b font-medium px-2"
                    }, toDisplayString(anggota.kecamatan), 41, _hoisted_55$4),
                    createBaseVNode("td", {
                      onDblclick: ($event) => viewData(anggota.iddata),
                      class: "min-w-max text-left border-r border-b font-medium px-2"
                    }, toDisplayString(anggota.kota), 41, _hoisted_56$3),
                    createBaseVNode("td", {
                      onDblclick: ($event) => viewData(anggota.iddata),
                      class: "min-w-max text-left border-r border-b font-medium px-2"
                    }, toDisplayString(anggota.statuskawin), 41, _hoisted_57$3),
                    createBaseVNode("td", {
                      onDblclick: ($event) => viewData(anggota.iddata),
                      class: "min-w-max text-left border-r border-b font-medium px-2"
                    }, toDisplayString(anggota.kantor), 41, _hoisted_58$3),
                    createBaseVNode("td", _hoisted_59$3, [
                      createBaseVNode("div", _hoisted_60$3, [
                        createBaseVNode("a", {
                          onClick: ($event) => editGet(anggota.iddata),
                          class: "flex items-center mr-4 hover:text-blue-700 text-sky-600",
                          href: "javascript:;"
                        }, [
                          createVNode(_component_CheckSquareIcon, { class: "w-3 h-3 mr-1" }),
                          createTextVNode(" Edit ")
                        ], 8, _hoisted_61$4),
                        createBaseVNode("a", {
                          onClick: ($event) => deleteGet(anggota),
                          class: "flex items-center hover:text-red-800 text-danger",
                          href: "javascript:;"
                        }, [
                          createVNode(_component_Trash2Icon, { class: "w-3 h-3 mr-1" }),
                          createTextVNode(" Hapus ")
                        ], 8, _hoisted_62$4)
                      ])
                    ])
                  ], 8, _hoisted_41$5);
                }), 128))
              ], 512), [
                [vShow, !isLoading.value]
              ]),
              withDirectives(createBaseVNode("tbody", null, [
                createBaseVNode("div", _hoisted_63$4, [
                  createVNode(_component_Loader2Icon, { class: "motion-safe:animate-spin stroke-[5px] text-white h-12 w-12 mb-2" }),
                  _hoisted_64$4,
                  _hoisted_65$4,
                  _hoisted_66$4
                ])
              ], 512), [
                [vShow, isLoading.value]
              ])
            ])
          ])
        ]),
        createVNode(_component_Modal, {
          backdrop: "static",
          size: "modal-xl",
          show: modal_utama.value,
          onHidden: _cache[53] || (_cache[53] = ($event) => modal_utama.value = false)
        }, {
          default: withCtx(() => [
            createVNode(_component_ModalHeader, null, {
              default: withCtx(() => [
                createBaseVNode("h2", _hoisted_67$4, [
                  isAdd.value ? (openBlock(), createElementBlock("span", _hoisted_68$4, "Tambah ")) : createCommentVNode("", true),
                  isEdit.value ? (openBlock(), createElementBlock("span", _hoisted_69$4, "Edit ")) : createCommentVNode("", true),
                  isView.value ? (openBlock(), createElementBlock("span", _hoisted_70$4, "Data ")) : createCommentVNode("", true),
                  createTextVNode(" Anggota "),
                  isEdit.value || isView.value ? (openBlock(), createElementBlock("span", _hoisted_71$4, toDisplayString(id_anggota.value), 1)) : createCommentVNode("", true)
                ]),
                createBaseVNode("a", {
                  "data-tw-dismiss": "modal",
                  onClick: resetForm,
                  href: "javascript:;",
                  class: "border bg-danger rounded-lg hover:bg-red-700 -my-5 -mr-3"
                }, [
                  createVNode(_component_XIcon, { class: "lucide lucide-x w-7 h-7 text-white hover:text-slate-100" })
                ])
              ]),
              _: 1
            }),
            createVNode(_component_ModalBody, null, {
              default: withCtx(() => [
                isView.value || isEdit.value ? (openBlock(), createElementBlock("div", _hoisted_72$4, [
                  createBaseVNode("button", _hoisted_73$4, [
                    createVNode(_component_BookIcon, { class: "w-5 h-5 mr-1 mx-auto stroke-2 stroke-current" }),
                    _hoisted_74$4
                  ]),
                  createBaseVNode("button", _hoisted_75$4, [
                    createVNode(_component_BanknoteIcon, { class: "w-5 h-5 mr-1 mx-auto stroke-2 stroke-current" }),
                    _hoisted_76$4
                  ]),
                  createBaseVNode("button", _hoisted_77$4, [
                    createVNode(_component_CoinsIcon, { class: "w-5 h-5 mr-1 mx-auto stroke-2 stroke-current" }),
                    _hoisted_78$4
                  ]),
                  createBaseVNode("button", _hoisted_79$4, [
                    createVNode(_component_ScaleIcon, { class: "w-5 h-5 mr-1 mx-auto stroke-2 stroke-current" }),
                    _hoisted_80$4
                  ]),
                  createBaseVNode("button", _hoisted_81$4, [
                    createVNode(_component_PiggyBankIcon, { class: "w-5 h-5 mr-1 mx-auto stroke-2 stroke-current" }),
                    _hoisted_82$4
                  ]),
                  createBaseVNode("button", _hoisted_83$4, [
                    createVNode(_component_LandmarkIcon, { class: "w-5 h-5 mr-1 mx-auto stroke-2 stroke-current" }),
                    _hoisted_84$4
                  ]),
                  createBaseVNode("button", _hoisted_85$4, [
                    createVNode(_component_WalletIcon, { class: "w-5 h-5 mr-1 mx-auto stroke-2 stroke-current" }),
                    _hoisted_86$4
                  ]),
                  createBaseVNode("button", _hoisted_87$4, [
                    createVNode(_component_FileIcon, { class: "w-5 h-5 mr-1 mx-auto stroke-2 stroke-current" }),
                    _hoisted_88$4
                  ])
                ])) : createCommentVNode("", true),
                createBaseVNode("div", _hoisted_89$4, [
                  createBaseVNode("form", {
                    id: "daftarAnggotaForm",
                    class: "grid grid-cols-12 gap-4 pl-2",
                    onSubmit: withModifiers(simpan_data, ["prevent"])
                  }, [
                    createBaseVNode("div", _hoisted_91$4, [
                      createBaseVNode("div", _hoisted_92$4, [
                        createBaseVNode("div", _hoisted_93$4, [
                          !previewFoto.value ? (openBlock(), createElementBlock("img", {
                            key: 0,
                            src: unref(PP),
                            class: "h-[135px] mx-auto items-center my-5 hover:scale-110 transition duration-500 ease-in-out"
                          }, null, 8, _hoisted_94$4)) : createCommentVNode("", true),
                          previewFoto.value ? (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                            createBaseVNode("img", {
                              src: previewFoto.value,
                              class: "h-[125px] mx-auto mb-2 hover:scale-110 transition duration-500 ease-in-out"
                            }, null, 8, _hoisted_95$4),
                            createBaseVNode("p", _hoisted_96$4, toDisplayString(fileFoto.value.name), 1),
                            createBaseVNode("p", _hoisted_97$4, [
                              createTextVNode(toDisplayString(fileFoto.value.size / 1024), 1),
                              _hoisted_98$4
                            ])
                          ], 64)) : createCommentVNode("", true)
                        ]),
                        createBaseVNode("input", {
                          type: "file",
                          accept: "image/*",
                          onChange: previewImage,
                          class: "text-[10px] w-full cursor-pointer",
                          id: "foto_anggota",
                          ref_key: "foto_profile",
                          ref: foto_profile
                        }, null, 544),
                        _hoisted_99$4
                      ]),
                      createBaseVNode("div", _hoisted_100$4, [
                        createBaseVNode("div", _hoisted_101$4, [
                          !previewTTD.value ? (openBlock(), createBlock(_component_PointerIcon, {
                            key: 0,
                            class: "h-[90px] mx-auto items-center hover:scale-150 opacity-40 transition duration-500 ease-in-out",
                            title: "Tanda Tangan"
                          })) : createCommentVNode("", true),
                          previewTTD.value ? (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                            createBaseVNode("img", {
                              src: previewTTD.value,
                              class: "h-[60px] mx-auto mb-2 hover:scale-110 hover:opacity-60 transition duration-500 ease-in-out"
                            }, null, 8, _hoisted_102$4),
                            createBaseVNode("p", _hoisted_103$4, toDisplayString(fileTTD.value.name), 1),
                            createBaseVNode("p", _hoisted_104$4, [
                              createTextVNode(toDisplayString(fileTTD.value.size / 1024), 1),
                              _hoisted_105$4
                            ])
                          ], 64)) : createCommentVNode("", true)
                        ]),
                        createBaseVNode("input", {
                          type: "file",
                          accept: "image/*",
                          onChange: previewImage,
                          class: "text-[10px] w-full cursor-pointer",
                          id: "foto_ttd",
                          ref_key: "foto_ttd",
                          ref: foto_ttd
                        }, null, 544),
                        _hoisted_106$4
                      ]),
                      createBaseVNode("div", _hoisted_107$4, [
                        createBaseVNode("div", _hoisted_108$4, [
                          !previewPA.value ? (openBlock(), createBlock(_component_PenToolIcon, {
                            key: 0,
                            class: "h-[90px] mx-auto items-center hover:scale-150 opacity-40 hover:opacity-60 transition duration-500 ease-in-out"
                          })) : createCommentVNode("", true),
                          previewPA.value ? (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                            createBaseVNode("img", {
                              src: previewPA.value,
                              class: "h-[60px] mx-auto mb-2 hover:scale-110 transition duration-500 ease-in-out"
                            }, null, 8, _hoisted_109$4),
                            createBaseVNode("p", _hoisted_110$4, toDisplayString(filePA.value.name), 1),
                            createBaseVNode("p", _hoisted_111$4, [
                              createTextVNode(toDisplayString(filePA.value.size / 1024), 1),
                              _hoisted_112$4
                            ])
                          ], 64)) : createCommentVNode("", true)
                        ]),
                        createBaseVNode("input", {
                          type: "file",
                          accept: "image/*",
                          onChange: previewImage,
                          class: "text-[10px] w-full cursor-pointer",
                          id: "foto_pa",
                          ref_key: "foto_pa",
                          ref: foto_pa
                        }, null, 544),
                        _hoisted_113$4
                      ])
                    ]),
                    createBaseVNode("div", _hoisted_114$4, [
                      createBaseVNode("div", _hoisted_115$4, [
                        createBaseVNode("div", _hoisted_116$4, [
                          createBaseVNode("div", _hoisted_117$3, [
                            withDirectives(createBaseVNode("input", {
                              type: "text",
                              name: "tanggal",
                              id: "tanggal",
                              class: "block py-2.5 px-2 w-full text-sm text-gray-900 bg-transparent border-2 rounded-md border-gray-300 appearance-none focus:outline-none focus:ring-0 focus:border-blue-600 peer",
                              placeholder: " ",
                              "onUpdate:modelValue": _cache[28] || (_cache[28] = ($event) => tanggal.value = $event),
                              disabled: ""
                            }, null, 512), [
                              [vModelText, tanggal.value]
                            ]),
                            _hoisted_118$3
                          ]),
                          createBaseVNode("div", _hoisted_119$3, [
                            withDirectives(createBaseVNode("input", {
                              type: "text",
                              name: "no_anggota",
                              id: "no_anggota",
                              class: "block py-2.5 px-2 w-full text-sm text-gray-900 bg-transparent border-2 rounded-md border-gray-300 appearance-none focus:outline-none focus:ring-0 focus:border-blue-600 peer",
                              placeholder: " ",
                              "onUpdate:modelValue": _cache[29] || (_cache[29] = ($event) => no_anggota.value = $event),
                              required: ""
                            }, null, 512), [
                              [vModelText, no_anggota.value]
                            ]),
                            _hoisted_120$2
                          ])
                        ]),
                        _hoisted_121$2,
                        createBaseVNode("div", _hoisted_122$2, [
                          createBaseVNode("div", _hoisted_123$2, [
                            withDirectives(createBaseVNode("input", {
                              type: "text",
                              name: "no_ktp",
                              id: "no_ktp",
                              class: "block py-2.5 px-2 w-full text-sm text-gray-900 bg-transparent border-2 rounded-md border-gray-300 appearance-none focus:outline-none focus:ring-0 focus:border-blue-600 peer",
                              placeholder: " ",
                              "onUpdate:modelValue": _cache[30] || (_cache[30] = ($event) => no_ktp.value = $event),
                              required: ""
                            }, null, 512), [
                              [vModelText, no_ktp.value]
                            ]),
                            _hoisted_124$2
                          ]),
                          createBaseVNode("div", _hoisted_125$2, [
                            withDirectives(createBaseVNode("input", {
                              type: "text",
                              name: "no_kk",
                              id: "no_kk",
                              class: "block py-2.5 px-2 w-full text-sm text-gray-900 bg-transparent border-2 rounded-md border-gray-300 appearance-none focus:outline-none focus:ring-0 focus:border-blue-600 peer",
                              placeholder: " ",
                              "onUpdate:modelValue": _cache[31] || (_cache[31] = ($event) => no_kk.value = $event),
                              required: ""
                            }, null, 512), [
                              [vModelText, no_kk.value]
                            ]),
                            _hoisted_126$2
                          ])
                        ]),
                        createBaseVNode("div", _hoisted_127$2, [
                          withDirectives(createBaseVNode("input", {
                            type: "text",
                            name: "nama_lengkap",
                            id: "nama_lengkap",
                            class: "block py-2.5 px-2 w-full text-sm text-gray-900 bg-transparent border-2 rounded-md border-gray-300 appearance-none focus:outline-none focus:ring-0 focus:border-blue-600 peer",
                            placeholder: " ",
                            "onUpdate:modelValue": _cache[32] || (_cache[32] = ($event) => nama_lengkap.value = $event),
                            required: ""
                          }, null, 512), [
                            [vModelText, nama_lengkap.value]
                          ]),
                          _hoisted_128$2
                        ]),
                        createBaseVNode("div", _hoisted_129$2, [
                          createBaseVNode("div", _hoisted_130$2, [
                            withDirectives(createBaseVNode("input", {
                              type: "text",
                              name: "tempat_lahir",
                              id: "tempat_lahir",
                              class: "block py-2.5 px-2 w-full text-sm text-gray-900 bg-transparent border-2 rounded-md border-gray-300 appearance-none focus:outline-none focus:ring-0 focus:border-blue-600 peer",
                              placeholder: " ",
                              "onUpdate:modelValue": _cache[33] || (_cache[33] = ($event) => tempat_lahir.value = $event),
                              required: ""
                            }, null, 512), [
                              [vModelText, tempat_lahir.value]
                            ]),
                            _hoisted_131$2
                          ]),
                          createBaseVNode("div", _hoisted_132$2, [
                            withDirectives(createBaseVNode("input", {
                              type: "date",
                              name: "tanggal_lahir",
                              id: "tanggal_lahir",
                              class: "block py-2.5 px-2 w-full text-sm text-gray-900 bg-transparent border-2 rounded-md border-gray-300 appearance-none focus:outline-none focus:ring-0 focus:border-blue-600 peer",
                              placeholder: " ",
                              "onUpdate:modelValue": _cache[34] || (_cache[34] = ($event) => tanggal_lahir.value = $event),
                              required: ""
                            }, null, 512), [
                              [vModelText, tanggal_lahir.value]
                            ]),
                            _hoisted_133$2
                          ])
                        ]),
                        createBaseVNode("div", _hoisted_134$2, [
                          createBaseVNode("div", _hoisted_135$2, [
                            withDirectives(createBaseVNode("select", {
                              name: "jenis_kelamin",
                              id: "jenis_kelamin",
                              class: "block py-2.5 px-2 w-full text-sm text-gray-900 bg-transparent border-2 rounded-md border-gray-300 appearance-none focus:outline-none focus:ring-0 focus:border-blue-600 peer",
                              placeholder: " ",
                              "onUpdate:modelValue": _cache[35] || (_cache[35] = ($event) => jenis_kelamin.value = $event),
                              required: ""
                            }, [
                              _hoisted_136$2,
                              (openBlock(true), createElementBlock(Fragment, null, renderList(unref(list_jenis_kelamin), (jenis) => {
                                return openBlock(), createElementBlock("option", {
                                  value: jenis.value
                                }, toDisplayString(jenis.nama), 9, _hoisted_137$2);
                              }), 256))
                            ], 512), [
                              [vModelSelect, jenis_kelamin.value]
                            ]),
                            _hoisted_138$2
                          ]),
                          createBaseVNode("div", _hoisted_139$2, [
                            withDirectives(createBaseVNode("select", {
                              name: "agama",
                              id: "agama",
                              class: "block py-2.5 px-2 w-full text-sm text-gray-900 bg-transparent border-2 rounded-md border-gray-300 appearance-none focus:outline-none focus:ring-0 focus:border-blue-600 peer",
                              placeholder: " ",
                              "onUpdate:modelValue": _cache[36] || (_cache[36] = ($event) => agama.value = $event),
                              required: ""
                            }, [
                              _hoisted_140$2,
                              (openBlock(true), createElementBlock(Fragment, null, renderList(unref(list_agama), (agama2) => {
                                return openBlock(), createElementBlock("option", {
                                  value: agama2.value
                                }, toDisplayString(agama2.nama), 9, _hoisted_141$2);
                              }), 256))
                            ], 512), [
                              [vModelSelect, agama.value]
                            ]),
                            _hoisted_142$2
                          ])
                        ]),
                        createBaseVNode("div", _hoisted_143$2, [
                          withDirectives(createBaseVNode("textarea", {
                            type: "text",
                            name: "alamat",
                            id: "alamat",
                            class: "block py-2.5 px-2 w-full text-sm text-gray-900 bg-transparent border-2 rounded-md border-gray-300 appearance-none focus:outline-none focus:ring-0 focus:border-blue-600 peer",
                            placeholder: " ",
                            "onUpdate:modelValue": _cache[37] || (_cache[37] = ($event) => alamat.value = $event),
                            required: ""
                          }, null, 512), [
                            [vModelText, alamat.value]
                          ]),
                          _hoisted_144$2
                        ]),
                        createBaseVNode("div", _hoisted_145$2, [
                          createBaseVNode("div", _hoisted_146$2, [
                            withDirectives(createBaseVNode("input", {
                              type: "text",
                              name: "rt",
                              id: "rt",
                              class: "block py-2.5 px-2 w-full text-sm text-gray-900 bg-transparent border-2 rounded-md border-gray-300 appearance-none focus:outline-none focus:ring-0 focus:border-blue-600 peer",
                              placeholder: " ",
                              "onUpdate:modelValue": _cache[38] || (_cache[38] = ($event) => rt.value = $event),
                              required: ""
                            }, null, 512), [
                              [vModelText, rt.value]
                            ]),
                            _hoisted_147$2
                          ]),
                          createBaseVNode("div", _hoisted_148$2, [
                            withDirectives(createBaseVNode("input", {
                              type: "text",
                              name: "rw",
                              id: "rw",
                              class: "block py-2.5 px-2 w-full text-sm text-gray-900 bg-transparent border-2 rounded-md border-gray-300 appearance-none focus:outline-none focus:ring-0 focus:border-blue-600 peer",
                              placeholder: " ",
                              "onUpdate:modelValue": _cache[39] || (_cache[39] = ($event) => rw.value = $event),
                              required: ""
                            }, null, 512), [
                              [vModelText, rw.value]
                            ]),
                            _hoisted_149$2
                          ]),
                          createBaseVNode("div", _hoisted_150$2, [
                            withDirectives(createBaseVNode("input", {
                              type: "text",
                              name: "kelurahan",
                              id: "kelurahan",
                              class: "block py-2.5 px-2 w-full text-sm text-gray-900 bg-transparent border-2 rounded-md border-gray-300 appearance-none focus:outline-none focus:ring-0 focus:border-blue-600 peer",
                              placeholder: " ",
                              "onUpdate:modelValue": _cache[40] || (_cache[40] = ($event) => kelurahan.value = $event),
                              required: ""
                            }, null, 512), [
                              [vModelText, kelurahan.value]
                            ]),
                            _hoisted_151$2
                          ])
                        ]),
                        createBaseVNode("div", _hoisted_152$2, [
                          createBaseVNode("div", _hoisted_153$2, [
                            withDirectives(createBaseVNode("input", {
                              type: "text",
                              name: "kecamatan",
                              id: "kecamatan",
                              class: "block py-2.5 px-2 w-full text-sm text-gray-900 bg-transparent border-2 rounded-md border-gray-300 appearance-none focus:outline-none focus:ring-0 focus:border-blue-600 peer",
                              placeholder: " ",
                              "onUpdate:modelValue": _cache[41] || (_cache[41] = ($event) => kecamatan.value = $event),
                              required: ""
                            }, null, 512), [
                              [vModelText, kecamatan.value]
                            ]),
                            _hoisted_154$2
                          ]),
                          createBaseVNode("div", _hoisted_155$2, [
                            withDirectives(createBaseVNode("input", {
                              type: "text",
                              name: "kota",
                              id: "kota",
                              class: "block py-2.5 px-2 w-full text-sm text-gray-900 bg-transparent border-2 rounded-md border-gray-300 appearance-none focus:outline-none focus:ring-0 focus:border-blue-600 peer",
                              placeholder: " ",
                              "onUpdate:modelValue": _cache[42] || (_cache[42] = ($event) => kota.value = $event),
                              required: ""
                            }, null, 512), [
                              [vModelText, kota.value]
                            ]),
                            _hoisted_156$2
                          ])
                        ]),
                        createBaseVNode("div", _hoisted_157$2, [
                          createBaseVNode("div", _hoisted_158$2, [
                            withDirectives(createBaseVNode("input", {
                              type: "text",
                              name: "pendamping",
                              id: "pendamping",
                              class: "block py-2.5 px-2 w-full text-sm text-gray-900 bg-transparent border-2 rounded-md border-gray-300 appearance-none focus:outline-none focus:ring-0 focus:border-blue-600 peer",
                              placeholder: " ",
                              "onUpdate:modelValue": _cache[43] || (_cache[43] = ($event) => pendamping.value = $event),
                              required: ""
                            }, null, 512), [
                              [vModelText, pendamping.value]
                            ]),
                            _hoisted_159$2
                          ]),
                          createBaseVNode("div", _hoisted_160$2, [
                            withDirectives(createBaseVNode("input", {
                              type: "text",
                              name: "pekerjaan",
                              id: "pekerjaan",
                              class: "block py-2.5 px-2 w-full text-sm text-gray-900 bg-transparent border-2 rounded-md border-gray-300 appearance-none focus:outline-none focus:ring-0 focus:border-blue-600 peer",
                              placeholder: " ",
                              "onUpdate:modelValue": _cache[44] || (_cache[44] = ($event) => pekerjaan.value = $event),
                              required: ""
                            }, null, 512), [
                              [vModelText, pekerjaan.value]
                            ]),
                            _hoisted_161$2
                          ]),
                          createBaseVNode("div", _hoisted_162$2, [
                            withDirectives(createBaseVNode("input", {
                              type: "tel",
                              name: "telepon",
                              id: "telepon",
                              class: "block py-2.5 px-2 w-full text-sm text-gray-900 bg-transparent border-2 rounded-md border-gray-300 appearance-none focus:outline-none focus:ring-0 focus:border-blue-600 peer",
                              placeholder: " ",
                              "onUpdate:modelValue": _cache[45] || (_cache[45] = ($event) => no_telepon.value = $event),
                              required: ""
                            }, null, 512), [
                              [vModelText, no_telepon.value]
                            ]),
                            _hoisted_163$2
                          ])
                        ]),
                        createBaseVNode("div", _hoisted_164$2, [
                          createBaseVNode("div", _hoisted_165$2, [
                            withDirectives(createBaseVNode("select", {
                              name: "resort",
                              id: "resort",
                              class: "block py-2.5 px-2 w-full text-sm text-gray-900 bg-transparent border-2 rounded-md border-gray-300 appearance-none focus:outline-none focus:ring-0 focus:border-blue-600 peer",
                              placeholder: " ",
                              "onUpdate:modelValue": _cache[46] || (_cache[46] = ($event) => resort.value = $event),
                              required: ""
                            }, [
                              _hoisted_166$2,
                              (openBlock(true), createElementBlock(Fragment, null, renderList(unref(list_resort), (resort2) => {
                                return openBlock(), createElementBlock("option", {
                                  value: resort2.value
                                }, toDisplayString(resort2.nama), 9, _hoisted_167$2);
                              }), 256))
                            ], 512), [
                              [vModelSelect, resort.value]
                            ]),
                            _hoisted_168$2
                          ]),
                          createBaseVNode("div", _hoisted_169$2, [
                            withDirectives(createBaseVNode("input", {
                              type: "date",
                              name: "tanggal_bht",
                              id: "tanggal_bht",
                              class: "block py-2.5 px-2 w-full text-sm text-gray-900 bg-transparent border-2 rounded-md border-gray-300 appearance-none focus:outline-none focus:ring-0 focus:border-blue-600 peer",
                              placeholder: " ",
                              "onUpdate:modelValue": _cache[47] || (_cache[47] = ($event) => tanggal_bht.value = $event),
                              disabled: ""
                            }, null, 512), [
                              [vModelText, tanggal_bht.value]
                            ]),
                            _hoisted_170$2
                          ])
                        ]),
                        _hoisted_171$2,
                        createBaseVNode("div", _hoisted_172$2, [
                          createBaseVNode("div", _hoisted_173$2, [
                            withDirectives(createBaseVNode("input", {
                              type: "text",
                              name: "simpanan_pokok",
                              id: "simpanan_pokok",
                              class: "block py-2.5 px-10 w-full text-sm text-gray-900 bg-transparent border-2 rounded-md border-gray-300 appearance-none focus:outline-none focus:ring-0 focus:border-blue-600 peer",
                              placeholder: " ",
                              "onUpdate:modelValue": _cache[48] || (_cache[48] = ($event) => simpanan_pokok.value = $event),
                              disabled: ""
                            }, null, 512), [
                              [vModelText, simpanan_pokok.value]
                            ]),
                            _hoisted_174$2,
                            _hoisted_175$2
                          ]),
                          createBaseVNode("div", _hoisted_176$2, [
                            withDirectives(createBaseVNode("input", {
                              type: "text",
                              name: "simpanan_swk",
                              id: "simpanan_swk",
                              class: "block py-2.5 px-10 w-full text-sm text-gray-900 bg-transparent border-2 rounded-md border-gray-300 appearance-none focus:outline-none focus:ring-0 focus:border-blue-600 peer",
                              placeholder: " ",
                              "onUpdate:modelValue": _cache[49] || (_cache[49] = ($event) => simpanan_swk.value = $event),
                              disabled: ""
                            }, null, 512), [
                              [vModelText, simpanan_swk.value]
                            ]),
                            _hoisted_177$2,
                            _hoisted_178$2
                          ])
                        ]),
                        createBaseVNode("div", _hoisted_179$2, [
                          createBaseVNode("div", _hoisted_180$2, [
                            withDirectives(createBaseVNode("input", {
                              type: "text",
                              name: "simpanan_wajib",
                              id: "simpanan_wajib",
                              class: "block py-2.5 px-10 w-full text-sm text-gray-900 bg-transparent border-2 rounded-md border-gray-300 appearance-none focus:outline-none focus:ring-0 focus:border-blue-600 peer",
                              placeholder: " ",
                              "onUpdate:modelValue": _cache[50] || (_cache[50] = ($event) => simpanan_wajib.value = $event),
                              disabled: ""
                            }, null, 512), [
                              [vModelText, simpanan_wajib.value]
                            ]),
                            _hoisted_181$2,
                            _hoisted_182$2
                          ]),
                          createBaseVNode("div", _hoisted_183$2, [
                            withDirectives(createBaseVNode("input", {
                              type: "text",
                              name: "simpanan_lain",
                              id: "simpanan_lain",
                              class: "block py-2.5 px-10 w-full text-sm text-gray-900 bg-transparent border-2 rounded-md border-gray-300 appearance-none focus:outline-none focus:ring-0 focus:border-blue-600 peer",
                              placeholder: " ",
                              "onUpdate:modelValue": _cache[51] || (_cache[51] = ($event) => simpanan_lain.value = $event),
                              disabled: ""
                            }, null, 512), [
                              [vModelText, simpanan_lain.value]
                            ]),
                            _hoisted_184$2,
                            _hoisted_185$2
                          ])
                        ]),
                        createBaseVNode("div", _hoisted_186$2, [
                          createBaseVNode("div", _hoisted_187$2, [
                            withDirectives(createBaseVNode("input", {
                              type: "text",
                              name: "total_simpanan",
                              id: "total_simpanan",
                              class: "block py-2.5 px-10 w-full text-sm text-gray-900 bg-transparent border-2 rounded-md border-gray-300 appearance-none focus:outline-none focus:ring-0 focus:border-blue-600 peer",
                              placeholder: " ",
                              "onUpdate:modelValue": _cache[52] || (_cache[52] = ($event) => total_simpanan.value = $event),
                              disabled: ""
                            }, null, 512), [
                              [vModelText, total_simpanan.value]
                            ]),
                            _hoisted_188$2,
                            _hoisted_189$2
                          ])
                        ])
                      ])
                    ])
                  ], 40, _hoisted_90$4)
                ])
              ]),
              _: 1
            }),
            createVNode(_component_ModalFooter, { class: "text-right" }, {
              default: withCtx(() => [
                createBaseVNode("button", {
                  type: "button",
                  class: "btn btn-outline-secondary w-32 mr-1",
                  onClick: resetForm
                }, " Cancel "),
                _hoisted_190$2
              ]),
              _: 1
            })
          ]),
          _: 1
        }, 8, ["show"]),
        createVNode(_component_Modal, {
          backdrop: "static",
          show: modal_delete.value,
          onHidden: _cache[55] || (_cache[55] = ($event) => modal_delete.value = false)
        }, {
          default: withCtx(() => [
            createVNode(_component_ModalBody, { class: "p-0" }, {
              default: withCtx(() => [
                createBaseVNode("div", _hoisted_191$2, [
                  createVNode(_component_XCircleIcon, { class: "w-16 h-16 text-danger mx-auto mt-3" }),
                  _hoisted_192$2,
                  createBaseVNode("div", _hoisted_193$2, [
                    createTextVNode(" Ingin menghapus "),
                    userIds.value.length > 1 ? (openBlock(), createElementBlock("span", _hoisted_194$2, "Beberapa")) : createCommentVNode("", true),
                    createTextVNode(" data dengan ID "),
                    _hoisted_195$2,
                    createBaseVNode("b", null, toDisplayString(userIds.value.length > 1 ? userIds.value : userIds.value[0]), 1),
                    createTextVNode(" ? "),
                    _hoisted_196$2,
                    createTextVNode("Data yang telah dihapus tidak bisa kembali. ")
                  ])
                ]),
                createBaseVNode("div", _hoisted_197$2, [
                  createBaseVNode("button", {
                    type: "button",
                    onClick: resetForm,
                    class: "btn btn-outline-secondary w-24 mr-1 text-xs"
                  }, " Batal "),
                  createBaseVNode("button", {
                    type: "button",
                    class: "btn btn-danger w-24 text-xs",
                    onClick: _cache[54] || (_cache[54] = (e) => {
                      e.preventDefault();
                      deleteAnggota();
                    })
                  }, " Hapus ")
                ])
              ]),
              _: 1
            })
          ]),
          _: 1
        }, 8, ["show"])
      ], 64);
    };
  }
};
const request$3 = window.api.historyAnggota;
const useHistoryAnggotaStore = defineStore({
  id: "history-anggota",
  state: () => ({
    rawItems: []
  }),
  getters: {
    items: (state) => state.rawItems
  },
  actions: {
    async readItem(search_type, search_data, sort_by, sort_mode, page_number, total_row_displayed) {
      try {
        const data = await request$3.fetchAnggota(
          search_type,
          search_data,
          sort_by,
          sort_mode,
          page_number,
          total_row_displayed
        );
        if (data.success) {
          this.rawItems = data.data.rows;
          return data.data.total_page;
        } else if (!data.success && data.data.message == "token invalid") {
          Swal.fire({
            icon: "error",
            title: "Token Invalid",
            text: "Token Anda Invalid, silahkan login ulang"
          }).then((data2) => {
            localStorage.removeItem("user");
            router$1.push("/auth");
            window.location.reload();
          });
        }
      } catch (error) {
        throw new Error(error);
      }
    },
    async getItem(iddata) {
      try {
        const data = await request$3.getAnggota(iddata);
        if (data.success) {
          return data.data.rows[0];
        }
      } catch (error) {
        throw new Error(error);
      }
    },
    async postItem(imageFoto, imageTTD, imagePA, tanggal, no_anggota, no_ktp, no_kk, nama_lengkap, tempat_lahir, tanggal_lahir, jenis_kelamin, agama, alamat, rt, rw, kelurahan, kecamatan, kota, pendamping, pekerjaan, no_telepon, resort) {
      try {
        const iddata = Date.now();
        this.rawItems.push({
          iddata,
          tanggal,
          no_anggota,
          no_ktp,
          no_kk,
          nama_lengkap,
          tempat_lahir,
          tanggal_lahir,
          jenis_kelamin,
          agama,
          alamat,
          rt,
          rw,
          kelurahan,
          kecamatan,
          kota,
          pendamping,
          pekerjaan,
          no_telepon,
          resort
        });
        await request$3.postAnggota(
          tanggal,
          no_anggota,
          no_ktp,
          no_kk,
          nama_lengkap,
          tempat_lahir,
          tanggal_lahir,
          jenis_kelamin,
          agama,
          alamat,
          rt,
          rw,
          kelurahan,
          kecamatan,
          kota,
          pendamping,
          pekerjaan,
          no_telepon,
          resort,
          imageFoto,
          imageTTD,
          imagePA
        );
      } catch (error) {
        throw new Error(error);
      }
    },
    async removeItem(iddata) {
      try {
        this.rawItems = this.rawItems.filter((item) => item.iddata !== iddata);
        const data = await request$3.deleteAnggota(iddata);
      } catch (error) {
        throw new Error(error);
      }
    }
  }
});
const _hoisted_1$5 = { class: "relative top-0 bg-white w-full border-y-2 border-[#d0d3d4]" };
const _hoisted_2$5 = { class: "flex space-x-4 w-full justify-center m-auto px-5" };
const _hoisted_3$5 = { class: "grid grid-cols-8 xl:grid-cols-10 w-full h-10" };
const _hoisted_4$5 = {
  class: "inline-block align-middle text-center select-none border font-normal whitespace-no-wrap rounded no-underline h-9 mx-auto px-2 leading-tight text-xs bg-gray-100 text-gray-800 hover:text-blue-700 hover:bg-gray-200 btn-light-bordered",
  disabled: "",
  id: "delete-multiple-data",
  "data-bs-toggle": "tooltip",
  title: "Tambah Data"
};
const _hoisted_5$5 = {
  class: "inline-block align-middle hover:text-success text-center select-none border font-normal whitespace-no-wrap rounded no-underline h-9 mx-auto px-2 leading-tight text-xs bg-gray-100 text-gray-800 hover:bg-gray-200 btn-light-bordered",
  title: "Export CSV",
  onclick: "exportData('csv')"
};
const _hoisted_6$5 = /* @__PURE__ */ createBaseVNode("span", { class: "w-4 h-2 px-0.5 mx-auto my-[2px] stroke-2 stroke-current text-[8px] text-success font-bold" }, "CSV", -1);
const _hoisted_7$5 = {
  class: "inline-block hover:text-danger align-middle text-center select-none border font-normal whitespace-no-wrap rounded no-underline h-9 mx-auto px-2 leading-tight text-xs bg-gray-100 text-gray-800 hover:bg-gray-200 btn-light-bordered",
  title: "Export PDF",
  onclick: "exportData('pdf')"
};
const _hoisted_8$5 = /* @__PURE__ */ createBaseVNode("span", { class: "w-4 h-2 px-0.5 mx-auto my-[2px] stroke-2 stroke-current text-[8px] text-danger font-bold" }, "PDF", -1);
const _hoisted_9$5 = {
  class: "inline-block align-middle text-center select-none border font-normal whitespace-no-wrap rounded no-underline h-9 mx-auto px-2 leading-tight text-xs bg-gray-100 text-gray-800 hover:bg-gray-200 btn-light-bordered",
  title: "Print Table",
  onclick: "printData()"
};
const _hoisted_10$5 = /* @__PURE__ */ createBaseVNode("i", { class: "fa-solid fa-check" }, null, -1);
const _hoisted_11$4 = {
  href: "javascript:history.go(0)",
  title: "Refresh All",
  class: "inline-block hover:text-primary align-middle text-center select-none border font-normal whitespace-no-wrap rounded no-underline h-9 mx-auto px-2 leading-tight text-xs bg-gray-100 text-gray-800 hover:bg-gray-200 btn-light-bordered"
};
const _hoisted_12$4 = { class: "flex order-2 w-full h-10" };
const _hoisted_13$4 = {
  id: "pagination",
  class: "mx-auto"
};
const _hoisted_14$4 = { class: "inline-flex align-middle leading-tight text-xs" };
const _hoisted_15$4 = { class: "relative inline-flex align-middle py-1 leading-tight text-xs" };
const _hoisted_16$4 = { class: "flex items-stretch w-full" };
const _hoisted_17$4 = { class: "relative inline-flex align-middle py-1 leading-tight text-xs" };
const _hoisted_18$4 = { class: "items-center justify-center w-full flex h-10" };
const _hoisted_19$4 = /* @__PURE__ */ createBaseVNode("option", { value: "50" }, "50", -1);
const _hoisted_20$4 = /* @__PURE__ */ createBaseVNode("option", { value: "75" }, "75", -1);
const _hoisted_21$4 = /* @__PURE__ */ createBaseVNode("option", { value: "100" }, "100", -1);
const _hoisted_22$3 = [
  _hoisted_19$4,
  _hoisted_20$4,
  _hoisted_21$4
];
const _hoisted_23$3 = {
  class: "relative flex items-stretch w-full",
  id: "search-input-group"
};
const _hoisted_24$4 = ["placeholder"];
const _hoisted_25$4 = { class: "input-group-append" };
const _hoisted_26$4 = { class: "input-group-append" };
const _hoisted_27$3 = /* @__PURE__ */ createStaticVNode('<option value="nama">Nama</option><option value="iddata">ID</option><option value="cif">No Anggota</option><option value="noktp">No KTP</option><option value="alamat">Alamat</option><option value="desa">Desa</option><option value="kecamatan">kecamatan</option><option value="kota">Kota</option>', 8);
const _hoisted_35$4 = [
  _hoisted_27$3
];
const _hoisted_36$4 = { class: "flex flex-col h-[80vh] min-[1537px]:h-[85vh] shadow-md rounded-lg" };
const _hoisted_37$4 = { class: "flex-grow overflow-auto" };
const _hoisted_38$4 = { class: "relative w-full text-xs text-left text-gray-500 table-interval" };
const _hoisted_39$4 = { class: "text-xs font-bold text-gray-800 uppercase bg-blue-200 sticky top-0 z-10 table-fixed" };
const _hoisted_40$4 = {
  scope: "col",
  class: "p-2 border pl-3"
};
const _hoisted_41$4 = { class: "flex items-center" };
const _hoisted_42$4 = /* @__PURE__ */ createBaseVNode("label", {
  for: "checkbox-all-search",
  class: "sr-only"
}, "checkbox", -1);
const _hoisted_43$4 = /* @__PURE__ */ createBaseVNode("th", {
  scope: "col",
  class: "text-center uppercase border"
}, "Actions", -1);
const _hoisted_44$4 = { class: "overflow-y-scroll" };
const _hoisted_45$4 = ["anggota", "value"];
const _hoisted_46$4 = { class: "w-4 border-r border-b font-medium p-0 pl-3" };
const _hoisted_47$4 = { class: "flex items-center" };
const _hoisted_48$3 = /* @__PURE__ */ createBaseVNode("span", { class: "hidden cursor-pointer -ml-[9px] mr-[1px] rotate-90 group-hover:block text-black" }, ":::", -1);
const _hoisted_49$3 = ["value"];
const _hoisted_50$3 = ["onDblclick"];
const _hoisted_51$3 = ["onDblclick"];
const _hoisted_52$3 = ["onDblclick"];
const _hoisted_53$3 = ["onDblclick"];
const _hoisted_54$3 = ["onDblclick"];
const _hoisted_55$3 = ["onDblclick"];
const _hoisted_56$2 = ["onDblclick"];
const _hoisted_57$2 = ["onDblclick"];
const _hoisted_58$2 = ["onDblclick"];
const _hoisted_59$2 = ["onDblclick"];
const _hoisted_60$2 = ["onDblclick"];
const _hoisted_61$3 = ["onDblclick"];
const _hoisted_62$3 = ["onDblclick"];
const _hoisted_63$3 = { class: "min-w-max border-r border-b font-medium p-1" };
const _hoisted_64$3 = { class: "flex justify-center" };
const _hoisted_65$3 = ["onClick"];
const _hoisted_66$3 = ["onClick"];
const _hoisted_67$3 = { class: "fixed intleft-2 right-0 top-0 bottom-0 w-full h-[100vh] z-50 overflow-hidden bg-gray-500 opacity-75 flex flex-col items-center justify-center" };
const _hoisted_68$3 = /* @__PURE__ */ createBaseVNode("h2", { class: "text-center text-white text-xl font-semibold" }, "Loading...", -1);
const _hoisted_69$3 = /* @__PURE__ */ createBaseVNode("p", { class: "w-1/3 text-center text-white" }, "Sedang Memuat Data", -1);
const _hoisted_70$3 = /* @__PURE__ */ createBaseVNode("p", { class: "w-1/3 text-center text-white" }, " Ini mungkin memakan waktu beberapa saat, tolong jangan tutup halaman ini. ", -1);
const _hoisted_71$3 = { class: "font-medium text-base mr-auto" };
const _hoisted_72$3 = { key: 0 };
const _hoisted_73$3 = { key: 1 };
const _hoisted_74$3 = { key: 2 };
const _hoisted_75$3 = { key: 3 };
const _hoisted_76$3 = {
  key: 0,
  class: "flex space-x-4 -mx-5 py-2 justify-center -mt-5 mb-3 bg-gray-100"
};
const _hoisted_77$3 = {
  class: "px-2 h-10 border rounded-md box flex items-center text-amber-800 bg-white hover:bg-slate-200",
  title: "Fasilitas"
};
const _hoisted_78$3 = /* @__PURE__ */ createBaseVNode("span", { class: "px-0.5 mx-auto my-[2px] stroke-2 stroke-current text-xs text-black font-bold" }, "Fasilitas", -1);
const _hoisted_79$3 = {
  class: "px-2 h-10 border rounded-md box flex items-center text-slate-600 bg-white hover:bg-slate-200",
  title: "Simpanan Pokok"
};
const _hoisted_80$3 = /* @__PURE__ */ createBaseVNode("span", { class: "px-0.5 mx-auto my-[2px] stroke-2 stroke-current text-xs text-black font-bold" }, "Simp. Pokok", -1);
const _hoisted_81$3 = {
  class: "px-2 h-10 border rounded-md box flex items-center text-amber-400 bg-white hover:bg-slate-200",
  title: "Simpanan Wajib"
};
const _hoisted_82$3 = /* @__PURE__ */ createBaseVNode("span", { class: "px-0.5 mx-auto my-[2px] stroke-2 stroke-current text-xs text-black font-bold" }, "Simp. Wajib", -1);
const _hoisted_83$3 = {
  class: "px-2 h-10 border rounded-md box flex items-center text-amber-700 bg-white hover:bg-slate-200",
  title: "Simpanan SWK"
};
const _hoisted_84$3 = /* @__PURE__ */ createBaseVNode("span", { class: "px-0.5 mx-auto my-[2px] stroke-2 stroke-current text-xs text-black font-bold" }, "Simp. SWK", -1);
const _hoisted_85$3 = {
  class: "px-2 h-10 border rounded-md box flex items-center text-red-300 bg-white hover:bg-slate-200",
  title: "Simpanan Lain - Lain"
};
const _hoisted_86$3 = /* @__PURE__ */ createBaseVNode("span", { class: "px-0.5 mx-auto my-[2px] stroke-2 stroke-current text-xs text-black font-bold" }, "Simp. Lain", -1);
const _hoisted_87$3 = {
  class: "px-2 h-10 border rounded-md box flex items-center text-primary bg-white hover:bg-slate-200",
  title: "Simpanan SHU"
};
const _hoisted_88$3 = /* @__PURE__ */ createBaseVNode("span", { class: "px-0.5 mx-auto my-[2px] stroke-2 stroke-current text-xs text-black font-bold" }, "Simp. SHU", -1);
const _hoisted_89$3 = {
  class: "px-2 h-10 border rounded-md box flex items-center text-green-600 bg-white hover:bg-slate-200",
  title: "Simpanan Saldo"
};
const _hoisted_90$3 = /* @__PURE__ */ createBaseVNode("span", { class: "px-0.5 mx-auto my-[2px] stroke-2 stroke-current text-xs text-black font-bold" }, "Simp. Saldo", -1);
const _hoisted_91$3 = {
  class: "px-2 h-10 border rounded-md box flex items-center text-black bg-white hover:bg-slate-200",
  title: "Catatan"
};
const _hoisted_92$3 = /* @__PURE__ */ createBaseVNode("span", { class: "px-0.5 mx-auto my-[2px] stroke-2 stroke-current text-xs text-black font-bold" }, "Catatan", -1);
const _hoisted_93$3 = { class: "-mx-4" };
const _hoisted_94$3 = ["onSubmit"];
const _hoisted_95$3 = { class: "border-r-2 mx-auto col-span-3 overflow-y-auto mt-0" };
const _hoisted_96$3 = { class: "border-4 relative rounded-md border-dashed p-2 m-2 text-sm mx-auto text-center mb-4 max-w-max h-[40%] bg-gray-100" };
const _hoisted_97$3 = { class: "border p-1" };
const _hoisted_98$3 = ["src"];
const _hoisted_99$3 = ["src"];
const _hoisted_100$3 = { class: "mb-0 text-xs rounded-t-md border-b bg-white" };
const _hoisted_101$3 = { class: "mb-1 text-xs rounded-b-md bg-white" };
const _hoisted_102$3 = /* @__PURE__ */ createBaseVNode("span", { class: "font-semibold" }, " KB", -1);
const _hoisted_103$3 = /* @__PURE__ */ createBaseVNode("label", {
  for: "foto",
  class: "font-medium text-base rounded-lg bg-white px-2 absolute text-gray-500 duration-300 transform -translate-y-6 scale-75 top-2.5 z-10 origin-[0] left-2 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6"
}, "Foto Anggota", -1);
const _hoisted_104$3 = { class: "border-4 relative rounded-md border-dashed p-2 m-2 text-sm text-center mb-4 bg-gray-100" };
const _hoisted_105$3 = { class: "border p-1" };
const _hoisted_106$3 = ["src"];
const _hoisted_107$3 = { class: "mb-0 text-xs rounded-t-md border-b bg-white" };
const _hoisted_108$3 = { class: "mb-1 text-xs rounded-b-md bg-white" };
const _hoisted_109$3 = /* @__PURE__ */ createBaseVNode("span", { class: "font-semibold" }, " KB", -1);
const _hoisted_110$3 = /* @__PURE__ */ createBaseVNode("label", {
  for: "foto",
  class: "font-medium text-base rounded-lg bg-white px-2 absolute text-gray-500 duration-300 transform -translate-y-6 scale-75 top-2.5 z-10 origin-[0] left-2 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6"
}, "Tanda Tangan Anggota", -1);
const _hoisted_111$3 = { class: "border-4 relative rounded-md border-dashed p-2 m-2 text-sm text-center mb-4 bg-gray-100" };
const _hoisted_112$3 = { class: "border p-1" };
const _hoisted_113$3 = ["src"];
const _hoisted_114$3 = { class: "mb-0 text-xs rounded-t-md border-b bg-white" };
const _hoisted_115$3 = { class: "mb-1 text-xs rounded-b-md bg-white" };
const _hoisted_116$3 = /* @__PURE__ */ createBaseVNode("span", { class: "font-semibold" }, " KB", -1);
const _hoisted_117$2 = /* @__PURE__ */ createBaseVNode("label", {
  for: "foto",
  class: "font-medium text-base rounded-lg bg-white px-2 absolute text-gray-500 duration-300 transform -translate-y-6 scale-75 top-2.5 z-10 origin-[0] left-2 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6"
}, "Paraf Anggota", -1);
const _hoisted_118$2 = { class: "col-span-9 flex max-h-[600px]" };
const _hoisted_119$2 = { class: "flex-grow overflow-auto pr-2" };
const _hoisted_120$1 = { class: "grid grid-cols-2 gap-4" };
const _hoisted_121$1 = { class: "relative z-0 w-full mb-5 mt-2 group" };
const _hoisted_122$1 = /* @__PURE__ */ createBaseVNode("label", {
  for: "tanggal",
  class: "peer-focus:font-medium rounded-lg bg-white px-2 absolute text-sm text-gray-500 duration-300 transform -translate-y-6 scale-75 top-2.5 peer-focus:top-3.5 z-10 origin-[0] left-2 peer-focus:text-blue-600 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6"
}, "Tanggal", -1);
const _hoisted_123$1 = { class: "relative z-0 w-full mb-5 mt-2 group" };
const _hoisted_124$1 = /* @__PURE__ */ createBaseVNode("label", {
  for: "no_anggota",
  class: "peer-focus:font-medium rounded-lg bg-white px-2 absolute text-sm text-gray-500 duration-300 transform -translate-y-6 scale-75 top-2.5 peer-focus:top-3.5 z-10 origin-[0] left-2 peer-focus:text-blue-600 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6"
}, "No. Anggota", -1);
const _hoisted_125$1 = /* @__PURE__ */ createBaseVNode("hr", { class: "mb-3 border-1 border-gray-300 bg-gray-300" }, null, -1);
const _hoisted_126$1 = { class: "grid grid-cols-2 gap-6" };
const _hoisted_127$1 = { class: "relative z-0 w-full mb-6 group" };
const _hoisted_128$1 = /* @__PURE__ */ createBaseVNode("label", {
  for: "no_ktp",
  class: "peer-focus:font-medium rounded-lg bg-white px-2 absolute text-sm text-gray-500 duration-300 transform -translate-y-6 scale-75 top-2.5 peer-focus:top-3.5 z-10 origin-[0] left-2 peer-focus:text-blue-600 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6"
}, "No. KTP/ NIK", -1);
const _hoisted_129$1 = { class: "relative z-0 w-full mb-6 group" };
const _hoisted_130$1 = /* @__PURE__ */ createBaseVNode("label", {
  for: "no_kk",
  class: "peer-focus:font-medium rounded-lg bg-white px-2 absolute text-sm text-gray-500 duration-300 transform -translate-y-6 scale-75 top-2.5 peer-focus:top-3.5 z-10 origin-[0] left-2 peer-focus:text-blue-600 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6"
}, "No. Kartu Keluarga", -1);
const _hoisted_131$1 = { class: "relative z-0 w-full mb-6 group" };
const _hoisted_132$1 = /* @__PURE__ */ createBaseVNode("label", {
  for: "nama_lengkap",
  class: "peer-focus:font-medium rounded-lg bg-white px-2 absolute text-sm text-gray-500 duration-300 transform -translate-y-6 scale-75 top-2.5 peer-focus:top-3.5 z-10 origin-[0] left-2 peer-focus:text-blue-600 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6"
}, "Nama Lengkap", -1);
const _hoisted_133$1 = { class: "grid grid-cols-2 gap-6" };
const _hoisted_134$1 = { class: "relative z-0 w-full mb-6 group" };
const _hoisted_135$1 = /* @__PURE__ */ createBaseVNode("label", {
  for: "tempat_lahir",
  class: "peer-focus:font-medium rounded-lg bg-white px-2 absolute text-sm text-gray-500 duration-300 transform -translate-y-6 scale-75 top-2.5 peer-focus:top-3.5 z-10 origin-[0] left-2 peer-focus:text-blue-600 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6"
}, "Tempat Lahir", -1);
const _hoisted_136$1 = { class: "relative z-0 w-full mb-6 group" };
const _hoisted_137$1 = /* @__PURE__ */ createBaseVNode("label", {
  for: "tanggal_lahir",
  class: "peer-focus:font-medium rounded-lg bg-white px-2 absolute text-sm text-gray-500 duration-300 transform -translate-y-6 scale-75 top-3.5 z-10 origin-[0] left-2 peer-focus:text-blue-600 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6"
}, "Tanggal Lahir", -1);
const _hoisted_138$1 = { class: "grid grid-cols-2 gap-6" };
const _hoisted_139$1 = { class: "relative z-0 w-full mb-6 group" };
const _hoisted_140$1 = /* @__PURE__ */ createBaseVNode("option", {
  class: "text-xs",
  value: "",
  disabled: ""
}, "Pilihlah Salah Satu", -1);
const _hoisted_141$1 = ["value"];
const _hoisted_142$1 = /* @__PURE__ */ createBaseVNode("label", {
  for: "jenis_kelamin",
  class: "peer-focus:font-medium rounded-lg bg-white px-2 absolute text-sm text-gray-500 duration-300 transform -translate-y-6 scale-75 top-3.5 peer-focus:top-2.5 z-10 origin-[0] left-2 peer-focus:text-blue-600 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6"
}, "Jenis Kelamin", -1);
const _hoisted_143$1 = { class: "relative z-0 w-full mb-6 group" };
const _hoisted_144$1 = /* @__PURE__ */ createBaseVNode("option", {
  class: "text-xs",
  value: "",
  disabled: ""
}, "Pilihlah Salah Satu", -1);
const _hoisted_145$1 = ["value"];
const _hoisted_146$1 = /* @__PURE__ */ createBaseVNode("label", {
  for: "agama",
  class: "peer-focus:font-medium rounded-lg bg-white px-2 absolute text-sm text-gray-500 duration-300 transform -translate-y-6 scale-75 top-3.5 peer-focus:top-3.5 z-10 origin-[0] left-2 peer-focus:text-blue-600 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6"
}, "Agama", -1);
const _hoisted_147$1 = { class: "relative z-0 w-full mb-6 group" };
const _hoisted_148$1 = /* @__PURE__ */ createBaseVNode("label", {
  for: "alamat",
  class: "peer-focus:font-medium rounded-lg bg-white px-2 absolute text-sm text-gray-500 duration-300 transform -translate-y-6 scale-75 top-2.5 peer-focus:top-3.5 z-10 origin-[0] left-2 peer-focus:text-blue-600 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6"
}, "Alamat", -1);
const _hoisted_149$1 = { class: "grid grid-cols-4 gap-6" };
const _hoisted_150$1 = { class: "relative z-0 w-full mb-6 group" };
const _hoisted_151$1 = /* @__PURE__ */ createBaseVNode("label", {
  for: "rt",
  class: "peer-focus:font-medium rounded-lg bg-white px-2 absolute text-sm text-gray-500 duration-300 transform -translate-y-6 scale-75 top-2.5 peer-focus:top-3.5 z-10 origin-[0] left-2 peer-focus:text-blue-600 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6"
}, "RT", -1);
const _hoisted_152$1 = { class: "relative z-0 w-full mb-6 group" };
const _hoisted_153$1 = /* @__PURE__ */ createBaseVNode("label", {
  for: "rw",
  class: "peer-focus:font-medium rounded-lg bg-white px-2 absolute text-sm text-gray-500 duration-300 transform -translate-y-6 scale-75 top-2.5 peer-focus:top-3.5 z-10 origin-[0] left-2 peer-focus:text-blue-600 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6"
}, "RW", -1);
const _hoisted_154$1 = { class: "relative z-0 w-full col-span-2 mb-6 group" };
const _hoisted_155$1 = /* @__PURE__ */ createBaseVNode("label", {
  for: "kelurahan",
  class: "peer-focus:font-medium rounded-lg bg-white px-2 absolute text-sm text-gray-500 duration-300 transform -translate-y-6 scale-75 top-2.5 peer-focus:top-3.5 z-10 origin-[0] left-2 peer-focus:text-blue-600 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6"
}, "Kelurahan/ Desa", -1);
const _hoisted_156$1 = { class: "grid grid-cols-2 gap-6" };
const _hoisted_157$1 = { class: "relative z-0 w-full mb-6 group" };
const _hoisted_158$1 = /* @__PURE__ */ createBaseVNode("label", {
  for: "kecamatan",
  class: "peer-focus:font-medium rounded-lg bg-white px-2 absolute text-sm text-gray-500 duration-300 transform -translate-y-6 scale-75 top-2.5 peer-focus:top-3.5 z-10 origin-[0] left-2 peer-focus:text-blue-600 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6"
}, "Kecamatan", -1);
const _hoisted_159$1 = { class: "relative z-0 w-full mb-6 group" };
const _hoisted_160$1 = /* @__PURE__ */ createBaseVNode("label", {
  for: "kota",
  class: "peer-focus:font-medium rounded-lg bg-white px-2 absolute text-sm text-gray-500 duration-300 transform -translate-y-6 scale-75 top-2.5 peer-focus:top-3.5 z-10 origin-[0] left-2 peer-focus:text-blue-600 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6"
}, "Kabupaten/ Kota", -1);
const _hoisted_161$1 = { class: "grid grid-cols-3 gap-6" };
const _hoisted_162$1 = { class: "relative z-0 w-full mb-6 group" };
const _hoisted_163$1 = /* @__PURE__ */ createBaseVNode("label", {
  for: "pendamping",
  class: "peer-focus:font-medium rounded-lg bg-white px-2 absolute text-sm text-gray-500 duration-300 transform -translate-y-6 scale-75 top-2.5 peer-focus:top-3.5 z-10 origin-[0] left-2 peer-focus:text-blue-600 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6"
}, "Pendamping", -1);
const _hoisted_164$1 = { class: "relative z-0 w-full mb-6 group" };
const _hoisted_165$1 = /* @__PURE__ */ createBaseVNode("label", {
  for: "pekerjaan",
  class: "peer-focus:font-medium rounded-lg bg-white px-2 absolute text-sm text-gray-500 duration-300 transform -translate-y-6 scale-75 top-2.5 peer-focus:top-3.5 z-10 origin-[0] left-2 peer-focus:text-blue-600 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6"
}, "Pekerjaan", -1);
const _hoisted_166$1 = { class: "relative z-0 w-full mb-6 group" };
const _hoisted_167$1 = /* @__PURE__ */ createBaseVNode("label", {
  for: "telepon",
  class: "peer-focus:font-medium rounded-lg bg-white px-2 absolute text-sm text-gray-500 duration-300 transform -translate-y-6 scale-75 top-2.5 peer-focus:top-3.5 z-10 origin-[0] left-2 peer-focus:text-blue-600 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6"
}, "No. Telepon", -1);
const _hoisted_168$1 = { class: "grid grid-cols-2 gap-6" };
const _hoisted_169$1 = { class: "relative z-0 w-full mb-5 group" };
const _hoisted_170$1 = /* @__PURE__ */ createBaseVNode("option", {
  class: "text-xs",
  value: "",
  disabled: ""
}, "Pilihlah Salah Satu", -1);
const _hoisted_171$1 = ["value"];
const _hoisted_172$1 = /* @__PURE__ */ createBaseVNode("label", {
  for: "resort",
  class: "peer-focus:font-medium rounded-lg bg-white px-2 absolute text-sm text-gray-500 duration-300 transform -translate-y-6 scale-75 top-3.5 peer-focus:top-3.5 z-10 origin-[0] left-2 peer-focus:text-blue-600 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6"
}, "Resort", -1);
const _hoisted_173$1 = { class: "relative z-0 w-full mb-5 group" };
const _hoisted_174$1 = /* @__PURE__ */ createBaseVNode("label", {
  for: "tanggal_bht",
  class: "peer-focus:font-medium rounded-lg bg-white px-2 absolute text-sm text-gray-500 duration-300 transform -translate-y-6 scale-75 top-3.5 peer-focus:top-3.5 z-10 origin-[0] left-2 peer-focus:text-blue-600 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6"
}, "Tanggal BHT", -1);
const _hoisted_175$1 = /* @__PURE__ */ createBaseVNode("hr", { class: "mb-3 border-1 border-gray-300 bg-gray-300" }, null, -1);
const _hoisted_176$1 = { class: "grid grid-cols-2 gap-6" };
const _hoisted_177$1 = { class: "relative z-0 w-full mb-5 group" };
const _hoisted_178$1 = /* @__PURE__ */ createBaseVNode("div", { class: "absolute rounded-l-md top-0 left-0 bottom-0 text-black p-2 bg-gray-300 peer-focus:bg-blue-600" }, " Rp ", -1);
const _hoisted_179$1 = /* @__PURE__ */ createBaseVNode("label", {
  for: "simpanan_pokok",
  class: "peer-focus:font-medium rounded-lg bg-white px-2 absolute text-sm text-gray-500 duration-300 transform -translate-y-6 scale-75 top-2.5 peer-focus:top-3.5 z-10 origin-[0] left-10 peer-focus:text-blue-600 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6"
}, "Simpanan Pokok", -1);
const _hoisted_180$1 = { class: "relative z-0 w-full mb-5 group" };
const _hoisted_181$1 = /* @__PURE__ */ createBaseVNode("div", { class: "absolute rounded-l-md top-0 left-0 bottom-0 text-black p-2 bg-gray-300 peer-focus:bg-blue-600" }, " Rp ", -1);
const _hoisted_182$1 = /* @__PURE__ */ createBaseVNode("label", {
  for: "simpanan_swk",
  class: "peer-focus:font-medium rounded-lg bg-white px-2 absolute text-sm text-gray-500 duration-300 transform -translate-y-6 scale-75 top-2.5 peer-focus:top-3.5 z-10 origin-[0] left-10 peer-focus:text-blue-600 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6"
}, "Simpanan SWK", -1);
const _hoisted_183$1 = { class: "grid grid-cols-2 gap-6" };
const _hoisted_184$1 = { class: "relative z-0 w-full mb-5 group" };
const _hoisted_185$1 = /* @__PURE__ */ createBaseVNode("div", { class: "absolute rounded-l-md top-0 left-0 bottom-0 text-black p-2 bg-gray-300 peer-focus:bg-blue-600" }, " Rp ", -1);
const _hoisted_186$1 = /* @__PURE__ */ createBaseVNode("label", {
  for: "simpanan_wajib",
  class: "peer-focus:font-medium rounded-lg bg-white px-2 absolute text-sm text-gray-500 duration-300 transform -translate-y-6 scale-75 top-2.5 peer-focus:top-3.5 z-10 origin-[0] left-10 peer-focus:text-blue-600 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6"
}, "Simpanan Wajib", -1);
const _hoisted_187$1 = { class: "relative z-0 w-full mb-5 group" };
const _hoisted_188$1 = /* @__PURE__ */ createBaseVNode("div", { class: "absolute rounded-l-md top-0 left-0 bottom-0 text-black p-2 bg-gray-300 peer-focus:bg-blue-600" }, " Rp ", -1);
const _hoisted_189$1 = /* @__PURE__ */ createBaseVNode("label", {
  for: "simpanan_lain",
  class: "peer-focus:font-medium rounded-lg bg-white px-2 absolute text-sm text-gray-500 duration-300 transform -translate-y-6 scale-75 top-2.5 peer-focus:top-3.5 z-10 origin-[0] left-10 peer-focus:text-blue-600 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6"
}, "Simpanan Lain - Lain", -1);
const _hoisted_190$1 = { class: "grid grid-cols-2 gap-6" };
const _hoisted_191$1 = { class: "relative z-0 w-full mb-5 col-start-2 group" };
const _hoisted_192$1 = /* @__PURE__ */ createBaseVNode("div", { class: "absolute rounded-l-md top-0 left-0 bottom-0 text-black p-2 bg-gray-300 peer-focus:bg-blue-600" }, " Rp ", -1);
const _hoisted_193$1 = /* @__PURE__ */ createBaseVNode("label", {
  for: "total_simpanan",
  class: "peer-focus:font-medium rounded-lg bg-white px-2 absolute text-sm text-gray-500 duration-300 transform -translate-y-6 scale-75 top-2.5 peer-focus:top-3.5 z-10 origin-[0] left-10 peer-focus:text-blue-600 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6"
}, "Total Simpanan", -1);
const _hoisted_194$1 = /* @__PURE__ */ createBaseVNode("button", {
  type: "submit",
  form: "historyAnggotaForm",
  class: "btn btn-primary w-32"
}, "Simpan", -1);
const _hoisted_195$1 = { class: "p-5 text-center" };
const _hoisted_196$1 = /* @__PURE__ */ createBaseVNode("div", { class: "text-3xl mt-5" }, "Apakah Anda Yakin ?", -1);
const _hoisted_197$1 = { class: "text-slate-500 mt-2" };
const _hoisted_198$1 = { key: 0 };
const _hoisted_199$1 = /* @__PURE__ */ createBaseVNode("br", null, null, -1);
const _hoisted_200$1 = /* @__PURE__ */ createBaseVNode("br", null, null, -1);
const _hoisted_201$1 = { class: "px-5 pb-8 text-center" };
const _sfc_main$6 = {
  __name: "HistoryAnggota",
  setup(__props) {
    const swal = inject("$swal");
    const historyAnggota = useHistoryAnggotaStore();
    const isLoading = ref(false);
    const isAdd = ref(false);
    const isEdit = ref(false);
    const isView = ref(false);
    const modal_utama = ref(false);
    const modal_delete = ref(false);
    const sort_by = ref("iddata");
    const sort_mode = ref(true);
    const search_data = ref("");
    const search_type = ref("iddata");
    const page_number = ref(1);
    const total_pages = ref(0);
    const row_per_page = ref(50);
    const allSelected = ref(false);
    const userIds = ref([]);
    const id_anggota = ref("");
    const foto_profile = ref();
    const previewFoto = ref(null);
    const fileFoto = ref(null);
    const imageFoto = ref(null);
    const foto_ttd = ref();
    const previewTTD = ref(null);
    const fileTTD = ref(null);
    const imageTTD = ref(null);
    const foto_pa = ref();
    const previewPA = ref(null);
    const filePA = ref(null);
    const imagePA = ref(null);
    const tanggal = ref(hooks(Date.now()).format("DD-MM-YYYY"));
    const no_anggota = ref("");
    const no_ktp = ref("");
    const no_kk = ref("");
    const nama_lengkap = ref("");
    const tempat_lahir = ref("");
    const tanggal_lahir = ref("");
    const jenis_kelamin = ref("");
    const agama = ref("");
    const alamat = ref("");
    const rt = ref("");
    const rw = ref("");
    const kelurahan = ref("");
    const kecamatan = ref("");
    const kota = ref("");
    const pendamping = ref("");
    const pekerjaan = ref("");
    const no_telepon = ref("");
    const resort = ref("");
    const tanggal_bht = ref("");
    const simpanan_pokok = ref("");
    const simpanan_swk = ref("");
    const simpanan_wajib = ref("");
    const simpanan_lain = ref("");
    const total_simpanan = ref("");
    const editGet = async (e) => {
      const anggota = await historyAnggota.getItem(e);
      isEdit.value = true;
      id_anggota.value = anggota.iddata;
      tanggal.value = hooks(anggota.tanggal).format("DD-MM-YYYY");
      no_anggota.value = anggota.cif;
      no_ktp.value = anggota.noktp;
      no_kk.value = anggota.nokK;
      nama_lengkap.value = anggota.nama;
      tempat_lahir.value = anggota.tempatlhr;
      tanggal_lahir.value = hooks(anggota.tanggallhr).format("YYYY-MM-DD");
      jenis_kelamin.value = anggota.jeniskl == "L" ? "L" : anggota.jeniskl == "LAKI-LAKI    " ? "L" : anggota.jeniskl == "PEREMPUAN" ? "P" : "P";
      agama.value = anggota.agama;
      alamat.value = anggota.alamat;
      rt.value = anggota.rt;
      rw.value = anggota.rt;
      kelurahan.value = anggota.desa;
      kecamatan.value = anggota.kecamatan;
      kota.value = anggota.kota;
      pendamping.value = "nama pendamping";
      pekerjaan.value = anggota.pekerjaan;
      no_telepon.value = anggota.phone;
      resort.value = anggota.resort;
      tanggal_bht.value = hooks(anggota.tanggalbht).format("YYYY-MM-DD");
      simpanan_pokok.value = currencyFormatter.format(anggota.simpokok).replace("Rp", "").trim();
      simpanan_swk.value = currencyFormatter.format(anggota.simsuka).replace("Rp", "").trim();
      simpanan_wajib.value = currencyFormatter.format(anggota.simwajib).replace("Rp", "").trim();
      simpanan_lain.value = currencyFormatter.format(anggota.lain).replace("Rp", "").trim();
      total_simpanan.value = currencyFormatter.format(anggota.simshu).replace("Rp", "").trim();
      modal_utama.value = true;
    };
    const deleteGet = (e) => {
      const anggota = e;
      if (anggota.iddata) {
        userIds.value = [];
        userIds.value.push(anggota.iddata);
        console.log("delete get 1", userIds.value);
        modal_delete.value = true;
      } else {
        if (userIds.value.length > 0) {
          console.log("delete get 1+", userIds.value);
          modal_delete.value = true;
        }
      }
    };
    const viewData = async (e) => {
      const anggota = await historyAnggota.getItem(e);
      isView.value = true;
      id_anggota.value = anggota.iddata;
      tanggal.value = hooks(anggota.tanggal).format("DD-MM-YYYY");
      no_anggota.value = anggota.cif;
      no_ktp.value = anggota.noktp;
      no_kk.value = anggota.nokK;
      nama_lengkap.value = anggota.nama;
      tempat_lahir.value = anggota.tempatlhr;
      tanggal_lahir.value = hooks(anggota.tanggallhr).format("YYYY-MM-DD");
      jenis_kelamin.value = anggota.jeniskl == "L" ? "L" : anggota.jeniskl == "LAKI-LAKI    " ? "L" : anggota.jeniskl == "PEREMPUAN" ? "P" : "P";
      agama.value = anggota.agama;
      alamat.value = anggota.alamat;
      rt.value = anggota.rt;
      rw.value = anggota.rt;
      kelurahan.value = anggota.desa;
      kecamatan.value = anggota.kecamatan;
      kota.value = anggota.kota;
      pendamping.value = "nama pendamping";
      pekerjaan.value = anggota.pekerjaan;
      no_telepon.value = anggota.phone;
      resort.value = anggota.resort;
      tanggal_bht.value = hooks(anggota.tanggalbht).format("YYYY-MM-DD");
      simpanan_pokok.value = currencyFormatter.format(anggota.simpokok).replace("Rp", "").trim();
      simpanan_swk.value = currencyFormatter.format(anggota.simsuka).replace("Rp", "").trim();
      simpanan_wajib.value = currencyFormatter.format(anggota.simwajib).replace("Rp", "").trim();
      simpanan_lain.value = currencyFormatter.format(anggota.lain).replace("Rp", "").trim();
      total_simpanan.value = currencyFormatter.format(anggota.shu).replace("Rp", "").trim();
      console.log(
        anggota.foto
        // URL.createObjectURL(new Blob([anggota.foto.buffer], { type: 'image/png' } /* (1) */))
      );
      modal_utama.value = true;
    };
    const convertDataURIToBinary = (dataURI) => {
      var BASE64_MARKER = ";base64,";
      var base64Index = dataURI.indexOf(BASE64_MARKER) + BASE64_MARKER.length;
      var base64 = dataURI.substring(base64Index);
      var raw = window.atob(base64);
      var rawLength = raw.length;
      var array2 = new Uint8Array(new ArrayBuffer(rawLength));
      for (let i = 0; i < rawLength; i++) {
        array2[i] = raw.charCodeAt(i);
      }
      return array2;
    };
    const previewImage = (event) => {
      var input2 = event.target;
      if (input2.files) {
        var reader = new FileReader();
        reader.onload = (e) => {
          var base64Img = e.target.result;
          if (event.target.id == "foto_anggota") {
            previewFoto.value = base64Img;
            imageFoto.value = convertDataURIToBinary(base64Img);
          } else if (event.target.id == "foto_ttd") {
            previewTTD.value = base64Img;
            imageTTD.value = convertDataURIToBinary(base64Img);
          } else if (event.target.id == "foto_pa") {
            previewPA.value = base64Img;
            imagePA.value = convertDataURIToBinary(base64Img);
          }
        };
        if (event.target.id == "foto_anggota") {
          fileFoto.value = input2.files[0];
        } else if (event.target.id == "foto_ttd") {
          fileTTD.value = input2.files[0];
        } else if (event.target.id == "foto_pa") {
          filePA.value = input2.files[0];
        }
        reader.readAsDataURL(input2.files[0]);
      }
    };
    const simpan_data = async (e) => {
      try {
        await historyAnggota.postItem(
          //console.log(
          fileFoto.value,
          fileTTD.value,
          filePA.value,
          // imageFoto.value,
          // imageTTD.value,
          // imagePA.value,
          hooks(Date.now(tanggal.value)).format("YYYY-MM-DD"),
          no_anggota.value,
          no_ktp.value,
          no_kk.value,
          nama_lengkap.value,
          tempat_lahir.value,
          tanggal_lahir.value,
          jenis_kelamin.value,
          agama.value,
          alamat.value,
          rt.value,
          rw.value,
          kelurahan.value,
          kecamatan.value,
          kota.value,
          pendamping.value,
          pekerjaan.value,
          no_telepon.value,
          resort.value
        );
        e.target.reset();
        resetForm();
      } catch (error) {
        swal({
          icon: "error",
          title: "Oops...",
          text: "ERROR SIMPAN DATA " + error
        });
      }
    };
    const deleteAnggota = async () => {
      if (userIds.value.length > 1) {
        for (let idAnggota = 0; idAnggota < userIds.value.length; idAnggota++) {
          console.log("delete post 1+", userIds.value[idAnggota]);
          await historyAnggota.removeItem(userIds.value[idAnggota]);
        }
      } else {
        console.log("delete post 1", userIds.value);
        await historyAnggota.removeItem(userIds.value[0]);
      }
      resetForm();
    };
    const resetForm = () => {
      if (modal_utama.value == false && isEdit.value == false && isView.value == false) {
        search_data.value = "";
        search_type.value = "iddata";
        sort_by.value = "iddata";
        sort_mode.value = true;
        page_number.value = 1;
        total_pages.value = 0;
        row_per_page.value = 50;
      }
      allSelected.value = false;
      userIds.value = [];
      id_anggota.value = "";
      foto_profile.value = null;
      fileFoto.value = null;
      imageFoto.value = null;
      previewFoto.value = null;
      foto_pa.value = null;
      filePA.value = null;
      imagePA.value = null;
      previewPA.value = null;
      foto_ttd.value = null;
      fileTTD.value = null;
      imageTTD.value = null;
      previewTTD.value = null;
      tanggal.value = hooks(Date.now()).format("DD-MM-YYYY");
      no_anggota.value = "";
      no_ktp.value = "";
      no_kk.value = "";
      nama_lengkap.value = "";
      tempat_lahir.value = "";
      tanggal_lahir.value = "";
      jenis_kelamin.value = "";
      agama.value = "";
      alamat.value = "";
      rt.value = "";
      rw.value = "";
      kelurahan.value = "";
      kecamatan.value = "";
      kota.value = "";
      pendamping.value = "";
      pekerjaan.value = "";
      no_telepon.value = "";
      resort.value = "";
      tanggal_bht.value = "";
      simpanan_pokok.value = "";
      simpanan_swk.value = "";
      simpanan_wajib.value = "";
      simpanan_lain.value = "";
      total_simpanan.value = "";
      modal_utama.value = false;
      modal_delete.value = false;
      isAdd.value = false;
      isEdit.value = false;
      isView.value = false;
    };
    const sorting = async (e) => {
      isLoading.value = true;
      sort_by.value = e;
      sort_mode.value = !sort_mode.value;
      try {
        await historyAnggota.readItem(
          search_type.value,
          search_data.value,
          e,
          sort_mode.value,
          page_number.value,
          row_per_page.value
        );
        isLoading.value = false;
      } catch (error) {
        isLoading.value = false;
        swal({
          icon: "error",
          title: "Oops...",
          text: "Gagal Sorting " + error
        });
      }
    };
    const firstPage = async () => {
      page_number.value = 1;
    };
    const previousPage = async () => {
      try {
        let page_no = parseInt(page_number.value);
        if (page_no > 1) {
          page_number.value = page_no - 1;
        }
      } catch (error) {
        isLoading.value = false;
        swal({
          icon: "error",
          title: "Oops...",
          text: "Gagal page sebelumnya " + error
        });
      }
    };
    const nextPage = () => {
      try {
        if (page_number.value == "") {
          page_number.value = 1;
        }
        let page_no = parseInt(page_number.value);
        if (page_no < total_pages.value) {
          page_number.value = page_no + 1;
        }
      } catch (error) {
        isLoading.value = false;
        swal({
          icon: "error",
          title: "Oops...",
          text: "Gagal page selanjutnya " + error
        });
      }
    };
    const lastPage = async () => {
      page_number.value = total_pages.value;
    };
    watch(page_number, async (e) => {
      try {
        isLoading.value = true;
        await historyAnggota.readItem(
          search_type.value,
          search_data.value,
          sort_by.value,
          sort_mode.value,
          e,
          row_per_page.value
        );
        isLoading.value = false;
      } catch (error) {
        isLoading.value = false;
        swal({
          icon: "error",
          title: "Oops...",
          text: "Gagal ganti page " + error
        });
      }
    });
    watch(row_per_page, async (e) => {
      try {
        isLoading.value = true;
        if (page_number.value > total_pages.value || page_number.value == "") {
          page_number.value = 1;
        }
        const data = await historyAnggota.readItem(
          search_type.value,
          search_data.value,
          sort_by.value,
          sort_mode.value,
          page_number.value,
          e
        );
        total_pages.value = data;
        userIds.value = [];
        allSelected.value = false;
        if (page_number.value > total_pages.value) {
          page_number.value = 1;
        }
        isLoading.value = false;
      } catch (error) {
        isLoading.value = false;
        swal({
          icon: "error",
          title: "Oops...",
          text: "Gagal ganti row/page " + error
        });
      }
    });
    watch(search_data, async (e) => {
      try {
        isLoading.value = true;
        const data = await historyAnggota.readItem(
          search_type.value,
          e,
          sort_by.value,
          sort_mode.value,
          page_number.value,
          row_per_page.value
        );
        total_pages.value = data;
        isLoading.value = false;
      } catch (error) {
        isLoading.value = false;
        swal({
          icon: "error",
          title: "Oops...",
          text: "Gagal ganti page " + error
        });
      }
    });
    watch(search_type, async (e) => {
      try {
        isLoading.value = true;
        const data = await historyAnggota.readItem(
          e,
          search_data.value,
          sort_by.value,
          sort_mode.value,
          page_number.value,
          row_per_page.value
        );
        total_pages.value = data;
        isLoading.value = false;
      } catch (error) {
        isLoading.value = false;
        swal({
          icon: "error",
          title: "Oops...",
          text: "Gagal ganti page " + error
        });
      }
    });
    const selectAll = (e) => {
      userIds.value = [];
      if (!allSelected.value || e) {
        for (let anggota = 0; anggota < historyAnggota.items.length; anggota++) {
          userIds.value.push(historyAnggota.items[anggota].iddata);
        }
      }
    };
    const selectOne = () => {
      allSelected.value = false;
    };
    onMounted(async () => {
      try {
        isLoading.value = true;
        const data = await historyAnggota.readItem(
          search_type.value,
          search_data.value,
          sort_by.value,
          sort_mode.value,
          page_number.value,
          row_per_page.value
        );
        total_pages.value = data;
        isLoading.value = false;
      } catch (error) {
        isLoading.value = false;
        swal({
          icon: "error",
          title: "Oops...",
          text: "ERROR MOUNTED " + error
        });
      }
    });
    return (_ctx, _cache) => {
      const _component_PlusIcon = resolveComponent("PlusIcon");
      const _component_Trash2Icon = resolveComponent("Trash2Icon");
      const _component_ShareIcon = resolveComponent("ShareIcon");
      const _component_PrinterIcon = resolveComponent("PrinterIcon");
      const _component_CheckIcon = resolveComponent("CheckIcon");
      const _component_XIcon = resolveComponent("XIcon");
      const _component_RefreshCwIcon = resolveComponent("RefreshCwIcon");
      const _component_SkipBackIcon = resolveComponent("SkipBackIcon");
      const _component_RewindIcon = resolveComponent("RewindIcon");
      const _component_FastForwardIcon = resolveComponent("FastForwardIcon");
      const _component_SkipForwardIcon = resolveComponent("SkipForwardIcon");
      const _component_DeleteIcon = resolveComponent("DeleteIcon");
      const _component_SortAscIcon = resolveComponent("SortAscIcon");
      const _component_SortDescIcon = resolveComponent("SortDescIcon");
      const _component_CheckSquareIcon = resolveComponent("CheckSquareIcon");
      const _component_Loader2Icon = resolveComponent("Loader2Icon");
      const _component_ModalHeader = resolveComponent("ModalHeader");
      const _component_BookIcon = resolveComponent("BookIcon");
      const _component_BanknoteIcon = resolveComponent("BanknoteIcon");
      const _component_CoinsIcon = resolveComponent("CoinsIcon");
      const _component_ScaleIcon = resolveComponent("ScaleIcon");
      const _component_PiggyBankIcon = resolveComponent("PiggyBankIcon");
      const _component_LandmarkIcon = resolveComponent("LandmarkIcon");
      const _component_WalletIcon = resolveComponent("WalletIcon");
      const _component_FileIcon = resolveComponent("FileIcon");
      const _component_PointerIcon = resolveComponent("PointerIcon");
      const _component_PenToolIcon = resolveComponent("PenToolIcon");
      const _component_ModalBody = resolveComponent("ModalBody");
      const _component_ModalFooter = resolveComponent("ModalFooter");
      const _component_Modal = resolveComponent("Modal");
      const _component_XCircleIcon = resolveComponent("XCircleIcon");
      return openBlock(), createElementBlock(Fragment, null, [
        createVNode(_sfc_main$9, {
          title: "Transaksi",
          subTitle: "Keanggotaan",
          icon: unref(TRANSAKSI)
        }, null, 8, ["icon"]),
        createBaseVNode("div", _hoisted_1$5, [
          createBaseVNode("div", _hoisted_2$5, [
            createBaseVNode("div", _hoisted_3$5, [
              createBaseVNode("button", _hoisted_4$5, [
                createVNode(_component_PlusIcon, { class: "w-4 h-4 mx-auto my-[5px] stroke-2 stroke-current" })
              ]),
              createBaseVNode("button", {
                class: "inline-block align-middle hover:text-danger text-center select-none border font-normal whitespace-no-wrap rounded no-underline h-9 mx-auto px-2 leading-tight text-xs bg-gray-100 text-gray-800 hover:bg-gray-200 btn-light-bordered",
                onClick: deleteGet,
                id: "delete-multiple-data",
                "data-bs-toggle": "tooltip",
                title: "Hapus Data"
              }, [
                createVNode(_component_Trash2Icon, { class: "w-4 h-4 mx-auto my-[5px] stroke-2 stroke-current" })
              ]),
              createBaseVNode("button", _hoisted_5$5, [
                createVNode(_component_ShareIcon, { class: "w-3 h-3 mx-auto stroke-2 stroke-current" }),
                _hoisted_6$5
              ]),
              createBaseVNode("button", _hoisted_7$5, [
                createVNode(_component_ShareIcon, { class: "w-3 h-3 mx-auto stroke-2 stroke-current" }),
                _hoisted_8$5
              ]),
              createBaseVNode("button", _hoisted_9$5, [
                createVNode(_component_PrinterIcon, { class: "w-4 h-4 mx-auto my-[5px] stroke-2 stroke-current" })
              ]),
              createBaseVNode("button", {
                class: "inline-block hover:text-success align-middle text-center select-none border font-normal whitespace-no-wrap rounded no-underline h-9 mx-auto px-2 leading-tight text-xs bg-gray-100 text-gray-800 hover:bg-gray-200 btn-light-bordered",
                onClick: _cache[0] || (_cache[0] = ($event) => (selectAll(true), allSelected.value = true)),
                id: "select-all",
                title: "Select All"
              }, [
                createVNode(_component_CheckIcon, { class: "w-4 h-4 mx-auto my-[5px] stroke-2 stroke-current" }),
                _hoisted_10$5
              ]),
              createBaseVNode("button", {
                class: "inline-block align-middle hover:text-danger text-center select-none border font-normal whitespace-no-wrap rounded no-underline h-9 mx-auto px-2 leading-tight text-xs bg-gray-100 text-gray-800 hover:bg-gray-200 btn-light-bordered",
                onClick: _cache[1] || (_cache[1] = ($event) => {
                  userIds.value = [], allSelected.value = false;
                }),
                id: "unselect-all",
                title: "Unselect All"
              }, [
                createVNode(_component_XIcon, { class: "w-4 h-4 mx-auto my-[5px] stroke-2 stroke-current" })
              ]),
              createBaseVNode("a", _hoisted_11$4, [
                createVNode(_component_RefreshCwIcon, { class: "w-4 h-4 mx-auto my-[9px] stroke-2 stroke-current" })
              ])
            ]),
            createBaseVNode("div", _hoisted_12$4, [
              createBaseVNode("div", _hoisted_13$4, [
                createBaseVNode("div", _hoisted_14$4, [
                  createBaseVNode("div", _hoisted_15$4, [
                    createBaseVNode("a", {
                      href: "javascript:void(0);",
                      class: "inline-block align-middle text-center rounded-l-lg select-none border font-normal whitespace-no-wrap h-9 -mt-1 py-1 px-3 leading-normal no-underline bg-gray-100 text-gray-800 hover:bg-gray-200 btn-light-bordered",
                      id: "first-page",
                      title: "first page",
                      onClick: _cache[2] || (_cache[2] = ($event) => firstPage())
                    }, [
                      createVNode(_component_SkipBackIcon, { class: "w-4 h-4 mx-auto my-[5px]" })
                    ]),
                    createBaseVNode("a", {
                      href: "javascript:void(0);",
                      class: "inline-block align-middle text-center select-none border font-normal whitespace-no-wrap h-9 -mt-1 py-1 px-3 leading-normal no-underline bg-gray-100 text-gray-800 hover:bg-gray-200 btn-light-bordered",
                      id: "previous-page",
                      title: "previous page",
                      onClick: _cache[3] || (_cache[3] = ($event) => previousPage())
                    }, [
                      createVNode(_component_RewindIcon, { class: "w-4 h-4 mx-auto my-[5px]" })
                    ])
                  ]),
                  createBaseVNode("div", _hoisted_16$4, [
                    withDirectives(createBaseVNode("input", {
                      type: "number",
                      class: "block appearance-none w-full mb-1 px-2 bg-white text-gray-800 border-y border-r border-gray-400 text-xs leading-normal",
                      "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => page_number.value = $event)
                    }, null, 512), [
                      [vModelText, page_number.value]
                    ]),
                    withDirectives(createBaseVNode("input", {
                      type: "number",
                      class: "block appearance-none w-full px-2 mb-1 bg-gray-200 text-gray-800 border-y border-gray-400 text-xs leading-normal",
                      "onUpdate:modelValue": _cache[5] || (_cache[5] = ($event) => total_pages.value = $event),
                      disabled: ""
                    }, null, 512), [
                      [vModelText, total_pages.value]
                    ])
                  ]),
                  createBaseVNode("div", _hoisted_17$4, [
                    createBaseVNode("a", {
                      href: "javascript:void(0);",
                      class: "inline-block align-middle text-center select-none border font-normal whitespace-no-wrap h-9 -mt-1 py-1 px-3 leading-normal no-underline bg-gray-100 text-gray-800 hover:bg-gray-200 btn-light-bordered",
                      id: "next-page",
                      title: "next page",
                      onClick: _cache[6] || (_cache[6] = ($event) => nextPage())
                    }, [
                      createVNode(_component_FastForwardIcon, { class: "w-4 h-4 mx-auto my-[5px]" })
                    ]),
                    createBaseVNode("a", {
                      href: "javascript:void(0);",
                      class: "inline-block align-middle text-center select-none border font-normal whitespace-no-wrap h-9 -mt-1 rounded-r-lg py-1 px-3 leading-normal no-underline bg-gray-100 text-gray-800 hover:bg-gray-200 btn-light-bordered",
                      id: "last-page",
                      title: "last page",
                      onClick: _cache[7] || (_cache[7] = ($event) => lastPage())
                    }, [
                      createVNode(_component_SkipForwardIcon, { class: "w-4 h-4 mx-auto my-[5px]" })
                    ])
                  ])
                ])
              ])
            ]),
            createBaseVNode("div", _hoisted_18$4, [
              withDirectives(createBaseVNode("select", {
                name: "row_per_page",
                "onUpdate:modelValue": _cache[8] || (_cache[8] = ($event) => row_per_page.value = $event),
                class: "bg-gray-50 border border-gray-300 text-gray-900 pl-1 mr-2 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block -mt-1 w-[70px] h-9"
              }, _hoisted_22$3, 512), [
                [vModelSelect, row_per_page.value]
              ]),
              createBaseVNode("div", _hoisted_23$3, [
                withDirectives(createBaseVNode("input", {
                  type: "text",
                  class: "block appearance-none border-y border-l rounded-l-lg w-full mb-1 bg-white text-gray-800 border-gray-300 px-2 text-xs leading-normal h-9",
                  "onUpdate:modelValue": _cache[9] || (_cache[9] = ($event) => search_data.value = $event),
                  placeholder: "Cari " + search_type.value + " " + _ctx.$route.name.replace(/-/gi, " "),
                  name: "search-data"
                }, null, 8, _hoisted_24$4), [
                  [vModelText, search_data.value]
                ]),
                createBaseVNode("div", _hoisted_25$4, [
                  search_data.value !== "" ? (openBlock(), createElementBlock("button", {
                    key: 0,
                    class: "inline align-middle text-center select-none border-y border-[#d0d3d4] w-10 font-normal whitespace-no-wrap no-underline h-9 mx-auto px-2 leading-tight text-xs",
                    id: "clear-btn",
                    onClick: _cache[10] || (_cache[10] = ($event) => search_data.value = "")
                  }, [
                    createVNode(_component_DeleteIcon, { class: "w-5 h-5 stroke-2 text-danger mx-auto my-[5px]" })
                  ])) : createCommentVNode("", true)
                ]),
                createBaseVNode("div", _hoisted_26$4, [
                  withDirectives(createBaseVNode("select", {
                    name: "search_type",
                    "onUpdate:modelValue": _cache[11] || (_cache[11] = ($event) => search_type.value = $event),
                    class: "inline align-middle text-center select-none border w-14 font-normal whitespace-no-wrap rounded-r-lg no-underline h-9 mx-auto px-0 leading-tight text-xs bg-gray-100 text-gray-800 hover:bg-gray-200 btn-light-bordered"
                  }, _hoisted_35$4, 512), [
                    [vModelSelect, search_type.value]
                  ])
                ])
              ])
            ])
          ])
        ]),
        createBaseVNode("div", _hoisted_36$4, [
          createBaseVNode("div", _hoisted_37$4, [
            createBaseVNode("table", _hoisted_38$4, [
              createBaseVNode("thead", _hoisted_39$4, [
                createBaseVNode("tr", null, [
                  createBaseVNode("th", _hoisted_40$4, [
                    createBaseVNode("div", _hoisted_41$4, [
                      withDirectives(createBaseVNode("input", {
                        id: "checkbox-all-search",
                        "onUpdate:modelValue": _cache[12] || (_cache[12] = ($event) => allSelected.value = $event),
                        onClick: _cache[13] || (_cache[13] = ($event) => selectAll(false)),
                        type: "checkbox",
                        class: "w-4 h-4 text-blue-600 bg-gray-100 border-blue-200 rounded focus:ring-blue-500 focus:ring-2"
                      }, null, 512), [
                        [vModelCheckbox, allSelected.value]
                      ]),
                      _hoisted_42$4
                    ])
                  ]),
                  createBaseVNode("th", {
                    scope: "col",
                    class: "text-center uppercase border cursor-pointer hover:bg-blue-300 w-[60px]",
                    onClick: _cache[14] || (_cache[14] = ($event) => sorting("iddata"))
                  }, [
                    createTextVNode(" ID "),
                    sort_by.value === "iddata" && sort_mode.value ? (openBlock(), createBlock(_component_SortAscIcon, {
                      key: 0,
                      class: "inline ml-2 -pr-3 mr-1 w-5 h-4"
                    })) : createCommentVNode("", true),
                    sort_by.value === "iddata" && !sort_mode.value ? (openBlock(), createBlock(_component_SortDescIcon, {
                      key: 1,
                      class: "inline ml-2 -pr-3 mr-1 w-5 h-4"
                    })) : createCommentVNode("", true)
                  ]),
                  createBaseVNode("th", {
                    scope: "col",
                    class: "text-center uppercase border cursor-pointer hover:bg-blue-300",
                    onClick: _cache[15] || (_cache[15] = ($event) => sorting("cif"))
                  }, [
                    createTextVNode(" No. Anggota "),
                    sort_by.value === "cif" && sort_mode.value ? (openBlock(), createBlock(_component_SortAscIcon, {
                      key: 0,
                      class: "inline ml-2 -pr-3 mr-1 w-5 h-4"
                    })) : createCommentVNode("", true),
                    sort_by.value === "cif" && !sort_mode.value ? (openBlock(), createBlock(_component_SortDescIcon, {
                      key: 1,
                      class: "inline ml-2 -pr-3 mr-1 w-5 h-4"
                    })) : createCommentVNode("", true)
                  ]),
                  createBaseVNode("th", {
                    scope: "col",
                    class: "text-center uppercase border cursor-pointer hover:bg-blue-300",
                    onClick: _cache[16] || (_cache[16] = ($event) => sorting("tanggal"))
                  }, [
                    createTextVNode(" Tanggal "),
                    sort_by.value === "tanggal" && sort_mode.value ? (openBlock(), createBlock(_component_SortAscIcon, {
                      key: 0,
                      class: "inline ml-2 -pr-3 mr-1 w-5 h-4"
                    })) : createCommentVNode("", true),
                    sort_by.value === "tanggal" && !sort_mode.value ? (openBlock(), createBlock(_component_SortDescIcon, {
                      key: 1,
                      class: "inline ml-2 -pr-3 mr-1 w-5 h-4"
                    })) : createCommentVNode("", true)
                  ]),
                  createBaseVNode("th", {
                    scope: "col",
                    class: "text-center uppercase border cursor-pointer hover:bg-blue-300",
                    onClick: _cache[17] || (_cache[17] = ($event) => sorting("resort"))
                  }, [
                    createTextVNode(" Resort "),
                    sort_by.value === "resort" && sort_mode.value ? (openBlock(), createBlock(_component_SortAscIcon, {
                      key: 0,
                      class: "inline ml-2 -pr-3 mr-1 w-5 h-4"
                    })) : createCommentVNode("", true),
                    sort_by.value === "resort" && !sort_mode.value ? (openBlock(), createBlock(_component_SortDescIcon, {
                      key: 1,
                      class: "inline ml-2 -pr-3 mr-1 w-5 h-4"
                    })) : createCommentVNode("", true)
                  ]),
                  createBaseVNode("th", {
                    scope: "col",
                    class: "text-center uppercase border cursor-pointer hover:bg-blue-300",
                    onClick: _cache[18] || (_cache[18] = ($event) => sorting("noktp"))
                  }, [
                    createTextVNode(" Nomor KTP "),
                    sort_by.value === "noktp" && sort_mode.value ? (openBlock(), createBlock(_component_SortAscIcon, {
                      key: 0,
                      class: "inline ml-2 -pr-3 mr-1 w-5 h-4"
                    })) : createCommentVNode("", true),
                    sort_by.value === "noktp" && !sort_mode.value ? (openBlock(), createBlock(_component_SortDescIcon, {
                      key: 1,
                      class: "inline ml-2 -pr-3 mr-1 w-5 h-4"
                    })) : createCommentVNode("", true)
                  ]),
                  createBaseVNode("th", {
                    scope: "col",
                    class: "text-center uppercase border cursor-pointer hover:bg-blue-300",
                    onClick: _cache[19] || (_cache[19] = ($event) => sorting("nokK"))
                  }, [
                    createTextVNode(" Kartu Keluarga "),
                    sort_by.value === "nokK" && sort_mode.value ? (openBlock(), createBlock(_component_SortAscIcon, {
                      key: 0,
                      class: "inline ml-2 -pr-3 mr-1 w-5 h-4"
                    })) : createCommentVNode("", true),
                    sort_by.value === "nokK" && !sort_mode.value ? (openBlock(), createBlock(_component_SortDescIcon, {
                      key: 1,
                      class: "inline ml-2 -pr-3 mr-1 w-5 h-4"
                    })) : createCommentVNode("", true)
                  ]),
                  createBaseVNode("th", {
                    scope: "col",
                    class: "text-center uppercase border cursor-pointer hover:bg-blue-300",
                    onClick: _cache[20] || (_cache[20] = ($event) => sorting("nama"))
                  }, [
                    createTextVNode(" Nama "),
                    sort_by.value === "nama" && sort_mode.value ? (openBlock(), createBlock(_component_SortAscIcon, {
                      key: 0,
                      class: "inline ml-2 -pr-3 mr-1 w-5 h-4"
                    })) : createCommentVNode("", true),
                    sort_by.value === "nama" && !sort_mode.value ? (openBlock(), createBlock(_component_SortDescIcon, {
                      key: 1,
                      class: "inline ml-2 -pr-3 mr-1 w-5 h-4"
                    })) : createCommentVNode("", true)
                  ]),
                  createBaseVNode("th", {
                    scope: "col",
                    class: "text-center uppercase border cursor-pointer hover:bg-blue-300",
                    onClick: _cache[21] || (_cache[21] = ($event) => sorting("alamat"))
                  }, [
                    createTextVNode(" Alamat "),
                    sort_by.value === "alamat" && sort_mode.value ? (openBlock(), createBlock(_component_SortAscIcon, {
                      key: 0,
                      class: "inline ml-2 -pr-3 mr-1 w-5 h-4"
                    })) : createCommentVNode("", true),
                    sort_by.value === "alamat" && !sort_mode.value ? (openBlock(), createBlock(_component_SortDescIcon, {
                      key: 1,
                      class: "inline ml-2 -pr-3 mr-1 w-5 h-4"
                    })) : createCommentVNode("", true)
                  ]),
                  createBaseVNode("th", {
                    scope: "col",
                    class: "text-center uppercase border cursor-pointer hover:bg-blue-300",
                    onClick: _cache[22] || (_cache[22] = ($event) => sorting("desa"))
                  }, [
                    createTextVNode(" Desa "),
                    sort_by.value === "desa" && sort_mode.value ? (openBlock(), createBlock(_component_SortAscIcon, {
                      key: 0,
                      class: "inline ml-2 -pr-3 mr-1 w-5 h-4"
                    })) : createCommentVNode("", true),
                    sort_by.value === "desa" && !sort_mode.value ? (openBlock(), createBlock(_component_SortDescIcon, {
                      key: 1,
                      class: "inline ml-2 -pr-3 mr-1 w-5 h-4"
                    })) : createCommentVNode("", true)
                  ]),
                  createBaseVNode("th", {
                    scope: "col",
                    class: "text-center uppercase border cursor-pointer hover:bg-blue-300",
                    onClick: _cache[23] || (_cache[23] = ($event) => sorting("kecamatan"))
                  }, [
                    createTextVNode(" Kecamatan "),
                    sort_by.value === "kecamatan" && sort_mode.value ? (openBlock(), createBlock(_component_SortAscIcon, {
                      key: 0,
                      class: "inline ml-2 -pr-3 mr-1 w-5 h-4"
                    })) : createCommentVNode("", true),
                    sort_by.value === "kecamatan" && !sort_mode.value ? (openBlock(), createBlock(_component_SortDescIcon, {
                      key: 1,
                      class: "inline ml-2 -pr-3 mr-1 w-5 h-4"
                    })) : createCommentVNode("", true)
                  ]),
                  createBaseVNode("th", {
                    scope: "col",
                    class: "text-center uppercase border cursor-pointer hover:bg-blue-300",
                    onClick: _cache[24] || (_cache[24] = ($event) => sorting("kota"))
                  }, [
                    createTextVNode(" Kota "),
                    sort_by.value === "kota" && sort_mode.value ? (openBlock(), createBlock(_component_SortAscIcon, {
                      key: 0,
                      class: "inline ml-2 -pr-3 mr-1 w-5 h-4"
                    })) : createCommentVNode("", true),
                    sort_by.value === "kota" && !sort_mode.value ? (openBlock(), createBlock(_component_SortDescIcon, {
                      key: 1,
                      class: "inline ml-2 -pr-3 mr-1 w-5 h-4"
                    })) : createCommentVNode("", true)
                  ]),
                  createBaseVNode("th", {
                    scope: "col",
                    class: "text-center uppercase border cursor-pointer hover:bg-blue-300",
                    onClick: _cache[25] || (_cache[25] = ($event) => sorting("statuskawin"))
                  }, [
                    createTextVNode(" Nama Pendamping "),
                    sort_by.value === "statuskawin" && sort_mode.value ? (openBlock(), createBlock(_component_SortAscIcon, {
                      key: 0,
                      class: "inline ml-2 -pr-3 mr-1 w-5 h-4"
                    })) : createCommentVNode("", true),
                    sort_by.value === "statuskawin" && !sort_mode.value ? (openBlock(), createBlock(_component_SortDescIcon, {
                      key: 1,
                      class: "inline ml-2 -pr-3 mr-1 w-5 h-4"
                    })) : createCommentVNode("", true)
                  ]),
                  createBaseVNode("th", {
                    scope: "col",
                    class: "text-center uppercase border cursor-pointer hover:bg-blue-300",
                    onClick: _cache[26] || (_cache[26] = ($event) => sorting("kantor"))
                  }, [
                    createTextVNode(" Kantor "),
                    sort_by.value === "kantor" && sort_mode.value ? (openBlock(), createBlock(_component_SortAscIcon, {
                      key: 0,
                      class: "inline ml-2 -pr-3 mr-1 w-5 h-4"
                    })) : createCommentVNode("", true),
                    sort_by.value === "kantor" && !sort_mode.value ? (openBlock(), createBlock(_component_SortDescIcon, {
                      key: 1,
                      class: "inline ml-2 -pr-3 mr-1 w-5 h-4"
                    })) : createCommentVNode("", true)
                  ]),
                  _hoisted_43$4
                ])
              ]),
              withDirectives(createBaseVNode("tbody", _hoisted_44$4, [
                (openBlock(true), createElementBlock(Fragment, null, renderList(unref(historyAnggota).items, (anggota) => {
                  return openBlock(), createElementBlock("tr", {
                    class: "bg-white hover:bg-lime-300 hover:text-slate-700 drop-shadow-2xl group",
                    key: anggota.iddata,
                    anggota,
                    value: anggota.iddata
                  }, [
                    createBaseVNode("td", _hoisted_46$4, [
                      createBaseVNode("div", _hoisted_47$4, [
                        _hoisted_48$3,
                        withDirectives(createBaseVNode("input", {
                          value: anggota.iddata,
                          type: "checkbox",
                          "onUpdate:modelValue": _cache[27] || (_cache[27] = ($event) => userIds.value = $event),
                          onClick: selectOne,
                          class: "data-checkbox w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded-lg focus:ring-blue-500 focus:ring-2"
                        }, null, 8, _hoisted_49$3), [
                          [vModelCheckbox, userIds.value]
                        ])
                      ])
                    ]),
                    createBaseVNode("th", {
                      onDblclick: ($event) => viewData(anggota.iddata),
                      scope: "row",
                      class: "border-r border-b font-medium whitespace-nowrap pl-2"
                    }, toDisplayString(anggota.iddata), 41, _hoisted_50$3),
                    createBaseVNode("td", {
                      onDblclick: ($event) => viewData(anggota.iddata),
                      class: "min-w-max text-center border-r border-b font-medium px-2"
                    }, toDisplayString(anggota.cif), 41, _hoisted_51$3),
                    createBaseVNode("td", {
                      onDblclick: ($event) => viewData(anggota.iddata),
                      class: "min-w-max text-center border-r border-b font-medium px-2"
                    }, toDisplayString(unref(hooks)(anggota.tanggal).format("DD-MM-YYYY")), 41, _hoisted_52$3),
                    createBaseVNode("td", {
                      onDblclick: ($event) => viewData(anggota.iddata),
                      class: "min-w-max text-left border-r border-b font-medium px-2"
                    }, toDisplayString(anggota.resort), 41, _hoisted_53$3),
                    createBaseVNode("td", {
                      onDblclick: ($event) => viewData(anggota.iddata),
                      class: "min-w-max text-left border-r border-b font-medium px-2"
                    }, toDisplayString(anggota.noktp), 41, _hoisted_54$3),
                    createBaseVNode("td", {
                      onDblclick: ($event) => viewData(anggota.iddata),
                      class: "min-w-max text-left border-r border-b font-medium px-2"
                    }, toDisplayString(anggota.nokK), 41, _hoisted_55$3),
                    createBaseVNode("td", {
                      onDblclick: ($event) => viewData(anggota.iddata),
                      class: "min-w-max text-left border-r border-b font-medium px-2"
                    }, toDisplayString(anggota.nama), 41, _hoisted_56$2),
                    createBaseVNode("td", {
                      onDblclick: ($event) => viewData(anggota.iddata),
                      class: "min-w-max text-left border-r border-b font-medium px-2"
                    }, toDisplayString(anggota.alamat), 41, _hoisted_57$2),
                    createBaseVNode("td", {
                      onDblclick: ($event) => viewData(anggota.iddata),
                      class: "min-w-max text-left border-r border-b font-medium px-2"
                    }, toDisplayString(anggota.desa), 41, _hoisted_58$2),
                    createBaseVNode("td", {
                      onDblclick: ($event) => viewData(anggota.iddata),
                      class: "min-w-max text-left border-r border-b font-medium px-2"
                    }, toDisplayString(anggota.kecamatan), 41, _hoisted_59$2),
                    createBaseVNode("td", {
                      onDblclick: ($event) => viewData(anggota.iddata),
                      class: "min-w-max text-left border-r border-b font-medium px-2"
                    }, toDisplayString(anggota.kota), 41, _hoisted_60$2),
                    createBaseVNode("td", {
                      onDblclick: ($event) => viewData(anggota.iddata),
                      class: "min-w-max text-left border-r border-b font-medium px-2"
                    }, toDisplayString(anggota.statuskawin), 41, _hoisted_61$3),
                    createBaseVNode("td", {
                      onDblclick: ($event) => viewData(anggota.iddata),
                      class: "min-w-max text-left border-r border-b font-medium px-2"
                    }, toDisplayString(anggota.kantor), 41, _hoisted_62$3),
                    createBaseVNode("td", _hoisted_63$3, [
                      createBaseVNode("div", _hoisted_64$3, [
                        createBaseVNode("a", {
                          onClick: ($event) => editGet(anggota.iddata),
                          class: "flex items-center mr-4 hover:text-blue-700 text-sky-600",
                          href: "javascript:;"
                        }, [
                          createVNode(_component_CheckSquareIcon, { class: "w-3 h-3 mr-1" }),
                          createTextVNode(" Edit ")
                        ], 8, _hoisted_65$3),
                        createBaseVNode("a", {
                          onClick: ($event) => deleteGet(anggota),
                          class: "flex items-center hover:text-red-800 text-danger",
                          href: "javascript:;"
                        }, [
                          createVNode(_component_Trash2Icon, { class: "w-3 h-3 mr-1" }),
                          createTextVNode(" Hapus ")
                        ], 8, _hoisted_66$3)
                      ])
                    ])
                  ], 8, _hoisted_45$4);
                }), 128))
              ], 512), [
                [vShow, !isLoading.value]
              ]),
              withDirectives(createBaseVNode("tbody", null, [
                createBaseVNode("div", _hoisted_67$3, [
                  createVNode(_component_Loader2Icon, { class: "motion-safe:animate-spin stroke-[5px] text-white h-12 w-12 mb-2" }),
                  _hoisted_68$3,
                  _hoisted_69$3,
                  _hoisted_70$3
                ])
              ], 512), [
                [vShow, isLoading.value]
              ])
            ])
          ])
        ]),
        createVNode(_component_Modal, {
          backdrop: "static",
          size: "modal-xl",
          show: modal_utama.value,
          onHidden: _cache[53] || (_cache[53] = ($event) => modal_utama.value = false)
        }, {
          default: withCtx(() => [
            createVNode(_component_ModalHeader, null, {
              default: withCtx(() => [
                createBaseVNode("h2", _hoisted_71$3, [
                  isAdd.value ? (openBlock(), createElementBlock("span", _hoisted_72$3, "Tambah ")) : createCommentVNode("", true),
                  isEdit.value ? (openBlock(), createElementBlock("span", _hoisted_73$3, "Edit ")) : createCommentVNode("", true),
                  isView.value ? (openBlock(), createElementBlock("span", _hoisted_74$3, "Data ")) : createCommentVNode("", true),
                  createTextVNode(" Anggota "),
                  isEdit.value || isView.value ? (openBlock(), createElementBlock("span", _hoisted_75$3, toDisplayString(id_anggota.value), 1)) : createCommentVNode("", true)
                ]),
                createBaseVNode("a", {
                  "data-tw-dismiss": "modal",
                  onClick: resetForm,
                  href: "javascript:;",
                  class: "border bg-danger rounded-lg hover:bg-red-700 -my-5 -mr-3"
                }, [
                  createVNode(_component_XIcon, { class: "lucide lucide-x w-7 h-7 text-white hover:text-slate-100" })
                ])
              ]),
              _: 1
            }),
            createVNode(_component_ModalBody, null, {
              default: withCtx(() => [
                isView.value || isEdit.value ? (openBlock(), createElementBlock("div", _hoisted_76$3, [
                  createBaseVNode("button", _hoisted_77$3, [
                    createVNode(_component_BookIcon, { class: "w-5 h-5 mr-1 mx-auto stroke-2 stroke-current" }),
                    _hoisted_78$3
                  ]),
                  createBaseVNode("button", _hoisted_79$3, [
                    createVNode(_component_BanknoteIcon, { class: "w-5 h-5 mr-1 mx-auto stroke-2 stroke-current" }),
                    _hoisted_80$3
                  ]),
                  createBaseVNode("button", _hoisted_81$3, [
                    createVNode(_component_CoinsIcon, { class: "w-5 h-5 mr-1 mx-auto stroke-2 stroke-current" }),
                    _hoisted_82$3
                  ]),
                  createBaseVNode("button", _hoisted_83$3, [
                    createVNode(_component_ScaleIcon, { class: "w-5 h-5 mr-1 mx-auto stroke-2 stroke-current" }),
                    _hoisted_84$3
                  ]),
                  createBaseVNode("button", _hoisted_85$3, [
                    createVNode(_component_PiggyBankIcon, { class: "w-5 h-5 mr-1 mx-auto stroke-2 stroke-current" }),
                    _hoisted_86$3
                  ]),
                  createBaseVNode("button", _hoisted_87$3, [
                    createVNode(_component_LandmarkIcon, { class: "w-5 h-5 mr-1 mx-auto stroke-2 stroke-current" }),
                    _hoisted_88$3
                  ]),
                  createBaseVNode("button", _hoisted_89$3, [
                    createVNode(_component_WalletIcon, { class: "w-5 h-5 mr-1 mx-auto stroke-2 stroke-current" }),
                    _hoisted_90$3
                  ]),
                  createBaseVNode("button", _hoisted_91$3, [
                    createVNode(_component_FileIcon, { class: "w-5 h-5 mr-1 mx-auto stroke-2 stroke-current" }),
                    _hoisted_92$3
                  ])
                ])) : createCommentVNode("", true),
                createBaseVNode("div", _hoisted_93$3, [
                  createBaseVNode("form", {
                    id: "historyAnggotaForm",
                    class: "grid grid-cols-12 gap-4 pl-2",
                    onSubmit: withModifiers(simpan_data, ["prevent"])
                  }, [
                    createBaseVNode("div", _hoisted_95$3, [
                      createBaseVNode("div", _hoisted_96$3, [
                        createBaseVNode("div", _hoisted_97$3, [
                          !previewFoto.value ? (openBlock(), createElementBlock("img", {
                            key: 0,
                            src: unref(PP),
                            class: "h-[135px] mx-auto items-center my-5 hover:scale-110 transition duration-500 ease-in-out"
                          }, null, 8, _hoisted_98$3)) : createCommentVNode("", true),
                          previewFoto.value ? (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                            createBaseVNode("img", {
                              src: previewFoto.value,
                              class: "h-[125px] mx-auto mb-2 hover:scale-110 transition duration-500 ease-in-out"
                            }, null, 8, _hoisted_99$3),
                            createBaseVNode("p", _hoisted_100$3, toDisplayString(fileFoto.value.name), 1),
                            createBaseVNode("p", _hoisted_101$3, [
                              createTextVNode(toDisplayString(fileFoto.value.size / 1024), 1),
                              _hoisted_102$3
                            ])
                          ], 64)) : createCommentVNode("", true)
                        ]),
                        createBaseVNode("input", {
                          type: "file",
                          accept: "image/*",
                          onChange: previewImage,
                          class: "text-[10px] w-full cursor-pointer",
                          id: "foto_anggota",
                          ref_key: "foto_profile",
                          ref: foto_profile
                        }, null, 544),
                        _hoisted_103$3
                      ]),
                      createBaseVNode("div", _hoisted_104$3, [
                        createBaseVNode("div", _hoisted_105$3, [
                          !previewTTD.value ? (openBlock(), createBlock(_component_PointerIcon, {
                            key: 0,
                            class: "h-[90px] mx-auto items-center hover:scale-150 opacity-40 transition duration-500 ease-in-out",
                            title: "Tanda Tangan"
                          })) : createCommentVNode("", true),
                          previewTTD.value ? (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                            createBaseVNode("img", {
                              src: previewTTD.value,
                              class: "h-[60px] mx-auto mb-2 hover:scale-110 hover:opacity-60 transition duration-500 ease-in-out"
                            }, null, 8, _hoisted_106$3),
                            createBaseVNode("p", _hoisted_107$3, toDisplayString(fileTTD.value.name), 1),
                            createBaseVNode("p", _hoisted_108$3, [
                              createTextVNode(toDisplayString(fileTTD.value.size / 1024), 1),
                              _hoisted_109$3
                            ])
                          ], 64)) : createCommentVNode("", true)
                        ]),
                        createBaseVNode("input", {
                          type: "file",
                          accept: "image/*",
                          onChange: previewImage,
                          class: "text-[10px] w-full cursor-pointer",
                          id: "foto_ttd",
                          ref_key: "foto_ttd",
                          ref: foto_ttd
                        }, null, 544),
                        _hoisted_110$3
                      ]),
                      createBaseVNode("div", _hoisted_111$3, [
                        createBaseVNode("div", _hoisted_112$3, [
                          !previewPA.value ? (openBlock(), createBlock(_component_PenToolIcon, {
                            key: 0,
                            class: "h-[90px] mx-auto items-center hover:scale-150 opacity-40 hover:opacity-60 transition duration-500 ease-in-out"
                          })) : createCommentVNode("", true),
                          previewPA.value ? (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                            createBaseVNode("img", {
                              src: previewPA.value,
                              class: "h-[60px] mx-auto mb-2 hover:scale-110 transition duration-500 ease-in-out"
                            }, null, 8, _hoisted_113$3),
                            createBaseVNode("p", _hoisted_114$3, toDisplayString(filePA.value.name), 1),
                            createBaseVNode("p", _hoisted_115$3, [
                              createTextVNode(toDisplayString(filePA.value.size / 1024), 1),
                              _hoisted_116$3
                            ])
                          ], 64)) : createCommentVNode("", true)
                        ]),
                        createBaseVNode("input", {
                          type: "file",
                          accept: "image/*",
                          onChange: previewImage,
                          class: "text-[10px] w-full cursor-pointer",
                          id: "foto_pa",
                          ref_key: "foto_pa",
                          ref: foto_pa
                        }, null, 544),
                        _hoisted_117$2
                      ])
                    ]),
                    createBaseVNode("div", _hoisted_118$2, [
                      createBaseVNode("div", _hoisted_119$2, [
                        createBaseVNode("div", _hoisted_120$1, [
                          createBaseVNode("div", _hoisted_121$1, [
                            withDirectives(createBaseVNode("input", {
                              type: "text",
                              name: "tanggal",
                              id: "tanggal",
                              class: "block py-2.5 px-2 w-full text-sm text-gray-900 bg-transparent border-2 rounded-md border-gray-300 appearance-none focus:outline-none focus:ring-0 focus:border-blue-600 peer",
                              placeholder: " ",
                              "onUpdate:modelValue": _cache[28] || (_cache[28] = ($event) => tanggal.value = $event),
                              disabled: ""
                            }, null, 512), [
                              [vModelText, tanggal.value]
                            ]),
                            _hoisted_122$1
                          ]),
                          createBaseVNode("div", _hoisted_123$1, [
                            withDirectives(createBaseVNode("input", {
                              type: "text",
                              name: "no_anggota",
                              id: "no_anggota",
                              class: "block py-2.5 px-2 w-full text-sm text-gray-900 bg-transparent border-2 rounded-md border-gray-300 appearance-none focus:outline-none focus:ring-0 focus:border-blue-600 peer",
                              placeholder: " ",
                              "onUpdate:modelValue": _cache[29] || (_cache[29] = ($event) => no_anggota.value = $event),
                              required: ""
                            }, null, 512), [
                              [vModelText, no_anggota.value]
                            ]),
                            _hoisted_124$1
                          ])
                        ]),
                        _hoisted_125$1,
                        createBaseVNode("div", _hoisted_126$1, [
                          createBaseVNode("div", _hoisted_127$1, [
                            withDirectives(createBaseVNode("input", {
                              type: "text",
                              name: "no_ktp",
                              id: "no_ktp",
                              class: "block py-2.5 px-2 w-full text-sm text-gray-900 bg-transparent border-2 rounded-md border-gray-300 appearance-none focus:outline-none focus:ring-0 focus:border-blue-600 peer",
                              placeholder: " ",
                              "onUpdate:modelValue": _cache[30] || (_cache[30] = ($event) => no_ktp.value = $event),
                              required: ""
                            }, null, 512), [
                              [vModelText, no_ktp.value]
                            ]),
                            _hoisted_128$1
                          ]),
                          createBaseVNode("div", _hoisted_129$1, [
                            withDirectives(createBaseVNode("input", {
                              type: "text",
                              name: "no_kk",
                              id: "no_kk",
                              class: "block py-2.5 px-2 w-full text-sm text-gray-900 bg-transparent border-2 rounded-md border-gray-300 appearance-none focus:outline-none focus:ring-0 focus:border-blue-600 peer",
                              placeholder: " ",
                              "onUpdate:modelValue": _cache[31] || (_cache[31] = ($event) => no_kk.value = $event),
                              required: ""
                            }, null, 512), [
                              [vModelText, no_kk.value]
                            ]),
                            _hoisted_130$1
                          ])
                        ]),
                        createBaseVNode("div", _hoisted_131$1, [
                          withDirectives(createBaseVNode("input", {
                            type: "text",
                            name: "nama_lengkap",
                            id: "nama_lengkap",
                            class: "block py-2.5 px-2 w-full text-sm text-gray-900 bg-transparent border-2 rounded-md border-gray-300 appearance-none focus:outline-none focus:ring-0 focus:border-blue-600 peer",
                            placeholder: " ",
                            "onUpdate:modelValue": _cache[32] || (_cache[32] = ($event) => nama_lengkap.value = $event),
                            required: ""
                          }, null, 512), [
                            [vModelText, nama_lengkap.value]
                          ]),
                          _hoisted_132$1
                        ]),
                        createBaseVNode("div", _hoisted_133$1, [
                          createBaseVNode("div", _hoisted_134$1, [
                            withDirectives(createBaseVNode("input", {
                              type: "text",
                              name: "tempat_lahir",
                              id: "tempat_lahir",
                              class: "block py-2.5 px-2 w-full text-sm text-gray-900 bg-transparent border-2 rounded-md border-gray-300 appearance-none focus:outline-none focus:ring-0 focus:border-blue-600 peer",
                              placeholder: " ",
                              "onUpdate:modelValue": _cache[33] || (_cache[33] = ($event) => tempat_lahir.value = $event),
                              required: ""
                            }, null, 512), [
                              [vModelText, tempat_lahir.value]
                            ]),
                            _hoisted_135$1
                          ]),
                          createBaseVNode("div", _hoisted_136$1, [
                            withDirectives(createBaseVNode("input", {
                              type: "date",
                              name: "tanggal_lahir",
                              id: "tanggal_lahir",
                              class: "block py-2.5 px-2 w-full text-sm text-gray-900 bg-transparent border-2 rounded-md border-gray-300 appearance-none focus:outline-none focus:ring-0 focus:border-blue-600 peer",
                              placeholder: " ",
                              "onUpdate:modelValue": _cache[34] || (_cache[34] = ($event) => tanggal_lahir.value = $event),
                              required: ""
                            }, null, 512), [
                              [vModelText, tanggal_lahir.value]
                            ]),
                            _hoisted_137$1
                          ])
                        ]),
                        createBaseVNode("div", _hoisted_138$1, [
                          createBaseVNode("div", _hoisted_139$1, [
                            withDirectives(createBaseVNode("select", {
                              name: "jenis_kelamin",
                              id: "jenis_kelamin",
                              class: "block py-2.5 px-2 w-full text-sm text-gray-900 bg-transparent border-2 rounded-md border-gray-300 appearance-none focus:outline-none focus:ring-0 focus:border-blue-600 peer",
                              placeholder: " ",
                              "onUpdate:modelValue": _cache[35] || (_cache[35] = ($event) => jenis_kelamin.value = $event),
                              required: ""
                            }, [
                              _hoisted_140$1,
                              (openBlock(true), createElementBlock(Fragment, null, renderList(unref(list_jenis_kelamin), (jenis) => {
                                return openBlock(), createElementBlock("option", {
                                  value: jenis.value
                                }, toDisplayString(jenis.nama), 9, _hoisted_141$1);
                              }), 256))
                            ], 512), [
                              [vModelSelect, jenis_kelamin.value]
                            ]),
                            _hoisted_142$1
                          ]),
                          createBaseVNode("div", _hoisted_143$1, [
                            withDirectives(createBaseVNode("select", {
                              name: "agama",
                              id: "agama",
                              class: "block py-2.5 px-2 w-full text-sm text-gray-900 bg-transparent border-2 rounded-md border-gray-300 appearance-none focus:outline-none focus:ring-0 focus:border-blue-600 peer",
                              placeholder: " ",
                              "onUpdate:modelValue": _cache[36] || (_cache[36] = ($event) => agama.value = $event),
                              required: ""
                            }, [
                              _hoisted_144$1,
                              (openBlock(true), createElementBlock(Fragment, null, renderList(unref(list_agama), (agama2) => {
                                return openBlock(), createElementBlock("option", {
                                  value: agama2.value
                                }, toDisplayString(agama2.nama), 9, _hoisted_145$1);
                              }), 256))
                            ], 512), [
                              [vModelSelect, agama.value]
                            ]),
                            _hoisted_146$1
                          ])
                        ]),
                        createBaseVNode("div", _hoisted_147$1, [
                          withDirectives(createBaseVNode("textarea", {
                            type: "text",
                            name: "alamat",
                            id: "alamat",
                            class: "block py-2.5 px-2 w-full text-sm text-gray-900 bg-transparent border-2 rounded-md border-gray-300 appearance-none focus:outline-none focus:ring-0 focus:border-blue-600 peer",
                            placeholder: " ",
                            "onUpdate:modelValue": _cache[37] || (_cache[37] = ($event) => alamat.value = $event),
                            required: ""
                          }, null, 512), [
                            [vModelText, alamat.value]
                          ]),
                          _hoisted_148$1
                        ]),
                        createBaseVNode("div", _hoisted_149$1, [
                          createBaseVNode("div", _hoisted_150$1, [
                            withDirectives(createBaseVNode("input", {
                              type: "text",
                              name: "rt",
                              id: "rt",
                              class: "block py-2.5 px-2 w-full text-sm text-gray-900 bg-transparent border-2 rounded-md border-gray-300 appearance-none focus:outline-none focus:ring-0 focus:border-blue-600 peer",
                              placeholder: " ",
                              "onUpdate:modelValue": _cache[38] || (_cache[38] = ($event) => rt.value = $event),
                              required: ""
                            }, null, 512), [
                              [vModelText, rt.value]
                            ]),
                            _hoisted_151$1
                          ]),
                          createBaseVNode("div", _hoisted_152$1, [
                            withDirectives(createBaseVNode("input", {
                              type: "text",
                              name: "rw",
                              id: "rw",
                              class: "block py-2.5 px-2 w-full text-sm text-gray-900 bg-transparent border-2 rounded-md border-gray-300 appearance-none focus:outline-none focus:ring-0 focus:border-blue-600 peer",
                              placeholder: " ",
                              "onUpdate:modelValue": _cache[39] || (_cache[39] = ($event) => rw.value = $event),
                              required: ""
                            }, null, 512), [
                              [vModelText, rw.value]
                            ]),
                            _hoisted_153$1
                          ]),
                          createBaseVNode("div", _hoisted_154$1, [
                            withDirectives(createBaseVNode("input", {
                              type: "text",
                              name: "kelurahan",
                              id: "kelurahan",
                              class: "block py-2.5 px-2 w-full text-sm text-gray-900 bg-transparent border-2 rounded-md border-gray-300 appearance-none focus:outline-none focus:ring-0 focus:border-blue-600 peer",
                              placeholder: " ",
                              "onUpdate:modelValue": _cache[40] || (_cache[40] = ($event) => kelurahan.value = $event),
                              required: ""
                            }, null, 512), [
                              [vModelText, kelurahan.value]
                            ]),
                            _hoisted_155$1
                          ])
                        ]),
                        createBaseVNode("div", _hoisted_156$1, [
                          createBaseVNode("div", _hoisted_157$1, [
                            withDirectives(createBaseVNode("input", {
                              type: "text",
                              name: "kecamatan",
                              id: "kecamatan",
                              class: "block py-2.5 px-2 w-full text-sm text-gray-900 bg-transparent border-2 rounded-md border-gray-300 appearance-none focus:outline-none focus:ring-0 focus:border-blue-600 peer",
                              placeholder: " ",
                              "onUpdate:modelValue": _cache[41] || (_cache[41] = ($event) => kecamatan.value = $event),
                              required: ""
                            }, null, 512), [
                              [vModelText, kecamatan.value]
                            ]),
                            _hoisted_158$1
                          ]),
                          createBaseVNode("div", _hoisted_159$1, [
                            withDirectives(createBaseVNode("input", {
                              type: "text",
                              name: "kota",
                              id: "kota",
                              class: "block py-2.5 px-2 w-full text-sm text-gray-900 bg-transparent border-2 rounded-md border-gray-300 appearance-none focus:outline-none focus:ring-0 focus:border-blue-600 peer",
                              placeholder: " ",
                              "onUpdate:modelValue": _cache[42] || (_cache[42] = ($event) => kota.value = $event),
                              required: ""
                            }, null, 512), [
                              [vModelText, kota.value]
                            ]),
                            _hoisted_160$1
                          ])
                        ]),
                        createBaseVNode("div", _hoisted_161$1, [
                          createBaseVNode("div", _hoisted_162$1, [
                            withDirectives(createBaseVNode("input", {
                              type: "text",
                              name: "pendamping",
                              id: "pendamping",
                              class: "block py-2.5 px-2 w-full text-sm text-gray-900 bg-transparent border-2 rounded-md border-gray-300 appearance-none focus:outline-none focus:ring-0 focus:border-blue-600 peer",
                              placeholder: " ",
                              "onUpdate:modelValue": _cache[43] || (_cache[43] = ($event) => pendamping.value = $event),
                              required: ""
                            }, null, 512), [
                              [vModelText, pendamping.value]
                            ]),
                            _hoisted_163$1
                          ]),
                          createBaseVNode("div", _hoisted_164$1, [
                            withDirectives(createBaseVNode("input", {
                              type: "text",
                              name: "pekerjaan",
                              id: "pekerjaan",
                              class: "block py-2.5 px-2 w-full text-sm text-gray-900 bg-transparent border-2 rounded-md border-gray-300 appearance-none focus:outline-none focus:ring-0 focus:border-blue-600 peer",
                              placeholder: " ",
                              "onUpdate:modelValue": _cache[44] || (_cache[44] = ($event) => pekerjaan.value = $event),
                              required: ""
                            }, null, 512), [
                              [vModelText, pekerjaan.value]
                            ]),
                            _hoisted_165$1
                          ]),
                          createBaseVNode("div", _hoisted_166$1, [
                            withDirectives(createBaseVNode("input", {
                              type: "tel",
                              name: "telepon",
                              id: "telepon",
                              class: "block py-2.5 px-2 w-full text-sm text-gray-900 bg-transparent border-2 rounded-md border-gray-300 appearance-none focus:outline-none focus:ring-0 focus:border-blue-600 peer",
                              placeholder: " ",
                              "onUpdate:modelValue": _cache[45] || (_cache[45] = ($event) => no_telepon.value = $event),
                              required: ""
                            }, null, 512), [
                              [vModelText, no_telepon.value]
                            ]),
                            _hoisted_167$1
                          ])
                        ]),
                        createBaseVNode("div", _hoisted_168$1, [
                          createBaseVNode("div", _hoisted_169$1, [
                            withDirectives(createBaseVNode("select", {
                              name: "resort",
                              id: "resort",
                              class: "block py-2.5 px-2 w-full text-sm text-gray-900 bg-transparent border-2 rounded-md border-gray-300 appearance-none focus:outline-none focus:ring-0 focus:border-blue-600 peer",
                              placeholder: " ",
                              "onUpdate:modelValue": _cache[46] || (_cache[46] = ($event) => resort.value = $event),
                              required: ""
                            }, [
                              _hoisted_170$1,
                              (openBlock(true), createElementBlock(Fragment, null, renderList(unref(list_resort), (resort2) => {
                                return openBlock(), createElementBlock("option", {
                                  value: resort2.value
                                }, toDisplayString(resort2.nama), 9, _hoisted_171$1);
                              }), 256))
                            ], 512), [
                              [vModelSelect, resort.value]
                            ]),
                            _hoisted_172$1
                          ]),
                          createBaseVNode("div", _hoisted_173$1, [
                            withDirectives(createBaseVNode("input", {
                              type: "date",
                              name: "tanggal_bht",
                              id: "tanggal_bht",
                              class: "block py-2.5 px-2 w-full text-sm text-gray-900 bg-transparent border-2 rounded-md border-gray-300 appearance-none focus:outline-none focus:ring-0 focus:border-blue-600 peer",
                              placeholder: " ",
                              "onUpdate:modelValue": _cache[47] || (_cache[47] = ($event) => tanggal_bht.value = $event),
                              disabled: ""
                            }, null, 512), [
                              [vModelText, tanggal_bht.value]
                            ]),
                            _hoisted_174$1
                          ])
                        ]),
                        _hoisted_175$1,
                        createBaseVNode("div", _hoisted_176$1, [
                          createBaseVNode("div", _hoisted_177$1, [
                            withDirectives(createBaseVNode("input", {
                              type: "text",
                              name: "simpanan_pokok",
                              id: "simpanan_pokok",
                              class: "block py-2.5 px-10 w-full text-sm text-gray-900 bg-transparent border-2 rounded-md border-gray-300 appearance-none focus:outline-none focus:ring-0 focus:border-blue-600 peer",
                              placeholder: " ",
                              "onUpdate:modelValue": _cache[48] || (_cache[48] = ($event) => simpanan_pokok.value = $event),
                              disabled: ""
                            }, null, 512), [
                              [vModelText, simpanan_pokok.value]
                            ]),
                            _hoisted_178$1,
                            _hoisted_179$1
                          ]),
                          createBaseVNode("div", _hoisted_180$1, [
                            withDirectives(createBaseVNode("input", {
                              type: "text",
                              name: "simpanan_swk",
                              id: "simpanan_swk",
                              class: "block py-2.5 px-10 w-full text-sm text-gray-900 bg-transparent border-2 rounded-md border-gray-300 appearance-none focus:outline-none focus:ring-0 focus:border-blue-600 peer",
                              placeholder: " ",
                              "onUpdate:modelValue": _cache[49] || (_cache[49] = ($event) => simpanan_swk.value = $event),
                              disabled: ""
                            }, null, 512), [
                              [vModelText, simpanan_swk.value]
                            ]),
                            _hoisted_181$1,
                            _hoisted_182$1
                          ])
                        ]),
                        createBaseVNode("div", _hoisted_183$1, [
                          createBaseVNode("div", _hoisted_184$1, [
                            withDirectives(createBaseVNode("input", {
                              type: "text",
                              name: "simpanan_wajib",
                              id: "simpanan_wajib",
                              class: "block py-2.5 px-10 w-full text-sm text-gray-900 bg-transparent border-2 rounded-md border-gray-300 appearance-none focus:outline-none focus:ring-0 focus:border-blue-600 peer",
                              placeholder: " ",
                              "onUpdate:modelValue": _cache[50] || (_cache[50] = ($event) => simpanan_wajib.value = $event),
                              disabled: ""
                            }, null, 512), [
                              [vModelText, simpanan_wajib.value]
                            ]),
                            _hoisted_185$1,
                            _hoisted_186$1
                          ]),
                          createBaseVNode("div", _hoisted_187$1, [
                            withDirectives(createBaseVNode("input", {
                              type: "text",
                              name: "simpanan_lain",
                              id: "simpanan_lain",
                              class: "block py-2.5 px-10 w-full text-sm text-gray-900 bg-transparent border-2 rounded-md border-gray-300 appearance-none focus:outline-none focus:ring-0 focus:border-blue-600 peer",
                              placeholder: " ",
                              "onUpdate:modelValue": _cache[51] || (_cache[51] = ($event) => simpanan_lain.value = $event),
                              disabled: ""
                            }, null, 512), [
                              [vModelText, simpanan_lain.value]
                            ]),
                            _hoisted_188$1,
                            _hoisted_189$1
                          ])
                        ]),
                        createBaseVNode("div", _hoisted_190$1, [
                          createBaseVNode("div", _hoisted_191$1, [
                            withDirectives(createBaseVNode("input", {
                              type: "text",
                              name: "total_simpanan",
                              id: "total_simpanan",
                              class: "block py-2.5 px-10 w-full text-sm text-gray-900 bg-transparent border-2 rounded-md border-gray-300 appearance-none focus:outline-none focus:ring-0 focus:border-blue-600 peer",
                              placeholder: " ",
                              "onUpdate:modelValue": _cache[52] || (_cache[52] = ($event) => total_simpanan.value = $event),
                              disabled: ""
                            }, null, 512), [
                              [vModelText, total_simpanan.value]
                            ]),
                            _hoisted_192$1,
                            _hoisted_193$1
                          ])
                        ])
                      ])
                    ])
                  ], 40, _hoisted_94$3)
                ])
              ]),
              _: 1
            }),
            createVNode(_component_ModalFooter, { class: "text-right" }, {
              default: withCtx(() => [
                createBaseVNode("button", {
                  type: "button",
                  class: "btn btn-outline-secondary w-32 mr-1",
                  onClick: resetForm
                }, " Cancel "),
                _hoisted_194$1
              ]),
              _: 1
            })
          ]),
          _: 1
        }, 8, ["show"]),
        createVNode(_component_Modal, {
          backdrop: "static",
          show: modal_delete.value,
          onHidden: _cache[55] || (_cache[55] = ($event) => modal_delete.value = false)
        }, {
          default: withCtx(() => [
            createVNode(_component_ModalBody, { class: "p-0" }, {
              default: withCtx(() => [
                createBaseVNode("div", _hoisted_195$1, [
                  createVNode(_component_XCircleIcon, { class: "w-16 h-16 text-danger mx-auto mt-3" }),
                  _hoisted_196$1,
                  createBaseVNode("div", _hoisted_197$1, [
                    createTextVNode(" Ingin menghapus "),
                    userIds.value.length > 1 ? (openBlock(), createElementBlock("span", _hoisted_198$1, "Beberapa")) : createCommentVNode("", true),
                    createTextVNode(" data dengan ID "),
                    _hoisted_199$1,
                    createBaseVNode("b", null, toDisplayString(userIds.value.length > 1 ? userIds.value : userIds.value[0]), 1),
                    createTextVNode(" ? "),
                    _hoisted_200$1,
                    createTextVNode("Data yang telah dihapus tidak bisa kembali. ")
                  ])
                ]),
                createBaseVNode("div", _hoisted_201$1, [
                  createBaseVNode("button", {
                    type: "button",
                    onClick: resetForm,
                    class: "btn btn-outline-secondary w-24 mr-1 text-xs"
                  }, " Batal "),
                  createBaseVNode("button", {
                    type: "button",
                    class: "btn btn-danger w-24 text-xs",
                    onClick: _cache[54] || (_cache[54] = (e) => {
                      e.preventDefault();
                      deleteAnggota();
                    })
                  }, " Hapus ")
                ])
              ]),
              _: 1
            })
          ]),
          _: 1
        }, 8, ["show"])
      ], 64);
    };
  }
};
const request$2 = window.api.jurnalTransaksi;
const useJurnalTransaksiStore = defineStore({
  id: "jurnal-transaksi",
  state: () => ({
    rawItems: [],
    detailJurnal: []
  }),
  getters: {
    items: (state) => state.rawItems,
    jurnals: (state) => state.detailJurnal
  },
  actions: {
    async readItem(search_type, search_data, sort_by, sort_mode, page_number, total_row_displayed) {
      try {
        const data = await request$2.fetchJurnal(
          search_type,
          search_data,
          sort_by,
          sort_mode,
          page_number,
          total_row_displayed
        );
        if (data.success) {
          this.rawItems = data.data.rows;
          return { total_pages: data.data.total_page, perkiraan: data.data.perkiraan };
        } else if (!data.success && data.data.message == "token invalid") {
          Swal.fire({
            icon: "error",
            title: "Token Invalid",
            text: "Token Anda Invalid, silahkan login ulang"
          }).then((data2) => {
            localStorage.removeItem("user");
            router$1.push("/auth");
            window.location.reload();
          });
        }
      } catch (error) {
        throw new Error(error);
      }
    },
    async readPerkiraan(noper) {
      try {
        const data = await request$2.getperkiraanJurnal(noper);
        if (data.success && data.data.length > 0) {
          return data.data[0].nama;
        }
      } catch (error) {
        throw new Error(error);
      }
    },
    async getItem(bukti) {
      try {
        const data = await request$2.getJurnal(bukti);
        if (data.success) {
          this.detailJurnal = data.data.rows;
          return data.data.rows;
        }
      } catch (error) {
        throw new Error(error);
      }
    },
    async postItem(idtrans, TANGGAL, BUKTI, NOPER, KETERANGAN, JUMLAH, isEdit) {
      try {
        let id = Date.now();
        let data;
        if (!isEdit && idtrans == "") {
          this.detailJurnal.push({ idtrans: Date.now(), TANGGAL, BUKTI, NOPER, KETERANGAN, JUMLAH });
          data = await request$2.createJurnal(TANGGAL, BUKTI, NOPER, KETERANGAN, JUMLAH);
          if (data.success) {
            this.detailJurnal = this.detailJurnal.map((item) => {
              if (item.idtrans === id) {
                return {
                  idtrans: data.data.insertId,
                  TANGGAL: item.TANGGAL,
                  BUKTI: item.BUKTI,
                  NOPER: item.NOPER,
                  KETERANGAN: item.KETERANGAN,
                  JUMLAH: item.JUMLAH
                };
              }
              return item;
            });
          }
        } else {
          this.detailJurnal = this.detailJurnal.map((item) => {
            if (item.idtrans === idtrans) {
              return { idtrans, TANGGAL, BUKTI, NOPER, KETERANGAN, JUMLAH };
            }
            return item;
          });
          data = await request$2.updateJurnal(idtrans, TANGGAL, BUKTI, NOPER, KETERANGAN, JUMLAH);
        }
        if (data.success) {
          return true;
        } else {
          return false;
        }
      } catch (error) {
        throw new Error(error);
      }
    },
    removeItem(idtrans) {
      this.detailJurnal = this.detailJurnal.filter((item) => {
        return item.idtrans !== idtrans;
      });
      request$2.deleteJurnal(idtrans);
    }
  }
});
const _hoisted_1$4 = { class: "min-w-max text-left border-r border-b font-medium border-[#cbd5e9] px-2 w-20" };
const _hoisted_2$4 = { class: "min-w-max text-left border-r border-b font-medium border-[#cbd5e9] px-2 w-20" };
const _hoisted_3$4 = { class: "min-w-max text-left border-r border-b font-medium border-[#cbd5e9] px-2 w-max" };
const _hoisted_4$4 = { class: "min-w-max text-left border-r border-b font-medium border-[#cbd5e9] px-2 w-max" };
const _hoisted_5$4 = { class: "min-w-max text-left border-r border-b font-medium border-[#cbd5e9] px-2 w-max" };
const _hoisted_6$4 = { class: "min-w-max border-r border-b font-medium border-[#cbd5e9] p-1 w-44" };
const _hoisted_7$4 = { class: "flex justify-center" };
const _hoisted_8$4 = { class: "p-5 text-center" };
const _hoisted_9$4 = { class: "text-lg mt-5" };
const _hoisted_10$4 = { class: "px-5 pb-8 text-center" };
const _sfc_main$5 = {
  __name: "TabelDetail",
  props: {
    jurnal: { type: Object, required: true }
  },
  emits: ["updateData"],
  setup(__props, { emit: emit2 }) {
    const props = __props;
    const jurnalTransaksi = useJurnalTransaksiStore();
    const modal_delete = ref(false);
    const updateItem = (e) => {
      emit2("updateData", e);
    };
    const deleteItem = (e) => {
      modal_delete.value = false;
      setTimeout(() => {
        jurnalTransaksi.removeItem(e);
      }, 100);
    };
    return (_ctx, _cache) => {
      const _component_CheckSquareIcon = resolveComponent("CheckSquareIcon");
      const _component_Trash2Icon = resolveComponent("Trash2Icon");
      const _component_ModalBody = resolveComponent("ModalBody");
      const _component_Modal = resolveComponent("Modal");
      return openBlock(), createElementBlock(Fragment, null, [
        createBaseVNode("tr", null, [
          createBaseVNode("td", _hoisted_1$4, toDisplayString(props.jurnal.BUKTI), 1),
          createBaseVNode("td", _hoisted_2$4, toDisplayString(props.jurnal.NOPER), 1),
          createBaseVNode("td", _hoisted_3$4, toDisplayString(props.jurnal.KETERANGAN), 1),
          createBaseVNode("td", _hoisted_4$4, toDisplayString(props.jurnal.JUMLAH > 0 ? props.jurnal.JUMLAH : ""), 1),
          createBaseVNode("td", _hoisted_5$4, toDisplayString(props.jurnal.JUMLAH < 0 ? Math.abs(props.jurnal.JUMLAH) : ""), 1),
          createBaseVNode("td", _hoisted_6$4, [
            createBaseVNode("div", _hoisted_7$4, [
              createBaseVNode("a", {
                onClick: _cache[0] || (_cache[0] = ($event) => updateItem(props.jurnal)),
                class: "flex items-center mr-4 hover:text-blue-700 text-sky-600",
                href: "javascript:;"
              }, [
                createVNode(_component_CheckSquareIcon, { class: "w-3 h-3 mr-1" }),
                createTextVNode(" Edit ")
              ]),
              createBaseVNode("a", {
                onClick: _cache[1] || (_cache[1] = ($event) => modal_delete.value = true),
                class: "flex items-center hover:text-red-800 text-danger",
                href: "javascript:;"
              }, [
                createVNode(_component_Trash2Icon, { class: "w-3 h-3 mr-1" }),
                createTextVNode(" Hapus ")
              ])
            ])
          ])
        ]),
        createVNode(_component_Modal, {
          show: modal_delete.value,
          onHidden: _cache[4] || (_cache[4] = ($event) => modal_delete.value = false)
        }, {
          default: withCtx(() => [
            createVNode(_component_ModalBody, { class: "p-0" }, {
              default: withCtx(() => [
                createBaseVNode("div", _hoisted_8$4, [
                  createVNode(_component_Trash2Icon, { class: "w-16 h-16 text-danger mx-auto mt-3" }),
                  createBaseVNode("div", _hoisted_9$4, " Apakah Anda yakin akan menghapus data " + toDisplayString(props.jurnal.KETERANGAN) + ", " + toDisplayString(props.jurnal.JUMLAH > 0 ? "DEBET" : "KREDIT") + " " + toDisplayString(Math.abs(props.jurnal.JUMLAH)), 1)
                ]),
                createBaseVNode("div", _hoisted_10$4, [
                  createBaseVNode("button", {
                    type: "button",
                    onClick: _cache[2] || (_cache[2] = ($event) => modal_delete.value = false),
                    class: "border-2 border-secondary p-2 rounded-md w-24 mr-5"
                  }, " Cancel "),
                  createBaseVNode("button", {
                    type: "button",
                    class: "border bg-danger text-white p-2 rounded-md border-danger w-24",
                    onClick: _cache[3] || (_cache[3] = ($event) => deleteItem(props.jurnal.idtrans))
                  }, " Yes ")
                ])
              ]),
              _: 1
            })
          ]),
          _: 1
        }, 8, ["show"])
      ], 64);
    };
  }
};
const _hoisted_1$3 = { class: "relative top-0 bg-white w-full border-y-2 border-[#d0d3d4]" };
const _hoisted_2$3 = { class: "flex space-x-4 w-full justify-center m-auto px-5" };
const _hoisted_3$3 = { class: "grid grid-cols-8 xl:grid-cols-10 w-full h-10" };
const _hoisted_4$3 = {
  class: "inline-block align-middle hover:text-success text-center select-none border font-normal whitespace-no-wrap rounded no-underline h-9 mx-auto px-2 leading-tight text-xs bg-gray-100 text-gray-800 hover:bg-gray-200 btn-light-bordered",
  title: "Export CSV",
  onclick: "exportData('csv')"
};
const _hoisted_5$3 = /* @__PURE__ */ createBaseVNode("span", { class: "w-4 h-2 px-0.5 mx-auto my-[2px] stroke-2 stroke-current text-[8px] text-success font-bold" }, "CSV", -1);
const _hoisted_6$3 = {
  class: "inline-block hover:text-danger align-middle text-center select-none border font-normal whitespace-no-wrap rounded no-underline h-9 mx-auto px-2 leading-tight text-xs bg-gray-100 text-gray-800 hover:bg-gray-200 btn-light-bordered",
  title: "Export PDF",
  onclick: "exportData('pdf')"
};
const _hoisted_7$3 = /* @__PURE__ */ createBaseVNode("span", { class: "w-4 h-2 px-0.5 mx-auto my-[2px] stroke-2 stroke-current text-[8px] text-danger font-bold" }, "PDF", -1);
const _hoisted_8$3 = {
  class: "inline-block align-middle text-center select-none border font-normal whitespace-no-wrap rounded no-underline h-9 mx-auto px-2 leading-tight text-xs bg-gray-100 text-gray-800 hover:bg-gray-200 btn-light-bordered",
  title: "Print Table",
  onclick: "printData()"
};
const _hoisted_9$3 = /* @__PURE__ */ createBaseVNode("i", { class: "fa-solid fa-check" }, null, -1);
const _hoisted_10$3 = {
  href: "javascript:history.go(0)",
  title: "Refresh All",
  class: "inline-block hover:text-primary align-middle text-center select-none border font-normal whitespace-no-wrap rounded no-underline h-9 mx-auto px-2 leading-tight text-xs bg-gray-100 text-gray-800 hover:bg-gray-200 btn-light-bordered"
};
const _hoisted_11$3 = { class: "flex order-2 w-full h-10" };
const _hoisted_12$3 = {
  id: "pagination",
  class: "mx-auto"
};
const _hoisted_13$3 = { class: "inline-flex align-middle leading-tight text-xs" };
const _hoisted_14$3 = { class: "relative inline-flex align-middle py-1 leading-tight text-xs" };
const _hoisted_15$3 = { class: "flex items-stretch w-full" };
const _hoisted_16$3 = { class: "relative inline-flex align-middle py-1 leading-tight text-xs" };
const _hoisted_17$3 = { class: "items-center justify-center w-full flex h-10" };
const _hoisted_18$3 = /* @__PURE__ */ createBaseVNode("option", { value: "50" }, "50", -1);
const _hoisted_19$3 = /* @__PURE__ */ createBaseVNode("option", { value: "75" }, "75", -1);
const _hoisted_20$3 = /* @__PURE__ */ createBaseVNode("option", { value: "100" }, "100", -1);
const _hoisted_21$3 = [
  _hoisted_18$3,
  _hoisted_19$3,
  _hoisted_20$3
];
const _hoisted_22$2 = {
  class: "relative flex items-stretch w-full",
  id: "search-input-group"
};
const _hoisted_23$2 = ["placeholder"];
const _hoisted_24$3 = { class: "input-group-append" };
const _hoisted_25$3 = { class: "input-group-append" };
const _hoisted_26$3 = /* @__PURE__ */ createStaticVNode('<option value="idtrans">ID</option><option value="TANGGAL">Tanggal</option><option value="BUKTI">Bukti</option><option value="NOPER">Noper</option><option value="KETERANGAN">Keterangan</option><option value="JUMLAH">Jumlah</option>', 6);
const _hoisted_32$3 = [
  _hoisted_26$3
];
const _hoisted_33$3 = { class: "flex flex-col h-[75vh] min-[1537px]:h-[80vh] shadow-md rounded-lg" };
const _hoisted_34$3 = { class: "flex-grow overflow-auto" };
const _hoisted_35$3 = {
  class: "relative w-full text-xs text-left text-gray-500",
  id: "table_jurnal_transaksi"
};
const _hoisted_36$3 = { class: "text-xs font-bold text-gray-800 uppercase bg-blue-200 sticky top-0 z-10" };
const _hoisted_37$3 = {
  scope: "col",
  class: "p-2 border pl-3"
};
const _hoisted_38$3 = { class: "flex items-center" };
const _hoisted_39$3 = /* @__PURE__ */ createBaseVNode("label", {
  for: "checkbox-all-search",
  class: "sr-only"
}, "checkbox", -1);
const _hoisted_40$3 = /* @__PURE__ */ createBaseVNode("th", {
  scope: "col",
  class: "text-center uppercase border"
}, "Actions", -1);
const _hoisted_41$3 = { class: "overflow-y-scroll" };
const _hoisted_42$3 = ["jurnal"];
const _hoisted_43$3 = { class: "w-4 border-r border-b font-medium border-[#cbd5e9] p-0 pl-3" };
const _hoisted_44$3 = { class: "flex items-center" };
const _hoisted_45$3 = /* @__PURE__ */ createBaseVNode("span", { class: "hidden cursor-pointer -ml-[9px] mr-[1px] rotate-90 group-hover:block text-black" }, ":::", -1);
const _hoisted_46$3 = ["value"];
const _hoisted_47$3 = ["onClick"];
const _hoisted_48$2 = ["onClick"];
const _hoisted_49$2 = ["onClick"];
const _hoisted_50$2 = ["onClick"];
const _hoisted_51$2 = ["onClick"];
const _hoisted_52$2 = ["onClick"];
const _hoisted_53$2 = { class: "min-w-max border-r border-b font-medium border-[#cbd5e9] p-1 w-44" };
const _hoisted_54$2 = { class: "flex justify-center" };
const _hoisted_55$2 = ["onClick"];
const _hoisted_56$1 = ["onClick"];
const _hoisted_57$1 = { class: "fixed intleft-2 right-0 top-0 bottom-0 w-full h-[100vh] z-50 overflow-hidden bg-gray-500 opacity-75 flex flex-col items-center justify-center" };
const _hoisted_58$1 = /* @__PURE__ */ createBaseVNode("h2", { class: "text-center text-white text-xl font-semibold" }, "Loading...", -1);
const _hoisted_59$1 = /* @__PURE__ */ createBaseVNode("p", { class: "w-1/3 text-center text-white" }, "Sedang Memuat Data", -1);
const _hoisted_60$1 = /* @__PURE__ */ createBaseVNode("p", { class: "w-1/3 text-center text-white" }, " Ini mungkin memakan waktu beberapa saat, tolong jangan tutup halaman ini. ", -1);
const _hoisted_61$2 = { class: "fixed right-0 bottom-0 z-[9999] bg-blue-600 px-10 flex h-10 w-full items-center justify-center" };
const _hoisted_62$2 = /* @__PURE__ */ createBaseVNode("div", { class: "w-1/12" }, [
  /* @__PURE__ */ createBaseVNode("label", {
    class: "block text-[15px] font-semibold text-left text-white uppercase",
    for: "KETERANGAN"
  }, " Keterangan ")
], -1);
const _hoisted_63$2 = { class: "w-11/12" };
const _hoisted_64$2 = { class: "font-medium text-base mr-auto" };
const _hoisted_65$2 = { key: 0 };
const _hoisted_66$2 = { key: 1 };
const _hoisted_67$2 = { key: 2 };
const _hoisted_68$2 = { key: 3 };
const _hoisted_69$2 = { class: "flex flex-col h-40 shadow-md rounded-t-lg -mt-4 border-x border-slate-300" };
const _hoisted_70$2 = { class: "flex-grow overflow-auto" };
const _hoisted_71$2 = {
  class: "relative w-full text-xs text-left text-gray-500",
  id: "table_input_jurnal"
};
const _hoisted_72$2 = /* @__PURE__ */ createBaseVNode("thead", { class: "text-xs font-bold text-gray-800 uppercase bg-blue-200 sticky top-0 z-10" }, [
  /* @__PURE__ */ createBaseVNode("tr", null, [
    /* @__PURE__ */ createBaseVNode("th", {
      scope: "col",
      class: "text-center uppercase border cursor-pointer hover:bg-blue-300 h-7"
    }, " Bukti "),
    /* @__PURE__ */ createBaseVNode("th", {
      scope: "col",
      class: "text-center uppercase border cursor-pointer hover:bg-blue-300 h-7"
    }, " Noper "),
    /* @__PURE__ */ createBaseVNode("th", {
      scope: "col",
      class: "text-center uppercase border cursor-pointer hover:bg-blue-300 h-7"
    }, " Keterangan "),
    /* @__PURE__ */ createBaseVNode("th", {
      scope: "col",
      class: "text-center uppercase border cursor-pointer hover:bg-blue-300 h-7"
    }, " Debet "),
    /* @__PURE__ */ createBaseVNode("th", {
      scope: "col",
      class: "text-center uppercase border cursor-pointer hover:bg-blue-300 h-7"
    }, " Kredit "),
    /* @__PURE__ */ createBaseVNode("th", {
      scope: "col",
      class: "text-center uppercase border"
    }, "Actions")
  ])
], -1);
const _hoisted_73$2 = { class: "overflow-y-scroll" };
const _hoisted_74$2 = ["onSubmit"];
const _hoisted_75$2 = { class: "grid grid-cols-3 p-3 bg-green-200" };
const _hoisted_76$2 = { class: "text-gray-700 flex items-center col" };
const _hoisted_77$2 = /* @__PURE__ */ createBaseVNode("div", { class: "mb-1 w-1/5 text-xs" }, [
  /* @__PURE__ */ createBaseVNode("label", null, "Status Balance")
], -1);
const _hoisted_78$2 = { class: "w-4/5 flex-grow" };
const _hoisted_79$2 = { class: "text-gray-700 flex items-center col-start-3" };
const _hoisted_80$2 = /* @__PURE__ */ createBaseVNode("div", { class: "mb-1 w-1/5 text-xs" }, [
  /* @__PURE__ */ createBaseVNode("label", null, "Balance")
], -1);
const _hoisted_81$2 = { class: "w-4/5 flex-grow" };
const _hoisted_82$2 = { class: "bg-slate-200 p-3 rounded-b" };
const _hoisted_83$2 = { class: "text-gray-700 flex items-center mx-auto w-1/3" };
const _hoisted_84$2 = /* @__PURE__ */ createBaseVNode("div", { class: "mb-1 w-2/5 text-xs" }, [
  /* @__PURE__ */ createBaseVNode("label", null, "Tanggal")
], -1);
const _hoisted_85$2 = /* @__PURE__ */ createBaseVNode("span", { class: "mr-3" }, ":", -1);
const _hoisted_86$2 = { class: "w-3/5 flex-grow" };
const _hoisted_87$2 = { class: "text-gray-700 flex items-center mx-auto w-1/3 mt-0" };
const _hoisted_88$2 = /* @__PURE__ */ createBaseVNode("div", { class: "mb-1 w-2/5 text-xs" }, [
  /* @__PURE__ */ createBaseVNode("label", null, "Bukti")
], -1);
const _hoisted_89$2 = /* @__PURE__ */ createBaseVNode("span", { class: "mr-3" }, ":", -1);
const _hoisted_90$2 = { class: "w-3/5 flex-grow" };
const _hoisted_91$2 = ["readonly"];
const _hoisted_92$2 = { class: "text-gray-700 flex items-center mx-auto w-1/3 mt-0" };
const _hoisted_93$2 = /* @__PURE__ */ createBaseVNode("div", { class: "mb-1 w-2/5 text-xs" }, [
  /* @__PURE__ */ createBaseVNode("label", null, "No. Perkiraan")
], -1);
const _hoisted_94$2 = /* @__PURE__ */ createBaseVNode("span", { class: "mr-3" }, ":", -1);
const _hoisted_95$2 = { class: "w-3/5 flex-grow" };
const _hoisted_96$2 = /* @__PURE__ */ createBaseVNode("option", {
  value: "noper",
  selected: "",
  disabled: ""
}, "Pilih Nomor Perkiraan", -1);
const _hoisted_97$2 = ["value"];
const _hoisted_98$2 = { class: "text-gray-700 flex items-center mx-auto w-1/3 mt-0" };
const _hoisted_99$2 = /* @__PURE__ */ createBaseVNode("div", { class: "mb-1 w-2/5 text-xs" }, [
  /* @__PURE__ */ createBaseVNode("label", null, "Keterangan Transaksi")
], -1);
const _hoisted_100$2 = /* @__PURE__ */ createBaseVNode("span", { class: "mr-3" }, ":", -1);
const _hoisted_101$2 = { class: "w-3/5 flex-grow" };
const _hoisted_102$2 = { class: "text-gray-700 flex items-center mx-auto w-1/3 mt-0" };
const _hoisted_103$2 = /* @__PURE__ */ createBaseVNode("div", { class: "mb-1 w-2/5 text-xs" }, [
  /* @__PURE__ */ createBaseVNode("label", null, "Debet")
], -1);
const _hoisted_104$2 = /* @__PURE__ */ createBaseVNode("span", { class: "mr-3" }, ":", -1);
const _hoisted_105$2 = { class: "w-3/5 flex-grow" };
const _hoisted_106$2 = { class: "text-gray-700 flex items-center mx-auto w-1/3 mt-0" };
const _hoisted_107$2 = /* @__PURE__ */ createBaseVNode("div", { class: "mb-1 w-2/5 text-xs" }, [
  /* @__PURE__ */ createBaseVNode("label", null, "Kredit")
], -1);
const _hoisted_108$2 = /* @__PURE__ */ createBaseVNode("span", { class: "mr-3" }, ":", -1);
const _hoisted_109$2 = { class: "w-3/5 flex-grow" };
const _hoisted_110$2 = { class: "flex w-1/3 mx-auto space-x-4" };
const _hoisted_111$2 = ["disabled"];
const _hoisted_112$2 = ["disabled"];
const _hoisted_113$2 = { class: "p-5 text-center" };
const _hoisted_114$2 = /* @__PURE__ */ createBaseVNode("div", { class: "text-3xl mt-5" }, "Apakah Anda Yakin ?", -1);
const _hoisted_115$2 = { class: "text-slate-500 mt-2" };
const _hoisted_116$2 = { key: 0 };
const _hoisted_117$1 = /* @__PURE__ */ createBaseVNode("br", null, null, -1);
const _hoisted_118$1 = /* @__PURE__ */ createBaseVNode("br", null, null, -1);
const _hoisted_119$1 = { class: "px-5 pb-8 text-center" };
const _sfc_main$4 = {
  __name: "JurnalTransaksi",
  setup(__props) {
    const swal = inject("$swal");
    const jurnalTransaksi = useJurnalTransaksiStore();
    const isLoading = ref(false);
    const isAdd = ref(false);
    const isEdit = ref(false);
    const isEditItem = ref(false);
    const isView = ref(false);
    const modal_utama = ref(false);
    const modal_delete = ref(false);
    const sort_by = ref("idtrans");
    const sort_mode = ref(true);
    const search_data = ref("");
    const search_type = ref("idtrans");
    const page_number = ref(1);
    const total_pages = ref(0);
    const row_per_page = ref(50);
    const allSelected = ref(false);
    const userIds = ref([]);
    const KETERANGAN = ref("");
    const Perkiraan_list = ref("");
    const idtrans = ref("");
    const idItem = ref("");
    const status_balance = ref("");
    const balance = ref(0);
    const tanggal = ref(hooks(Date.now()).format("YYYY-MM-DD"));
    const bukti = ref("");
    const noper = ref("noper");
    const Keterangan = ref("");
    const debet = ref(0);
    const kredit = ref(0);
    const addGet = () => {
      isAdd.value = true;
      modal_utama.value = true;
    };
    const deleteGet = (e) => {
      const jurnal = e;
      if (jurnal.idtrans) {
        userIds.value = [];
        userIds.value.push(jurnal.idtrans);
        modal_delete.value = true;
      } else {
        if (userIds.value.length > 0) {
          modal_delete.value = true;
        }
      }
    };
    const editGet = async (e) => {
      if (e !== "") {
        idtrans.value = e;
        const jurnal = await jurnalTransaksi.getItem(e);
        for (let i = 0; i < jurnal.length; i++) {
          balance.value = balance.value + jurnal[i].JUMLAH;
        }
        status_balance.value = balance.value == 0 ? "Balance" : "Tidak Balance";
        bukti.value = jurnal[0].BUKTI;
        isEdit.value = true;
        modal_utama.value = true;
      }
    };
    const deleteJurnal = async () => {
      if (userIds.value.length > 1) {
        for (let idTrans = 0; idTrans < userIds.value.length; idTrans++) {
          await jurnalTransaksi.removeItem(userIds.value[idTrans]);
        }
      } else {
        await jurnalTransaksi.removeItem(userIds.value[0]);
      }
      resetForm();
    };
    const simpan_data = async (e) => {
      resetForm();
    };
    const add_data = async (e) => {
      try {
        const data = await jurnalTransaksi.postItem(
          idItem.value,
          tanggal.value,
          bukti.value,
          noper.value,
          Keterangan.value,
          debet.value - kredit.value,
          isEditItem.value
        );
        if (data) {
          miniReset();
        }
      } catch (error) {
        swal({
          icon: "error",
          title: "Oops...",
          text: "ERROR ADD ITEM " + error
        });
      }
    };
    const update_data = async (e) => {
      const jurnal = e;
      isEditItem.value = true;
      idItem.value = jurnal.idtrans;
      tanggal.value = hooks(jurnal.TANGGAL).format("YYYY-MM-DD");
      bukti.value = jurnal.BUKTI;
      noper.value = jurnal.NOPER;
      Keterangan.value = jurnal.KETERANGAN;
      debet.value = jurnal.JUMLAH > 0 ? jurnal.JUMLAH : 0;
      kredit.value = jurnal.JUMLAH < 0 ? Math.abs(jurnal.JUMLAH) : 0;
    };
    const viewData = async (e) => {
      try {
        if (e != "") {
          const data = await jurnalTransaksi.readPerkiraan(e);
          KETERANGAN.value = data == void 0 ? "" : data;
        } else {
          KETERANGAN.value = "";
        }
      } catch (error) {
        swal({
          icon: "error",
          title: "Oops...",
          text: "ERROR VIEW DATA:  " + error
        });
      }
    };
    const resetForm = () => {
      if (modal_utama.value == false && isEdit.value == false && isView.value == false) {
        search_data.value = "";
        search_type.value = "nama";
        sort_by.value = "idtrans";
        sort_mode.value = true;
        page_number.value = 1;
        total_pages.value = 0;
        row_per_page.value = 50;
      }
      allSelected.value = false;
      userIds.value = [];
      KETERANGAN.value = "";
      modal_utama.value = false;
      modal_delete.value = false;
      isAdd.value = false;
      isEdit.value = false;
      isEditItem.value = false;
      isView.value = false;
      idtrans.value = "";
      idItem.value = "";
      status_balance.value = "";
      balance.value = 0;
      tanggal.value = hooks(Date.now()).format("YYYY-MM-DD");
      bukti.value = "";
      noper.value = "noper";
      Keterangan.value = "";
      debet.value = 0;
      kredit.value = 0;
      jurnalTransaksi.detailJurnal = [];
    };
    const miniReset = () => {
      tanggal.value = hooks(Date.now()).format("YYYY-MM-DD");
      if (jurnalTransaksi.jurnals.length > 0) {
        bukti.value = jurnalTransaksi.jurnals[0].BUKTI;
      } else {
        bukti.value = "";
      }
      noper.value = "noper";
      Keterangan.value = "";
      debet.value = 0;
      kredit.value = 0;
      idItem.value = "";
      isEditItem.value = false;
      balance.value = 0;
      const jurnal = jurnalTransaksi.jurnals;
      for (let i = 0; i < jurnal.length; i++) {
        balance.value = balance.value + jurnal[i].JUMLAH;
      }
      status_balance.value = balance.value == 0 ? "Balance" : "Tidak Balance";
    };
    const sorting = async (e) => {
      isLoading.value = true;
      sort_by.value = e;
      sort_mode.value = !sort_mode.value;
      try {
        await jurnalTransaksi.readItem(
          search_type.value,
          search_data.value,
          e,
          sort_mode.value,
          page_number.value,
          row_per_page.value
        );
        configureClass();
        isLoading.value = false;
      } catch (error) {
        isLoading.value = false;
        swal({
          icon: "error",
          title: "Oops...",
          text: "Gagal Sorting " + error
        });
      }
    };
    const firstPage = async () => {
      page_number.value = 1;
    };
    const previousPage = async () => {
      try {
        let page_no = parseInt(page_number.value);
        if (page_no > 1) {
          page_number.value = page_no - 1;
        }
      } catch (error) {
        isLoading.value = false;
        swal({
          icon: "error",
          title: "Oops...",
          text: "Gagal page sebelumnya " + error
        });
      }
    };
    const nextPage = () => {
      try {
        if (page_number.value == "") {
          page_number.value = 1;
        }
        let page_no = parseInt(page_number.value);
        if (page_no < total_pages.value) {
          page_number.value = page_no + 1;
        }
      } catch (error) {
        isLoading.value = false;
        swal({
          icon: "error",
          title: "Oops...",
          text: "Gagal page selanjutnya " + error
        });
      }
    };
    const lastPage = async () => {
      page_number.value = total_pages.value;
    };
    watch(page_number, async (e) => {
      try {
        isLoading.value = true;
        await jurnalTransaksi.readItem(
          search_type.value,
          search_data.value,
          sort_by.value,
          sort_mode.value,
          e,
          row_per_page.value
        );
        configureClass();
        isLoading.value = false;
      } catch (error) {
        isLoading.value = false;
        swal({
          icon: "error",
          title: "Oops...",
          text: "Gagal ganti page " + error
        });
        console.error(error);
      }
    });
    watch(row_per_page, async (e) => {
      try {
        isLoading.value = true;
        if (page_number.value > total_pages.value || page_number.value == "") {
          page_number.value = 1;
        }
        const data = await jurnalTransaksi.readItem(
          search_type.value,
          search_data.value,
          sort_by.value,
          sort_mode.value,
          page_number.value,
          e
        );
        total_pages.value = data;
        userIds.value = [];
        allSelected.value = false;
        if (page_number.value > total_pages.value) {
          page_number.value = 1;
        }
        configureClass();
        isLoading.value = false;
      } catch (error) {
        isLoading.value = false;
        swal({
          icon: "error",
          title: "Oops...",
          text: "Gagal ganti row/page " + error
        });
      }
    });
    watch(search_data, async (e) => {
      try {
        isLoading.value = true;
        const data = await jurnalTransaksi.readItem(
          search_type.value,
          e,
          sort_by.value,
          sort_mode.value,
          page_number.value,
          row_per_page.value
        );
        total_pages.value = data;
        configureClass();
        isLoading.value = false;
      } catch (error) {
        isLoading.value = false;
        swal({
          icon: "error",
          title: "Oops...",
          text: "Gagal search page " + error
        });
      }
    });
    watch(search_type, async (e) => {
      try {
        isLoading.value = true;
        const data = await jurnalTransaksi.readItem(
          e,
          search_data.value,
          sort_by.value,
          sort_mode.value,
          page_number.value,
          row_per_page.value
        );
        total_pages.value = data;
        configureClass();
        isLoading.value = false;
      } catch (error) {
        isLoading.value = false;
        swal({
          icon: "error",
          title: "Oops...",
          text: "Gagal search page " + error
        });
      }
    });
    watch(noper, async (e) => {
      if (Keterangan.value == "") {
        Perkiraan_list.value.map((item) => {
          if (item.noper == e) {
            Keterangan.value = item.nama;
          }
        });
      }
    });
    const selectAll = (e) => {
      userIds.value = [];
      if (!allSelected.value || e) {
        for (let jurnal = 0; jurnal < jurnalTransaksi.items.length; jurnal++) {
          userIds.value.push(jurnalTransaksi.items[jurnal].idtrans);
        }
      }
    };
    const selectOne = () => {
      allSelected.value = false;
    };
    const configureClass = () => {
      if (jurnalTransaksi.items[0]) {
        let prevValue = jurnalTransaksi.items[0].BUKTI;
        let currentClass = "bg-white";
        for (let i = 0; i < jurnalTransaksi.items.length; i++) {
          let value = jurnalTransaksi.items[i].BUKTI;
          if (prevValue !== value) {
            currentClass == "bg-white" ? currentClass = "bg-slate-200" : currentClass = "bg-white";
          }
          document.querySelector("#table_jurnal_transaksi tbody").children[i].className = "";
          document.querySelector("#table_jurnal_transaksi tbody").children[i].classList.add(
            currentClass,
            "hover:bg-lime-300",
            "hover:text-slate-700",
            "drop-shadow-2xl",
            "group"
          );
          prevValue = value;
        }
      }
    };
    onBeforeMount(async () => {
      try {
        isLoading.value = true;
        const data = await jurnalTransaksi.readItem(
          search_type.value,
          search_data.value,
          sort_by.value,
          sort_mode.value,
          page_number.value,
          row_per_page.value
        );
        Perkiraan_list.value = data.perkiraan;
        total_pages.value = data.total_pages;
        configureClass();
        isLoading.value = false;
      } catch (error) {
        isLoading.value = false;
        swal({
          icon: "error",
          title: "Oops...",
          text: "ERROR MOUNTED " + error
        });
      }
    });
    return (_ctx, _cache) => {
      const _component_PlusIcon = resolveComponent("PlusIcon");
      const _component_Trash2Icon = resolveComponent("Trash2Icon");
      const _component_ShareIcon = resolveComponent("ShareIcon");
      const _component_PrinterIcon = resolveComponent("PrinterIcon");
      const _component_CheckIcon = resolveComponent("CheckIcon");
      const _component_XIcon = resolveComponent("XIcon");
      const _component_RefreshCwIcon = resolveComponent("RefreshCwIcon");
      const _component_SkipBackIcon = resolveComponent("SkipBackIcon");
      const _component_RewindIcon = resolveComponent("RewindIcon");
      const _component_FastForwardIcon = resolveComponent("FastForwardIcon");
      const _component_SkipForwardIcon = resolveComponent("SkipForwardIcon");
      const _component_DeleteIcon = resolveComponent("DeleteIcon");
      const _component_SortAscIcon = resolveComponent("SortAscIcon");
      const _component_SortDescIcon = resolveComponent("SortDescIcon");
      const _component_CheckSquareIcon = resolveComponent("CheckSquareIcon");
      const _component_Loader2Icon = resolveComponent("Loader2Icon");
      const _component_ModalHeader = resolveComponent("ModalHeader");
      const _component_ModalBody = resolveComponent("ModalBody");
      const _component_ModalFooter = resolveComponent("ModalFooter");
      const _component_Modal = resolveComponent("Modal");
      const _component_XCircleIcon = resolveComponent("XCircleIcon");
      return openBlock(), createElementBlock(Fragment, null, [
        createVNode(_sfc_main$9, {
          title: "Transaksi",
          subTitle: "Akuntansi",
          icon: unref(TRANSAKSI)
        }, null, 8, ["icon"]),
        createBaseVNode("div", _hoisted_1$3, [
          createBaseVNode("div", _hoisted_2$3, [
            createBaseVNode("div", _hoisted_3$3, [
              createBaseVNode("button", {
                class: "inline-block align-middle text-center select-none border font-normal whitespace-no-wrap rounded no-underline h-9 mx-auto px-2 leading-tight text-xs bg-gray-100 text-gray-800 hover:text-blue-700 hover:bg-gray-200 btn-light-bordered",
                onClick: addGet,
                id: "delete-multiple-data",
                "data-bs-toggle": "tooltip",
                title: "Tambah Data"
              }, [
                createVNode(_component_PlusIcon, { class: "w-4 h-4 mx-auto my-[5px] stroke-2 stroke-current" })
              ]),
              createBaseVNode("button", {
                class: "inline-block align-middle hover:text-danger text-center select-none border font-normal whitespace-no-wrap rounded no-underline h-9 mx-auto px-2 leading-tight text-xs bg-gray-100 text-gray-800 hover:bg-gray-200 btn-light-bordered",
                onClick: deleteGet,
                id: "delete-multiple-data",
                "data-bs-toggle": "tooltip",
                title: "Hapus Data"
              }, [
                createVNode(_component_Trash2Icon, { class: "w-4 h-4 mx-auto my-[5px] stroke-2 stroke-current" })
              ]),
              createBaseVNode("button", _hoisted_4$3, [
                createVNode(_component_ShareIcon, { class: "w-3 h-3 mx-auto stroke-2 stroke-current" }),
                _hoisted_5$3
              ]),
              createBaseVNode("button", _hoisted_6$3, [
                createVNode(_component_ShareIcon, { class: "w-3 h-3 mx-auto stroke-2 stroke-current" }),
                _hoisted_7$3
              ]),
              createBaseVNode("button", _hoisted_8$3, [
                createVNode(_component_PrinterIcon, { class: "w-4 h-4 mx-auto my-[5px] stroke-2 stroke-current" })
              ]),
              createBaseVNode("button", {
                class: "inline-block hover:text-success align-middle text-center select-none border font-normal whitespace-no-wrap rounded no-underline h-9 mx-auto px-2 leading-tight text-xs bg-gray-100 text-gray-800 hover:bg-gray-200 btn-light-bordered",
                onClick: _cache[0] || (_cache[0] = ($event) => (selectAll(true), allSelected.value = true)),
                id: "select-all",
                title: "Select All"
              }, [
                createVNode(_component_CheckIcon, { class: "w-4 h-4 mx-auto my-[5px] stroke-2 stroke-current" }),
                _hoisted_9$3
              ]),
              createBaseVNode("button", {
                class: "inline-block align-middle hover:text-danger text-center select-none border font-normal whitespace-no-wrap rounded no-underline h-9 mx-auto px-2 leading-tight text-xs bg-gray-100 text-gray-800 hover:bg-gray-200 btn-light-bordered",
                onClick: _cache[1] || (_cache[1] = ($event) => {
                  userIds.value = [], allSelected.value = false;
                }),
                id: "unselect-all",
                title: "Unselect All"
              }, [
                createVNode(_component_XIcon, { class: "w-4 h-4 mx-auto my-[5px] stroke-2 stroke-current" })
              ]),
              createBaseVNode("a", _hoisted_10$3, [
                createVNode(_component_RefreshCwIcon, { class: "w-4 h-4 mx-auto my-[9px] stroke-2 stroke-current" })
              ])
            ]),
            createBaseVNode("div", _hoisted_11$3, [
              createBaseVNode("div", _hoisted_12$3, [
                createBaseVNode("div", _hoisted_13$3, [
                  createBaseVNode("div", _hoisted_14$3, [
                    createBaseVNode("a", {
                      href: "javascript:void(0);",
                      class: "inline-block align-middle text-center rounded-l-lg select-none border font-normal whitespace-no-wrap h-9 -mt-1 py-1 px-3 leading-normal no-underline bg-gray-100 text-gray-800 hover:bg-gray-200 btn-light-bordered",
                      id: "first-page",
                      title: "first page",
                      onClick: _cache[2] || (_cache[2] = ($event) => firstPage())
                    }, [
                      createVNode(_component_SkipBackIcon, { class: "w-4 h-4 mx-auto my-[5px]" })
                    ]),
                    createBaseVNode("a", {
                      href: "javascript:void(0);",
                      class: "inline-block align-middle text-center select-none border font-normal whitespace-no-wrap h-9 -mt-1 py-1 px-3 leading-normal no-underline bg-gray-100 text-gray-800 hover:bg-gray-200 btn-light-bordered",
                      id: "previous-page",
                      title: "previous page",
                      onClick: _cache[3] || (_cache[3] = ($event) => previousPage())
                    }, [
                      createVNode(_component_RewindIcon, { class: "w-4 h-4 mx-auto my-[5px]" })
                    ])
                  ]),
                  createBaseVNode("div", _hoisted_15$3, [
                    withDirectives(createBaseVNode("input", {
                      type: "number",
                      class: "block appearance-none w-full mb-1 px-2 bg-white text-gray-800 border-y border-r border-gray-400 text-xs leading-normal",
                      "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => page_number.value = $event)
                    }, null, 512), [
                      [vModelText, page_number.value]
                    ]),
                    withDirectives(createBaseVNode("input", {
                      type: "number",
                      class: "block appearance-none w-full px-2 mb-1 bg-gray-200 text-gray-800 border-y border-gray-400 text-xs leading-normal",
                      "onUpdate:modelValue": _cache[5] || (_cache[5] = ($event) => total_pages.value = $event),
                      disabled: ""
                    }, null, 512), [
                      [vModelText, total_pages.value]
                    ])
                  ]),
                  createBaseVNode("div", _hoisted_16$3, [
                    createBaseVNode("a", {
                      href: "javascript:void(0);",
                      class: "inline-block align-middle text-center select-none border font-normal whitespace-no-wrap h-9 -mt-1 py-1 px-3 leading-normal no-underline bg-gray-100 text-gray-800 hover:bg-gray-200 btn-light-bordered",
                      id: "next-page",
                      title: "next page",
                      onClick: _cache[6] || (_cache[6] = ($event) => nextPage())
                    }, [
                      createVNode(_component_FastForwardIcon, { class: "w-4 h-4 mx-auto my-[5px]" })
                    ]),
                    createBaseVNode("a", {
                      href: "javascript:void(0);",
                      class: "inline-block align-middle text-center select-none border font-normal whitespace-no-wrap h-9 -mt-1 rounded-r-lg py-1 px-3 leading-normal no-underline bg-gray-100 text-gray-800 hover:bg-gray-200 btn-light-bordered",
                      id: "last-page",
                      title: "last page",
                      onClick: _cache[7] || (_cache[7] = ($event) => lastPage())
                    }, [
                      createVNode(_component_SkipForwardIcon, { class: "w-4 h-4 mx-auto my-[5px]" })
                    ])
                  ])
                ])
              ])
            ]),
            createBaseVNode("div", _hoisted_17$3, [
              withDirectives(createBaseVNode("select", {
                name: "row_per_page",
                "onUpdate:modelValue": _cache[8] || (_cache[8] = ($event) => row_per_page.value = $event),
                class: "bg-gray-50 border border-gray-300 text-gray-900 pl-1 mr-2 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block -mt-1 w-[70px] h-9"
              }, _hoisted_21$3, 512), [
                [vModelSelect, row_per_page.value]
              ]),
              createBaseVNode("div", _hoisted_22$2, [
                withDirectives(createBaseVNode("input", {
                  type: "text",
                  class: "block appearance-none border-y border-l rounded-l-lg w-full mb-1 bg-white text-gray-800 border-gray-300 px-2 text-xs leading-normal h-9",
                  "onUpdate:modelValue": _cache[9] || (_cache[9] = ($event) => search_data.value = $event),
                  placeholder: "Cari " + search_type.value + " " + _ctx.$route.name.replace(/-/gi, " "),
                  name: "search-data"
                }, null, 8, _hoisted_23$2), [
                  [vModelText, search_data.value]
                ]),
                createBaseVNode("div", _hoisted_24$3, [
                  search_data.value !== "" ? (openBlock(), createElementBlock("button", {
                    key: 0,
                    class: "inline align-middle text-center select-none border-y border-[#d0d3d4] w-10 font-normal whitespace-no-wrap no-underline h-9 mx-auto px-2 leading-tight text-xs",
                    id: "clear-btn",
                    onClick: _cache[10] || (_cache[10] = ($event) => search_data.value = "")
                  }, [
                    createVNode(_component_DeleteIcon, { class: "w-5 h-5 stroke-2 text-danger mx-auto my-[5px]" })
                  ])) : createCommentVNode("", true)
                ]),
                createBaseVNode("div", _hoisted_25$3, [
                  withDirectives(createBaseVNode("select", {
                    name: "search_type",
                    "onUpdate:modelValue": _cache[11] || (_cache[11] = ($event) => search_type.value = $event),
                    class: "inline align-middle text-center select-none border w-14 font-normal whitespace-no-wrap rounded-r-lg no-underline h-9 mx-auto px-0 leading-tight text-xs bg-gray-100 text-gray-800 hover:bg-gray-200 btn-light-bordered"
                  }, _hoisted_32$3, 512), [
                    [vModelSelect, search_type.value]
                  ])
                ])
              ])
            ])
          ])
        ]),
        createBaseVNode("div", _hoisted_33$3, [
          createBaseVNode("div", _hoisted_34$3, [
            createBaseVNode("table", _hoisted_35$3, [
              createBaseVNode("thead", _hoisted_36$3, [
                createBaseVNode("tr", null, [
                  createBaseVNode("th", _hoisted_37$3, [
                    createBaseVNode("div", _hoisted_38$3, [
                      withDirectives(createBaseVNode("input", {
                        id: "checkbox-all-search",
                        "onUpdate:modelValue": _cache[12] || (_cache[12] = ($event) => allSelected.value = $event),
                        onClick: _cache[13] || (_cache[13] = ($event) => selectAll(false)),
                        type: "checkbox",
                        class: "w-4 h-4 text-blue-600 bg-gray-100 border-blue-200 rounded focus:ring-blue-500 focus:ring-2"
                      }, null, 512), [
                        [vModelCheckbox, allSelected.value]
                      ]),
                      _hoisted_39$3
                    ])
                  ]),
                  createBaseVNode("th", {
                    scope: "col",
                    class: "text-center uppercase border cursor-pointer hover:bg-blue-300",
                    onClick: _cache[14] || (_cache[14] = ($event) => sorting("idtrans"))
                  }, [
                    createTextVNode(" ID "),
                    sort_by.value === "idtrans" && sort_mode.value ? (openBlock(), createBlock(_component_SortAscIcon, {
                      key: 0,
                      class: "inline ml-2 -pr-3 mr-1 w-5 h-4"
                    })) : createCommentVNode("", true),
                    sort_by.value === "idtrans" && !sort_mode.value ? (openBlock(), createBlock(_component_SortDescIcon, {
                      key: 1,
                      class: "inline ml-2 -mr-2 w-5 h-4"
                    })) : createCommentVNode("", true)
                  ]),
                  createBaseVNode("th", {
                    scope: "col",
                    class: "text-center uppercase border cursor-pointer hover:bg-blue-300",
                    onClick: _cache[15] || (_cache[15] = ($event) => sorting("TANGGAL"))
                  }, [
                    createTextVNode(" Tanggal "),
                    sort_by.value === "TANGGAL" && sort_mode.value ? (openBlock(), createBlock(_component_SortAscIcon, {
                      key: 0,
                      class: "inline ml-2 -pr-3 mr-1 w-5 h-4"
                    })) : createCommentVNode("", true),
                    sort_by.value === "TANGGAL" && !sort_mode.value ? (openBlock(), createBlock(_component_SortDescIcon, {
                      key: 1,
                      class: "inline ml-2 -mr-2 w-5 h-4"
                    })) : createCommentVNode("", true)
                  ]),
                  createBaseVNode("th", {
                    scope: "col",
                    class: "text-center uppercase border cursor-pointer hover:bg-blue-300",
                    onClick: _cache[16] || (_cache[16] = ($event) => sorting("BUKTI"))
                  }, [
                    createTextVNode(" Bukti "),
                    sort_by.value === "BUKTI" && sort_mode.value ? (openBlock(), createBlock(_component_SortAscIcon, {
                      key: 0,
                      class: "inline ml-2 -pr-3 mr-1 w-5 h-4"
                    })) : createCommentVNode("", true),
                    sort_by.value === "BUKTI" && !sort_mode.value ? (openBlock(), createBlock(_component_SortDescIcon, {
                      key: 1,
                      class: "inline ml-2 -mr-2 w-5 h-4"
                    })) : createCommentVNode("", true)
                  ]),
                  createBaseVNode("th", {
                    scope: "col",
                    class: "text-center uppercase border cursor-pointer hover:bg-blue-300",
                    onClick: _cache[17] || (_cache[17] = ($event) => sorting("NOPER"))
                  }, [
                    createTextVNode(" Noper "),
                    sort_by.value === "NOPER" && sort_mode.value ? (openBlock(), createBlock(_component_SortAscIcon, {
                      key: 0,
                      class: "inline ml-2 -pr-3 mr-1 w-5 h-4"
                    })) : createCommentVNode("", true),
                    sort_by.value === "NOPER" && !sort_mode.value ? (openBlock(), createBlock(_component_SortDescIcon, {
                      key: 1,
                      class: "inline ml-2 -mr-2 w-5 h-4"
                    })) : createCommentVNode("", true)
                  ]),
                  createBaseVNode("th", {
                    scope: "col",
                    class: "text-center uppercase border cursor-pointer hover:bg-blue-300",
                    onClick: _cache[18] || (_cache[18] = ($event) => sorting("KETERANGAN"))
                  }, [
                    createTextVNode(" Keterangan "),
                    sort_by.value === "KETERANGAN" && sort_mode.value ? (openBlock(), createBlock(_component_SortAscIcon, {
                      key: 0,
                      class: "inline ml-2 -pr-3 mr-1 w-5 h-4"
                    })) : createCommentVNode("", true),
                    sort_by.value === "KETERANGAN" && !sort_mode.value ? (openBlock(), createBlock(_component_SortDescIcon, {
                      key: 1,
                      class: "inline ml-2 -mr-2 w-5 h-4"
                    })) : createCommentVNode("", true)
                  ]),
                  createBaseVNode("th", {
                    scope: "col",
                    class: "text-center uppercase border cursor-pointer hover:bg-blue-300",
                    onClick: _cache[19] || (_cache[19] = ($event) => sorting("JUMLAH"))
                  }, [
                    createTextVNode(" Jumlah "),
                    sort_by.value === "JUMLAH" && sort_mode.value ? (openBlock(), createBlock(_component_SortAscIcon, {
                      key: 0,
                      class: "inline ml-2 -pr-3 mr-1 w-5 h-4"
                    })) : createCommentVNode("", true),
                    sort_by.value === "JUMLAH" && !sort_mode.value ? (openBlock(), createBlock(_component_SortDescIcon, {
                      key: 1,
                      class: "inline ml-2 -mr-2 w-5 h-4"
                    })) : createCommentVNode("", true)
                  ]),
                  _hoisted_40$3
                ])
              ]),
              withDirectives(createBaseVNode("tbody", _hoisted_41$3, [
                (openBlock(true), createElementBlock(Fragment, null, renderList(unref(jurnalTransaksi).items, (jurnal, index2) => {
                  return openBlock(), createElementBlock("tr", {
                    key: index2,
                    jurnal
                  }, [
                    createBaseVNode("td", _hoisted_43$3, [
                      createBaseVNode("div", _hoisted_44$3, [
                        _hoisted_45$3,
                        withDirectives(createBaseVNode("input", {
                          value: jurnal.idtrans,
                          type: "checkbox",
                          "onUpdate:modelValue": _cache[20] || (_cache[20] = ($event) => userIds.value = $event),
                          onClick: selectOne,
                          class: "data-checkbox w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded-lg focus:ring-blue-500 focus:ring-2"
                        }, null, 8, _hoisted_46$3), [
                          [vModelCheckbox, userIds.value]
                        ])
                      ])
                    ]),
                    createBaseVNode("th", {
                      onClick: ($event) => viewData(jurnal.NOPER),
                      scope: "row",
                      class: "border-r border-b font-medium border-[#cbd5e9] whitespace-nowrap pl-2 w-20"
                    }, toDisplayString(jurnal.idtrans), 9, _hoisted_47$3),
                    createBaseVNode("td", {
                      onClick: ($event) => viewData(jurnal.NOPER),
                      class: "min-w-max text-center border-r border-b font-medium border-[#cbd5e9] px-2 w-28"
                    }, toDisplayString(unref(hooks)(jurnal.TANGGAL).format("DD-MM-YYYY")), 9, _hoisted_48$2),
                    createBaseVNode("td", {
                      onClick: ($event) => viewData(jurnal.NOPER),
                      class: "min-w-max text-left border-r border-b font-medium border-[#cbd5e9] px-2 w-20"
                    }, toDisplayString(jurnal.BUKTI), 9, _hoisted_49$2),
                    createBaseVNode("td", {
                      onClick: ($event) => viewData(jurnal.NOPER),
                      class: "min-w-max text-left border-r border-b font-medium border-[#cbd5e9] px-2 w-20"
                    }, toDisplayString(jurnal.NOPER), 9, _hoisted_50$2),
                    createBaseVNode("td", {
                      onClick: ($event) => viewData(jurnal.NOPER),
                      class: "min-w-max text-left border-r border-b font-medium border-[#cbd5e9] px-2 w-max"
                    }, toDisplayString(jurnal.KETERANGAN), 9, _hoisted_51$2),
                    createBaseVNode("td", {
                      onClick: ($event) => viewData(jurnal.NOPER),
                      class: "min-w-max text-right border-r border-b font-medium border-[#cbd5e9] px-2 w-max"
                    }, toDisplayString(unref(currencyFormatter).format(jurnal.JUMLAH)), 9, _hoisted_52$2),
                    createBaseVNode("td", _hoisted_53$2, [
                      createBaseVNode("div", _hoisted_54$2, [
                        createBaseVNode("a", {
                          onClick: ($event) => editGet(jurnal.BUKTI),
                          class: "flex items-center mr-4 hover:text-blue-700 text-sky-600",
                          href: "javascript:;"
                        }, [
                          createVNode(_component_CheckSquareIcon, { class: "w-3 h-3 mr-1" }),
                          createTextVNode(" Edit ")
                        ], 8, _hoisted_55$2),
                        createBaseVNode("a", {
                          onClick: ($event) => deleteGet(jurnal),
                          class: "flex items-center hover:text-red-800 text-danger",
                          href: "javascript:;"
                        }, [
                          createVNode(_component_Trash2Icon, { class: "w-3 h-3 mr-1" }),
                          createTextVNode(" Hapus ")
                        ], 8, _hoisted_56$1)
                      ])
                    ])
                  ], 8, _hoisted_42$3);
                }), 128))
              ], 512), [
                [vShow, !isLoading.value]
              ]),
              withDirectives(createBaseVNode("tbody", null, [
                createBaseVNode("div", _hoisted_57$1, [
                  createVNode(_component_Loader2Icon, { class: "motion-safe:animate-spin stroke-[5px] text-white h-12 w-12 mb-2" }),
                  _hoisted_58$1,
                  _hoisted_59$1,
                  _hoisted_60$1
                ])
              ], 512), [
                [vShow, isLoading.value]
              ])
            ])
          ])
        ]),
        createBaseVNode("div", _hoisted_61$2, [
          _hoisted_62$2,
          createBaseVNode("div", _hoisted_63$2, [
            withDirectives(createBaseVNode("input", {
              "onUpdate:modelValue": _cache[21] || (_cache[21] = ($event) => KETERANGAN.value = $event),
              name: "KETERANGAN",
              type: "text",
              placeholder: "",
              disabled: "",
              class: "w-full pl-3 text-left bg-white text-black rounded-md"
            }, null, 512), [
              [vModelText, KETERANGAN.value]
            ])
          ])
        ]),
        createVNode(_component_Modal, {
          backdrop: "static",
          size: "modal-xl",
          show: modal_utama.value,
          onHidden: _cache[30] || (_cache[30] = ($event) => modal_utama.value = false)
        }, {
          default: withCtx(() => [
            createVNode(_component_ModalHeader, null, {
              default: withCtx(() => [
                createBaseVNode("h2", _hoisted_64$2, [
                  isAdd.value ? (openBlock(), createElementBlock("span", _hoisted_65$2, "Tambah ")) : createCommentVNode("", true),
                  isEdit.value ? (openBlock(), createElementBlock("span", _hoisted_66$2, "Edit ")) : createCommentVNode("", true),
                  isView.value ? (openBlock(), createElementBlock("span", _hoisted_67$2, "Data ")) : createCommentVNode("", true),
                  createTextVNode(" Jurnal "),
                  isEdit.value || isView.value ? (openBlock(), createElementBlock("span", _hoisted_68$2, toDisplayString(idtrans.value), 1)) : createCommentVNode("", true)
                ]),
                createBaseVNode("a", {
                  "data-tw-dismiss": "modal",
                  onClick: resetForm,
                  href: "javascript:;",
                  class: "border bg-danger rounded-lg hover:bg-red-700 -my-5 -mr-3"
                }, [
                  createVNode(_component_XIcon, { class: "lucide lucide-x w-7 h-7 text-white hover:text-slate-100" })
                ])
              ]),
              _: 1
            }),
            createVNode(_component_ModalBody, null, {
              default: withCtx(() => [
                createBaseVNode("div", _hoisted_69$2, [
                  createBaseVNode("div", _hoisted_70$2, [
                    createBaseVNode("table", _hoisted_71$2, [
                      _hoisted_72$2,
                      withDirectives(createBaseVNode("tbody", _hoisted_73$2, [
                        (openBlock(true), createElementBlock(Fragment, null, renderList(unref(jurnalTransaksi).jurnals, (jurnal, index2) => {
                          return openBlock(), createBlock(_sfc_main$5, {
                            key: index2,
                            jurnal,
                            onUpdateData: update_data
                          }, null, 8, ["jurnal"]);
                        }), 128))
                      ], 512), [
                        [vShow, !isLoading.value]
                      ])
                    ])
                  ])
                ]),
                createBaseVNode("form", {
                  onSubmit: withModifiers(add_data, ["prevent"]),
                  method: "post"
                }, [
                  createBaseVNode("div", _hoisted_75$2, [
                    createBaseVNode("div", _hoisted_76$2, [
                      _hoisted_77$2,
                      createBaseVNode("div", _hoisted_78$2, [
                        withDirectives(createBaseVNode("input", {
                          class: "w-full h-10 px-3 text-xs text-center placeholder-gray-400 border rounded focus:shadow-outline",
                          type: "text",
                          placeholder: "Status Balance",
                          "onUpdate:modelValue": _cache[22] || (_cache[22] = ($event) => status_balance.value = $event),
                          readonly: ""
                        }, null, 512), [
                          [vModelText, status_balance.value]
                        ])
                      ])
                    ]),
                    createBaseVNode("div", _hoisted_79$2, [
                      _hoisted_80$2,
                      createBaseVNode("div", _hoisted_81$2, [
                        withDirectives(createBaseVNode("input", {
                          class: "w-full h-10 px-3 text-xs placeholder-gray-400 border rounded focus:shadow-outline",
                          type: "number",
                          placeholder: "0",
                          "onUpdate:modelValue": _cache[23] || (_cache[23] = ($event) => balance.value = $event),
                          readonly: ""
                        }, null, 512), [
                          [vModelText, balance.value]
                        ])
                      ])
                    ])
                  ]),
                  createBaseVNode("div", _hoisted_82$2, [
                    createBaseVNode("div", _hoisted_83$2, [
                      _hoisted_84$2,
                      _hoisted_85$2,
                      createBaseVNode("div", _hoisted_86$2, [
                        withDirectives(createBaseVNode("input", {
                          class: "w-full h-10 mb-1 px-3 text-xs border rounded focus:shadow-outline",
                          type: "date",
                          "onUpdate:modelValue": _cache[24] || (_cache[24] = ($event) => tanggal.value = $event),
                          readonly: "",
                          required: ""
                        }, null, 512), [
                          [vModelText, tanggal.value]
                        ])
                      ])
                    ]),
                    createBaseVNode("div", _hoisted_87$2, [
                      _hoisted_88$2,
                      _hoisted_89$2,
                      createBaseVNode("div", _hoisted_90$2, [
                        withDirectives(createBaseVNode("input", {
                          class: "w-full h-10 mb-1 px-3 text-xs border rounded focus:shadow-outline",
                          type: "text",
                          "onUpdate:modelValue": _cache[25] || (_cache[25] = ($event) => bukti.value = $event),
                          readonly: unref(jurnalTransaksi).jurnals.length > 0,
                          required: ""
                        }, null, 8, _hoisted_91$2), [
                          [vModelText, bukti.value]
                        ])
                      ])
                    ]),
                    createBaseVNode("div", _hoisted_92$2, [
                      _hoisted_93$2,
                      _hoisted_94$2,
                      createBaseVNode("div", _hoisted_95$2, [
                        withDirectives(createBaseVNode("select", {
                          "onUpdate:modelValue": _cache[26] || (_cache[26] = ($event) => noper.value = $event),
                          name: "perkiraan_list",
                          id: "perkiraan_list",
                          class: "w-full h-10 mb-1 px-3 text-xs border rounded focus:shadow-outline",
                          required: ""
                        }, [
                          _hoisted_96$2,
                          (openBlock(true), createElementBlock(Fragment, null, renderList(Perkiraan_list.value, (perkiraan) => {
                            return openBlock(), createElementBlock("option", {
                              value: perkiraan.noper
                            }, toDisplayString(perkiraan.noper) + " - " + toDisplayString(perkiraan.nama), 9, _hoisted_97$2);
                          }), 256))
                        ], 512), [
                          [vModelSelect, noper.value]
                        ])
                      ])
                    ]),
                    createBaseVNode("div", _hoisted_98$2, [
                      _hoisted_99$2,
                      _hoisted_100$2,
                      createBaseVNode("div", _hoisted_101$2, [
                        withDirectives(createBaseVNode("textarea", {
                          class: "w-full h-12 -mb-[3px] p-3 text-xs border rounded focus:shadow-outline",
                          type: "text",
                          "onUpdate:modelValue": _cache[27] || (_cache[27] = ($event) => Keterangan.value = $event),
                          required: ""
                        }, null, 512), [
                          [vModelText, Keterangan.value]
                        ])
                      ])
                    ]),
                    createBaseVNode("div", _hoisted_102$2, [
                      _hoisted_103$2,
                      _hoisted_104$2,
                      createBaseVNode("div", _hoisted_105$2, [
                        withDirectives(createBaseVNode("input", {
                          class: "w-full h-10 mb-1 px-3 text-xs border rounded focus:shadow-outline",
                          type: "number",
                          "onUpdate:modelValue": _cache[28] || (_cache[28] = ($event) => debet.value = $event)
                        }, null, 512), [
                          [vModelText, debet.value]
                        ])
                      ])
                    ]),
                    createBaseVNode("div", _hoisted_106$2, [
                      _hoisted_107$2,
                      _hoisted_108$2,
                      createBaseVNode("div", _hoisted_109$2, [
                        withDirectives(createBaseVNode("input", {
                          class: "w-full h-10 mb-1 px-3 text-xs border rounded focus:shadow-outline",
                          type: "number",
                          "onUpdate:modelValue": _cache[29] || (_cache[29] = ($event) => kredit.value = $event)
                        }, null, 512), [
                          [vModelText, kredit.value]
                        ])
                      ])
                    ]),
                    createBaseVNode("div", _hoisted_110$2, [
                      createBaseVNode("a", {
                        href: "javascript:;",
                        onClick: miniReset,
                        class: "btn items-center flex mx-auto btn-danger text-xs w-3/12 mt-3"
                      }, [
                        createVNode(_component_XIcon, { class: "w-4 h-4 mr-1" }),
                        createTextVNode(" Reset ")
                      ]),
                      createBaseVNode("button", {
                        disabled: debet.value - kredit.value == 0,
                        type: "submit",
                        class: "btn items-center flex mx-auto btn-primary text-xs w-9/12 mt-3"
                      }, [
                        createVNode(_component_PlusIcon, { class: "w-4 h-4 mr-1" }),
                        createTextVNode(" Tambah ")
                      ], 8, _hoisted_111$2)
                    ])
                  ])
                ], 40, _hoisted_74$2)
              ]),
              _: 1
            }),
            createVNode(_component_ModalFooter, { class: "text-right" }, {
              default: withCtx(() => [
                createBaseVNode("button", {
                  type: "button",
                  class: "btn btn-outline-secondary w-32 text-xs mr-1",
                  onClick: resetForm
                }, " Cancel "),
                createBaseVNode("button", {
                  disabled: status_balance.value == "Tidak Balance" && balance.value != 0 || unref(jurnalTransaksi).jurnals.length == 0,
                  class: "btn btn-primary text-xs w-32",
                  onClick: simpan_data
                }, " Simpan ", 8, _hoisted_112$2)
              ]),
              _: 1
            })
          ]),
          _: 1
        }, 8, ["show"]),
        createVNode(_component_Modal, {
          backdrop: "static",
          show: modal_delete.value,
          onHidden: _cache[32] || (_cache[32] = ($event) => modal_delete.value = false)
        }, {
          default: withCtx(() => [
            createVNode(_component_ModalBody, { class: "p-0" }, {
              default: withCtx(() => [
                createBaseVNode("div", _hoisted_113$2, [
                  createVNode(_component_XCircleIcon, { class: "w-16 h-16 text-danger mx-auto mt-3" }),
                  _hoisted_114$2,
                  createBaseVNode("div", _hoisted_115$2, [
                    createTextVNode(" Ingin menghapus "),
                    userIds.value.length > 1 ? (openBlock(), createElementBlock("span", _hoisted_116$2, "Beberapa")) : createCommentVNode("", true),
                    createTextVNode(" data dengan ID "),
                    _hoisted_117$1,
                    createBaseVNode("b", null, toDisplayString(userIds.value.length > 1 ? userIds.value : userIds.value[0]), 1),
                    createTextVNode(" ? "),
                    _hoisted_118$1,
                    createTextVNode("Data yang telah dihapus tidak bisa kembali. ")
                  ])
                ]),
                createBaseVNode("div", _hoisted_119$1, [
                  createBaseVNode("button", {
                    type: "button",
                    onClick: resetForm,
                    class: "btn btn-outline-secondary w-24 mr-1 text-xs"
                  }, " Batal "),
                  createBaseVNode("button", {
                    type: "button",
                    class: "btn btn-danger w-24 text-xs",
                    onClick: _cache[31] || (_cache[31] = (e) => {
                      e.preventDefault();
                      deleteJurnal();
                    })
                  }, " Hapus ")
                ])
              ]),
              _: 1
            })
          ]),
          _: 1
        }, 8, ["show"])
      ], 64);
    };
  }
};
const request$1 = window.api.perkiraanAkuntansi;
const usePerkiraanAkuntansiStore = defineStore({
  id: "perkiraan-akuntansi",
  state: () => ({
    rawItems: [],
    detailPerkiraan: []
  }),
  getters: {
    items: (state) => state.rawItems,
    perkiraans: (state) => state.detailPerkiraan
  },
  actions: {
    async readItem(search_type, search_data, sort_by, sort_mode, page_number, total_row_displayed) {
      try {
        const data = await request$1.fetchPerkiraan(
          search_type,
          search_data,
          sort_by,
          sort_mode,
          page_number,
          total_row_displayed
        );
        if (data.success) {
          this.rawItems = data.data.rows;
          return data.data.total_page;
        } else if (!data.success && data.data.message == "token invalid") {
          Swal.fire({
            icon: "error",
            title: "Token Invalid",
            text: "Token Anda Invalid, silahkan login ulang"
          }).then((data2) => {
            localStorage.removeItem("user");
            router.push("/auth");
            window.location.reload();
          });
        }
      } catch (error) {
        throw new Error(error);
      }
    },
    async readPerkiraan(noper) {
      try {
        const data = await request$1.getperkiraanAkuntansi(noper);
        if (data.success) {
          return data.data[0];
        }
      } catch (error) {
        throw new Error(error);
      }
    },
    async postItem(noper, nama, level, bukubantu, kelompok, kelompok_data, detail, isEdit) {
      try {
        let data;
        if (!isEdit) {
          this.rawItems.push(noper, nama, level, bukubantu, kelompok, kelompok_data, detail);
          data = await request$1.createPerkiraan(
            noper,
            nama,
            level,
            bukubantu,
            kelompok,
            kelompok_data,
            detail
          );
        } else {
          this.rawItems = this.rawItems.map((item) => {
            if (item.noper === noper) {
              return { noper, nama, level, bukubantu, kelompok, kelompok_data, detail };
            }
            return item;
          });
          data = await request$1.updatePerkiraan(
            noper,
            nama,
            level,
            bukubantu,
            kelompok,
            kelompok_data,
            detail
          );
        }
        if (data.success) {
          return true;
        } else {
          return false;
        }
      } catch (error) {
        throw new Error(error);
      }
    },
    removeItem(noper) {
      this.rawItems = this.rawItems.filter((item) => {
        return item.noper !== noper;
      });
      request$1.deletePerkiraan(noper);
    },
    async getItem(bukti) {
      try {
        const data = await request$1.getPerkiraan(bukti);
        if (data.success) {
          this.detailPerkiraan = data.data.rows;
          return data.data.rows;
        }
      } catch (error) {
        throw new Error(error);
      }
    }
  }
});
const _hoisted_1$2 = { class: "relative top-0 bg-white w-full border-y-2 border-[#d0d3d4]" };
const _hoisted_2$2 = { class: "flex space-x-4 w-full justify-center m-auto px-5" };
const _hoisted_3$2 = { class: "grid grid-cols-8 xl:grid-cols-10 w-full h-10" };
const _hoisted_4$2 = {
  class: "inline-block align-middle hover:text-success text-center select-none border font-normal whitespace-no-wrap rounded no-underline h-9 mx-auto px-2 leading-tight text-xs bg-gray-100 text-gray-800 hover:bg-gray-200 btn-light-bordered",
  title: "Export CSV",
  onclick: "exportData('csv')"
};
const _hoisted_5$2 = /* @__PURE__ */ createBaseVNode("span", { class: "w-4 h-2 px-0.5 mx-auto my-[2px] stroke-2 stroke-current text-[8px] text-success font-bold" }, "CSV", -1);
const _hoisted_6$2 = {
  class: "inline-block hover:text-danger align-middle text-center select-none border font-normal whitespace-no-wrap rounded no-underline h-9 mx-auto px-2 leading-tight text-xs bg-gray-100 text-gray-800 hover:bg-gray-200 btn-light-bordered",
  title: "Export PDF",
  onclick: "exportData('pdf')"
};
const _hoisted_7$2 = /* @__PURE__ */ createBaseVNode("span", { class: "w-4 h-2 px-0.5 mx-auto my-[2px] stroke-2 stroke-current text-[8px] text-danger font-bold" }, "PDF", -1);
const _hoisted_8$2 = {
  class: "inline-block align-middle text-center select-none border font-normal whitespace-no-wrap rounded no-underline h-9 mx-auto px-2 leading-tight text-xs bg-gray-100 text-gray-800 hover:bg-gray-200 btn-light-bordered",
  title: "Print Table",
  onclick: "printData()"
};
const _hoisted_9$2 = /* @__PURE__ */ createBaseVNode("i", { class: "fa-solid fa-check" }, null, -1);
const _hoisted_10$2 = {
  href: "javascript:history.go(0)",
  title: "Refresh All",
  class: "inline-block hover:text-primary align-middle text-center select-none border font-normal whitespace-no-wrap rounded no-underline h-9 mx-auto px-2 leading-tight text-xs bg-gray-100 text-gray-800 hover:bg-gray-200 btn-light-bordered"
};
const _hoisted_11$2 = { class: "flex order-2 w-full h-10" };
const _hoisted_12$2 = {
  id: "pagination",
  class: "mx-auto"
};
const _hoisted_13$2 = { class: "inline-flex align-middle leading-tight text-xs" };
const _hoisted_14$2 = { class: "relative inline-flex align-middle py-1 leading-tight text-xs" };
const _hoisted_15$2 = { class: "flex items-stretch w-full" };
const _hoisted_16$2 = { class: "relative inline-flex align-middle py-1 leading-tight text-xs" };
const _hoisted_17$2 = { class: "items-center justify-center w-full flex h-10" };
const _hoisted_18$2 = /* @__PURE__ */ createBaseVNode("option", { value: "50" }, "50", -1);
const _hoisted_19$2 = /* @__PURE__ */ createBaseVNode("option", { value: "75" }, "75", -1);
const _hoisted_20$2 = /* @__PURE__ */ createBaseVNode("option", { value: "100" }, "100", -1);
const _hoisted_21$2 = [
  _hoisted_18$2,
  _hoisted_19$2,
  _hoisted_20$2
];
const _hoisted_22$1 = {
  class: "relative flex items-stretch w-full",
  id: "search-input-group"
};
const _hoisted_23$1 = ["placeholder"];
const _hoisted_24$2 = { class: "input-group-append" };
const _hoisted_25$2 = { class: "input-group-append" };
const _hoisted_26$2 = /* @__PURE__ */ createBaseVNode("option", { value: "noper" }, "Noper", -1);
const _hoisted_27$2 = /* @__PURE__ */ createBaseVNode("option", { value: "nama" }, "Nama", -1);
const _hoisted_28$2 = [
  _hoisted_26$2,
  _hoisted_27$2
];
const _hoisted_29$2 = { class: "flex flex-col h-[80vh] min-[1537px]:h-[80vh] shadow-md rounded-lg" };
const _hoisted_30$2 = { class: "flex-grow overflow-auto" };
const _hoisted_31$2 = { class: "relative w-full text-xs text-left text-gray-500 table-interval" };
const _hoisted_32$2 = { class: "text-xs font-bold text-gray-800 uppercase bg-blue-200 sticky top-0 z-10" };
const _hoisted_33$2 = {
  scope: "col",
  class: "p-2 border pl-3"
};
const _hoisted_34$2 = { class: "flex items-center" };
const _hoisted_35$2 = /* @__PURE__ */ createBaseVNode("label", {
  for: "checkbox-all-search",
  class: "sr-only"
}, "checkbox", -1);
const _hoisted_36$2 = /* @__PURE__ */ createBaseVNode("th", {
  scope: "col",
  class: "text-center uppercase border"
}, "Actions", -1);
const _hoisted_37$2 = { class: "overflow-y-scroll" };
const _hoisted_38$2 = ["perkiraan"];
const _hoisted_39$2 = { class: "w-4 border-r border-b font-medium border-[#cbd5e9] p-0 pl-3" };
const _hoisted_40$2 = { class: "flex items-center" };
const _hoisted_41$2 = /* @__PURE__ */ createBaseVNode("span", { class: "hidden cursor-pointer -ml-[9px] mr-[1px] rotate-90 group-hover:block text-black" }, ":::", -1);
const _hoisted_42$2 = ["value"];
const _hoisted_43$2 = ["onClick"];
const _hoisted_44$2 = ["onClick"];
const _hoisted_45$2 = ["onClick"];
const _hoisted_46$2 = ["onClick"];
const _hoisted_47$2 = ["onClick"];
const _hoisted_48$1 = ["onClick"];
const _hoisted_49$1 = ["onClick"];
const _hoisted_50$1 = ["onClick"];
const _hoisted_51$1 = ["onClick"];
const _hoisted_52$1 = { class: "min-w-max border-r border-b font-medium border-[#cbd5e9] p-1 w-44" };
const _hoisted_53$1 = { class: "flex justify-center" };
const _hoisted_54$1 = ["onClick"];
const _hoisted_55$1 = ["onClick"];
const _hoisted_56 = { class: "fixed intleft-2 right-0 top-0 bottom-0 w-full h-[100vh] z-50 overflow-hidden bg-gray-500 opacity-75 flex flex-col items-center justify-center" };
const _hoisted_57 = /* @__PURE__ */ createBaseVNode("h2", { class: "text-center text-white text-xl font-semibold" }, "Loading...", -1);
const _hoisted_58 = /* @__PURE__ */ createBaseVNode("p", { class: "w-1/3 text-center text-white" }, "Sedang Memuat Data", -1);
const _hoisted_59 = /* @__PURE__ */ createBaseVNode("p", { class: "w-1/3 text-center text-white" }, " Ini mungkin memakan waktu beberapa saat, tolong jangan tutup halaman ini. ", -1);
const _hoisted_60 = { class: "font-medium text-base mr-auto" };
const _hoisted_61$1 = { key: 0 };
const _hoisted_62$1 = { key: 1 };
const _hoisted_63$1 = { key: 2 };
const _hoisted_64$1 = { key: 3 };
const _hoisted_65$1 = { method: "post" };
const _hoisted_66$1 = { class: "bg-slate-200 p-3 rounded-b" };
const _hoisted_67$1 = { class: "text-gray-700 flex items-center mx-auto w-1/2" };
const _hoisted_68$1 = /* @__PURE__ */ createBaseVNode("div", { class: "mb-1 w-2/5 text-xs" }, [
  /* @__PURE__ */ createBaseVNode("label", null, "No. Perkiraan")
], -1);
const _hoisted_69$1 = /* @__PURE__ */ createBaseVNode("span", { class: "mr-3" }, ":", -1);
const _hoisted_70$1 = { class: "w-3/5 flex-grow" };
const _hoisted_71$1 = { class: "text-gray-700 flex items-center mx-auto w-1/2 mt-0" };
const _hoisted_72$1 = /* @__PURE__ */ createBaseVNode("div", { class: "mb-1 w-2/5 text-xs" }, [
  /* @__PURE__ */ createBaseVNode("label", null, "Nama")
], -1);
const _hoisted_73$1 = /* @__PURE__ */ createBaseVNode("span", { class: "mr-3" }, ":", -1);
const _hoisted_74$1 = { class: "w-3/5 flex-grow" };
const _hoisted_75$1 = { class: "text-gray-700 flex items-center mx-auto w-1/2 mt-0" };
const _hoisted_76$1 = /* @__PURE__ */ createBaseVNode("div", { class: "mb-1 w-2/5 text-xs" }, [
  /* @__PURE__ */ createBaseVNode("label", null, "Level Laporan")
], -1);
const _hoisted_77$1 = /* @__PURE__ */ createBaseVNode("span", { class: "mr-3" }, ":", -1);
const _hoisted_78$1 = { class: "w-3/5 flex-grow" };
const _hoisted_79$1 = { class: "text-gray-700 flex items-center mx-auto w-1/2 mt-0" };
const _hoisted_80$1 = /* @__PURE__ */ createBaseVNode("div", { class: "mb-1 w-2/5 text-xs" }, [
  /* @__PURE__ */ createBaseVNode("label", null, "Buku Bantu")
], -1);
const _hoisted_81$1 = /* @__PURE__ */ createBaseVNode("span", { class: "mr-3" }, ":", -1);
const _hoisted_82$1 = { class: "w-3/5 flex-grow" };
const _hoisted_83$1 = { class: "text-gray-700 flex items-center mx-auto w-1/2 mt-0" };
const _hoisted_84$1 = /* @__PURE__ */ createBaseVNode("div", { class: "mb-1 w-2/5 text-xs" }, [
  /* @__PURE__ */ createBaseVNode("label", null, "Kelompok")
], -1);
const _hoisted_85$1 = /* @__PURE__ */ createBaseVNode("span", { class: "mr-3" }, ":", -1);
const _hoisted_86$1 = { class: "w-3/5 flex-grow" };
const _hoisted_87$1 = { class: "text-gray-700 flex items-center mx-auto w-1/2 mt-0" };
const _hoisted_88$1 = /* @__PURE__ */ createBaseVNode("div", { class: "mb-1 w-2/5 text-xs" }, [
  /* @__PURE__ */ createBaseVNode("label", null, "Kelomok Data")
], -1);
const _hoisted_89$1 = /* @__PURE__ */ createBaseVNode("span", { class: "mr-3" }, ":", -1);
const _hoisted_90$1 = { class: "w-3/5 flex-grow" };
const _hoisted_91$1 = { class: "text-gray-700 flex items-center mx-auto w-1/2 mt-0" };
const _hoisted_92$1 = /* @__PURE__ */ createBaseVNode("div", { class: "mb-1 w-2/5 text-xs" }, [
  /* @__PURE__ */ createBaseVNode("label", null, "Detail")
], -1);
const _hoisted_93$1 = /* @__PURE__ */ createBaseVNode("span", { class: "mr-3" }, ":", -1);
const _hoisted_94$1 = { class: "w-3/5 flex-grow" };
const _hoisted_95$1 = { class: "p-5 text-center" };
const _hoisted_96$1 = /* @__PURE__ */ createBaseVNode("div", { class: "text-3xl mt-5" }, "Apakah Anda Yakin ?", -1);
const _hoisted_97$1 = { class: "text-slate-500 mt-2" };
const _hoisted_98$1 = { key: 0 };
const _hoisted_99$1 = /* @__PURE__ */ createBaseVNode("br", null, null, -1);
const _hoisted_100$1 = /* @__PURE__ */ createBaseVNode("br", null, null, -1);
const _hoisted_101$1 = { class: "px-5 pb-8 text-center" };
const _hoisted_102$1 = /* @__PURE__ */ createBaseVNode("h2", { class: "font-medium text-base mr-auto" }, " BUKU BESAR ", -1);
const _hoisted_103$1 = { class: "flex flex-col h-40 shadow-md rounded-t-lg -mt-4 border-x border-slate-300" };
const _hoisted_104$1 = /* @__PURE__ */ createBaseVNode("div", { class: "grid grid-cols-3 p-3 bg-green-200" }, [
  /* @__PURE__ */ createBaseVNode("div", { class: "text-gray-700 flex items-center col" }, [
    /* @__PURE__ */ createBaseVNode("div", { class: "mb-1 w-2/6 text-xs" }, [
      /* @__PURE__ */ createBaseVNode("label", null, "No Perkiraan")
    ]),
    /* @__PURE__ */ createBaseVNode("div", { class: "w-4/6 flex-grow" }, [
      /* @__PURE__ */ createBaseVNode("input", {
        class: "w-full h-10 px-3 text-xs text-center placeholder-gray-400 border rounded focus:shadow-outline",
        type: "text",
        placeholder: "Nomor Perkiraan",
        readonly: ""
      })
    ])
  ]),
  /* @__PURE__ */ createBaseVNode("div", { class: "text-gray-700 flex items-center col-start-3" }, [
    /* @__PURE__ */ createBaseVNode("div", { class: "mb-1 w-2/6 text-xs" }, [
      /* @__PURE__ */ createBaseVNode("label", null, "Nama")
    ]),
    /* @__PURE__ */ createBaseVNode("div", { class: "w-4/6 flex-grow" }, [
      /* @__PURE__ */ createBaseVNode("input", {
        class: "w-full h-10 px-3 text-xs placeholder-gray-400 border rounded focus:shadow-outline",
        type: "text",
        placeholder: "Nama Perkiraan",
        readonly: ""
      })
    ])
  ])
], -1);
const _hoisted_105$1 = { class: "flex-grow overflow-auto" };
const _hoisted_106$1 = {
  class: "relative w-full text-xs text-left text-gray-500",
  id: "table_input_jurnal"
};
const _hoisted_107$1 = /* @__PURE__ */ createBaseVNode("thead", { class: "text-xs font-bold text-gray-800 uppercase bg-blue-200 sticky top-0 z-10" }, [
  /* @__PURE__ */ createBaseVNode("tr", null, [
    /* @__PURE__ */ createBaseVNode("th", {
      scope: "col",
      class: "text-center uppercase border cursor-pointer hover:bg-blue-300 h-7"
    }, " Tanggal "),
    /* @__PURE__ */ createBaseVNode("th", {
      scope: "col",
      class: "text-center uppercase border cursor-pointer hover:bg-blue-300 h-7"
    }, " Saldo Awal "),
    /* @__PURE__ */ createBaseVNode("th", {
      scope: "col",
      class: "text-center uppercase border cursor-pointer hover:bg-blue-300 h-7"
    }, " Mutasi Debet "),
    /* @__PURE__ */ createBaseVNode("th", {
      scope: "col",
      class: "text-center uppercase border cursor-pointer hover:bg-blue-300 h-7"
    }, " Mutasi Kredit "),
    /* @__PURE__ */ createBaseVNode("th", {
      scope: "col",
      class: "text-center uppercase border cursor-pointer hover:bg-blue-300 h-7"
    }, " Saldo Akhir "),
    /* @__PURE__ */ createBaseVNode("th", {
      scope: "col",
      class: "text-center uppercase border"
    }, "Actions")
  ])
], -1);
const _hoisted_108$1 = { class: "overflow-y-scroll" };
const _hoisted_109$1 = { class: "bg-slate-200 p-3 rounded-b" };
const _hoisted_110$1 = /* @__PURE__ */ createBaseVNode("div", { class: "text-gray-700 flex items-center mx-auto w-1/3" }, [
  /* @__PURE__ */ createBaseVNode("div", { class: "mb-1 w-2/5 text-xs" }, [
    /* @__PURE__ */ createBaseVNode("label", null, "Tanggal")
  ]),
  /* @__PURE__ */ createBaseVNode("span", { class: "mr-3" }, ":"),
  /* @__PURE__ */ createBaseVNode("div", { class: "w-3/5 flex-grow" }, [
    /* @__PURE__ */ createBaseVNode("input", {
      class: "w-full h-10 mb-1 px-3 text-xs border rounded focus:shadow-outline",
      type: "date",
      readonly: "",
      required: ""
    })
  ])
], -1);
const _hoisted_111$1 = /* @__PURE__ */ createBaseVNode("div", { class: "text-gray-700 flex items-center mx-auto w-1/3 mt-0" }, [
  /* @__PURE__ */ createBaseVNode("div", { class: "mb-1 w-2/5 text-xs" }, [
    /* @__PURE__ */ createBaseVNode("label", null, "Saldo Awal")
  ]),
  /* @__PURE__ */ createBaseVNode("span", { class: "mr-3" }, ":"),
  /* @__PURE__ */ createBaseVNode("div", { class: "w-3/5 flex-grow" }, [
    /* @__PURE__ */ createBaseVNode("input", {
      class: "w-full h-10 mb-1 px-3 text-xs border rounded focus:shadow-outline",
      type: "number",
      required: ""
    })
  ])
], -1);
const _hoisted_112$1 = /* @__PURE__ */ createBaseVNode("div", { class: "text-gray-700 flex items-center mx-auto w-1/3 mt-0" }, [
  /* @__PURE__ */ createBaseVNode("div", { class: "mb-1 w-2/5 text-xs" }, [
    /* @__PURE__ */ createBaseVNode("label", null, "Mutasi Debet")
  ]),
  /* @__PURE__ */ createBaseVNode("span", { class: "mr-3" }, ":"),
  /* @__PURE__ */ createBaseVNode("div", { class: "w-3/5 flex-grow" }, [
    /* @__PURE__ */ createBaseVNode("textarea", {
      class: "w-full h-12 -mb-[3px] p-3 text-xs border rounded focus:shadow-outline",
      type: "number",
      required: ""
    })
  ])
], -1);
const _hoisted_113$1 = /* @__PURE__ */ createBaseVNode("div", { class: "text-gray-700 flex items-center mx-auto w-1/3 mt-0" }, [
  /* @__PURE__ */ createBaseVNode("div", { class: "mb-1 w-2/5 text-xs" }, [
    /* @__PURE__ */ createBaseVNode("label", null, "Mutasi Kredit")
  ]),
  /* @__PURE__ */ createBaseVNode("span", { class: "mr-3" }, ":"),
  /* @__PURE__ */ createBaseVNode("div", { class: "w-3/5 flex-grow" }, [
    /* @__PURE__ */ createBaseVNode("input", {
      class: "w-full h-10 mb-1 px-3 text-xs border rounded focus:shadow-outline",
      type: "number"
    })
  ])
], -1);
const _hoisted_114$1 = /* @__PURE__ */ createBaseVNode("div", { class: "text-gray-700 flex items-center mx-auto w-1/3 mt-0" }, [
  /* @__PURE__ */ createBaseVNode("div", { class: "mb-1 w-2/5 text-xs" }, [
    /* @__PURE__ */ createBaseVNode("label", null, "Saldo Akhir")
  ]),
  /* @__PURE__ */ createBaseVNode("span", { class: "mr-3" }, ":"),
  /* @__PURE__ */ createBaseVNode("div", { class: "w-3/5 flex-grow" }, [
    /* @__PURE__ */ createBaseVNode("input", {
      class: "w-full h-10 mb-1 px-3 text-xs border rounded focus:shadow-outline",
      type: "number"
    })
  ])
], -1);
const _hoisted_115$1 = { class: "flex w-1/3 mx-auto space-x-4" };
const _hoisted_116$1 = {
  type: "submit",
  class: "btn items-center flex mx-auto btn-primary text-xs w-9/12 mt-3"
};
const _sfc_main$3 = {
  __name: "PerkiraanAkuntansi",
  setup(__props) {
    const swal = inject("$swal");
    const perkiraanAkuntansi = usePerkiraanAkuntansiStore();
    const isLoading = ref(false);
    const sort_by = ref("noper");
    const sort_mode = ref(true);
    const search_data = ref("");
    const search_type = ref("noper");
    const page_number = ref(1);
    const total_pages = ref(0);
    const row_per_page = ref(50);
    const allSelected = ref(false);
    const userIds = ref([]);
    const isAdd = ref(false);
    const isEdit = ref(false);
    const isView = ref(false);
    const modal_utama = ref(false);
    const modal_delete = ref(false);
    const noper = ref("");
    const nama = ref("");
    const level = ref("");
    const bukubantu = ref("");
    const kelompok = ref("");
    const kelompok_data = ref("");
    const detail = ref("");
    const addGet = () => {
      isAdd.value = true;
      modal_utama.value = true;
    };
    const editGet = async (e) => {
      if (e !== "") {
        noper.value = e;
        const perkiraan = await perkiraanAkuntansi.readPerkiraan(e);
        nama.value = perkiraan.nama;
        level.value = perkiraan.level;
        bukubantu.value = perkiraan.bukubantu;
        kelompok.value = perkiraan.kel;
        kelompok_data.value = perkiraan.keldata;
        detail.value = perkiraan.detail;
        isEdit.value = true;
        modal_utama.value = true;
      }
    };
    const deleteGet = (e) => {
      const perkiraan = e;
      if (perkiraan.noper) {
        userIds.value = [];
        userIds.value.push(perkiraan.noper);
        modal_delete.value = true;
      } else {
        if (userIds.value.length > 0) {
          modal_delete.value = true;
        }
      }
    };
    const simpan_data = async (e) => {
      try {
        const data = await perkiraanAkuntansi.postItem(
          noper.value,
          nama.value,
          level.value,
          bukubantu.value,
          kelompok.value,
          kelompok_data.value,
          detail.value,
          isEdit.value
        );
        if (data) {
          resetForm();
        }
      } catch (error) {
        swal({
          icon: "error",
          title: "Oops...",
          text: "ERROR ADD ITEM " + error
        });
      }
    };
    const deletePerkiraan = async () => {
      if (userIds.value.length > 1) {
        for (let noper2 = 0; noper2 < userIds.value.length; noper2++) {
          await perkiraanAkuntansi.removeItem(userIds.value[noper2]);
        }
      } else {
        await perkiraanAkuntansi.removeItem(userIds.value[0]);
      }
      resetForm();
    };
    const viewData = async (e) => {
      isView.value = true;
    };
    const resetForm = () => {
      if (modal_utama.value == false && isEdit.value == false && isView.value == false) {
        search_data.value = "";
        search_type.value = "nama";
        sort_by.value = "noper";
        sort_mode.value = true;
        page_number.value = 1;
        total_pages.value = 0;
        row_per_page.value = 50;
      }
      allSelected.value = false;
      userIds.value = [];
      modal_utama.value = false;
      modal_delete.value = false;
      isAdd.value = false;
      isEdit.value = false;
      isView.value = false;
      noper.value = "";
      nama.value = "";
      level.value = "";
      bukubantu.value = "";
      kelompok.value = "";
      kelompok_data.value = "";
      detail.value = "";
    };
    const sorting = async (e) => {
      isLoading.value = true;
      sort_by.value = e;
      sort_mode.value = !sort_mode.value;
      try {
        await perkiraanAkuntansi.readItem(
          search_type.value,
          search_data.value,
          e,
          sort_mode.value,
          page_number.value,
          row_per_page.value
        );
        isLoading.value = false;
      } catch (error) {
        isLoading.value = false;
        swal({
          icon: "error",
          title: "Oops...",
          text: "Gagal Sorting " + error
        });
      }
    };
    const firstPage = async () => {
      page_number.value = 1;
    };
    const previousPage = async () => {
      try {
        let page_no = parseInt(page_number.value);
        if (page_no > 1) {
          page_number.value = page_no - 1;
        }
      } catch (error) {
        isLoading.value = false;
        swal({
          icon: "error",
          title: "Oops...",
          text: "Gagal page sebelumnya " + error
        });
      }
    };
    const nextPage = () => {
      try {
        if (page_number.value == "") {
          page_number.value = 1;
        }
        let page_no = parseInt(page_number.value);
        if (page_no < total_pages.value) {
          page_number.value = page_no + 1;
        }
      } catch (error) {
        isLoading.value = false;
        swal({
          icon: "error",
          title: "Oops...",
          text: "Gagal page selanjutnya " + error
        });
      }
    };
    const lastPage = async () => {
      page_number.value = total_pages.value;
    };
    watch(page_number, async (e) => {
      try {
        isLoading.value = true;
        await perkiraanAkuntansi.readItem(
          search_type.value,
          search_data.value,
          sort_by.value,
          sort_mode.value,
          e,
          row_per_page.value
        );
        isLoading.value = false;
      } catch (error) {
        isLoading.value = false;
        swal({
          icon: "error",
          title: "Oops...",
          text: "Gagal ganti page " + error
        });
        console.error(error);
      }
    });
    watch(row_per_page, async (e) => {
      try {
        isLoading.value = true;
        if (page_number.value > total_pages.value || page_number.value == "") {
          page_number.value = 1;
        }
        const data = await perkiraanAkuntansi.readItem(
          search_type.value,
          search_data.value,
          sort_by.value,
          sort_mode.value,
          page_number.value,
          e
        );
        total_pages.value = data;
        userIds.value = [];
        allSelected.value = false;
        if (page_number.value > total_pages.value) {
          page_number.value = 1;
        }
        isLoading.value = false;
      } catch (error) {
        isLoading.value = false;
        swal({
          icon: "error",
          title: "Oops...",
          text: "Gagal ganti row/page " + error
        });
      }
    });
    watch(search_data, async (e) => {
      try {
        isLoading.value = true;
        const data = await perkiraanAkuntansi.readItem(
          search_type.value,
          e,
          sort_by.value,
          sort_mode.value,
          page_number.value,
          row_per_page.value
        );
        total_pages.value = data;
        isLoading.value = false;
      } catch (error) {
        isLoading.value = false;
        swal({
          icon: "error",
          title: "Oops...",
          text: "Gagal search page " + error
        });
      }
    });
    watch(search_type, async (e) => {
      try {
        isLoading.value = true;
        const data = await perkiraanAkuntansi.readItem(
          e,
          search_data.value,
          sort_by.value,
          sort_mode.value,
          page_number.value,
          row_per_page.value
        );
        total_pages.value = data;
        isLoading.value = false;
      } catch (error) {
        isLoading.value = false;
        swal({
          icon: "error",
          title: "Oops...",
          text: "Gagal search page " + error
        });
      }
    });
    const selectAll = (e) => {
      userIds.value = [];
      if (!allSelected.value || e) {
        for (let perkiraan = 0; perkiraan < perkiraanAkuntansi.items.length; perkiraan++) {
          userIds.value.push(perkiraanAkuntansi.items[perkiraan].noper);
        }
      }
    };
    const selectOne = () => {
      allSelected.value = false;
    };
    onBeforeMount(async () => {
      try {
        isLoading.value = true;
        const data = await perkiraanAkuntansi.readItem(
          search_type.value,
          search_data.value,
          sort_by.value,
          sort_mode.value,
          page_number.value,
          row_per_page.value
        );
        total_pages.value = data;
        isLoading.value = false;
      } catch (error) {
        isLoading.value = false;
        swal({
          icon: "error",
          title: "Oops...",
          text: "ERROR MOUNTED " + error
        });
      }
    });
    return (_ctx, _cache) => {
      const _component_PlusIcon = resolveComponent("PlusIcon");
      const _component_Trash2Icon = resolveComponent("Trash2Icon");
      const _component_ShareIcon = resolveComponent("ShareIcon");
      const _component_PrinterIcon = resolveComponent("PrinterIcon");
      const _component_CheckIcon = resolveComponent("CheckIcon");
      const _component_XIcon = resolveComponent("XIcon");
      const _component_RefreshCwIcon = resolveComponent("RefreshCwIcon");
      const _component_SkipBackIcon = resolveComponent("SkipBackIcon");
      const _component_RewindIcon = resolveComponent("RewindIcon");
      const _component_FastForwardIcon = resolveComponent("FastForwardIcon");
      const _component_SkipForwardIcon = resolveComponent("SkipForwardIcon");
      const _component_DeleteIcon = resolveComponent("DeleteIcon");
      const _component_SortAscIcon = resolveComponent("SortAscIcon");
      const _component_SortDescIcon = resolveComponent("SortDescIcon");
      const _component_CheckSquareIcon = resolveComponent("CheckSquareIcon");
      const _component_Loader2Icon = resolveComponent("Loader2Icon");
      const _component_ModalHeader = resolveComponent("ModalHeader");
      const _component_ModalBody = resolveComponent("ModalBody");
      const _component_ModalFooter = resolveComponent("ModalFooter");
      const _component_Modal = resolveComponent("Modal");
      const _component_XCircleIcon = resolveComponent("XCircleIcon");
      const _component_SaveIcon = resolveComponent("SaveIcon");
      return openBlock(), createElementBlock(Fragment, null, [
        createVNode(_sfc_main$9, {
          title: "Transaksi",
          subTitle: "Akuntansi",
          icon: unref(TRANSAKSI)
        }, null, 8, ["icon"]),
        createBaseVNode("div", _hoisted_1$2, [
          createBaseVNode("div", _hoisted_2$2, [
            createBaseVNode("div", _hoisted_3$2, [
              createBaseVNode("button", {
                class: "inline-block align-middle text-center select-none border font-normal whitespace-no-wrap rounded no-underline h-9 mx-auto px-2 leading-tight text-xs bg-gray-100 text-gray-800 hover:text-blue-700 hover:bg-gray-200 btn-light-bordered",
                onClick: addGet,
                id: "delete-multiple-data",
                "data-bs-toggle": "tooltip",
                title: "Tambah Data"
              }, [
                createVNode(_component_PlusIcon, { class: "w-4 h-4 mx-auto my-[5px] stroke-2 stroke-current" })
              ]),
              createBaseVNode("button", {
                class: "inline-block align-middle hover:text-danger text-center select-none border font-normal whitespace-no-wrap rounded no-underline h-9 mx-auto px-2 leading-tight text-xs bg-gray-100 text-gray-800 hover:bg-gray-200 btn-light-bordered",
                onClick: deleteGet,
                id: "delete-multiple-data",
                "data-bs-toggle": "tooltip",
                title: "Hapus Data"
              }, [
                createVNode(_component_Trash2Icon, { class: "w-4 h-4 mx-auto my-[5px] stroke-2 stroke-current" })
              ]),
              createBaseVNode("button", _hoisted_4$2, [
                createVNode(_component_ShareIcon, { class: "w-3 h-3 mx-auto stroke-2 stroke-current" }),
                _hoisted_5$2
              ]),
              createBaseVNode("button", _hoisted_6$2, [
                createVNode(_component_ShareIcon, { class: "w-3 h-3 mx-auto stroke-2 stroke-current" }),
                _hoisted_7$2
              ]),
              createBaseVNode("button", _hoisted_8$2, [
                createVNode(_component_PrinterIcon, { class: "w-4 h-4 mx-auto my-[5px] stroke-2 stroke-current" })
              ]),
              createBaseVNode("button", {
                class: "inline-block hover:text-success align-middle text-center select-none border font-normal whitespace-no-wrap rounded no-underline h-9 mx-auto px-2 leading-tight text-xs bg-gray-100 text-gray-800 hover:bg-gray-200 btn-light-bordered",
                onClick: _cache[0] || (_cache[0] = ($event) => (selectAll(true), allSelected.value = true)),
                id: "select-all",
                title: "Select All"
              }, [
                createVNode(_component_CheckIcon, { class: "w-4 h-4 mx-auto my-[5px] stroke-2 stroke-current" }),
                _hoisted_9$2
              ]),
              createBaseVNode("button", {
                class: "inline-block align-middle hover:text-danger text-center select-none border font-normal whitespace-no-wrap rounded no-underline h-9 mx-auto px-2 leading-tight text-xs bg-gray-100 text-gray-800 hover:bg-gray-200 btn-light-bordered",
                onClick: _cache[1] || (_cache[1] = ($event) => {
                  userIds.value = [], allSelected.value = false;
                }),
                id: "unselect-all",
                title: "Unselect All"
              }, [
                createVNode(_component_XIcon, { class: "w-4 h-4 mx-auto my-[5px] stroke-2 stroke-current" })
              ]),
              createBaseVNode("a", _hoisted_10$2, [
                createVNode(_component_RefreshCwIcon, { class: "w-4 h-4 mx-auto my-[9px] stroke-2 stroke-current" })
              ])
            ]),
            createBaseVNode("div", _hoisted_11$2, [
              createBaseVNode("div", _hoisted_12$2, [
                createBaseVNode("div", _hoisted_13$2, [
                  createBaseVNode("div", _hoisted_14$2, [
                    createBaseVNode("a", {
                      href: "javascript:void(0);",
                      class: "inline-block align-middle text-center rounded-l-lg select-none border font-normal whitespace-no-wrap h-9 -mt-1 py-1 px-3 leading-normal no-underline bg-gray-100 text-gray-800 hover:bg-gray-200 btn-light-bordered",
                      id: "first-page",
                      title: "first page",
                      onClick: _cache[2] || (_cache[2] = ($event) => firstPage())
                    }, [
                      createVNode(_component_SkipBackIcon, { class: "w-4 h-4 mx-auto my-[5px]" })
                    ]),
                    createBaseVNode("a", {
                      href: "javascript:void(0);",
                      class: "inline-block align-middle text-center select-none border font-normal whitespace-no-wrap h-9 -mt-1 py-1 px-3 leading-normal no-underline bg-gray-100 text-gray-800 hover:bg-gray-200 btn-light-bordered",
                      id: "previous-page",
                      title: "previous page",
                      onClick: _cache[3] || (_cache[3] = ($event) => previousPage())
                    }, [
                      createVNode(_component_RewindIcon, { class: "w-4 h-4 mx-auto my-[5px]" })
                    ])
                  ]),
                  createBaseVNode("div", _hoisted_15$2, [
                    withDirectives(createBaseVNode("input", {
                      type: "number",
                      class: "block appearance-none w-full mb-1 px-2 bg-white text-gray-800 border-y border-r border-gray-400 text-xs leading-normal",
                      "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => page_number.value = $event)
                    }, null, 512), [
                      [vModelText, page_number.value]
                    ]),
                    withDirectives(createBaseVNode("input", {
                      type: "number",
                      class: "block appearance-none w-full px-2 mb-1 bg-gray-200 text-gray-800 border-y border-gray-400 text-xs leading-normal",
                      "onUpdate:modelValue": _cache[5] || (_cache[5] = ($event) => total_pages.value = $event),
                      disabled: ""
                    }, null, 512), [
                      [vModelText, total_pages.value]
                    ])
                  ]),
                  createBaseVNode("div", _hoisted_16$2, [
                    createBaseVNode("a", {
                      href: "javascript:void(0);",
                      class: "inline-block align-middle text-center select-none border font-normal whitespace-no-wrap h-9 -mt-1 py-1 px-3 leading-normal no-underline bg-gray-100 text-gray-800 hover:bg-gray-200 btn-light-bordered",
                      id: "next-page",
                      title: "next page",
                      onClick: _cache[6] || (_cache[6] = ($event) => nextPage())
                    }, [
                      createVNode(_component_FastForwardIcon, { class: "w-4 h-4 mx-auto my-[5px]" })
                    ]),
                    createBaseVNode("a", {
                      href: "javascript:void(0);",
                      class: "inline-block align-middle text-center select-none border font-normal whitespace-no-wrap h-9 -mt-1 rounded-r-lg py-1 px-3 leading-normal no-underline bg-gray-100 text-gray-800 hover:bg-gray-200 btn-light-bordered",
                      id: "last-page",
                      title: "last page",
                      onClick: _cache[7] || (_cache[7] = ($event) => lastPage())
                    }, [
                      createVNode(_component_SkipForwardIcon, { class: "w-4 h-4 mx-auto my-[5px]" })
                    ])
                  ])
                ])
              ])
            ]),
            createBaseVNode("div", _hoisted_17$2, [
              withDirectives(createBaseVNode("select", {
                name: "row_per_page",
                "onUpdate:modelValue": _cache[8] || (_cache[8] = ($event) => row_per_page.value = $event),
                class: "bg-gray-50 border border-gray-300 text-gray-900 pl-1 mr-2 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block -mt-1 w-[70px] h-9"
              }, _hoisted_21$2, 512), [
                [vModelSelect, row_per_page.value]
              ]),
              createBaseVNode("div", _hoisted_22$1, [
                withDirectives(createBaseVNode("input", {
                  type: "text",
                  class: "block appearance-none border-y border-l rounded-l-lg w-full mb-1 bg-white text-gray-800 border-gray-300 px-2 text-xs leading-normal h-9",
                  "onUpdate:modelValue": _cache[9] || (_cache[9] = ($event) => search_data.value = $event),
                  placeholder: "Cari " + search_type.value + " " + _ctx.$route.name.replace(/-/gi, " "),
                  name: "search-data"
                }, null, 8, _hoisted_23$1), [
                  [vModelText, search_data.value]
                ]),
                createBaseVNode("div", _hoisted_24$2, [
                  search_data.value !== "" ? (openBlock(), createElementBlock("button", {
                    key: 0,
                    class: "inline align-middle text-center select-none border-y border-[#d0d3d4] w-10 font-normal whitespace-no-wrap no-underline h-9 mx-auto px-2 leading-tight text-xs",
                    id: "clear-btn",
                    onClick: _cache[10] || (_cache[10] = ($event) => search_data.value = "")
                  }, [
                    createVNode(_component_DeleteIcon, { class: "w-5 h-5 stroke-2 text-danger mx-auto my-[5px]" })
                  ])) : createCommentVNode("", true)
                ]),
                createBaseVNode("div", _hoisted_25$2, [
                  withDirectives(createBaseVNode("select", {
                    name: "search_type",
                    "onUpdate:modelValue": _cache[11] || (_cache[11] = ($event) => search_type.value = $event),
                    class: "inline align-middle text-center select-none border w-14 font-normal whitespace-no-wrap rounded-r-lg no-underline h-9 mx-auto px-0 leading-tight text-xs bg-gray-100 text-gray-800 hover:bg-gray-200 btn-light-bordered"
                  }, _hoisted_28$2, 512), [
                    [vModelSelect, search_type.value]
                  ])
                ])
              ])
            ])
          ])
        ]),
        createBaseVNode("div", _hoisted_29$2, [
          createBaseVNode("div", _hoisted_30$2, [
            createBaseVNode("table", _hoisted_31$2, [
              createBaseVNode("thead", _hoisted_32$2, [
                createBaseVNode("tr", null, [
                  createBaseVNode("th", _hoisted_33$2, [
                    createBaseVNode("div", _hoisted_34$2, [
                      withDirectives(createBaseVNode("input", {
                        id: "checkbox-all-search",
                        "onUpdate:modelValue": _cache[12] || (_cache[12] = ($event) => allSelected.value = $event),
                        onClick: _cache[13] || (_cache[13] = ($event) => selectAll(false)),
                        type: "checkbox",
                        class: "w-4 h-4 text-blue-600 bg-gray-100 border-blue-200 rounded focus:ring-blue-500 focus:ring-2"
                      }, null, 512), [
                        [vModelCheckbox, allSelected.value]
                      ]),
                      _hoisted_35$2
                    ])
                  ]),
                  createBaseVNode("th", {
                    scope: "col",
                    class: "text-center uppercase border cursor-pointer hover:bg-blue-300",
                    onClick: _cache[14] || (_cache[14] = ($event) => sorting("noper"))
                  }, [
                    createTextVNode(" Noper "),
                    sort_by.value === "noper" && sort_mode.value ? (openBlock(), createBlock(_component_SortAscIcon, {
                      key: 0,
                      class: "inline ml-2 -pr-3 mr-1 w-5 h-4"
                    })) : createCommentVNode("", true),
                    sort_by.value === "noper" && !sort_mode.value ? (openBlock(), createBlock(_component_SortDescIcon, {
                      key: 1,
                      class: "inline ml-2 -mr-2 w-5 h-4"
                    })) : createCommentVNode("", true)
                  ]),
                  createBaseVNode("th", {
                    scope: "col",
                    class: "text-center uppercase border cursor-pointer hover:bg-blue-300",
                    onClick: _cache[15] || (_cache[15] = ($event) => sorting("nama"))
                  }, [
                    createTextVNode(" Nama "),
                    sort_by.value === "nama" && sort_mode.value ? (openBlock(), createBlock(_component_SortAscIcon, {
                      key: 0,
                      class: "inline ml-2 -pr-3 mr-1 w-5 h-4"
                    })) : createCommentVNode("", true),
                    sort_by.value === "nama" && !sort_mode.value ? (openBlock(), createBlock(_component_SortDescIcon, {
                      key: 1,
                      class: "inline ml-2 -mr-2 w-5 h-4"
                    })) : createCommentVNode("", true)
                  ]),
                  createBaseVNode("th", {
                    scope: "col",
                    class: "text-center uppercase border cursor-pointer hover:bg-blue-300",
                    onClick: _cache[16] || (_cache[16] = ($event) => sorting("kel"))
                  }, [
                    createTextVNode(" Kel "),
                    sort_by.value === "kel" && sort_mode.value ? (openBlock(), createBlock(_component_SortAscIcon, {
                      key: 0,
                      class: "inline ml-2 -pr-3 mr-1 w-5 h-4"
                    })) : createCommentVNode("", true),
                    sort_by.value === "kel" && !sort_mode.value ? (openBlock(), createBlock(_component_SortDescIcon, {
                      key: 1,
                      class: "inline ml-2 -mr-2 w-5 h-4"
                    })) : createCommentVNode("", true)
                  ]),
                  createBaseVNode("th", {
                    scope: "col",
                    class: "text-center uppercase border cursor-pointer hover:bg-blue-300",
                    onClick: _cache[17] || (_cache[17] = ($event) => sorting("bukubantu"))
                  }, [
                    createTextVNode(" BK Bantu "),
                    sort_by.value === "bukubantu" && sort_mode.value ? (openBlock(), createBlock(_component_SortAscIcon, {
                      key: 0,
                      class: "inline ml-2 -pr-3 mr-1 w-5 h-4"
                    })) : createCommentVNode("", true),
                    sort_by.value === "bukubantu" && !sort_mode.value ? (openBlock(), createBlock(_component_SortDescIcon, {
                      key: 1,
                      class: "inline ml-2 -mr-2 w-5 h-4"
                    })) : createCommentVNode("", true)
                  ]),
                  createBaseVNode("th", {
                    scope: "col",
                    class: "text-center uppercase border cursor-pointer hover:bg-blue-300",
                    onClick: _cache[18] || (_cache[18] = ($event) => sorting("keldata"))
                  }, [
                    createTextVNode(" KEL DATA "),
                    sort_by.value === "keldata" && sort_mode.value ? (openBlock(), createBlock(_component_SortAscIcon, {
                      key: 0,
                      class: "inline ml-2 -pr-3 mr-1 w-5 h-4"
                    })) : createCommentVNode("", true),
                    sort_by.value === "keldata" && !sort_mode.value ? (openBlock(), createBlock(_component_SortDescIcon, {
                      key: 1,
                      class: "inline ml-2 -mr-2 w-5 h-4"
                    })) : createCommentVNode("", true)
                  ]),
                  createBaseVNode("th", {
                    scope: "col",
                    class: "text-center uppercase border cursor-pointer hover:bg-blue-300",
                    onClick: _cache[19] || (_cache[19] = ($event) => sorting("level"))
                  }, [
                    createTextVNode(" Level "),
                    sort_by.value === "level" && sort_mode.value ? (openBlock(), createBlock(_component_SortAscIcon, {
                      key: 0,
                      class: "inline ml-2 -pr-3 mr-1 w-5 h-4"
                    })) : createCommentVNode("", true),
                    sort_by.value === "level" && !sort_mode.value ? (openBlock(), createBlock(_component_SortDescIcon, {
                      key: 1,
                      class: "inline ml-2 -mr-2 w-5 h-4"
                    })) : createCommentVNode("", true)
                  ]),
                  createBaseVNode("th", {
                    scope: "col",
                    class: "text-center uppercase border cursor-pointer hover:bg-blue-300",
                    onClick: _cache[20] || (_cache[20] = ($event) => sorting("font"))
                  }, [
                    createTextVNode(" Font "),
                    sort_by.value === "font" && sort_mode.value ? (openBlock(), createBlock(_component_SortAscIcon, {
                      key: 0,
                      class: "inline ml-2 -pr-3 mr-1 w-5 h-4"
                    })) : createCommentVNode("", true),
                    sort_by.value === "font" && !sort_mode.value ? (openBlock(), createBlock(_component_SortDescIcon, {
                      key: 1,
                      class: "inline ml-2 -mr-2 w-5 h-4"
                    })) : createCommentVNode("", true)
                  ]),
                  createBaseVNode("th", {
                    scope: "col",
                    class: "text-center uppercase border cursor-pointer hover:bg-blue-300",
                    onClick: _cache[21] || (_cache[21] = ($event) => sorting("detail"))
                  }, [
                    createTextVNode(" Detail "),
                    sort_by.value === "detail" && sort_mode.value ? (openBlock(), createBlock(_component_SortAscIcon, {
                      key: 0,
                      class: "inline ml-2 -pr-3 mr-1 w-5 h-4"
                    })) : createCommentVNode("", true),
                    sort_by.value === "detail" && !sort_mode.value ? (openBlock(), createBlock(_component_SortDescIcon, {
                      key: 1,
                      class: "inline ml-2 -mr-2 w-5 h-4"
                    })) : createCommentVNode("", true)
                  ]),
                  createBaseVNode("th", {
                    scope: "col",
                    class: "text-center uppercase border cursor-pointer hover:bg-blue-300",
                    onClick: _cache[22] || (_cache[22] = ($event) => sorting("saldo"))
                  }, [
                    createTextVNode(" Saldo "),
                    sort_by.value === "saldo" && sort_mode.value ? (openBlock(), createBlock(_component_SortAscIcon, {
                      key: 0,
                      class: "inline ml-2 -pr-3 mr-1 w-5 h-4"
                    })) : createCommentVNode("", true),
                    sort_by.value === "saldo" && !sort_mode.value ? (openBlock(), createBlock(_component_SortDescIcon, {
                      key: 1,
                      class: "inline ml-2 -mr-2 w-5 h-4"
                    })) : createCommentVNode("", true)
                  ]),
                  _hoisted_36$2
                ])
              ]),
              withDirectives(createBaseVNode("tbody", _hoisted_37$2, [
                (openBlock(true), createElementBlock(Fragment, null, renderList(unref(perkiraanAkuntansi).items, (perkiraan, index2) => {
                  return openBlock(), createElementBlock("tr", {
                    key: index2,
                    perkiraan
                  }, [
                    createBaseVNode("td", _hoisted_39$2, [
                      createBaseVNode("div", _hoisted_40$2, [
                        _hoisted_41$2,
                        withDirectives(createBaseVNode("input", {
                          value: perkiraan.noper,
                          type: "checkbox",
                          "onUpdate:modelValue": _cache[23] || (_cache[23] = ($event) => userIds.value = $event),
                          onClick: selectOne,
                          class: "data-checkbox w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded-lg focus:ring-blue-500 focus:ring-2"
                        }, null, 8, _hoisted_42$2), [
                          [vModelCheckbox, userIds.value]
                        ])
                      ])
                    ]),
                    createBaseVNode("th", {
                      onClick: ($event) => viewData(perkiraan.noper),
                      scope: "row",
                      class: "border-r border-b font-medium border-[#cbd5e9] whitespace-nowrap pl-2 w-20"
                    }, toDisplayString(perkiraan.noper), 9, _hoisted_43$2),
                    createBaseVNode("td", {
                      onClick: ($event) => viewData(perkiraan.noper),
                      class: "min-w-max text-left border-r border-b font-medium border-[#cbd5e9] px-2"
                    }, toDisplayString(perkiraan.nama), 9, _hoisted_44$2),
                    createBaseVNode("td", {
                      onClick: ($event) => viewData(perkiraan.noper),
                      class: "min-w-max text-center border-r border-b font-medium border-[#cbd5e9] px-2 w-20"
                    }, toDisplayString(perkiraan.kel), 9, _hoisted_45$2),
                    createBaseVNode("td", {
                      onClick: ($event) => viewData(perkiraan.noper),
                      class: "min-w-max text-left border-r border-b font-medium border-[#cbd5e9] px-2 w-20"
                    }, toDisplayString(perkiraan.bukubantu), 9, _hoisted_46$2),
                    createBaseVNode("td", {
                      onClick: ($event) => viewData(perkiraan.noper),
                      class: "min-w-max text-center border-r border-b font-medium border-[#cbd5e9] px-2 w-20"
                    }, toDisplayString(perkiraan.keldata), 9, _hoisted_47$2),
                    createBaseVNode("td", {
                      onClick: ($event) => viewData(perkiraan.noper),
                      class: "min-w-max text-center border-r border-b font-medium border-[#cbd5e9] px-2 w-20"
                    }, toDisplayString(perkiraan.level), 9, _hoisted_48$1),
                    createBaseVNode("td", {
                      onClick: ($event) => viewData(perkiraan.noper),
                      class: "min-w-max text-center border-r border-b font-medium border-[#cbd5e9] px-2 w-20"
                    }, toDisplayString(perkiraan.font), 9, _hoisted_49$1),
                    createBaseVNode("td", {
                      onClick: ($event) => viewData(perkiraan.noper),
                      class: "min-w-max text-center border-r border-b font-medium border-[#cbd5e9] px-2 w-20"
                    }, toDisplayString(perkiraan.detail), 9, _hoisted_50$1),
                    createBaseVNode("td", {
                      onClick: ($event) => viewData(perkiraan.noper),
                      class: "min-w-max text-right border-r border-b font-medium border-[#cbd5e9] px-2 w-max"
                    }, toDisplayString(perkiraan.saldo), 9, _hoisted_51$1),
                    createBaseVNode("td", _hoisted_52$1, [
                      createBaseVNode("div", _hoisted_53$1, [
                        createBaseVNode("a", {
                          onClick: ($event) => editGet(perkiraan.noper),
                          class: "flex items-center mr-4 hover:text-blue-700 text-sky-600",
                          href: "javascript:;"
                        }, [
                          createVNode(_component_CheckSquareIcon, { class: "w-3 h-3 mr-1" }),
                          createTextVNode(" Edit ")
                        ], 8, _hoisted_54$1),
                        createBaseVNode("a", {
                          onClick: ($event) => deleteGet(perkiraan),
                          class: "flex items-center hover:text-red-800 text-danger",
                          href: "javascript:;"
                        }, [
                          createVNode(_component_Trash2Icon, { class: "w-3 h-3 mr-1" }),
                          createTextVNode(" Hapus ")
                        ], 8, _hoisted_55$1)
                      ])
                    ])
                  ], 8, _hoisted_38$2);
                }), 128))
              ], 512), [
                [vShow, !isLoading.value]
              ]),
              withDirectives(createBaseVNode("tbody", null, [
                createBaseVNode("div", _hoisted_56, [
                  createVNode(_component_Loader2Icon, { class: "motion-safe:animate-spin stroke-[5px] text-white h-12 w-12 mb-2" }),
                  _hoisted_57,
                  _hoisted_58,
                  _hoisted_59
                ])
              ], 512), [
                [vShow, isLoading.value]
              ])
            ])
          ])
        ]),
        createVNode(_component_Modal, {
          backdrop: "static",
          size: "modal-lg",
          show: modal_utama.value,
          onHidden: _cache[31] || (_cache[31] = ($event) => modal_utama.value = false)
        }, {
          default: withCtx(() => [
            createVNode(_component_ModalHeader, null, {
              default: withCtx(() => [
                createBaseVNode("h2", _hoisted_60, [
                  isAdd.value ? (openBlock(), createElementBlock("span", _hoisted_61$1, "Tambah ")) : createCommentVNode("", true),
                  isEdit.value ? (openBlock(), createElementBlock("span", _hoisted_62$1, "Edit ")) : createCommentVNode("", true),
                  isView.value ? (openBlock(), createElementBlock("span", _hoisted_63$1, "Data ")) : createCommentVNode("", true),
                  createTextVNode(" Perkiraan "),
                  isEdit.value || isView.value ? (openBlock(), createElementBlock("span", _hoisted_64$1, toDisplayString(noper.value), 1)) : createCommentVNode("", true)
                ]),
                createBaseVNode("a", {
                  "data-tw-dismiss": "modal",
                  onClick: resetForm,
                  href: "javascript:;",
                  class: "border bg-danger rounded-lg hover:bg-red-700 -my-5 -mr-3"
                }, [
                  createVNode(_component_XIcon, { class: "lucide lucide-x w-7 h-7 text-white hover:text-slate-100" })
                ])
              ]),
              _: 1
            }),
            createVNode(_component_ModalBody, null, {
              default: withCtx(() => [
                createBaseVNode("form", _hoisted_65$1, [
                  createBaseVNode("div", _hoisted_66$1, [
                    createBaseVNode("div", _hoisted_67$1, [
                      _hoisted_68$1,
                      _hoisted_69$1,
                      createBaseVNode("div", _hoisted_70$1, [
                        withDirectives(createBaseVNode("input", {
                          class: "w-full h-10 mb-1 px-3 text-xs border rounded focus:shadow-outline",
                          type: "text",
                          "onUpdate:modelValue": _cache[24] || (_cache[24] = ($event) => noper.value = $event),
                          maxlength: "10",
                          required: ""
                        }, null, 512), [
                          [vModelText, noper.value]
                        ])
                      ])
                    ]),
                    createBaseVNode("div", _hoisted_71$1, [
                      _hoisted_72$1,
                      _hoisted_73$1,
                      createBaseVNode("div", _hoisted_74$1, [
                        withDirectives(createBaseVNode("textarea", {
                          class: "w-full h-12 -mb-[3px] p-3 text-xs border rounded focus:shadow-outline",
                          type: "text",
                          "onUpdate:modelValue": _cache[25] || (_cache[25] = ($event) => nama.value = $event),
                          maxlength: "40",
                          required: ""
                        }, null, 512), [
                          [vModelText, nama.value]
                        ])
                      ])
                    ]),
                    createBaseVNode("div", _hoisted_75$1, [
                      _hoisted_76$1,
                      _hoisted_77$1,
                      createBaseVNode("div", _hoisted_78$1, [
                        withDirectives(createBaseVNode("input", {
                          class: "w-full h-10 mb-1 px-3 text-xs border rounded focus:shadow-outline",
                          type: "text",
                          "onUpdate:modelValue": _cache[26] || (_cache[26] = ($event) => level.value = $event),
                          maxlength: "1",
                          required: ""
                        }, null, 512), [
                          [vModelText, level.value]
                        ])
                      ])
                    ]),
                    createBaseVNode("div", _hoisted_79$1, [
                      _hoisted_80$1,
                      _hoisted_81$1,
                      createBaseVNode("div", _hoisted_82$1, [
                        withDirectives(createBaseVNode("textarea", {
                          class: "w-full h-12 -mb-[3px] p-3 text-xs border rounded focus:shadow-outline",
                          type: "text",
                          "onUpdate:modelValue": _cache[27] || (_cache[27] = ($event) => bukubantu.value = $event),
                          maxlength: "5",
                          required: ""
                        }, null, 512), [
                          [vModelText, bukubantu.value]
                        ])
                      ])
                    ]),
                    createBaseVNode("div", _hoisted_83$1, [
                      _hoisted_84$1,
                      _hoisted_85$1,
                      createBaseVNode("div", _hoisted_86$1, [
                        withDirectives(createBaseVNode("input", {
                          class: "w-full h-10 mb-1 px-3 text-xs border rounded focus:shadow-outline",
                          type: "text",
                          maxlength: "3",
                          "onUpdate:modelValue": _cache[28] || (_cache[28] = ($event) => kelompok.value = $event)
                        }, null, 512), [
                          [vModelText, kelompok.value]
                        ])
                      ])
                    ]),
                    createBaseVNode("div", _hoisted_87$1, [
                      _hoisted_88$1,
                      _hoisted_89$1,
                      createBaseVNode("div", _hoisted_90$1, [
                        withDirectives(createBaseVNode("input", {
                          class: "w-full h-10 mb-1 px-3 text-xs border rounded focus:shadow-outline",
                          type: "text",
                          maxlength: "3",
                          "onUpdate:modelValue": _cache[29] || (_cache[29] = ($event) => kelompok_data.value = $event)
                        }, null, 512), [
                          [vModelText, kelompok_data.value]
                        ])
                      ])
                    ]),
                    createBaseVNode("div", _hoisted_91$1, [
                      _hoisted_92$1,
                      _hoisted_93$1,
                      createBaseVNode("div", _hoisted_94$1, [
                        withDirectives(createBaseVNode("input", {
                          class: "w-full h-10 mb-1 px-3 text-xs border rounded focus:shadow-outline",
                          type: "text",
                          maxlength: "1",
                          "onUpdate:modelValue": _cache[30] || (_cache[30] = ($event) => detail.value = $event)
                        }, null, 512), [
                          [vModelText, detail.value]
                        ])
                      ])
                    ])
                  ])
                ])
              ]),
              _: 1
            }),
            createVNode(_component_ModalFooter, { class: "text-right" }, {
              default: withCtx(() => [
                createBaseVNode("button", {
                  type: "button",
                  class: "btn btn-outline-secondary w-32 text-xs mr-1",
                  onClick: resetForm
                }, " Cancel "),
                createBaseVNode("button", {
                  class: "btn btn-primary text-xs w-32",
                  onClick: simpan_data
                }, "Simpan")
              ]),
              _: 1
            })
          ]),
          _: 1
        }, 8, ["show"]),
        createVNode(_component_Modal, {
          backdrop: "static",
          show: modal_delete.value,
          onHidden: _cache[33] || (_cache[33] = ($event) => modal_delete.value = false)
        }, {
          default: withCtx(() => [
            createVNode(_component_ModalBody, { class: "p-0" }, {
              default: withCtx(() => [
                createBaseVNode("div", _hoisted_95$1, [
                  createVNode(_component_XCircleIcon, { class: "w-16 h-16 text-danger mx-auto mt-3" }),
                  _hoisted_96$1,
                  createBaseVNode("div", _hoisted_97$1, [
                    createTextVNode(" Ingin menghapus "),
                    userIds.value.length > 1 ? (openBlock(), createElementBlock("span", _hoisted_98$1, "Beberapa")) : createCommentVNode("", true),
                    createTextVNode(" data dengan ID "),
                    _hoisted_99$1,
                    createBaseVNode("b", null, toDisplayString(userIds.value.length > 1 ? userIds.value : userIds.value[0]), 1),
                    createTextVNode(" ? "),
                    _hoisted_100$1,
                    createTextVNode("Data yang telah dihapus tidak bisa kembali. ")
                  ])
                ]),
                createBaseVNode("div", _hoisted_101$1, [
                  createBaseVNode("button", {
                    type: "button",
                    onClick: resetForm,
                    class: "btn btn-outline-secondary w-24 mr-1 text-xs"
                  }, " Batal "),
                  createBaseVNode("button", {
                    type: "button",
                    class: "btn btn-danger w-24 text-xs",
                    onClick: _cache[32] || (_cache[32] = (e) => {
                      e.preventDefault();
                      deletePerkiraan();
                    })
                  }, " Hapus ")
                ])
              ]),
              _: 1
            })
          ]),
          _: 1
        }, 8, ["show"]),
        createVNode(_component_Modal, {
          backdrop: "static",
          size: "modal-xl",
          show: isView.value,
          onHidden: _cache[36] || (_cache[36] = ($event) => isView.value = false)
        }, {
          default: withCtx(() => [
            createVNode(_component_ModalHeader, null, {
              default: withCtx(() => [
                _hoisted_102$1,
                createBaseVNode("a", {
                  "data-tw-dismiss": "modal",
                  onClick: resetForm,
                  href: "javascript:;",
                  class: "border bg-danger rounded-lg hover:bg-red-700 -my-5 -mr-3"
                }, [
                  createVNode(_component_XIcon, { class: "lucide lucide-x w-7 h-7 text-white hover:text-slate-100" })
                ])
              ]),
              _: 1
            }),
            createVNode(_component_ModalBody, null, {
              default: withCtx(() => [
                createBaseVNode("div", _hoisted_103$1, [
                  _hoisted_104$1,
                  createBaseVNode("div", _hoisted_105$1, [
                    createBaseVNode("table", _hoisted_106$1, [
                      _hoisted_107$1,
                      withDirectives(createBaseVNode("tbody", _hoisted_108$1, null, 512), [
                        [vShow, !isLoading.value]
                      ])
                    ])
                  ])
                ]),
                createBaseVNode("form", {
                  onSubmit: _cache[35] || (_cache[35] = withModifiers((...args) => _ctx.add_data && _ctx.add_data(...args), ["prevent"])),
                  method: "post"
                }, [
                  createBaseVNode("div", _hoisted_109$1, [
                    _hoisted_110$1,
                    _hoisted_111$1,
                    _hoisted_112$1,
                    _hoisted_113$1,
                    _hoisted_114$1,
                    createBaseVNode("div", _hoisted_115$1, [
                      createBaseVNode("a", {
                        href: "javascript:;",
                        onClick: _cache[34] || (_cache[34] = (...args) => _ctx.miniReset && _ctx.miniReset(...args)),
                        class: "btn items-center flex mx-auto btn-danger text-xs w-3/12 mt-3"
                      }, [
                        createVNode(_component_XIcon, { class: "w-4 h-4 mr-1" }),
                        createTextVNode(" Batal ")
                      ]),
                      createBaseVNode("button", _hoisted_116$1, [
                        createVNode(_component_SaveIcon, { class: "w-4 h-4 mr-1" }),
                        createTextVNode(" Simpan ")
                      ])
                    ])
                  ])
                ], 32)
              ]),
              _: 1
            })
          ]),
          _: 1
        }, 8, ["show"])
      ], 64);
    };
  }
};
const LAPORAN = "" + new URL("laporan-9c933af8.svg", import.meta.url).href;
class CoreFeature {
  constructor(table) {
    this.table = table;
  }
  //////////////////////////////////////////
  /////////////// DataLoad /////////////////
  //////////////////////////////////////////
  reloadData(data, silent, columnsChanged) {
    return this.table.dataLoader.load(data, void 0, void 0, void 0, silent, columnsChanged);
  }
  //////////////////////////////////////////
  ///////////// Localization ///////////////
  //////////////////////////////////////////
  langText() {
    return this.table.modules.localize.getText(...arguments);
  }
  langBind() {
    return this.table.modules.localize.bind(...arguments);
  }
  langLocale() {
    return this.table.modules.localize.getLocale(...arguments);
  }
  //////////////////////////////////////////
  ////////// Inter Table Comms /////////////
  //////////////////////////////////////////
  commsConnections() {
    return this.table.modules.comms.getConnections(...arguments);
  }
  commsSend() {
    return this.table.modules.comms.send(...arguments);
  }
  //////////////////////////////////////////
  //////////////// Layout  /////////////////
  //////////////////////////////////////////
  layoutMode() {
    return this.table.modules.layout.getMode();
  }
  layoutRefresh(force) {
    return this.table.modules.layout.layout(force);
  }
  //////////////////////////////////////////
  /////////////// Event Bus ////////////////
  //////////////////////////////////////////
  subscribe() {
    return this.table.eventBus.subscribe(...arguments);
  }
  unsubscribe() {
    return this.table.eventBus.unsubscribe(...arguments);
  }
  subscribed(key) {
    return this.table.eventBus.subscribed(key);
  }
  subscriptionChange() {
    return this.table.eventBus.subscriptionChange(...arguments);
  }
  dispatch() {
    return this.table.eventBus.dispatch(...arguments);
  }
  chain() {
    return this.table.eventBus.chain(...arguments);
  }
  confirm() {
    return this.table.eventBus.confirm(...arguments);
  }
  dispatchExternal() {
    return this.table.externalEvents.dispatch(...arguments);
  }
  subscribedExternal(key) {
    return this.table.externalEvents.subscribed(key);
  }
  subscriptionChangeExternal() {
    return this.table.externalEvents.subscriptionChange(...arguments);
  }
  //////////////////////////////////////////
  //////////////// Options /////////////////
  //////////////////////////////////////////
  options(key) {
    return this.table.options[key];
  }
  setOption(key, value) {
    if (typeof value !== "undefined") {
      this.table.options[key] = value;
    }
    return this.table.options[key];
  }
  //////////////////////////////////////////
  /////////// Deprecation Checks ///////////
  //////////////////////////////////////////
  deprecationCheck(oldOption, newOption) {
    return this.table.deprecationAdvisor.check(oldOption, newOption);
  }
  deprecationCheckMsg(oldOption, msg) {
    return this.table.deprecationAdvisor.checkMsg(oldOption, msg);
  }
  deprecationMsg(msg) {
    return this.table.deprecationAdvisor.msg(msg);
  }
  //////////////////////////////////////////
  //////////////// Modules /////////////////
  //////////////////////////////////////////
  module(key) {
    return this.table.module(key);
  }
}
class Helpers {
  static elVisible(el) {
    return !(el.offsetWidth <= 0 && el.offsetHeight <= 0);
  }
  static elOffset(el) {
    var box = el.getBoundingClientRect();
    return {
      top: box.top + window.pageYOffset - document.documentElement.clientTop,
      left: box.left + window.pageXOffset - document.documentElement.clientLeft
    };
  }
  static deepClone(obj, clone2, list2 = []) {
    var objectProto = {}.__proto__, arrayProto = [].__proto__;
    if (!clone2) {
      clone2 = Object.assign(Array.isArray(obj) ? [] : {}, obj);
    }
    for (var i in obj) {
      let subject = obj[i], match, copy;
      if (subject != null && typeof subject === "object" && (subject.__proto__ === objectProto || subject.__proto__ === arrayProto)) {
        match = list2.findIndex((item) => {
          return item.subject === subject;
        });
        if (match > -1) {
          clone2[i] = list2[match].copy;
        } else {
          copy = Object.assign(Array.isArray(subject) ? [] : {}, subject);
          list2.unshift({ subject, copy });
          clone2[i] = this.deepClone(subject, copy, list2);
        }
      }
    }
    return clone2;
  }
}
class Popup extends CoreFeature {
  constructor(table, element, parent) {
    super(table);
    this.element = element;
    this.container = this._lookupContainer();
    this.parent = parent;
    this.reversedX = false;
    this.childPopup = null;
    this.blurable = false;
    this.blurCallback = null;
    this.blurEventsBound = false;
    this.renderedCallback = null;
    this.visible = false;
    this.hideable = true;
    this.element.classList.add("tabulator-popup-container");
    this.blurEvent = this.hide.bind(this, false);
    this.escEvent = this._escapeCheck.bind(this);
    this.destroyBinding = this.tableDestroyed.bind(this);
    this.destroyed = false;
  }
  tableDestroyed() {
    this.destroyed = true;
    this.hide(true);
  }
  _lookupContainer() {
    var container = this.table.options.popupContainer;
    if (typeof container === "string") {
      container = document.querySelector(container);
      if (!container) {
        console.warn("Menu Error - no container element found matching selector:", this.table.options.popupContainer, "(defaulting to document body)");
      }
    } else if (container === true) {
      container = this.table.element;
    }
    if (container && !this._checkContainerIsParent(container)) {
      container = false;
      console.warn("Menu Error - container element does not contain this table:", this.table.options.popupContainer, "(defaulting to document body)");
    }
    if (!container) {
      container = document.body;
    }
    return container;
  }
  _checkContainerIsParent(container, element = this.table.element) {
    if (container === element) {
      return true;
    } else {
      return element.parentNode ? this._checkContainerIsParent(container, element.parentNode) : false;
    }
  }
  renderCallback(callback) {
    this.renderedCallback = callback;
  }
  containerEventCoords(e) {
    var touch = !(e instanceof MouseEvent);
    var x = touch ? e.touches[0].pageX : e.pageX;
    var y = touch ? e.touches[0].pageY : e.pageY;
    if (this.container !== document.body) {
      let parentOffset = Helpers.elOffset(this.container);
      x -= parentOffset.left;
      y -= parentOffset.top;
    }
    return { x, y };
  }
  elementPositionCoords(element, position = "right") {
    var offset2 = Helpers.elOffset(element), containerOffset, x, y;
    if (this.container !== document.body) {
      containerOffset = Helpers.elOffset(this.container);
      offset2.left -= containerOffset.left;
      offset2.top -= containerOffset.top;
    }
    switch (position) {
      case "right":
        x = offset2.left + element.offsetWidth;
        y = offset2.top - 1;
        break;
      case "bottom":
        x = offset2.left;
        y = offset2.top + element.offsetHeight;
        break;
      case "left":
        x = offset2.left;
        y = offset2.top - 1;
        break;
      case "top":
        x = offset2.left;
        y = offset2.top;
        break;
      case "center":
        x = offset2.left + element.offsetWidth / 2;
        y = offset2.top + element.offsetHeight / 2;
        break;
    }
    return { x, y, offset: offset2 };
  }
  show(origin, position) {
    var x, y, parentEl, parentOffset, coords;
    if (this.destroyed || this.table.destroyed) {
      return this;
    }
    if (origin instanceof HTMLElement) {
      parentEl = origin;
      coords = this.elementPositionCoords(origin, position);
      parentOffset = coords.offset;
      x = coords.x;
      y = coords.y;
    } else if (typeof origin === "number") {
      parentOffset = { top: 0, left: 0 };
      x = origin;
      y = position;
    } else {
      coords = this.containerEventCoords(origin);
      x = coords.x;
      y = coords.y;
      this.reversedX = false;
    }
    this.element.style.top = y + "px";
    this.element.style.left = x + "px";
    this.container.appendChild(this.element);
    if (typeof this.renderedCallback === "function") {
      this.renderedCallback();
    }
    this._fitToScreen(x, y, parentEl, parentOffset, position);
    this.visible = true;
    this.subscribe("table-destroy", this.destroyBinding);
    this.element.addEventListener("mousedown", (e) => {
      e.stopPropagation();
    });
    return this;
  }
  _fitToScreen(x, y, parentEl, parentOffset, position) {
    var scrollTop = this.container === document.body ? document.documentElement.scrollTop : this.container.scrollTop;
    if (x + this.element.offsetWidth >= this.container.offsetWidth || this.reversedX) {
      this.element.style.left = "";
      if (parentEl) {
        this.element.style.right = this.container.offsetWidth - parentOffset.left + "px";
      } else {
        this.element.style.right = this.container.offsetWidth - x + "px";
      }
      this.reversedX = true;
    }
    if (y + this.element.offsetHeight > Math.max(this.container.offsetHeight, scrollTop ? this.container.scrollHeight : 0)) {
      if (parentEl) {
        switch (position) {
          case "bottom":
            this.element.style.top = parseInt(this.element.style.top) - this.element.offsetHeight - parentEl.offsetHeight - 1 + "px";
            break;
          default:
            this.element.style.top = parseInt(this.element.style.top) - this.element.offsetHeight + parentEl.offsetHeight + 1 + "px";
        }
      } else {
        this.element.style.top = parseInt(this.element.style.top) - this.element.offsetHeight + "px";
      }
    }
  }
  isVisible() {
    return this.visible;
  }
  hideOnBlur(callback) {
    this.blurable = true;
    if (this.visible) {
      setTimeout(() => {
        if (this.visible) {
          this.table.rowManager.element.addEventListener("scroll", this.blurEvent);
          this.subscribe("cell-editing", this.blurEvent);
          document.body.addEventListener("click", this.blurEvent);
          document.body.addEventListener("contextmenu", this.blurEvent);
          document.body.addEventListener("mousedown", this.blurEvent);
          window.addEventListener("resize", this.blurEvent);
          document.body.addEventListener("keydown", this.escEvent);
          this.blurEventsBound = true;
        }
      }, 100);
      this.blurCallback = callback;
    }
    return this;
  }
  _escapeCheck(e) {
    if (e.keyCode == 27) {
      this.hide();
    }
  }
  blockHide() {
    this.hideable = false;
  }
  restoreHide() {
    this.hideable = true;
  }
  hide(silent = false) {
    if (this.visible && this.hideable) {
      if (this.blurable && this.blurEventsBound) {
        document.body.removeEventListener("keydown", this.escEvent);
        document.body.removeEventListener("click", this.blurEvent);
        document.body.removeEventListener("contextmenu", this.blurEvent);
        document.body.removeEventListener("mousedown", this.blurEvent);
        window.removeEventListener("resize", this.blurEvent);
        this.table.rowManager.element.removeEventListener("scroll", this.blurEvent);
        this.unsubscribe("cell-editing", this.blurEvent);
        this.blurEventsBound = false;
      }
      if (this.childPopup) {
        this.childPopup.hide();
      }
      if (this.parent) {
        this.parent.childPopup = null;
      }
      if (this.element.parentNode) {
        this.element.parentNode.removeChild(this.element);
      }
      this.visible = false;
      if (this.blurCallback && !silent) {
        this.blurCallback();
      }
      this.unsubscribe("table-destroy", this.destroyBinding);
    }
    return this;
  }
  child(element) {
    if (this.childPopup) {
      this.childPopup.hide();
    }
    this.childPopup = new Popup(this.table, element, this);
    return this.childPopup;
  }
}
class Module extends CoreFeature {
  constructor(table, name) {
    super(table);
    this._handler = null;
  }
  initialize() {
  }
  ///////////////////////////////////
  ////// Options Registration ///////
  ///////////////////////////////////
  registerTableOption(key, value) {
    this.table.optionsList.register(key, value);
  }
  registerColumnOption(key, value) {
    this.table.columnManager.optionsList.register(key, value);
  }
  ///////////////////////////////////
  /// Public Function Registration ///
  ///////////////////////////////////
  registerTableFunction(name, func) {
    if (typeof this.table[name] === "undefined") {
      this.table[name] = (...args) => {
        this.table.initGuard(name);
        return func(...args);
      };
    } else {
      console.warn("Unable to bind table function, name already in use", name);
    }
  }
  registerComponentFunction(component, func, handler) {
    return this.table.componentFunctionBinder.bind(component, func, handler);
  }
  ///////////////////////////////////
  ////////// Data Pipeline //////////
  ///////////////////////////////////
  registerDataHandler(handler, priority) {
    this.table.rowManager.registerDataPipelineHandler(handler, priority);
    this._handler = handler;
  }
  registerDisplayHandler(handler, priority) {
    this.table.rowManager.registerDisplayPipelineHandler(handler, priority);
    this._handler = handler;
  }
  displayRows(adjust) {
    var index2 = this.table.rowManager.displayRows.length - 1, lookupIndex;
    if (this._handler) {
      lookupIndex = this.table.rowManager.displayPipeline.findIndex((item) => {
        return item.handler === this._handler;
      });
      if (lookupIndex > -1) {
        index2 = lookupIndex;
      }
    }
    if (adjust) {
      index2 = index2 + adjust;
    }
    if (this._handler) {
      if (index2 > -1) {
        return this.table.rowManager.getDisplayRows(index2);
      } else {
        return this.activeRows();
      }
    }
  }
  activeRows() {
    return this.table.rowManager.activeRows;
  }
  refreshData(renderInPosition, handler) {
    if (!handler) {
      handler = this._handler;
    }
    if (handler) {
      this.table.rowManager.refreshActiveData(handler, false, renderInPosition);
    }
  }
  ///////////////////////////////////
  //////// Footer Management ////////
  ///////////////////////////////////
  footerAppend(element) {
    return this.table.footerManager.append(element);
  }
  footerPrepend(element) {
    return this.table.footerManager.prepend(element);
  }
  footerRemove(element) {
    return this.table.footerManager.remove(element);
  }
  ///////////////////////////////////
  //////// Popups Management ////////
  ///////////////////////////////////
  popup(menuEl, menuContainer) {
    return new Popup(this.table, menuEl, menuContainer);
  }
  ///////////////////////////////////
  //////// Alert Management ////////
  ///////////////////////////////////
  alert(content, type) {
    return this.table.alertManager.alert(content, type);
  }
  clearAlert() {
    return this.table.alertManager.clear();
  }
}
var defaultAccessors = {};
class Accessor extends Module {
  constructor(table) {
    super(table);
    this.allowedTypes = ["", "data", "download", "clipboard", "print", "htmlOutput"];
    this.registerColumnOption("accessor");
    this.registerColumnOption("accessorParams");
    this.registerColumnOption("accessorData");
    this.registerColumnOption("accessorDataParams");
    this.registerColumnOption("accessorDownload");
    this.registerColumnOption("accessorDownloadParams");
    this.registerColumnOption("accessorClipboard");
    this.registerColumnOption("accessorClipboardParams");
    this.registerColumnOption("accessorPrint");
    this.registerColumnOption("accessorPrintParams");
    this.registerColumnOption("accessorHtmlOutput");
    this.registerColumnOption("accessorHtmlOutputParams");
  }
  initialize() {
    this.subscribe("column-layout", this.initializeColumn.bind(this));
    this.subscribe("row-data-retrieve", this.transformRow.bind(this));
  }
  //initialize column accessor
  initializeColumn(column) {
    var match = false, config = {};
    this.allowedTypes.forEach((type) => {
      var key = "accessor" + (type.charAt(0).toUpperCase() + type.slice(1)), accessor;
      if (column.definition[key]) {
        accessor = this.lookupAccessor(column.definition[key]);
        if (accessor) {
          match = true;
          config[key] = {
            accessor,
            params: column.definition[key + "Params"] || {}
          };
        }
      }
    });
    if (match) {
      column.modules.accessor = config;
    }
  }
  lookupAccessor(value) {
    var accessor = false;
    switch (typeof value) {
      case "string":
        if (Accessor.accessors[value]) {
          accessor = Accessor.accessors[value];
        } else {
          console.warn("Accessor Error - No such accessor found, ignoring: ", value);
        }
        break;
      case "function":
        accessor = value;
        break;
    }
    return accessor;
  }
  //apply accessor to row
  transformRow(row, type) {
    var key = "accessor" + (type.charAt(0).toUpperCase() + type.slice(1)), rowComponent = row.getComponent();
    var data = Helpers.deepClone(row.data || {});
    this.table.columnManager.traverse(function(column) {
      var value, accessor, params, colComponent;
      if (column.modules.accessor) {
        accessor = column.modules.accessor[key] || column.modules.accessor.accessor || false;
        if (accessor) {
          value = column.getFieldValue(data);
          if (value != "undefined") {
            colComponent = column.getComponent();
            params = typeof accessor.params === "function" ? accessor.params(value, data, type, colComponent, rowComponent) : accessor.params;
            column.setFieldValue(data, accessor.accessor(value, data, type, params, colComponent, rowComponent));
          }
        }
      }
    });
    return data;
  }
}
Accessor.moduleName = "accessor";
Accessor.accessors = defaultAccessors;
var defaultConfig = {
  method: "GET"
};
function generateParamsList(data, prefix) {
  var output = [];
  prefix = prefix || "";
  if (Array.isArray(data)) {
    data.forEach((item, i) => {
      output = output.concat(generateParamsList(item, prefix ? prefix + "[" + i + "]" : i));
    });
  } else if (typeof data === "object") {
    for (var key in data) {
      output = output.concat(generateParamsList(data[key], prefix ? prefix + "[" + key + "]" : key));
    }
  } else {
    output.push({ key: prefix, value: data });
  }
  return output;
}
function serializeParams(params) {
  var output = generateParamsList(params), encoded = [];
  output.forEach(function(item) {
    encoded.push(encodeURIComponent(item.key) + "=" + encodeURIComponent(item.value));
  });
  return encoded.join("&");
}
function urlBuilder(url, config, params) {
  if (url) {
    if (params && Object.keys(params).length) {
      if (!config.method || config.method.toLowerCase() == "get") {
        config.method = "get";
        url += (url.includes("?") ? "&" : "?") + serializeParams(params);
      }
    }
  }
  return url;
}
function defaultLoaderPromise(url, config, params) {
  var contentType;
  return new Promise((resolve2, reject) => {
    url = this.urlGenerator.call(this.table, url, config, params);
    if (config.method.toUpperCase() != "GET") {
      contentType = typeof this.table.options.ajaxContentType === "object" ? this.table.options.ajaxContentType : this.contentTypeFormatters[this.table.options.ajaxContentType];
      if (contentType) {
        for (var key in contentType.headers) {
          if (!config.headers) {
            config.headers = {};
          }
          if (typeof config.headers[key] === "undefined") {
            config.headers[key] = contentType.headers[key];
          }
        }
        config.body = contentType.body.call(this, url, config, params);
      } else {
        console.warn("Ajax Error - Invalid ajaxContentType value:", this.table.options.ajaxContentType);
      }
    }
    if (url) {
      if (typeof config.headers === "undefined") {
        config.headers = {};
      }
      if (typeof config.headers.Accept === "undefined") {
        config.headers.Accept = "application/json";
      }
      if (typeof config.headers["X-Requested-With"] === "undefined") {
        config.headers["X-Requested-With"] = "XMLHttpRequest";
      }
      if (typeof config.mode === "undefined") {
        config.mode = "cors";
      }
      if (config.mode == "cors") {
        if (typeof config.headers["Origin"] === "undefined") {
          config.headers["Origin"] = window.location.origin;
        }
        if (typeof config.credentials === "undefined") {
          config.credentials = "same-origin";
        }
      } else {
        if (typeof config.credentials === "undefined") {
          config.credentials = "include";
        }
      }
      fetch(url, config).then((response) => {
        if (response.ok) {
          response.json().then((data) => {
            resolve2(data);
          }).catch((error) => {
            reject(error);
            console.warn("Ajax Load Error - Invalid JSON returned", error);
          });
        } else {
          console.error("Ajax Load Error - Connection Error: " + response.status, response.statusText);
          reject(response);
        }
      }).catch((error) => {
        console.error("Ajax Load Error - Connection Error: ", error);
        reject(error);
      });
    } else {
      console.warn("Ajax Load Error - No URL Set");
      resolve2([]);
    }
  });
}
function generateParamsList$1(data, prefix) {
  var output = [];
  prefix = prefix || "";
  if (Array.isArray(data)) {
    data.forEach((item, i) => {
      output = output.concat(generateParamsList$1(item, prefix ? prefix + "[" + i + "]" : i));
    });
  } else if (typeof data === "object") {
    for (var key in data) {
      output = output.concat(generateParamsList$1(data[key], prefix ? prefix + "[" + key + "]" : key));
    }
  } else {
    output.push({ key: prefix, value: data });
  }
  return output;
}
var defaultContentTypeFormatters = {
  "json": {
    headers: {
      "Content-Type": "application/json"
    },
    body: function(url, config, params) {
      return JSON.stringify(params);
    }
  },
  "form": {
    headers: {},
    body: function(url, config, params) {
      var output = generateParamsList$1(params), form = new FormData();
      output.forEach(function(item) {
        form.append(item.key, item.value);
      });
      return form;
    }
  }
};
class Ajax extends Module {
  constructor(table) {
    super(table);
    this.config = {};
    this.url = "";
    this.urlGenerator = false;
    this.params = false;
    this.loaderPromise = false;
    this.registerTableOption("ajaxURL", false);
    this.registerTableOption("ajaxURLGenerator", false);
    this.registerTableOption("ajaxParams", {});
    this.registerTableOption("ajaxConfig", "get");
    this.registerTableOption("ajaxContentType", "form");
    this.registerTableOption("ajaxRequestFunc", false);
    this.registerTableOption("ajaxRequesting", function() {
    });
    this.registerTableOption("ajaxResponse", false);
    this.contentTypeFormatters = Ajax.contentTypeFormatters;
  }
  //initialize setup options
  initialize() {
    this.loaderPromise = this.table.options.ajaxRequestFunc || Ajax.defaultLoaderPromise;
    this.urlGenerator = this.table.options.ajaxURLGenerator || Ajax.defaultURLGenerator;
    if (this.table.options.ajaxURL) {
      this.setUrl(this.table.options.ajaxURL);
    }
    this.setDefaultConfig(this.table.options.ajaxConfig);
    this.registerTableFunction("getAjaxUrl", this.getUrl.bind(this));
    this.subscribe("data-loading", this.requestDataCheck.bind(this));
    this.subscribe("data-params", this.requestParams.bind(this));
    this.subscribe("data-load", this.requestData.bind(this));
  }
  requestParams(data, config, silent, params) {
    var ajaxParams = this.table.options.ajaxParams;
    if (ajaxParams) {
      if (typeof ajaxParams === "function") {
        ajaxParams = ajaxParams.call(this.table);
      }
      params = Object.assign(params, ajaxParams);
    }
    return params;
  }
  requestDataCheck(data, params, config, silent) {
    return !!(!data && this.url || typeof data === "string");
  }
  requestData(url, params, config, silent, previousData) {
    var ajaxConfig;
    if (!previousData && this.requestDataCheck(url)) {
      if (url) {
        this.setUrl(url);
      }
      ajaxConfig = this.generateConfig(config);
      return this.sendRequest(this.url, params, ajaxConfig);
    } else {
      return previousData;
    }
  }
  setDefaultConfig(config = {}) {
    this.config = Object.assign({}, Ajax.defaultConfig);
    if (typeof config == "string") {
      this.config.method = config;
    } else {
      Object.assign(this.config, config);
    }
  }
  //load config object
  generateConfig(config = {}) {
    var ajaxConfig = Object.assign({}, this.config);
    if (typeof config == "string") {
      ajaxConfig.method = config;
    } else {
      Object.assign(ajaxConfig, config);
    }
    return ajaxConfig;
  }
  //set request url
  setUrl(url) {
    this.url = url;
  }
  //get request url
  getUrl() {
    return this.url;
  }
  //send ajax request
  sendRequest(url, params, config) {
    if (this.table.options.ajaxRequesting.call(this.table, url, params) !== false) {
      return this.loaderPromise(url, config, params).then((data) => {
        if (this.table.options.ajaxResponse) {
          data = this.table.options.ajaxResponse.call(this.table, url, params, data);
        }
        return data;
      });
    } else {
      return Promise.reject();
    }
  }
}
Ajax.moduleName = "ajax";
Ajax.defaultConfig = defaultConfig;
Ajax.defaultURLGenerator = urlBuilder;
Ajax.defaultLoaderPromise = defaultLoaderPromise;
Ajax.contentTypeFormatters = defaultContentTypeFormatters;
var defaultPasteActions = {
  replace: function(rows2) {
    return this.table.setData(rows2);
  },
  update: function(rows2) {
    return this.table.updateOrAddData(rows2);
  },
  insert: function(rows2) {
    return this.table.addData(rows2);
  }
};
var defaultPasteParsers = {
  table: function(clipboard) {
    var data = [], headerFindSuccess = true, columns = this.table.columnManager.columns, columnMap = [], rows2 = [];
    clipboard = clipboard.split("\n");
    clipboard.forEach(function(row) {
      data.push(row.split("	"));
    });
    if (data.length && !(data.length === 1 && data[0].length < 2)) {
      data[0].forEach(function(value) {
        var column = columns.find(function(column2) {
          return value && column2.definition.title && value.trim() && column2.definition.title.trim() === value.trim();
        });
        if (column) {
          columnMap.push(column);
        } else {
          headerFindSuccess = false;
        }
      });
      if (!headerFindSuccess) {
        headerFindSuccess = true;
        columnMap = [];
        data[0].forEach(function(value) {
          var column = columns.find(function(column2) {
            return value && column2.field && value.trim() && column2.field.trim() === value.trim();
          });
          if (column) {
            columnMap.push(column);
          } else {
            headerFindSuccess = false;
          }
        });
        if (!headerFindSuccess) {
          columnMap = this.table.columnManager.columnsByIndex;
        }
      }
      if (headerFindSuccess) {
        data.shift();
      }
      data.forEach(function(item) {
        var row = {};
        item.forEach(function(value, i) {
          if (columnMap[i]) {
            row[columnMap[i].field] = value;
          }
        });
        rows2.push(row);
      });
      return rows2;
    } else {
      return false;
    }
  }
};
let Clipboard$1 = class Clipboard extends Module {
  constructor(table) {
    super(table);
    this.mode = true;
    this.pasteParser = function() {
    };
    this.pasteAction = function() {
    };
    this.customSelection = false;
    this.rowRange = false;
    this.blocked = true;
    this.registerTableOption("clipboard", false);
    this.registerTableOption("clipboardCopyStyled", true);
    this.registerTableOption("clipboardCopyConfig", false);
    this.registerTableOption("clipboardCopyFormatter", false);
    this.registerTableOption("clipboardCopyRowRange", "active");
    this.registerTableOption("clipboardPasteParser", "table");
    this.registerTableOption("clipboardPasteAction", "insert");
    this.registerColumnOption("clipboard");
    this.registerColumnOption("titleClipboard");
  }
  initialize() {
    this.mode = this.table.options.clipboard;
    this.rowRange = this.table.options.clipboardCopyRowRange;
    if (this.mode === true || this.mode === "copy") {
      this.table.element.addEventListener("copy", (e) => {
        var plain, html2, list2;
        if (!this.blocked) {
          e.preventDefault();
          if (this.customSelection) {
            plain = this.customSelection;
            if (this.table.options.clipboardCopyFormatter) {
              plain = this.table.options.clipboardCopyFormatter("plain", plain);
            }
          } else {
            list2 = this.table.modules.export.generateExportList(this.table.options.clipboardCopyConfig, this.table.options.clipboardCopyStyled, this.rowRange, "clipboard");
            html2 = this.table.modules.export.generateHTMLTable(list2);
            plain = html2 ? this.generatePlainContent(list2) : "";
            if (this.table.options.clipboardCopyFormatter) {
              plain = this.table.options.clipboardCopyFormatter("plain", plain);
              html2 = this.table.options.clipboardCopyFormatter("html", html2);
            }
          }
          if (window.clipboardData && window.clipboardData.setData) {
            window.clipboardData.setData("Text", plain);
          } else if (e.clipboardData && e.clipboardData.setData) {
            e.clipboardData.setData("text/plain", plain);
            if (html2) {
              e.clipboardData.setData("text/html", html2);
            }
          } else if (e.originalEvent && e.originalEvent.clipboardData.setData) {
            e.originalEvent.clipboardData.setData("text/plain", plain);
            if (html2) {
              e.originalEvent.clipboardData.setData("text/html", html2);
            }
          }
          this.dispatchExternal("clipboardCopied", plain, html2);
          this.reset();
        }
      });
    }
    if (this.mode === true || this.mode === "paste") {
      this.table.element.addEventListener("paste", (e) => {
        this.paste(e);
      });
    }
    this.setPasteParser(this.table.options.clipboardPasteParser);
    this.setPasteAction(this.table.options.clipboardPasteAction);
    this.registerTableFunction("copyToClipboard", this.copy.bind(this));
  }
  reset() {
    this.blocked = true;
    this.customSelection = false;
  }
  generatePlainContent(list2) {
    var output = [];
    list2.forEach((row) => {
      var rowData = [];
      row.columns.forEach((col) => {
        var value = "";
        if (col) {
          if (row.type === "group") {
            col.value = col.component.getKey();
          }
          if (col.value === null) {
            value = "";
          } else {
            switch (typeof col.value) {
              case "object":
                value = JSON.stringify(col.value);
                break;
              case "undefined":
                value = "";
                break;
              default:
                value = col.value;
            }
          }
        }
        rowData.push(value);
      });
      output.push(rowData.join("	"));
    });
    return output.join("\n");
  }
  copy(range2, internal) {
    var sel, textRange;
    this.blocked = false;
    this.customSelection = false;
    if (this.mode === true || this.mode === "copy") {
      this.rowRange = range2 || this.table.options.clipboardCopyRowRange;
      if (typeof window.getSelection != "undefined" && typeof document.createRange != "undefined") {
        range2 = document.createRange();
        range2.selectNodeContents(this.table.element);
        sel = window.getSelection();
        if (sel.toString() && internal) {
          this.customSelection = sel.toString();
        }
        sel.removeAllRanges();
        sel.addRange(range2);
      } else if (typeof document.selection != "undefined" && typeof document.body.createTextRange != "undefined") {
        textRange = document.body.createTextRange();
        textRange.moveToElementText(this.table.element);
        textRange.select();
      }
      document.execCommand("copy");
      if (sel) {
        sel.removeAllRanges();
      }
    }
  }
  //PASTE EVENT HANDLING
  setPasteAction(action) {
    switch (typeof action) {
      case "string":
        this.pasteAction = Clipboard.pasteActions[action];
        if (!this.pasteAction) {
          console.warn("Clipboard Error - No such paste action found:", action);
        }
        break;
      case "function":
        this.pasteAction = action;
        break;
    }
  }
  setPasteParser(parser) {
    switch (typeof parser) {
      case "string":
        this.pasteParser = Clipboard.pasteParsers[parser];
        if (!this.pasteParser) {
          console.warn("Clipboard Error - No such paste parser found:", parser);
        }
        break;
      case "function":
        this.pasteParser = parser;
        break;
    }
  }
  paste(e) {
    var data, rowData, rows2;
    if (this.checkPaseOrigin(e)) {
      data = this.getPasteData(e);
      rowData = this.pasteParser.call(this, data);
      if (rowData) {
        e.preventDefault();
        if (this.table.modExists("mutator")) {
          rowData = this.mutateData(rowData);
        }
        rows2 = this.pasteAction.call(this, rowData);
        this.dispatchExternal("clipboardPasted", data, rowData, rows2);
      } else {
        this.dispatchExternal("clipboardPasteError", data);
      }
    }
  }
  mutateData(data) {
    var output = [];
    if (Array.isArray(data)) {
      data.forEach((row) => {
        output.push(this.table.modules.mutator.transformRow(row, "clipboard"));
      });
    } else {
      output = data;
    }
    return output;
  }
  checkPaseOrigin(e) {
    var valid = true;
    if (e.target.tagName != "DIV" || this.table.modules.edit.currentCell) {
      valid = false;
    }
    return valid;
  }
  getPasteData(e) {
    var data;
    if (window.clipboardData && window.clipboardData.getData) {
      data = window.clipboardData.getData("Text");
    } else if (e.clipboardData && e.clipboardData.getData) {
      data = e.clipboardData.getData("text/plain");
    } else if (e.originalEvent && e.originalEvent.clipboardData.getData) {
      data = e.originalEvent.clipboardData.getData("text/plain");
    }
    return data;
  }
};
Clipboard$1.moduleName = "clipboard";
Clipboard$1.pasteActions = defaultPasteActions;
Clipboard$1.pasteParsers = defaultPasteParsers;
class CalcComponent {
  constructor(row) {
    this._row = row;
    return new Proxy(this, {
      get: function(target, name, receiver) {
        if (typeof target[name] !== "undefined") {
          return target[name];
        } else {
          return target._row.table.componentFunctionBinder.handle("row", target._row, name);
        }
      }
    });
  }
  getData(transform) {
    return this._row.getData(transform);
  }
  getElement() {
    return this._row.getElement();
  }
  getTable() {
    return this._row.table;
  }
  getCells() {
    var cells = [];
    this._row.getCells().forEach(function(cell) {
      cells.push(cell.getComponent());
    });
    return cells;
  }
  getCell(column) {
    var cell = this._row.getCell(column);
    return cell ? cell.getComponent() : false;
  }
  _getSelf() {
    return this._row;
  }
}
class CellComponent {
  constructor(cell) {
    this._cell = cell;
    return new Proxy(this, {
      get: function(target, name, receiver) {
        if (typeof target[name] !== "undefined") {
          return target[name];
        } else {
          return target._cell.table.componentFunctionBinder.handle("cell", target._cell, name);
        }
      }
    });
  }
  getValue() {
    return this._cell.getValue();
  }
  getOldValue() {
    return this._cell.getOldValue();
  }
  getInitialValue() {
    return this._cell.initialValue;
  }
  getElement() {
    return this._cell.getElement();
  }
  getRow() {
    return this._cell.row.getComponent();
  }
  getData() {
    return this._cell.row.getData();
  }
  getField() {
    return this._cell.column.getField();
  }
  getColumn() {
    return this._cell.column.getComponent();
  }
  setValue(value, mutate) {
    if (typeof mutate == "undefined") {
      mutate = true;
    }
    this._cell.setValue(value, mutate);
  }
  restoreOldValue() {
    this._cell.setValueActual(this._cell.getOldValue());
  }
  restoreInitialValue() {
    this._cell.setValueActual(this._cell.initialValue);
  }
  checkHeight() {
    this._cell.checkHeight();
  }
  getTable() {
    return this._cell.table;
  }
  _getSelf() {
    return this._cell;
  }
}
class Cell extends CoreFeature {
  constructor(column, row) {
    super(column.table);
    this.table = column.table;
    this.column = column;
    this.row = row;
    this.element = null;
    this.value = null;
    this.initialValue;
    this.oldValue = null;
    this.modules = {};
    this.height = null;
    this.width = null;
    this.minWidth = null;
    this.component = null;
    this.loaded = false;
    this.build();
  }
  //////////////// Setup Functions /////////////////
  //generate element
  build() {
    this.generateElement();
    this.setWidth();
    this._configureCell();
    this.setValueActual(this.column.getFieldValue(this.row.data));
    this.initialValue = this.value;
  }
  generateElement() {
    this.element = document.createElement("div");
    this.element.className = "tabulator-cell";
    this.element.setAttribute("role", "gridcell");
  }
  _configureCell() {
    var element = this.element, field = this.column.getField(), vertAligns = {
      top: "flex-start",
      bottom: "flex-end",
      middle: "center"
    }, hozAligns = {
      left: "flex-start",
      right: "flex-end",
      center: "center"
    };
    element.style.textAlign = this.column.hozAlign;
    if (this.column.vertAlign) {
      element.style.display = "inline-flex";
      element.style.alignItems = vertAligns[this.column.vertAlign] || "";
      if (this.column.hozAlign) {
        element.style.justifyContent = hozAligns[this.column.hozAlign] || "";
      }
    }
    if (field) {
      element.setAttribute("tabulator-field", field);
    }
    if (this.column.definition.cssClass) {
      var classNames = this.column.definition.cssClass.split(" ");
      classNames.forEach((className) => {
        element.classList.add(className);
      });
    }
    this.dispatch("cell-init", this);
    if (!this.column.visible) {
      this.hide();
    }
  }
  //generate cell contents
  _generateContents() {
    var val;
    val = this.chain("cell-format", this, null, () => {
      return this.element.innerHTML = this.value;
    });
    switch (typeof val) {
      case "object":
        if (val instanceof Node) {
          while (this.element.firstChild)
            this.element.removeChild(this.element.firstChild);
          this.element.appendChild(val);
        } else {
          this.element.innerHTML = "";
          if (val != null) {
            console.warn("Format Error - Formatter has returned a type of object, the only valid formatter object return is an instance of Node, the formatter returned:", val);
          }
        }
        break;
      case "undefined":
        this.element.innerHTML = "";
        break;
      default:
        this.element.innerHTML = val;
    }
  }
  cellRendered() {
    this.dispatch("cell-rendered", this);
  }
  //////////////////// Getters ////////////////////
  getElement(containerOnly) {
    if (!this.loaded) {
      this.loaded = true;
      if (!containerOnly) {
        this.layoutElement();
      }
    }
    return this.element;
  }
  getValue() {
    return this.value;
  }
  getOldValue() {
    return this.oldValue;
  }
  //////////////////// Actions ////////////////////
  setValue(value, mutate, force) {
    var changed = this.setValueProcessData(value, mutate, force);
    if (changed) {
      this.dispatch("cell-value-updated", this);
      this.cellRendered();
      if (this.column.definition.cellEdited) {
        this.column.definition.cellEdited.call(this.table, this.getComponent());
      }
      this.dispatchExternal("cellEdited", this.getComponent());
      if (this.subscribedExternal("dataChanged")) {
        this.dispatchExternal("dataChanged", this.table.rowManager.getData());
      }
    }
  }
  setValueProcessData(value, mutate, force) {
    var changed = false;
    if (this.value !== value || force) {
      changed = true;
      if (mutate) {
        value = this.chain("cell-value-changing", [this, value], null, value);
      }
    }
    this.setValueActual(value);
    if (changed) {
      this.dispatch("cell-value-changed", this);
    }
    return changed;
  }
  setValueActual(value) {
    this.oldValue = this.value;
    this.value = value;
    this.dispatch("cell-value-save-before", this);
    this.column.setFieldValue(this.row.data, value);
    this.dispatch("cell-value-save-after", this);
    if (this.loaded) {
      this.layoutElement();
    }
  }
  layoutElement() {
    this._generateContents();
    this.dispatch("cell-layout", this);
  }
  setWidth() {
    this.width = this.column.width;
    this.element.style.width = this.column.widthStyled;
  }
  clearWidth() {
    this.width = "";
    this.element.style.width = "";
  }
  getWidth() {
    return this.width || this.element.offsetWidth;
  }
  setMinWidth() {
    this.minWidth = this.column.minWidth;
    this.element.style.minWidth = this.column.minWidthStyled;
  }
  setMaxWidth() {
    this.maxWidth = this.column.maxWidth;
    this.element.style.maxWidth = this.column.maxWidthStyled;
  }
  checkHeight() {
    this.row.reinitializeHeight();
  }
  clearHeight() {
    this.element.style.height = "";
    this.height = null;
    this.dispatch("cell-height", this, "");
  }
  setHeight() {
    this.height = this.row.height;
    this.element.style.height = this.row.heightStyled;
    this.dispatch("cell-height", this, this.row.heightStyled);
  }
  getHeight() {
    return this.height || this.element.offsetHeight;
  }
  show() {
    this.element.style.display = this.column.vertAlign ? "inline-flex" : "";
  }
  hide() {
    this.element.style.display = "none";
  }
  delete() {
    this.dispatch("cell-delete", this);
    if (!this.table.rowManager.redrawBlock && this.element.parentNode) {
      this.element.parentNode.removeChild(this.element);
    }
    this.element = false;
    this.column.deleteCell(this);
    this.row.deleteCell(this);
    this.calcs = {};
  }
  getIndex() {
    return this.row.getCellIndex(this);
  }
  //////////////// Object Generation /////////////////
  getComponent() {
    if (!this.component) {
      this.component = new CellComponent(this);
    }
    return this.component;
  }
}
class ColumnComponent {
  constructor(column) {
    this._column = column;
    this.type = "ColumnComponent";
    return new Proxy(this, {
      get: function(target, name, receiver) {
        if (typeof target[name] !== "undefined") {
          return target[name];
        } else {
          return target._column.table.componentFunctionBinder.handle("column", target._column, name);
        }
      }
    });
  }
  getElement() {
    return this._column.getElement();
  }
  getDefinition() {
    return this._column.getDefinition();
  }
  getField() {
    return this._column.getField();
  }
  getTitleDownload() {
    return this._column.getTitleDownload();
  }
  getCells() {
    var cells = [];
    this._column.cells.forEach(function(cell) {
      cells.push(cell.getComponent());
    });
    return cells;
  }
  isVisible() {
    return this._column.visible;
  }
  show() {
    if (this._column.isGroup) {
      this._column.columns.forEach(function(column) {
        column.show();
      });
    } else {
      this._column.show();
    }
  }
  hide() {
    if (this._column.isGroup) {
      this._column.columns.forEach(function(column) {
        column.hide();
      });
    } else {
      this._column.hide();
    }
  }
  toggle() {
    if (this._column.visible) {
      this.hide();
    } else {
      this.show();
    }
  }
  delete() {
    return this._column.delete();
  }
  getSubColumns() {
    var output = [];
    if (this._column.columns.length) {
      this._column.columns.forEach(function(column) {
        output.push(column.getComponent());
      });
    }
    return output;
  }
  getParentColumn() {
    return this._column.parent instanceof Column ? this._column.parent.getComponent() : false;
  }
  _getSelf() {
    return this._column;
  }
  scrollTo() {
    return this._column.table.columnManager.scrollToColumn(this._column);
  }
  getTable() {
    return this._column.table;
  }
  move(to2, after) {
    var toColumn = this._column.table.columnManager.findColumn(to2);
    if (toColumn) {
      this._column.table.columnManager.moveColumn(this._column, toColumn, after);
    } else {
      console.warn("Move Error - No matching column found:", toColumn);
    }
  }
  getNextColumn() {
    var nextCol = this._column.nextColumn();
    return nextCol ? nextCol.getComponent() : false;
  }
  getPrevColumn() {
    var prevCol = this._column.prevColumn();
    return prevCol ? prevCol.getComponent() : false;
  }
  updateDefinition(updates) {
    return this._column.updateDefinition(updates);
  }
  getWidth() {
    return this._column.getWidth();
  }
  setWidth(width) {
    var result;
    if (width === true) {
      result = this._column.reinitializeWidth(true);
    } else {
      result = this._column.setWidth(width);
    }
    this._column.table.columnManager.rerenderColumns(true);
    return result;
  }
}
var defaultColumnOptions = {
  "title": void 0,
  "field": void 0,
  "columns": void 0,
  "visible": void 0,
  "hozAlign": void 0,
  "vertAlign": void 0,
  "width": void 0,
  "minWidth": 40,
  "maxWidth": void 0,
  "maxInitialWidth": void 0,
  "cssClass": void 0,
  "variableHeight": void 0,
  "headerVertical": void 0,
  "headerHozAlign": void 0,
  "headerWordWrap": false,
  "editableTitle": void 0
};
class Column extends CoreFeature {
  constructor(def2, parent) {
    super(parent.table);
    this.definition = def2;
    this.parent = parent;
    this.type = "column";
    this.columns = [];
    this.cells = [];
    this.element = this.createElement();
    this.contentElement = false;
    this.titleHolderElement = false;
    this.titleElement = false;
    this.groupElement = this.createGroupElement();
    this.isGroup = false;
    this.hozAlign = "";
    this.vertAlign = "";
    this.field = "";
    this.fieldStructure = "";
    this.getFieldValue = "";
    this.setFieldValue = "";
    this.titleDownload = null;
    this.titleFormatterRendered = false;
    this.mapDefinitions();
    this.setField(this.definition.field);
    this.modules = {};
    this.width = null;
    this.widthStyled = "";
    this.maxWidth = null;
    this.maxWidthStyled = "";
    this.maxInitialWidth = null;
    this.minWidth = null;
    this.minWidthStyled = "";
    this.widthFixed = false;
    this.visible = true;
    this.component = null;
    if (this.definition.columns) {
      this.isGroup = true;
      this.definition.columns.forEach((def3, i) => {
        var newCol = new Column(def3, this);
        this.attachColumn(newCol);
      });
      this.checkColumnVisibility();
    } else {
      parent.registerColumnField(this);
    }
    this._initialize();
  }
  createElement() {
    var el = document.createElement("div");
    el.classList.add("tabulator-col");
    el.setAttribute("role", "columnheader");
    el.setAttribute("aria-sort", "none");
    switch (this.table.options.columnHeaderVertAlign) {
      case "middle":
        el.style.justifyContent = "center";
        break;
      case "bottom":
        el.style.justifyContent = "flex-end";
        break;
    }
    return el;
  }
  createGroupElement() {
    var el = document.createElement("div");
    el.classList.add("tabulator-col-group-cols");
    return el;
  }
  mapDefinitions() {
    var defaults2 = this.table.options.columnDefaults;
    if (defaults2) {
      for (let key in defaults2) {
        if (typeof this.definition[key] === "undefined") {
          this.definition[key] = defaults2[key];
        }
      }
    }
    this.definition = this.table.columnManager.optionsList.generate(Column.defaultOptionList, this.definition);
  }
  checkDefinition() {
    Object.keys(this.definition).forEach((key) => {
      if (Column.defaultOptionList.indexOf(key) === -1) {
        console.warn("Invalid column definition option in '" + (this.field || this.definition.title) + "' column:", key);
      }
    });
  }
  setField(field) {
    this.field = field;
    this.fieldStructure = field ? this.table.options.nestedFieldSeparator ? field.split(this.table.options.nestedFieldSeparator) : [field] : [];
    this.getFieldValue = this.fieldStructure.length > 1 ? this._getNestedData : this._getFlatData;
    this.setFieldValue = this.fieldStructure.length > 1 ? this._setNestedData : this._setFlatData;
  }
  //register column position with column manager
  registerColumnPosition(column) {
    this.parent.registerColumnPosition(column);
  }
  //register column position with column manager
  registerColumnField(column) {
    this.parent.registerColumnField(column);
  }
  //trigger position registration
  reRegisterPosition() {
    if (this.isGroup) {
      this.columns.forEach(function(column) {
        column.reRegisterPosition();
      });
    } else {
      this.registerColumnPosition(this);
    }
  }
  //build header element
  _initialize() {
    var def2 = this.definition;
    while (this.element.firstChild)
      this.element.removeChild(this.element.firstChild);
    if (def2.headerVertical) {
      this.element.classList.add("tabulator-col-vertical");
      if (def2.headerVertical === "flip") {
        this.element.classList.add("tabulator-col-vertical-flip");
      }
    }
    this.contentElement = this._buildColumnHeaderContent();
    this.element.appendChild(this.contentElement);
    if (this.isGroup) {
      this._buildGroupHeader();
    } else {
      this._buildColumnHeader();
    }
    this.dispatch("column-init", this);
  }
  //build header element for header
  _buildColumnHeader() {
    var def2 = this.definition;
    this.dispatch("column-layout", this);
    if (typeof def2.visible != "undefined") {
      if (def2.visible) {
        this.show(true);
      } else {
        this.hide(true);
      }
    }
    if (def2.cssClass) {
      var classNames = def2.cssClass.split(" ");
      classNames.forEach((className) => {
        this.element.classList.add(className);
      });
    }
    if (def2.field) {
      this.element.setAttribute("tabulator-field", def2.field);
    }
    this.setMinWidth(parseInt(def2.minWidth));
    if (def2.maxInitialWidth) {
      this.maxInitialWidth = parseInt(def2.maxInitialWidth);
    }
    if (def2.maxWidth) {
      this.setMaxWidth(parseInt(def2.maxWidth));
    }
    this.reinitializeWidth();
    this.hozAlign = this.definition.hozAlign;
    this.vertAlign = this.definition.vertAlign;
    this.titleElement.style.textAlign = this.definition.headerHozAlign;
  }
  _buildColumnHeaderContent() {
    var contentElement = document.createElement("div");
    contentElement.classList.add("tabulator-col-content");
    this.titleHolderElement = document.createElement("div");
    this.titleHolderElement.classList.add("tabulator-col-title-holder");
    contentElement.appendChild(this.titleHolderElement);
    this.titleElement = this._buildColumnHeaderTitle();
    this.titleHolderElement.appendChild(this.titleElement);
    return contentElement;
  }
  //build title element of column
  _buildColumnHeaderTitle() {
    var def2 = this.definition;
    var titleHolderElement = document.createElement("div");
    titleHolderElement.classList.add("tabulator-col-title");
    if (def2.headerWordWrap) {
      titleHolderElement.classList.add("tabulator-col-title-wrap");
    }
    if (def2.editableTitle) {
      var titleElement = document.createElement("input");
      titleElement.classList.add("tabulator-title-editor");
      titleElement.addEventListener("click", (e) => {
        e.stopPropagation();
        titleElement.focus();
      });
      titleElement.addEventListener("change", () => {
        def2.title = titleElement.value;
        this.dispatchExternal("columnTitleChanged", this.getComponent());
      });
      titleHolderElement.appendChild(titleElement);
      if (def2.field) {
        this.langBind("columns|" + def2.field, (text) => {
          titleElement.value = text || (def2.title || "&nbsp;");
        });
      } else {
        titleElement.value = def2.title || "&nbsp;";
      }
    } else {
      if (def2.field) {
        this.langBind("columns|" + def2.field, (text) => {
          this._formatColumnHeaderTitle(titleHolderElement, text || (def2.title || "&nbsp;"));
        });
      } else {
        this._formatColumnHeaderTitle(titleHolderElement, def2.title || "&nbsp;");
      }
    }
    return titleHolderElement;
  }
  _formatColumnHeaderTitle(el, title) {
    var contents = this.chain("column-format", [this, title, el], null, () => {
      return title;
    });
    switch (typeof contents) {
      case "object":
        if (contents instanceof Node) {
          el.appendChild(contents);
        } else {
          el.innerHTML = "";
          console.warn("Format Error - Title formatter has returned a type of object, the only valid formatter object return is an instance of Node, the formatter returned:", contents);
        }
        break;
      case "undefined":
        el.innerHTML = "";
        break;
      default:
        el.innerHTML = contents;
    }
  }
  //build header element for column group
  _buildGroupHeader() {
    this.element.classList.add("tabulator-col-group");
    this.element.setAttribute("role", "columngroup");
    this.element.setAttribute("aria-title", this.definition.title);
    if (this.definition.cssClass) {
      var classNames = this.definition.cssClass.split(" ");
      classNames.forEach((className) => {
        this.element.classList.add(className);
      });
    }
    this.titleElement.style.textAlign = this.definition.headerHozAlign;
    this.element.appendChild(this.groupElement);
  }
  //flat field lookup
  _getFlatData(data) {
    return data[this.field];
  }
  //nested field lookup
  _getNestedData(data) {
    var dataObj = data, structure = this.fieldStructure, length = structure.length, output;
    for (let i = 0; i < length; i++) {
      dataObj = dataObj[structure[i]];
      output = dataObj;
      if (!dataObj) {
        break;
      }
    }
    return output;
  }
  //flat field set
  _setFlatData(data, value) {
    if (this.field) {
      data[this.field] = value;
    }
  }
  //nested field set
  _setNestedData(data, value) {
    var dataObj = data, structure = this.fieldStructure, length = structure.length;
    for (let i = 0; i < length; i++) {
      if (i == length - 1) {
        dataObj[structure[i]] = value;
      } else {
        if (!dataObj[structure[i]]) {
          if (typeof value !== "undefined") {
            dataObj[structure[i]] = {};
          } else {
            break;
          }
        }
        dataObj = dataObj[structure[i]];
      }
    }
  }
  //attach column to this group
  attachColumn(column) {
    if (this.groupElement) {
      this.columns.push(column);
      this.groupElement.appendChild(column.getElement());
      column.columnRendered();
    } else {
      console.warn("Column Warning - Column being attached to another column instead of column group");
    }
  }
  //vertically align header in column
  verticalAlign(alignment, height) {
    var parentHeight = this.parent.isGroup ? this.parent.getGroupElement().clientHeight : height || this.parent.getHeadersElement().clientHeight;
    this.element.style.height = parentHeight + "px";
    this.dispatch("column-height", this, this.element.style.height);
    if (this.isGroup) {
      this.groupElement.style.minHeight = parentHeight - this.contentElement.offsetHeight + "px";
    }
    this.columns.forEach(function(column) {
      column.verticalAlign(alignment);
    });
  }
  //clear vertical alignment
  clearVerticalAlign() {
    this.element.style.paddingTop = "";
    this.element.style.height = "";
    this.element.style.minHeight = "";
    this.groupElement.style.minHeight = "";
    this.columns.forEach(function(column) {
      column.clearVerticalAlign();
    });
    this.dispatch("column-height", this, "");
  }
  //// Retrieve Column Information ////
  //return column header element
  getElement() {
    return this.element;
  }
  //return column group element
  getGroupElement() {
    return this.groupElement;
  }
  //return field name
  getField() {
    return this.field;
  }
  getTitleDownload() {
    return this.titleDownload;
  }
  //return the first column in a group
  getFirstColumn() {
    if (!this.isGroup) {
      return this;
    } else {
      if (this.columns.length) {
        return this.columns[0].getFirstColumn();
      } else {
        return false;
      }
    }
  }
  //return the last column in a group
  getLastColumn() {
    if (!this.isGroup) {
      return this;
    } else {
      if (this.columns.length) {
        return this.columns[this.columns.length - 1].getLastColumn();
      } else {
        return false;
      }
    }
  }
  //return all columns in a group
  getColumns(traverse2) {
    var columns = [];
    if (traverse2) {
      this.columns.forEach((column) => {
        columns.push(column);
        columns = columns.concat(column.getColumns(true));
      });
    } else {
      columns = this.columns;
    }
    return columns;
  }
  //return all columns in a group
  getCells() {
    return this.cells;
  }
  //retrieve the top column in a group of columns
  getTopColumn() {
    if (this.parent.isGroup) {
      return this.parent.getTopColumn();
    } else {
      return this;
    }
  }
  //return column definition object
  getDefinition(updateBranches) {
    var colDefs = [];
    if (this.isGroup && updateBranches) {
      this.columns.forEach(function(column) {
        colDefs.push(column.getDefinition(true));
      });
      this.definition.columns = colDefs;
    }
    return this.definition;
  }
  //////////////////// Actions ////////////////////
  checkColumnVisibility() {
    var visible = false;
    this.columns.forEach(function(column) {
      if (column.visible) {
        visible = true;
      }
    });
    if (visible) {
      this.show();
      this.dispatchExternal("columnVisibilityChanged", this.getComponent(), false);
    } else {
      this.hide();
    }
  }
  //show column
  show(silent, responsiveToggle) {
    if (!this.visible) {
      this.visible = true;
      this.element.style.display = "";
      if (this.parent.isGroup) {
        this.parent.checkColumnVisibility();
      }
      this.cells.forEach(function(cell) {
        cell.show();
      });
      if (!this.isGroup && this.width === null) {
        this.reinitializeWidth();
      }
      this.table.columnManager.verticalAlignHeaders();
      this.dispatch("column-show", this, responsiveToggle);
      if (!silent) {
        this.dispatchExternal("columnVisibilityChanged", this.getComponent(), true);
      }
      if (this.parent.isGroup) {
        this.parent.matchChildWidths();
      }
      if (!this.silent) {
        this.table.columnManager.rerenderColumns();
      }
    }
  }
  //hide column
  hide(silent, responsiveToggle) {
    if (this.visible) {
      this.visible = false;
      this.element.style.display = "none";
      this.table.columnManager.verticalAlignHeaders();
      if (this.parent.isGroup) {
        this.parent.checkColumnVisibility();
      }
      this.cells.forEach(function(cell) {
        cell.hide();
      });
      this.dispatch("column-hide", this, responsiveToggle);
      if (!silent) {
        this.dispatchExternal("columnVisibilityChanged", this.getComponent(), false);
      }
      if (this.parent.isGroup) {
        this.parent.matchChildWidths();
      }
      if (!this.silent) {
        this.table.columnManager.rerenderColumns();
      }
    }
  }
  matchChildWidths() {
    var childWidth = 0;
    if (this.contentElement && this.columns.length) {
      this.columns.forEach(function(column) {
        if (column.visible) {
          childWidth += column.getWidth();
        }
      });
      this.contentElement.style.maxWidth = childWidth - 1 + "px";
      if (this.parent.isGroup) {
        this.parent.matchChildWidths();
      }
    }
  }
  removeChild(child) {
    var index2 = this.columns.indexOf(child);
    if (index2 > -1) {
      this.columns.splice(index2, 1);
    }
    if (!this.columns.length) {
      this.delete();
    }
  }
  setWidth(width) {
    this.widthFixed = true;
    this.setWidthActual(width);
  }
  setWidthActual(width) {
    if (isNaN(width)) {
      width = Math.floor(this.table.element.clientWidth / 100 * parseInt(width));
    }
    width = Math.max(this.minWidth, width);
    if (this.maxWidth) {
      width = Math.min(this.maxWidth, width);
    }
    this.width = width;
    this.widthStyled = width ? width + "px" : "";
    this.element.style.width = this.widthStyled;
    if (!this.isGroup) {
      this.cells.forEach(function(cell) {
        cell.setWidth();
      });
    }
    if (this.parent.isGroup) {
      this.parent.matchChildWidths();
    }
    this.dispatch("column-width", this);
  }
  checkCellHeights() {
    var rows2 = [];
    this.cells.forEach(function(cell) {
      if (cell.row.heightInitialized) {
        if (cell.row.getElement().offsetParent !== null) {
          rows2.push(cell.row);
          cell.row.clearCellHeight();
        } else {
          cell.row.heightInitialized = false;
        }
      }
    });
    rows2.forEach(function(row) {
      row.calcHeight();
    });
    rows2.forEach(function(row) {
      row.setCellHeight();
    });
  }
  getWidth() {
    var width = 0;
    if (this.isGroup) {
      this.columns.forEach(function(column) {
        if (column.visible) {
          width += column.getWidth();
        }
      });
    } else {
      width = this.width;
    }
    return width;
  }
  getLeftOffset() {
    var offset2 = this.element.offsetLeft;
    if (this.parent.isGroup) {
      offset2 += this.parent.getLeftOffset();
    }
    return offset2;
  }
  getHeight() {
    return Math.ceil(this.element.getBoundingClientRect().height);
  }
  setMinWidth(minWidth) {
    if (this.maxWidth && minWidth > this.maxWidth) {
      minWidth = this.maxWidth;
      console.warn("the minWidth (" + minWidth + "px) for column '" + this.field + "' cannot be bigger that its maxWidth (" + this.maxWidthStyled + ")");
    }
    this.minWidth = minWidth;
    this.minWidthStyled = minWidth ? minWidth + "px" : "";
    this.element.style.minWidth = this.minWidthStyled;
    this.cells.forEach(function(cell) {
      cell.setMinWidth();
    });
  }
  setMaxWidth(maxWidth) {
    if (this.minWidth && maxWidth < this.minWidth) {
      maxWidth = this.minWidth;
      console.warn("the maxWidth (" + maxWidth + "px) for column '" + this.field + "' cannot be smaller that its minWidth (" + this.minWidthStyled + ")");
    }
    this.maxWidth = maxWidth;
    this.maxWidthStyled = maxWidth ? maxWidth + "px" : "";
    this.element.style.maxWidth = this.maxWidthStyled;
    this.cells.forEach(function(cell) {
      cell.setMaxWidth();
    });
  }
  delete() {
    return new Promise((resolve2, reject) => {
      if (this.isGroup) {
        this.columns.forEach(function(column) {
          column.delete();
        });
      }
      this.dispatch("column-delete", this);
      var cellCount = this.cells.length;
      for (let i = 0; i < cellCount; i++) {
        this.cells[0].delete();
      }
      if (this.element.parentNode) {
        this.element.parentNode.removeChild(this.element);
      }
      this.element = false;
      this.contentElement = false;
      this.titleElement = false;
      this.groupElement = false;
      if (this.parent.isGroup) {
        this.parent.removeChild(this);
      }
      this.table.columnManager.deregisterColumn(this);
      this.table.columnManager.rerenderColumns(true);
      resolve2();
    });
  }
  columnRendered() {
    if (this.titleFormatterRendered) {
      this.titleFormatterRendered();
    }
    this.dispatch("column-rendered", this);
  }
  //////////////// Cell Management /////////////////
  //generate cell for this column
  generateCell(row) {
    var cell = new Cell(this, row);
    this.cells.push(cell);
    return cell;
  }
  nextColumn() {
    var index2 = this.table.columnManager.findColumnIndex(this);
    return index2 > -1 ? this._nextVisibleColumn(index2 + 1) : false;
  }
  _nextVisibleColumn(index2) {
    var column = this.table.columnManager.getColumnByIndex(index2);
    return !column || column.visible ? column : this._nextVisibleColumn(index2 + 1);
  }
  prevColumn() {
    var index2 = this.table.columnManager.findColumnIndex(this);
    return index2 > -1 ? this._prevVisibleColumn(index2 - 1) : false;
  }
  _prevVisibleColumn(index2) {
    var column = this.table.columnManager.getColumnByIndex(index2);
    return !column || column.visible ? column : this._prevVisibleColumn(index2 - 1);
  }
  reinitializeWidth(force) {
    this.widthFixed = false;
    if (typeof this.definition.width !== "undefined" && !force) {
      this.setWidth(this.definition.width);
    }
    this.dispatch("column-width-fit-before", this);
    this.fitToData(force);
    this.dispatch("column-width-fit-after", this);
  }
  //set column width to maximum cell width for non group columns
  fitToData(force) {
    if (this.isGroup) {
      return;
    }
    if (!this.widthFixed) {
      this.element.style.width = "";
      this.cells.forEach((cell) => {
        cell.clearWidth();
      });
    }
    var maxWidth = this.element.offsetWidth;
    if (!this.width || !this.widthFixed) {
      this.cells.forEach((cell) => {
        var width = cell.getWidth();
        if (width > maxWidth) {
          maxWidth = width;
        }
      });
      if (maxWidth) {
        var setTo = maxWidth + 1;
        if (this.maxInitialWidth && !force) {
          setTo = Math.min(setTo, this.maxInitialWidth);
        }
        this.setWidthActual(setTo);
      }
    }
  }
  updateDefinition(updates) {
    var definition;
    if (!this.isGroup) {
      if (!this.parent.isGroup) {
        definition = Object.assign({}, this.getDefinition());
        definition = Object.assign(definition, updates);
        return this.table.columnManager.addColumn(definition, false, this).then((column) => {
          if (definition.field == this.field) {
            this.field = false;
          }
          return this.delete().then(() => {
            return column.getComponent();
          });
        });
      } else {
        console.error("Column Update Error - The updateDefinition function is only available on ungrouped columns");
        return Promise.reject("Column Update Error - The updateDefinition function is only available on columns, not column groups");
      }
    } else {
      console.error("Column Update Error - The updateDefinition function is only available on ungrouped columns");
      return Promise.reject("Column Update Error - The updateDefinition function is only available on columns, not column groups");
    }
  }
  deleteCell(cell) {
    var index2 = this.cells.indexOf(cell);
    if (index2 > -1) {
      this.cells.splice(index2, 1);
    }
  }
  //////////////// Object Generation /////////////////
  getComponent() {
    if (!this.component) {
      this.component = new ColumnComponent(this);
    }
    return this.component;
  }
}
Column.defaultOptionList = defaultColumnOptions;
class RowComponent {
  constructor(row) {
    this._row = row;
    return new Proxy(this, {
      get: function(target, name, receiver) {
        if (typeof target[name] !== "undefined") {
          return target[name];
        } else {
          return target._row.table.componentFunctionBinder.handle("row", target._row, name);
        }
      }
    });
  }
  getData(transform) {
    return this._row.getData(transform);
  }
  getElement() {
    return this._row.getElement();
  }
  getCells() {
    var cells = [];
    this._row.getCells().forEach(function(cell) {
      cells.push(cell.getComponent());
    });
    return cells;
  }
  getCell(column) {
    var cell = this._row.getCell(column);
    return cell ? cell.getComponent() : false;
  }
  getIndex() {
    return this._row.getData("data")[this._row.table.options.index];
  }
  getPosition() {
    return this._row.getPosition();
  }
  watchPosition(callback) {
    return this._row.watchPosition(callback);
  }
  delete() {
    return this._row.delete();
  }
  scrollTo() {
    return this._row.table.rowManager.scrollToRow(this._row);
  }
  move(to2, after) {
    this._row.moveToRow(to2, after);
  }
  update(data) {
    return this._row.updateData(data);
  }
  normalizeHeight() {
    this._row.normalizeHeight(true);
  }
  _getSelf() {
    return this._row;
  }
  reformat() {
    return this._row.reinitialize();
  }
  getTable() {
    return this._row.table;
  }
  getNextRow() {
    var row = this._row.nextRow();
    return row ? row.getComponent() : row;
  }
  getPrevRow() {
    var row = this._row.prevRow();
    return row ? row.getComponent() : row;
  }
}
class Row extends CoreFeature {
  constructor(data, parent, type = "row") {
    super(parent.table);
    this.parent = parent;
    this.data = {};
    this.type = type;
    this.element = false;
    this.modules = {};
    this.cells = [];
    this.height = 0;
    this.heightStyled = "";
    this.manualHeight = false;
    this.outerHeight = 0;
    this.initialized = false;
    this.heightInitialized = false;
    this.position = 0;
    this.positionWatchers = [];
    this.component = null;
    this.created = false;
    this.setData(data);
  }
  create() {
    if (!this.created) {
      this.created = true;
      this.generateElement();
    }
  }
  createElement() {
    var el = document.createElement("div");
    el.classList.add("tabulator-row");
    el.setAttribute("role", "row");
    this.element = el;
  }
  getElement() {
    this.create();
    return this.element;
  }
  detachElement() {
    if (this.element && this.element.parentNode) {
      this.element.parentNode.removeChild(this.element);
    }
  }
  generateElement() {
    this.createElement();
    this.dispatch("row-init", this);
  }
  generateCells() {
    this.cells = this.table.columnManager.generateCells(this);
  }
  //functions to setup on first render
  initialize(force) {
    this.create();
    if (!this.initialized || force) {
      this.deleteCells();
      while (this.element.firstChild)
        this.element.removeChild(this.element.firstChild);
      this.dispatch("row-layout-before", this);
      this.generateCells();
      this.initialized = true;
      this.table.columnManager.renderer.renderRowCells(this);
      if (force) {
        this.normalizeHeight();
      }
      this.dispatch("row-layout", this);
      if (this.table.options.rowFormatter) {
        this.table.options.rowFormatter(this.getComponent());
      }
      this.dispatch("row-layout-after", this);
    } else {
      this.table.columnManager.renderer.rerenderRowCells(this);
    }
  }
  reinitializeHeight() {
    this.heightInitialized = false;
    if (this.element && this.element.offsetParent !== null) {
      this.normalizeHeight(true);
    }
  }
  deinitialize() {
    this.initialized = false;
  }
  deinitializeHeight() {
    this.heightInitialized = false;
  }
  reinitialize(children) {
    this.initialized = false;
    this.heightInitialized = false;
    if (!this.manualHeight) {
      this.height = 0;
      this.heightStyled = "";
    }
    if (this.element && this.element.offsetParent !== null) {
      this.initialize(true);
    }
    this.dispatch("row-relayout", this);
  }
  //get heights when doing bulk row style calcs in virtual DOM
  calcHeight(force) {
    var maxHeight = 0, minHeight;
    if (this.table.options.rowHeight) {
      this.height = this.table.options.rowHeight;
    } else {
      minHeight = this.table.options.resizableRows ? this.element.clientHeight : 0;
      this.cells.forEach(function(cell) {
        var height = cell.getHeight();
        if (height > maxHeight) {
          maxHeight = height;
        }
      });
      if (force) {
        this.height = Math.max(maxHeight, minHeight);
      } else {
        this.height = this.manualHeight ? this.height : Math.max(maxHeight, minHeight);
      }
    }
    this.heightStyled = this.height ? this.height + "px" : "";
    this.outerHeight = this.element.offsetHeight;
  }
  //set of cells
  setCellHeight() {
    this.cells.forEach(function(cell) {
      cell.setHeight();
    });
    this.heightInitialized = true;
  }
  clearCellHeight() {
    this.cells.forEach(function(cell) {
      cell.clearHeight();
    });
  }
  //normalize the height of elements in the row
  normalizeHeight(force) {
    if (force && !this.table.options.rowHeight) {
      this.clearCellHeight();
    }
    this.calcHeight(force);
    this.setCellHeight();
  }
  //set height of rows
  setHeight(height, force) {
    if (this.height != height || force) {
      this.manualHeight = true;
      this.height = height;
      this.heightStyled = height ? height + "px" : "";
      this.setCellHeight();
      this.outerHeight = this.element.offsetHeight;
    }
  }
  //return rows outer height
  getHeight() {
    return this.outerHeight;
  }
  //return rows outer Width
  getWidth() {
    return this.element.offsetWidth;
  }
  //////////////// Cell Management /////////////////
  deleteCell(cell) {
    var index2 = this.cells.indexOf(cell);
    if (index2 > -1) {
      this.cells.splice(index2, 1);
    }
  }
  //////////////// Data Management /////////////////
  setData(data) {
    this.data = this.chain("row-data-init-before", [this, data], void 0, data);
    this.dispatch("row-data-init-after", this);
  }
  //update the rows data
  updateData(updatedData) {
    var visible = this.element && Helpers.elVisible(this.element), tempData = {}, newRowData;
    return new Promise((resolve2, reject) => {
      if (typeof updatedData === "string") {
        updatedData = JSON.parse(updatedData);
      }
      this.dispatch("row-data-save-before", this);
      if (this.subscribed("row-data-changing")) {
        tempData = Object.assign(tempData, this.data);
        tempData = Object.assign(tempData, updatedData);
      }
      newRowData = this.chain("row-data-changing", [this, tempData, updatedData], null, updatedData);
      for (let attrname in newRowData) {
        this.data[attrname] = newRowData[attrname];
      }
      this.dispatch("row-data-save-after", this);
      for (let attrname in updatedData) {
        let columns = this.table.columnManager.getColumnsByFieldRoot(attrname);
        columns.forEach((column) => {
          let cell = this.getCell(column.getField());
          if (cell) {
            let value = column.getFieldValue(newRowData);
            if (cell.getValue() !== value) {
              cell.setValueProcessData(value);
              if (visible) {
                cell.cellRendered();
              }
            }
          }
        });
      }
      if (visible) {
        this.normalizeHeight(true);
        if (this.table.options.rowFormatter) {
          this.table.options.rowFormatter(this.getComponent());
        }
      } else {
        this.initialized = false;
        this.height = 0;
        this.heightStyled = "";
      }
      this.dispatch("row-data-changed", this, visible, updatedData);
      this.dispatchExternal("rowUpdated", this.getComponent());
      if (this.subscribedExternal("dataChanged")) {
        this.dispatchExternal("dataChanged", this.table.rowManager.getData());
      }
      resolve2();
    });
  }
  getData(transform) {
    if (transform) {
      return this.chain("row-data-retrieve", [this, transform], null, this.data);
    }
    return this.data;
  }
  getCell(column) {
    var match = false;
    column = this.table.columnManager.findColumn(column);
    if (!this.initialized && this.cells.length === 0) {
      this.generateCells();
    }
    match = this.cells.find(function(cell) {
      return cell.column === column;
    });
    return match;
  }
  getCellIndex(findCell) {
    return this.cells.findIndex(function(cell) {
      return cell === findCell;
    });
  }
  findCell(subject) {
    return this.cells.find((cell) => {
      return cell.element === subject;
    });
  }
  getCells() {
    if (!this.initialized && this.cells.length === 0) {
      this.generateCells();
    }
    return this.cells;
  }
  nextRow() {
    var row = this.table.rowManager.nextDisplayRow(this, true);
    return row || false;
  }
  prevRow() {
    var row = this.table.rowManager.prevDisplayRow(this, true);
    return row || false;
  }
  moveToRow(to2, before) {
    var toRow = this.table.rowManager.findRow(to2);
    if (toRow) {
      this.table.rowManager.moveRowActual(this, toRow, !before);
      this.table.rowManager.refreshActiveData("display", false, true);
    } else {
      console.warn("Move Error - No matching row found:", to2);
    }
  }
  ///////////////////// Actions  /////////////////////
  delete() {
    this.dispatch("row-delete", this);
    this.deleteActual();
    return Promise.resolve();
  }
  deleteActual(blockRedraw) {
    this.detachModules();
    this.table.rowManager.deleteRow(this, blockRedraw);
    this.deleteCells();
    this.initialized = false;
    this.heightInitialized = false;
    this.element = false;
    this.dispatch("row-deleted", this);
  }
  detachModules() {
    this.dispatch("row-deleting", this);
  }
  deleteCells() {
    var cellCount = this.cells.length;
    for (let i = 0; i < cellCount; i++) {
      this.cells[0].delete();
    }
  }
  wipe() {
    this.detachModules();
    this.deleteCells();
    if (this.element) {
      while (this.element.firstChild)
        this.element.removeChild(this.element.firstChild);
      if (this.element.parentNode) {
        this.element.parentNode.removeChild(this.element);
      }
    }
    this.element = false;
    this.modules = {};
  }
  isDisplayed() {
    return this.table.rowManager.getDisplayRows().includes(this);
  }
  getPosition() {
    return this.isDisplayed() ? this.position : false;
  }
  setPosition(position) {
    if (position != this.position) {
      this.position = position;
      this.positionWatchers.forEach((callback) => {
        callback(this.position);
      });
    }
  }
  watchPosition(callback) {
    this.positionWatchers.push(callback);
    callback(this.position);
  }
  getGroup() {
    return this.modules.group || false;
  }
  //////////////// Object Generation /////////////////
  getComponent() {
    if (!this.component) {
      this.component = new RowComponent(this);
    }
    return this.component;
  }
}
var defaultCalculations = {
  "avg": function(values, data, calcParams) {
    var output = 0, precision = typeof calcParams.precision !== "undefined" ? calcParams.precision : 2;
    if (values.length) {
      output = values.reduce(function(sum, value) {
        return Number(sum) + Number(value);
      });
      output = output / values.length;
      output = precision !== false ? output.toFixed(precision) : output;
    }
    return parseFloat(output).toString();
  },
  "max": function(values, data, calcParams) {
    var output = null, precision = typeof calcParams.precision !== "undefined" ? calcParams.precision : false;
    values.forEach(function(value) {
      value = Number(value);
      if (value > output || output === null) {
        output = value;
      }
    });
    return output !== null ? precision !== false ? output.toFixed(precision) : output : "";
  },
  "min": function(values, data, calcParams) {
    var output = null, precision = typeof calcParams.precision !== "undefined" ? calcParams.precision : false;
    values.forEach(function(value) {
      value = Number(value);
      if (value < output || output === null) {
        output = value;
      }
    });
    return output !== null ? precision !== false ? output.toFixed(precision) : output : "";
  },
  "sum": function(values, data, calcParams) {
    var output = 0, precision = typeof calcParams.precision !== "undefined" ? calcParams.precision : false;
    if (values.length) {
      values.forEach(function(value) {
        value = Number(value);
        output += !isNaN(value) ? Number(value) : 0;
      });
    }
    return precision !== false ? output.toFixed(precision) : output;
  },
  "concat": function(values, data, calcParams) {
    var output = 0;
    if (values.length) {
      output = values.reduce(function(sum, value) {
        return String(sum) + String(value);
      });
    }
    return output;
  },
  "count": function(values, data, calcParams) {
    var output = 0;
    if (values.length) {
      values.forEach(function(value) {
        if (value) {
          output++;
        }
      });
    }
    return output;
  }
};
class ColumnCalcs extends Module {
  constructor(table) {
    super(table);
    this.topCalcs = [];
    this.botCalcs = [];
    this.genColumn = false;
    this.topElement = this.createElement();
    this.botElement = this.createElement();
    this.topRow = false;
    this.botRow = false;
    this.topInitialized = false;
    this.botInitialized = false;
    this.blocked = false;
    this.recalcAfterBlock = false;
    this.registerTableOption("columnCalcs", true);
    this.registerColumnOption("topCalc");
    this.registerColumnOption("topCalcParams");
    this.registerColumnOption("topCalcFormatter");
    this.registerColumnOption("topCalcFormatterParams");
    this.registerColumnOption("bottomCalc");
    this.registerColumnOption("bottomCalcParams");
    this.registerColumnOption("bottomCalcFormatter");
    this.registerColumnOption("bottomCalcFormatterParams");
  }
  createElement() {
    var el = document.createElement("div");
    el.classList.add("tabulator-calcs-holder");
    return el;
  }
  initialize() {
    this.genColumn = new Column({ field: "value" }, this);
    this.subscribe("cell-value-changed", this.cellValueChanged.bind(this));
    this.subscribe("column-init", this.initializeColumnCheck.bind(this));
    this.subscribe("row-deleted", this.rowsUpdated.bind(this));
    this.subscribe("scroll-horizontal", this.scrollHorizontal.bind(this));
    this.subscribe("row-added", this.rowsUpdated.bind(this));
    this.subscribe("column-moved", this.recalcActiveRows.bind(this));
    this.subscribe("column-add", this.recalcActiveRows.bind(this));
    this.subscribe("data-refreshed", this.recalcActiveRowsRefresh.bind(this));
    this.subscribe("table-redraw", this.tableRedraw.bind(this));
    this.subscribe("rows-visible", this.visibleRows.bind(this));
    this.subscribe("scrollbar-vertical", this.adjustForScrollbar.bind(this));
    this.subscribe("redraw-blocked", this.blockRedraw.bind(this));
    this.subscribe("redraw-restored", this.restoreRedraw.bind(this));
    this.subscribe("table-redrawing", this.resizeHolderWidth.bind(this));
    this.subscribe("column-resized", this.resizeHolderWidth.bind(this));
    this.subscribe("column-show", this.resizeHolderWidth.bind(this));
    this.subscribe("column-hide", this.resizeHolderWidth.bind(this));
    this.registerTableFunction("getCalcResults", this.getResults.bind(this));
    this.registerTableFunction("recalc", this.userRecalc.bind(this));
    this.resizeHolderWidth();
  }
  resizeHolderWidth() {
    this.topElement.style.minWidth = this.table.columnManager.headersElement.offsetWidth + "px";
  }
  tableRedraw(force) {
    this.recalc(this.table.rowManager.activeRows);
    if (force) {
      this.redraw();
    }
  }
  blockRedraw() {
    this.blocked = true;
    this.recalcAfterBlock = false;
  }
  restoreRedraw() {
    this.blocked = false;
    if (this.recalcAfterBlock) {
      this.recalcAfterBlock = false;
      this.recalcActiveRowsRefresh();
    }
  }
  ///////////////////////////////////
  ///////// Table Functions /////////
  ///////////////////////////////////
  userRecalc() {
    this.recalc(this.table.rowManager.activeRows);
  }
  ///////////////////////////////////
  ///////// Internal Logic //////////
  ///////////////////////////////////
  blockCheck() {
    if (this.blocked) {
      this.recalcAfterBlock = true;
    }
    return this.blocked;
  }
  visibleRows(viewable, rows2) {
    if (this.topRow) {
      rows2.unshift(this.topRow);
    }
    if (this.botRow) {
      rows2.push(this.botRow);
    }
    return rows2;
  }
  rowsUpdated(row) {
    if (this.table.options.groupBy) {
      this.recalcRowGroup(row);
    } else {
      this.recalcActiveRows();
    }
  }
  recalcActiveRowsRefresh() {
    if (this.table.options.groupBy && this.table.options.dataTreeStartExpanded && this.table.options.dataTree) {
      this.recalcAll();
    } else {
      this.recalcActiveRows();
    }
  }
  recalcActiveRows() {
    this.recalc(this.table.rowManager.activeRows);
  }
  cellValueChanged(cell) {
    if (cell.column.definition.topCalc || cell.column.definition.bottomCalc) {
      if (this.table.options.groupBy) {
        if (this.table.options.columnCalcs == "table" || this.table.options.columnCalcs == "both") {
          this.recalcActiveRows();
        }
        if (this.table.options.columnCalcs != "table") {
          this.recalcRowGroup(cell.row);
        }
      } else {
        this.recalcActiveRows();
      }
    }
  }
  initializeColumnCheck(column) {
    if (column.definition.topCalc || column.definition.bottomCalc) {
      this.initializeColumn(column);
    }
  }
  //initialize column calcs
  initializeColumn(column) {
    var def2 = column.definition;
    var config = {
      topCalcParams: def2.topCalcParams || {},
      botCalcParams: def2.bottomCalcParams || {}
    };
    if (def2.topCalc) {
      switch (typeof def2.topCalc) {
        case "string":
          if (ColumnCalcs.calculations[def2.topCalc]) {
            config.topCalc = ColumnCalcs.calculations[def2.topCalc];
          } else {
            console.warn("Column Calc Error - No such calculation found, ignoring: ", def2.topCalc);
          }
          break;
        case "function":
          config.topCalc = def2.topCalc;
          break;
      }
      if (config.topCalc) {
        column.modules.columnCalcs = config;
        this.topCalcs.push(column);
        if (this.table.options.columnCalcs != "group") {
          this.initializeTopRow();
        }
      }
    }
    if (def2.bottomCalc) {
      switch (typeof def2.bottomCalc) {
        case "string":
          if (ColumnCalcs.calculations[def2.bottomCalc]) {
            config.botCalc = ColumnCalcs.calculations[def2.bottomCalc];
          } else {
            console.warn("Column Calc Error - No such calculation found, ignoring: ", def2.bottomCalc);
          }
          break;
        case "function":
          config.botCalc = def2.bottomCalc;
          break;
      }
      if (config.botCalc) {
        column.modules.columnCalcs = config;
        this.botCalcs.push(column);
        if (this.table.options.columnCalcs != "group") {
          this.initializeBottomRow();
        }
      }
    }
  }
  //dummy functions to handle being mock column manager
  registerColumnField() {
  }
  removeCalcs() {
    var changed = false;
    if (this.topInitialized) {
      this.topInitialized = false;
      this.topElement.parentNode.removeChild(this.topElement);
      changed = true;
    }
    if (this.botInitialized) {
      this.botInitialized = false;
      this.footerRemove(this.botElement);
      changed = true;
    }
    if (changed) {
      this.table.rowManager.adjustTableSize();
    }
  }
  reinitializeCalcs() {
    if (this.topCalcs.length) {
      this.initializeTopRow();
    }
    if (this.botCalcs.length) {
      this.initializeBottomRow();
    }
  }
  initializeTopRow() {
    if (!this.topInitialized) {
      this.table.columnManager.getContentsElement().insertBefore(this.topElement, this.table.columnManager.headersElement.nextSibling);
      this.topInitialized = true;
    }
  }
  initializeBottomRow() {
    if (!this.botInitialized) {
      this.footerPrepend(this.botElement);
      this.botInitialized = true;
    }
  }
  scrollHorizontal(left2) {
    if (this.botInitialized && this.botRow) {
      this.botElement.scrollLeft = left2;
    }
  }
  recalc(rows2) {
    var data, row;
    if (!this.blockCheck()) {
      if (this.topInitialized || this.botInitialized) {
        data = this.rowsToData(rows2);
        if (this.topInitialized) {
          if (this.topRow) {
            this.topRow.deleteCells();
          }
          row = this.generateRow("top", data);
          this.topRow = row;
          while (this.topElement.firstChild)
            this.topElement.removeChild(this.topElement.firstChild);
          this.topElement.appendChild(row.getElement());
          row.initialize(true);
        }
        if (this.botInitialized) {
          if (this.botRow) {
            this.botRow.deleteCells();
          }
          row = this.generateRow("bottom", data);
          this.botRow = row;
          while (this.botElement.firstChild)
            this.botElement.removeChild(this.botElement.firstChild);
          this.botElement.appendChild(row.getElement());
          row.initialize(true);
        }
        this.table.rowManager.adjustTableSize();
        if (this.table.modExists("frozenColumns")) {
          this.table.modules.frozenColumns.layout();
        }
      }
    }
  }
  recalcRowGroup(row) {
    this.recalcGroup(this.table.modules.groupRows.getRowGroup(row));
  }
  recalcAll() {
    if (this.topCalcs.length || this.botCalcs.length) {
      if (this.table.options.columnCalcs !== "group") {
        this.recalcActiveRows();
      }
      if (this.table.options.groupBy && this.table.options.columnCalcs !== "table") {
        var groups = this.table.modules.groupRows.getChildGroups();
        groups.forEach((group) => {
          this.recalcGroup(group);
        });
      }
    }
  }
  recalcGroup(group) {
    var data, rowData;
    if (!this.blockCheck()) {
      if (group) {
        if (group.calcs) {
          if (group.calcs.bottom) {
            data = this.rowsToData(group.rows);
            rowData = this.generateRowData("bottom", data);
            group.calcs.bottom.updateData(rowData);
            group.calcs.bottom.reinitialize();
          }
          if (group.calcs.top) {
            data = this.rowsToData(group.rows);
            rowData = this.generateRowData("top", data);
            group.calcs.top.updateData(rowData);
            group.calcs.top.reinitialize();
          }
        }
      }
    }
  }
  //generate top stats row
  generateTopRow(rows2) {
    return this.generateRow("top", this.rowsToData(rows2));
  }
  //generate bottom stats row
  generateBottomRow(rows2) {
    return this.generateRow("bottom", this.rowsToData(rows2));
  }
  rowsToData(rows2) {
    var data = [];
    rows2.forEach((row) => {
      data.push(row.getData());
      if (this.table.options.dataTree && this.table.options.dataTreeChildColumnCalcs) {
        if (row.modules.dataTree && row.modules.dataTree.open) {
          var children = this.rowsToData(this.table.modules.dataTree.getFilteredTreeChildren(row));
          data = data.concat(children);
        }
      }
    });
    return data;
  }
  //generate stats row
  generateRow(pos, data) {
    var rowData = this.generateRowData(pos, data), row;
    if (this.table.modExists("mutator")) {
      this.table.modules.mutator.disable();
    }
    row = new Row(rowData, this, "calc");
    if (this.table.modExists("mutator")) {
      this.table.modules.mutator.enable();
    }
    row.getElement().classList.add("tabulator-calcs", "tabulator-calcs-" + pos);
    row.component = false;
    row.getComponent = () => {
      if (!row.component) {
        row.component = new CalcComponent(row);
      }
      return row.component;
    };
    row.generateCells = () => {
      var cells = [];
      this.table.columnManager.columnsByIndex.forEach((column) => {
        this.genColumn.setField(column.getField());
        this.genColumn.hozAlign = column.hozAlign;
        if (column.definition[pos + "CalcFormatter"] && this.table.modExists("format")) {
          this.genColumn.modules.format = {
            formatter: this.table.modules.format.getFormatter(column.definition[pos + "CalcFormatter"]),
            params: column.definition[pos + "CalcFormatterParams"] || {}
          };
        } else {
          this.genColumn.modules.format = {
            formatter: this.table.modules.format.getFormatter("plaintext"),
            params: {}
          };
        }
        this.genColumn.definition.cssClass = column.definition.cssClass;
        var cell = new Cell(this.genColumn, row);
        cell.getElement();
        cell.column = column;
        cell.setWidth();
        column.cells.push(cell);
        cells.push(cell);
        if (!column.visible) {
          cell.hide();
        }
      });
      row.cells = cells;
    };
    return row;
  }
  //generate stats row
  generateRowData(pos, data) {
    var rowData = {}, calcs = pos == "top" ? this.topCalcs : this.botCalcs, type = pos == "top" ? "topCalc" : "botCalc", params, paramKey;
    calcs.forEach(function(column) {
      var values = [];
      if (column.modules.columnCalcs && column.modules.columnCalcs[type]) {
        data.forEach(function(item) {
          values.push(column.getFieldValue(item));
        });
        paramKey = type + "Params";
        params = typeof column.modules.columnCalcs[paramKey] === "function" ? column.modules.columnCalcs[paramKey](values, data) : column.modules.columnCalcs[paramKey];
        column.setFieldValue(rowData, column.modules.columnCalcs[type](values, data, params));
      }
    });
    return rowData;
  }
  hasTopCalcs() {
    return !!this.topCalcs.length;
  }
  hasBottomCalcs() {
    return !!this.botCalcs.length;
  }
  //handle table redraw
  redraw() {
    if (this.topRow) {
      this.topRow.normalizeHeight(true);
    }
    if (this.botRow) {
      this.botRow.normalizeHeight(true);
    }
  }
  //return the calculated
  getResults() {
    var results = {}, groups;
    if (this.table.options.groupBy && this.table.modExists("groupRows")) {
      groups = this.table.modules.groupRows.getGroups(true);
      groups.forEach((group) => {
        results[group.getKey()] = this.getGroupResults(group);
      });
    } else {
      results = {
        top: this.topRow ? this.topRow.getData() : {},
        bottom: this.botRow ? this.botRow.getData() : {}
      };
    }
    return results;
  }
  //get results from a group
  getGroupResults(group) {
    var groupObj = group._getSelf(), subGroups = group.getSubGroups(), subGroupResults = {}, results = {};
    subGroups.forEach((subgroup) => {
      subGroupResults[subgroup.getKey()] = this.getGroupResults(subgroup);
    });
    results = {
      top: groupObj.calcs.top ? groupObj.calcs.top.getData() : {},
      bottom: groupObj.calcs.bottom ? groupObj.calcs.bottom.getData() : {},
      groups: subGroupResults
    };
    return results;
  }
  adjustForScrollbar(width) {
    if (this.botRow) {
      if (this.table.rtl) {
        this.botElement.style.paddingLeft = width + "px";
      } else {
        this.botElement.style.paddingRight = width + "px";
      }
    }
  }
}
ColumnCalcs.moduleName = "columnCalcs";
ColumnCalcs.calculations = defaultCalculations;
class DataTree extends Module {
  constructor(table) {
    super(table);
    this.indent = 10;
    this.field = "";
    this.collapseEl = null;
    this.expandEl = null;
    this.branchEl = null;
    this.elementField = false;
    this.startOpen = function() {
    };
    this.registerTableOption("dataTree", false);
    this.registerTableOption("dataTreeFilter", true);
    this.registerTableOption("dataTreeSort", true);
    this.registerTableOption("dataTreeElementColumn", false);
    this.registerTableOption("dataTreeBranchElement", true);
    this.registerTableOption("dataTreeChildIndent", 9);
    this.registerTableOption("dataTreeChildField", "_children");
    this.registerTableOption("dataTreeCollapseElement", false);
    this.registerTableOption("dataTreeExpandElement", false);
    this.registerTableOption("dataTreeStartExpanded", false);
    this.registerTableOption("dataTreeChildColumnCalcs", false);
    this.registerTableOption("dataTreeSelectPropagate", false);
    this.registerComponentFunction("row", "treeCollapse", this.collapseRow.bind(this));
    this.registerComponentFunction("row", "treeExpand", this.expandRow.bind(this));
    this.registerComponentFunction("row", "treeToggle", this.toggleRow.bind(this));
    this.registerComponentFunction("row", "getTreeParent", this.getTreeParent.bind(this));
    this.registerComponentFunction("row", "getTreeChildren", this.getRowChildren.bind(this));
    this.registerComponentFunction("row", "addTreeChild", this.addTreeChildRow.bind(this));
    this.registerComponentFunction("row", "isTreeExpanded", this.isRowExpanded.bind(this));
  }
  initialize() {
    if (this.table.options.dataTree) {
      var dummyEl = null, options = this.table.options;
      this.field = options.dataTreeChildField;
      this.indent = options.dataTreeChildIndent;
      if (this.options("movableRows")) {
        console.warn("The movableRows option is not available with dataTree enabled, moving of child rows could result in unpredictable behavior");
      }
      if (options.dataTreeBranchElement) {
        if (options.dataTreeBranchElement === true) {
          this.branchEl = document.createElement("div");
          this.branchEl.classList.add("tabulator-data-tree-branch");
        } else {
          if (typeof options.dataTreeBranchElement === "string") {
            dummyEl = document.createElement("div");
            dummyEl.innerHTML = options.dataTreeBranchElement;
            this.branchEl = dummyEl.firstChild;
          } else {
            this.branchEl = options.dataTreeBranchElement;
          }
        }
      }
      if (options.dataTreeCollapseElement) {
        if (typeof options.dataTreeCollapseElement === "string") {
          dummyEl = document.createElement("div");
          dummyEl.innerHTML = options.dataTreeCollapseElement;
          this.collapseEl = dummyEl.firstChild;
        } else {
          this.collapseEl = options.dataTreeCollapseElement;
        }
      } else {
        this.collapseEl = document.createElement("div");
        this.collapseEl.classList.add("tabulator-data-tree-control");
        this.collapseEl.tabIndex = 0;
        this.collapseEl.innerHTML = "<div class='tabulator-data-tree-control-collapse'></div>";
      }
      if (options.dataTreeExpandElement) {
        if (typeof options.dataTreeExpandElement === "string") {
          dummyEl = document.createElement("div");
          dummyEl.innerHTML = options.dataTreeExpandElement;
          this.expandEl = dummyEl.firstChild;
        } else {
          this.expandEl = options.dataTreeExpandElement;
        }
      } else {
        this.expandEl = document.createElement("div");
        this.expandEl.classList.add("tabulator-data-tree-control");
        this.expandEl.tabIndex = 0;
        this.expandEl.innerHTML = "<div class='tabulator-data-tree-control-expand'></div>";
      }
      switch (typeof options.dataTreeStartExpanded) {
        case "boolean":
          this.startOpen = function(row, index2) {
            return options.dataTreeStartExpanded;
          };
          break;
        case "function":
          this.startOpen = options.dataTreeStartExpanded;
          break;
        default:
          this.startOpen = function(row, index2) {
            return options.dataTreeStartExpanded[index2];
          };
          break;
      }
      this.subscribe("row-init", this.initializeRow.bind(this));
      this.subscribe("row-layout-after", this.layoutRow.bind(this));
      this.subscribe("row-deleted", this.rowDelete.bind(this), 0);
      this.subscribe("row-data-changed", this.rowDataChanged.bind(this), 10);
      this.subscribe("cell-value-updated", this.cellValueChanged.bind(this));
      this.subscribe("edit-cancelled", this.cellValueChanged.bind(this));
      this.subscribe("column-moving-rows", this.columnMoving.bind(this));
      this.subscribe("table-built", this.initializeElementField.bind(this));
      this.subscribe("table-redrawing", this.tableRedrawing.bind(this));
      this.registerDisplayHandler(this.getRows.bind(this), 30);
    }
  }
  tableRedrawing(force) {
    var rows2;
    if (force) {
      rows2 = this.table.rowManager.getRows();
      rows2.forEach((row) => {
        this.reinitializeRowChildren(row);
      });
    }
  }
  initializeElementField() {
    var firstCol = this.table.columnManager.getFirstVisibleColumn();
    this.elementField = this.table.options.dataTreeElementColumn || (firstCol ? firstCol.field : false);
  }
  getRowChildren(row) {
    return this.getTreeChildren(row, true);
  }
  columnMoving() {
    var rows2 = [];
    this.table.rowManager.rows.forEach((row) => {
      rows2 = rows2.concat(this.getTreeChildren(row, false, true));
    });
    return rows2;
  }
  rowDataChanged(row, visible, updatedData) {
    if (this.redrawNeeded(updatedData)) {
      this.initializeRow(row);
      if (visible) {
        this.layoutRow(row);
        this.refreshData(true);
      }
    }
  }
  cellValueChanged(cell) {
    var field = cell.column.getField();
    if (field === this.elementField) {
      this.layoutRow(cell.row);
    }
  }
  initializeRow(row) {
    var childArray = row.getData()[this.field];
    var isArray2 = Array.isArray(childArray);
    var children = isArray2 || !isArray2 && typeof childArray === "object" && childArray !== null;
    if (!children && row.modules.dataTree && row.modules.dataTree.branchEl) {
      row.modules.dataTree.branchEl.parentNode.removeChild(row.modules.dataTree.branchEl);
    }
    if (!children && row.modules.dataTree && row.modules.dataTree.controlEl) {
      row.modules.dataTree.controlEl.parentNode.removeChild(row.modules.dataTree.controlEl);
    }
    row.modules.dataTree = {
      index: row.modules.dataTree ? row.modules.dataTree.index : 0,
      open: children ? row.modules.dataTree ? row.modules.dataTree.open : this.startOpen(row.getComponent(), 0) : false,
      controlEl: row.modules.dataTree && children ? row.modules.dataTree.controlEl : false,
      branchEl: row.modules.dataTree && children ? row.modules.dataTree.branchEl : false,
      parent: row.modules.dataTree ? row.modules.dataTree.parent : false,
      children
    };
  }
  reinitializeRowChildren(row) {
    var children = this.getTreeChildren(row, false, true);
    children.forEach(function(child) {
      child.reinitialize(true);
    });
  }
  layoutRow(row) {
    var cell = this.elementField ? row.getCell(this.elementField) : row.getCells()[0], el = cell.getElement(), config = row.modules.dataTree;
    if (config.branchEl) {
      if (config.branchEl.parentNode) {
        config.branchEl.parentNode.removeChild(config.branchEl);
      }
      config.branchEl = false;
    }
    if (config.controlEl) {
      if (config.controlEl.parentNode) {
        config.controlEl.parentNode.removeChild(config.controlEl);
      }
      config.controlEl = false;
    }
    this.generateControlElement(row, el);
    row.getElement().classList.add("tabulator-tree-level-" + config.index);
    if (config.index) {
      if (this.branchEl) {
        config.branchEl = this.branchEl.cloneNode(true);
        el.insertBefore(config.branchEl, el.firstChild);
        if (this.table.rtl) {
          config.branchEl.style.marginRight = (config.branchEl.offsetWidth + config.branchEl.style.marginLeft) * (config.index - 1) + config.index * this.indent + "px";
        } else {
          config.branchEl.style.marginLeft = (config.branchEl.offsetWidth + config.branchEl.style.marginRight) * (config.index - 1) + config.index * this.indent + "px";
        }
      } else {
        if (this.table.rtl) {
          el.style.paddingRight = parseInt(window.getComputedStyle(el, null).getPropertyValue("padding-right")) + config.index * this.indent + "px";
        } else {
          el.style.paddingLeft = parseInt(window.getComputedStyle(el, null).getPropertyValue("padding-left")) + config.index * this.indent + "px";
        }
      }
    }
  }
  generateControlElement(row, el) {
    var config = row.modules.dataTree, oldControl = config.controlEl;
    el = el || row.getCells()[0].getElement();
    if (config.children !== false) {
      if (config.open) {
        config.controlEl = this.collapseEl.cloneNode(true);
        config.controlEl.addEventListener("click", (e) => {
          e.stopPropagation();
          this.collapseRow(row);
        });
      } else {
        config.controlEl = this.expandEl.cloneNode(true);
        config.controlEl.addEventListener("click", (e) => {
          e.stopPropagation();
          this.expandRow(row);
        });
      }
      config.controlEl.addEventListener("mousedown", (e) => {
        e.stopPropagation();
      });
      if (oldControl && oldControl.parentNode === el) {
        oldControl.parentNode.replaceChild(config.controlEl, oldControl);
      } else {
        el.insertBefore(config.controlEl, el.firstChild);
      }
    }
  }
  getRows(rows2) {
    var output = [];
    rows2.forEach((row, i) => {
      var config, children;
      output.push(row);
      if (row instanceof Row) {
        row.create();
        config = row.modules.dataTree.children;
        if (!config.index && config.children !== false) {
          children = this.getChildren(row);
          children.forEach((child) => {
            child.create();
            output.push(child);
          });
        }
      }
    });
    return output;
  }
  getChildren(row, allChildren) {
    var config = row.modules.dataTree, children = [], output = [];
    if (config.children !== false && (config.open || allChildren)) {
      if (!Array.isArray(config.children)) {
        config.children = this.generateChildren(row);
      }
      if (this.table.modExists("filter") && this.table.options.dataTreeFilter) {
        children = this.table.modules.filter.filter(config.children);
      } else {
        children = config.children;
      }
      if (this.table.modExists("sort") && this.table.options.dataTreeSort) {
        this.table.modules.sort.sort(children);
      }
      children.forEach((child) => {
        output.push(child);
        var subChildren = this.getChildren(child);
        subChildren.forEach((sub) => {
          output.push(sub);
        });
      });
    }
    return output;
  }
  generateChildren(row) {
    var children = [];
    var childArray = row.getData()[this.field];
    if (!Array.isArray(childArray)) {
      childArray = [childArray];
    }
    childArray.forEach((childData) => {
      var childRow = new Row(childData || {}, this.table.rowManager);
      childRow.create();
      childRow.modules.dataTree.index = row.modules.dataTree.index + 1;
      childRow.modules.dataTree.parent = row;
      if (childRow.modules.dataTree.children) {
        childRow.modules.dataTree.open = this.startOpen(childRow.getComponent(), childRow.modules.dataTree.index);
      }
      children.push(childRow);
    });
    return children;
  }
  expandRow(row, silent) {
    var config = row.modules.dataTree;
    if (config.children !== false) {
      config.open = true;
      row.reinitialize();
      this.refreshData(true);
      this.dispatchExternal("dataTreeRowExpanded", row.getComponent(), row.modules.dataTree.index);
    }
  }
  collapseRow(row) {
    var config = row.modules.dataTree;
    if (config.children !== false) {
      config.open = false;
      row.reinitialize();
      this.refreshData(true);
      this.dispatchExternal("dataTreeRowCollapsed", row.getComponent(), row.modules.dataTree.index);
    }
  }
  toggleRow(row) {
    var config = row.modules.dataTree;
    if (config.children !== false) {
      if (config.open) {
        this.collapseRow(row);
      } else {
        this.expandRow(row);
      }
    }
  }
  isRowExpanded(row) {
    return row.modules.dataTree.open;
  }
  getTreeParent(row) {
    return row.modules.dataTree.parent ? row.modules.dataTree.parent.getComponent() : false;
  }
  getTreeParentRoot(row) {
    return row.modules.dataTree && row.modules.dataTree.parent ? this.getTreeParentRoot(row.modules.dataTree.parent) : row;
  }
  getFilteredTreeChildren(row) {
    var config = row.modules.dataTree, output = [], children;
    if (config.children) {
      if (!Array.isArray(config.children)) {
        config.children = this.generateChildren(row);
      }
      if (this.table.modExists("filter") && this.table.options.dataTreeFilter) {
        children = this.table.modules.filter.filter(config.children);
      } else {
        children = config.children;
      }
      children.forEach((childRow) => {
        if (childRow instanceof Row) {
          output.push(childRow);
        }
      });
    }
    return output;
  }
  rowDelete(row) {
    var parent = row.modules.dataTree.parent, childIndex;
    if (parent) {
      childIndex = this.findChildIndex(row, parent);
      if (childIndex !== false) {
        parent.data[this.field].splice(childIndex, 1);
      }
      if (!parent.data[this.field].length) {
        delete parent.data[this.field];
      }
      this.initializeRow(parent);
      this.layoutRow(parent);
    }
    this.refreshData(true);
  }
  addTreeChildRow(row, data, top2, index2) {
    var childIndex = false;
    if (typeof data === "string") {
      data = JSON.parse(data);
    }
    if (!Array.isArray(row.data[this.field])) {
      row.data[this.field] = [];
      row.modules.dataTree.open = this.startOpen(row.getComponent(), row.modules.dataTree.index);
    }
    if (typeof index2 !== "undefined") {
      childIndex = this.findChildIndex(index2, row);
      if (childIndex !== false) {
        row.data[this.field].splice(top2 ? childIndex : childIndex + 1, 0, data);
      }
    }
    if (childIndex === false) {
      if (top2) {
        row.data[this.field].unshift(data);
      } else {
        row.data[this.field].push(data);
      }
    }
    this.initializeRow(row);
    this.layoutRow(row);
    this.refreshData(true);
  }
  findChildIndex(subject, parent) {
    var match = false;
    if (typeof subject == "object") {
      if (subject instanceof Row) {
        match = subject.data;
      } else if (subject instanceof RowComponent) {
        match = subject._getSelf().data;
      } else if (typeof HTMLElement !== "undefined" && subject instanceof HTMLElement) {
        if (parent.modules.dataTree) {
          match = parent.modules.dataTree.children.find((childRow) => {
            return childRow instanceof Row ? childRow.element === subject : false;
          });
          if (match) {
            match = match.data;
          }
        }
      } else if (subject === null) {
        match = false;
      }
    } else if (typeof subject == "undefined") {
      match = false;
    } else {
      match = parent.data[this.field].find((row) => {
        return row.data[this.table.options.index] == subject;
      });
    }
    if (match) {
      if (Array.isArray(parent.data[this.field])) {
        match = parent.data[this.field].indexOf(match);
      }
      if (match == -1) {
        match = false;
      }
    }
    return match;
  }
  getTreeChildren(row, component, recurse) {
    var config = row.modules.dataTree, output = [];
    if (config.children) {
      if (!Array.isArray(config.children)) {
        config.children = this.generateChildren(row);
      }
      config.children.forEach((childRow) => {
        if (childRow instanceof Row) {
          output.push(component ? childRow.getComponent() : childRow);
          if (recurse) {
            output = output.concat(this.getTreeChildren(childRow, component, recurse));
          }
        }
      });
    }
    return output;
  }
  getChildField() {
    return this.field;
  }
  redrawNeeded(data) {
    return (this.field ? typeof data[this.field] !== "undefined" : false) || (this.elementField ? typeof data[this.elementField] !== "undefined" : false);
  }
}
DataTree.moduleName = "dataTree";
function csv(list2, options = {}, setFileContents) {
  var delimiter = options.delimiter ? options.delimiter : ",", fileContents = [], headers = [];
  list2.forEach((row) => {
    var item = [];
    switch (row.type) {
      case "group":
        console.warn("Download Warning - CSV downloader cannot process row groups");
        break;
      case "calc":
        console.warn("Download Warning - CSV downloader cannot process column calculations");
        break;
      case "header":
        row.columns.forEach((col, i) => {
          if (col && col.depth === 1) {
            headers[i] = typeof col.value == "undefined" || col.value === null ? "" : '"' + String(col.value).split('"').join('""') + '"';
          }
        });
        break;
      case "row":
        row.columns.forEach((col) => {
          if (col) {
            switch (typeof col.value) {
              case "object":
                col.value = col.value !== null ? JSON.stringify(col.value) : "";
                break;
              case "undefined":
                col.value = "";
                break;
            }
            item.push('"' + String(col.value).split('"').join('""') + '"');
          }
        });
        fileContents.push(item.join(delimiter));
        break;
    }
  });
  if (headers.length) {
    fileContents.unshift(headers.join(delimiter));
  }
  fileContents = fileContents.join("\n");
  if (options.bom) {
    fileContents = "\uFEFF" + fileContents;
  }
  setFileContents(fileContents, "text/csv");
}
function json(list2, options, setFileContents) {
  var fileContents = [];
  list2.forEach((row) => {
    var item = {};
    switch (row.type) {
      case "header":
        break;
      case "group":
        console.warn("Download Warning - JSON downloader cannot process row groups");
        break;
      case "calc":
        console.warn("Download Warning - JSON downloader cannot process column calculations");
        break;
      case "row":
        row.columns.forEach((col) => {
          if (col) {
            item[col.component.getTitleDownload() || col.component.getField()] = col.value;
          }
        });
        fileContents.push(item);
        break;
    }
  });
  fileContents = JSON.stringify(fileContents, null, "	");
  setFileContents(fileContents, "application/json");
}
function pdf(list2, options = {}, setFileContents) {
  var header = [], body = [], autoTableParams = {}, rowGroupStyles = options.rowGroupStyles || {
    fontStyle: "bold",
    fontSize: 12,
    cellPadding: 6,
    fillColor: 220
  }, rowCalcStyles = options.rowCalcStyles || {
    fontStyle: "bold",
    fontSize: 10,
    cellPadding: 4,
    fillColor: 232
  }, jsPDFParams = options.jsPDF || {}, title = options.title ? options.title : "";
  if (!jsPDFParams.orientation) {
    jsPDFParams.orientation = options.orientation || "landscape";
  }
  if (!jsPDFParams.unit) {
    jsPDFParams.unit = "pt";
  }
  list2.forEach((row) => {
    switch (row.type) {
      case "header":
        header.push(parseRow(row));
        break;
      case "group":
        body.push(parseRow(row, rowGroupStyles));
        break;
      case "calc":
        body.push(parseRow(row, rowCalcStyles));
        break;
      case "row":
        body.push(parseRow(row));
        break;
    }
  });
  function parseRow(row, styles) {
    var rowData = [];
    row.columns.forEach((col) => {
      var cell;
      if (col) {
        switch (typeof col.value) {
          case "object":
            col.value = col.value !== null ? JSON.stringify(col.value) : "";
            break;
          case "undefined":
            col.value = "";
            break;
        }
        cell = {
          content: col.value,
          colSpan: col.width,
          rowSpan: col.height
        };
        if (styles) {
          cell.styles = styles;
        }
        rowData.push(cell);
      }
    });
    return rowData;
  }
  var doc2 = new jspdf.jsPDF(jsPDFParams);
  if (options.autoTable) {
    if (typeof options.autoTable === "function") {
      autoTableParams = options.autoTable(doc2) || {};
    } else {
      autoTableParams = options.autoTable;
    }
  }
  if (title) {
    autoTableParams.didDrawPage = function(data) {
      doc2.text(title, 40, 30);
    };
  }
  autoTableParams.head = header;
  autoTableParams.body = body;
  doc2.autoTable(autoTableParams);
  if (options.documentProcessing) {
    options.documentProcessing(doc2);
  }
  setFileContents(doc2.output("arraybuffer"), "application/pdf");
}
function xlsx(list2, options, setFileContents) {
  var self2 = this, sheetName = options.sheetName || "Sheet1", workbook = XLSX.utils.book_new(), tableFeatures = new CoreFeature(this), compression = "compress" in options ? options.compress : true, output;
  workbook.SheetNames = [];
  workbook.Sheets = {};
  function generateSheet() {
    var rows2 = [], merges = [], worksheet = {}, range2 = { s: { c: 0, r: 0 }, e: { c: list2[0] ? list2[0].columns.reduce((a, b) => a + (b && b.width ? b.width : 1), 0) : 0, r: list2.length } };
    list2.forEach((row, i) => {
      var rowData = [];
      row.columns.forEach(function(col, j) {
        if (col) {
          rowData.push(!(col.value instanceof Date) && typeof col.value === "object" ? JSON.stringify(col.value) : col.value);
          if (col.width > 1 || col.height > -1) {
            if (col.height > 1 || col.width > 1) {
              merges.push({ s: { r: i, c: j }, e: { r: i + col.height - 1, c: j + col.width - 1 } });
            }
          }
        } else {
          rowData.push("");
        }
      });
      rows2.push(rowData);
    });
    XLSX.utils.sheet_add_aoa(worksheet, rows2);
    worksheet["!ref"] = XLSX.utils.encode_range(range2);
    if (merges.length) {
      worksheet["!merges"] = merges;
    }
    return worksheet;
  }
  if (options.sheetOnly) {
    setFileContents(generateSheet());
    return;
  }
  if (options.sheets) {
    for (var sheet in options.sheets) {
      if (options.sheets[sheet] === true) {
        workbook.SheetNames.push(sheet);
        workbook.Sheets[sheet] = generateSheet();
      } else {
        workbook.SheetNames.push(sheet);
        tableFeatures.commsSend(options.sheets[sheet], "download", "intercept", {
          type: "xlsx",
          options: { sheetOnly: true },
          active: self2.active,
          intercept: function(data) {
            workbook.Sheets[sheet] = data;
          }
        });
      }
    }
  } else {
    workbook.SheetNames.push(sheetName);
    workbook.Sheets[sheetName] = generateSheet();
  }
  if (options.documentProcessing) {
    workbook = options.documentProcessing(workbook);
  }
  function s2ab(s) {
    var buf = new ArrayBuffer(s.length);
    var view = new Uint8Array(buf);
    for (var i = 0; i != s.length; ++i)
      view[i] = s.charCodeAt(i) & 255;
    return buf;
  }
  output = XLSX.write(workbook, { bookType: "xlsx", bookSST: true, type: "binary", compression });
  setFileContents(s2ab(output), "application/octet-stream");
}
function html(list2, options, setFileContents) {
  if (this.modExists("export", true)) {
    setFileContents(this.modules.export.generateHTMLTable(list2), "text/html");
  }
}
function jsonLines(list2, options, setFileContents) {
  const fileContents = [];
  list2.forEach((row) => {
    const item = {};
    switch (row.type) {
      case "header":
        break;
      case "group":
        console.warn("Download Warning - JSON downloader cannot process row groups");
        break;
      case "calc":
        console.warn("Download Warning - JSON downloader cannot process column calculations");
        break;
      case "row":
        row.columns.forEach((col) => {
          if (col) {
            item[col.component.getTitleDownload() || col.component.getField()] = col.value;
          }
        });
        fileContents.push(JSON.stringify(item));
        break;
    }
  });
  setFileContents(fileContents.join("\n"), "application/x-ndjson");
}
var defaultDownloaders = {
  csv,
  json,
  jsonLines,
  pdf,
  xlsx,
  html
};
let Download$1 = class Download extends Module {
  constructor(table) {
    super(table);
    this.registerTableOption("downloadEncoder", function(data, mimeType) {
      return new Blob([data], { type: mimeType });
    });
    this.registerTableOption("downloadReady", void 0);
    this.registerTableOption("downloadConfig", {});
    this.registerTableOption("downloadRowRange", "active");
    this.registerColumnOption("download");
    this.registerColumnOption("titleDownload");
  }
  initialize() {
    this.deprecatedOptionsCheck();
    this.registerTableFunction("download", this.download.bind(this));
    this.registerTableFunction("downloadToTab", this.downloadToTab.bind(this));
  }
  deprecatedOptionsCheck() {
    this.deprecationCheck("downloadReady", "downloadEncoder");
  }
  ///////////////////////////////////
  ///////// Table Functions /////////
  ///////////////////////////////////
  downloadToTab(type, filename, options, active) {
    this.download(type, filename, options, active, true);
  }
  ///////////////////////////////////
  ///////// Internal Logic //////////
  ///////////////////////////////////
  //trigger file download
  download(type, filename, options, range2, interceptCallback) {
    var downloadFunc = false;
    function buildLink(data, mime) {
      if (interceptCallback) {
        if (interceptCallback === true) {
          this.triggerDownload(data, mime, type, filename, true);
        } else {
          interceptCallback(data);
        }
      } else {
        this.triggerDownload(data, mime, type, filename);
      }
    }
    if (typeof type == "function") {
      downloadFunc = type;
    } else {
      if (Download.downloaders[type]) {
        downloadFunc = Download.downloaders[type];
      } else {
        console.warn("Download Error - No such download type found: ", type);
      }
    }
    if (downloadFunc) {
      var list2 = this.generateExportList(range2);
      downloadFunc.call(this.table, list2, options || {}, buildLink.bind(this));
    }
  }
  generateExportList(range2) {
    var list2 = this.table.modules.export.generateExportList(this.table.options.downloadConfig, false, range2 || this.table.options.downloadRowRange, "download");
    var groupHeader = this.table.options.groupHeaderDownload;
    if (groupHeader && !Array.isArray(groupHeader)) {
      groupHeader = [groupHeader];
    }
    list2.forEach((row) => {
      var group;
      if (row.type === "group") {
        group = row.columns[0];
        if (groupHeader && groupHeader[row.indent]) {
          group.value = groupHeader[row.indent](group.value, row.component._group.getRowCount(), row.component._group.getData(), row.component);
        }
      }
    });
    return list2;
  }
  triggerDownload(data, mime, type, filename, newTab) {
    var element = document.createElement("a"), blob = this.table.options.downloadEncoder(data, mime);
    if (blob) {
      if (newTab) {
        window.open(window.URL.createObjectURL(blob));
      } else {
        filename = filename || "Tabulator." + (typeof type === "function" ? "txt" : type);
        if (navigator.msSaveOrOpenBlob) {
          navigator.msSaveOrOpenBlob(blob, filename);
        } else {
          element.setAttribute("href", window.URL.createObjectURL(blob));
          element.setAttribute("download", filename);
          element.style.display = "none";
          document.body.appendChild(element);
          element.click();
          document.body.removeChild(element);
        }
      }
      this.dispatchExternal("downloadComplete");
    }
  }
  commsReceived(table, action, data) {
    switch (action) {
      case "intercept":
        this.download(data.type, "", data.options, data.active, data.intercept);
        break;
    }
  }
};
Download$1.moduleName = "download";
Download$1.downloaders = defaultDownloaders;
function maskInput(el, options) {
  var mask = options.mask, maskLetter = typeof options.maskLetterChar !== "undefined" ? options.maskLetterChar : "A", maskNumber = typeof options.maskNumberChar !== "undefined" ? options.maskNumberChar : "9", maskWildcard = typeof options.maskWildcardChar !== "undefined" ? options.maskWildcardChar : "*";
  function fillSymbols(index2) {
    var symbol = mask[index2];
    if (typeof symbol !== "undefined" && symbol !== maskWildcard && symbol !== maskLetter && symbol !== maskNumber) {
      el.value = el.value + "" + symbol;
      fillSymbols(index2 + 1);
    }
  }
  el.addEventListener("keydown", (e) => {
    var index2 = el.value.length, char = e.key;
    if (e.keyCode > 46 && !e.ctrlKey && !e.metaKey) {
      if (index2 >= mask.length) {
        e.preventDefault();
        e.stopPropagation();
        return false;
      } else {
        switch (mask[index2]) {
          case maskLetter:
            if (char.toUpperCase() == char.toLowerCase()) {
              e.preventDefault();
              e.stopPropagation();
              return false;
            }
            break;
          case maskNumber:
            if (isNaN(char)) {
              e.preventDefault();
              e.stopPropagation();
              return false;
            }
            break;
          case maskWildcard:
            break;
          default:
            if (char !== mask[index2]) {
              e.preventDefault();
              e.stopPropagation();
              return false;
            }
        }
      }
    }
    return;
  });
  el.addEventListener("keyup", (e) => {
    if (e.keyCode > 46) {
      if (options.maskAutoFill) {
        fillSymbols(el.value.length);
      }
    }
  });
  if (!el.placeholder) {
    el.placeholder = mask;
  }
  if (options.maskAutoFill) {
    fillSymbols(el.value.length);
  }
}
function input(cell, onRendered, success, cancel, editorParams) {
  var cellValue = cell.getValue(), input2 = document.createElement("input");
  input2.setAttribute("type", editorParams.search ? "search" : "text");
  input2.style.padding = "4px";
  input2.style.width = "100%";
  input2.style.boxSizing = "border-box";
  if (editorParams.elementAttributes && typeof editorParams.elementAttributes == "object") {
    for (let key in editorParams.elementAttributes) {
      if (key.charAt(0) == "+") {
        key = key.slice(1);
        input2.setAttribute(key, input2.getAttribute(key) + editorParams.elementAttributes["+" + key]);
      } else {
        input2.setAttribute(key, editorParams.elementAttributes[key]);
      }
    }
  }
  input2.value = typeof cellValue !== "undefined" ? cellValue : "";
  onRendered(function() {
    if (cell._getSelf) {
      input2.focus({ preventScroll: true });
      input2.style.height = "100%";
      if (editorParams.selectContents) {
        input2.select();
      }
    }
  });
  function onChange(e) {
    if ((cellValue === null || typeof cellValue === "undefined") && input2.value !== "" || input2.value !== cellValue) {
      if (success(input2.value)) {
        cellValue = input2.value;
      }
    } else {
      cancel();
    }
  }
  input2.addEventListener("change", onChange);
  input2.addEventListener("blur", onChange);
  input2.addEventListener("keydown", function(e) {
    switch (e.keyCode) {
      case 13:
        onChange();
        break;
      case 27:
        cancel();
        break;
      case 35:
      case 36:
        e.stopPropagation();
        break;
    }
  });
  if (editorParams.mask) {
    maskInput(input2, editorParams);
  }
  return input2;
}
function textarea(cell, onRendered, success, cancel, editorParams) {
  var cellValue = cell.getValue(), vertNav = editorParams.verticalNavigation || "hybrid", value = String(cellValue !== null && typeof cellValue !== "undefined" ? cellValue : ""), input2 = document.createElement("textarea"), scrollHeight = 0;
  input2.style.display = "block";
  input2.style.padding = "2px";
  input2.style.height = "100%";
  input2.style.width = "100%";
  input2.style.boxSizing = "border-box";
  input2.style.whiteSpace = "pre-wrap";
  input2.style.resize = "none";
  if (editorParams.elementAttributes && typeof editorParams.elementAttributes == "object") {
    for (let key in editorParams.elementAttributes) {
      if (key.charAt(0) == "+") {
        key = key.slice(1);
        input2.setAttribute(key, input2.getAttribute(key) + editorParams.elementAttributes["+" + key]);
      } else {
        input2.setAttribute(key, editorParams.elementAttributes[key]);
      }
    }
  }
  input2.value = value;
  onRendered(function() {
    if (cell._getSelf) {
      input2.focus({ preventScroll: true });
      input2.style.height = "100%";
      input2.scrollHeight;
      input2.style.height = input2.scrollHeight + "px";
      cell.getRow().normalizeHeight();
      if (editorParams.selectContents) {
        input2.select();
      }
    }
  });
  function onChange(e) {
    if ((cellValue === null || typeof cellValue === "undefined") && input2.value !== "" || input2.value !== cellValue) {
      if (success(input2.value)) {
        cellValue = input2.value;
      }
      setTimeout(function() {
        cell.getRow().normalizeHeight();
      }, 300);
    } else {
      cancel();
    }
  }
  input2.addEventListener("change", onChange);
  input2.addEventListener("blur", onChange);
  input2.addEventListener("keyup", function() {
    input2.style.height = "";
    var heightNow = input2.scrollHeight;
    input2.style.height = heightNow + "px";
    if (heightNow != scrollHeight) {
      scrollHeight = heightNow;
      cell.getRow().normalizeHeight();
    }
  });
  input2.addEventListener("keydown", function(e) {
    switch (e.keyCode) {
      case 13:
        if (e.shiftKey && editorParams.shiftEnterSubmit) {
          onChange();
        }
        break;
      case 27:
        cancel();
        break;
      case 38:
        if (vertNav == "editor" || vertNav == "hybrid" && input2.selectionStart) {
          e.stopImmediatePropagation();
          e.stopPropagation();
        }
        break;
      case 40:
        if (vertNav == "editor" || vertNav == "hybrid" && input2.selectionStart !== input2.value.length) {
          e.stopImmediatePropagation();
          e.stopPropagation();
        }
        break;
      case 35:
      case 36:
        e.stopPropagation();
        break;
    }
  });
  if (editorParams.mask) {
    maskInput(input2, editorParams);
  }
  return input2;
}
function number(cell, onRendered, success, cancel, editorParams) {
  var cellValue = cell.getValue(), vertNav = editorParams.verticalNavigation || "editor", input2 = document.createElement("input");
  input2.setAttribute("type", "number");
  if (typeof editorParams.max != "undefined") {
    input2.setAttribute("max", editorParams.max);
  }
  if (typeof editorParams.min != "undefined") {
    input2.setAttribute("min", editorParams.min);
  }
  if (typeof editorParams.step != "undefined") {
    input2.setAttribute("step", editorParams.step);
  }
  input2.style.padding = "4px";
  input2.style.width = "100%";
  input2.style.boxSizing = "border-box";
  if (editorParams.elementAttributes && typeof editorParams.elementAttributes == "object") {
    for (let key in editorParams.elementAttributes) {
      if (key.charAt(0) == "+") {
        key = key.slice(1);
        input2.setAttribute(key, input2.getAttribute(key) + editorParams.elementAttributes["+" + key]);
      } else {
        input2.setAttribute(key, editorParams.elementAttributes[key]);
      }
    }
  }
  input2.value = cellValue;
  var blurFunc = function(e) {
    onChange();
  };
  onRendered(function() {
    if (cell._getSelf) {
      input2.removeEventListener("blur", blurFunc);
      input2.focus({ preventScroll: true });
      input2.style.height = "100%";
      input2.addEventListener("blur", blurFunc);
      if (editorParams.selectContents) {
        input2.select();
      }
    }
  });
  function onChange() {
    var value = input2.value;
    if (!isNaN(value) && value !== "") {
      value = Number(value);
    }
    if (value !== cellValue) {
      if (success(value)) {
        cellValue = value;
      }
    } else {
      cancel();
    }
  }
  input2.addEventListener("keydown", function(e) {
    switch (e.keyCode) {
      case 13:
        onChange();
        break;
      case 27:
        cancel();
        break;
      case 38:
      case 40:
        if (vertNav == "editor") {
          e.stopImmediatePropagation();
          e.stopPropagation();
        }
        break;
      case 35:
      case 36:
        e.stopPropagation();
        break;
    }
  });
  if (editorParams.mask) {
    maskInput(input2, editorParams);
  }
  return input2;
}
function range(cell, onRendered, success, cancel, editorParams) {
  var cellValue = cell.getValue(), input2 = document.createElement("input");
  input2.setAttribute("type", "range");
  if (typeof editorParams.max != "undefined") {
    input2.setAttribute("max", editorParams.max);
  }
  if (typeof editorParams.min != "undefined") {
    input2.setAttribute("min", editorParams.min);
  }
  if (typeof editorParams.step != "undefined") {
    input2.setAttribute("step", editorParams.step);
  }
  input2.style.padding = "4px";
  input2.style.width = "100%";
  input2.style.boxSizing = "border-box";
  if (editorParams.elementAttributes && typeof editorParams.elementAttributes == "object") {
    for (let key in editorParams.elementAttributes) {
      if (key.charAt(0) == "+") {
        key = key.slice(1);
        input2.setAttribute(key, input2.getAttribute(key) + editorParams.elementAttributes["+" + key]);
      } else {
        input2.setAttribute(key, editorParams.elementAttributes[key]);
      }
    }
  }
  input2.value = cellValue;
  onRendered(function() {
    if (cell._getSelf) {
      input2.focus({ preventScroll: true });
      input2.style.height = "100%";
    }
  });
  function onChange() {
    var value = input2.value;
    if (!isNaN(value) && value !== "") {
      value = Number(value);
    }
    if (value != cellValue) {
      if (success(value)) {
        cellValue = value;
      }
    } else {
      cancel();
    }
  }
  input2.addEventListener("blur", function(e) {
    onChange();
  });
  input2.addEventListener("keydown", function(e) {
    switch (e.keyCode) {
      case 13:
        onChange();
        break;
      case 27:
        cancel();
        break;
    }
  });
  return input2;
}
function date(cell, onRendered, success, cancel, editorParams) {
  var inputFormat = editorParams.format, vertNav = editorParams.verticalNavigation || "editor", DT = inputFormat ? window.DateTime || luxon.DateTime : null;
  var cellValue = cell.getValue(), input2 = document.createElement("input");
  function convertDate(value) {
    var newDatetime;
    if (DT.isDateTime(value)) {
      newDatetime = value;
    } else if (inputFormat === "iso") {
      newDatetime = DT.fromISO(String(value));
    } else {
      newDatetime = DT.fromFormat(String(value), inputFormat);
    }
    return newDatetime.toFormat("yyyy-MM-dd");
  }
  input2.type = "date";
  input2.style.padding = "4px";
  input2.style.width = "100%";
  input2.style.boxSizing = "border-box";
  if (editorParams.max) {
    input2.setAttribute("max", inputFormat ? convertDate(editorParams.max) : editorParams.max);
  }
  if (editorParams.min) {
    input2.setAttribute("min", inputFormat ? convertDate(editorParams.min) : editorParams.min);
  }
  if (editorParams.elementAttributes && typeof editorParams.elementAttributes == "object") {
    for (let key in editorParams.elementAttributes) {
      if (key.charAt(0) == "+") {
        key = key.slice(1);
        input2.setAttribute(key, input2.getAttribute(key) + editorParams.elementAttributes["+" + key]);
      } else {
        input2.setAttribute(key, editorParams.elementAttributes[key]);
      }
    }
  }
  cellValue = typeof cellValue !== "undefined" ? cellValue : "";
  if (inputFormat) {
    if (DT) {
      cellValue = convertDate(cellValue);
    } else {
      console.error("Editor Error - 'date' editor 'format' param is dependant on luxon.js");
    }
  }
  input2.value = cellValue;
  onRendered(function() {
    if (cell._getSelf) {
      input2.focus({ preventScroll: true });
      input2.style.height = "100%";
      if (editorParams.selectContents) {
        input2.select();
      }
    }
  });
  function onChange() {
    var value = input2.value, luxDate;
    if ((cellValue === null || typeof cellValue === "undefined") && value !== "" || value !== cellValue) {
      if (value && inputFormat) {
        luxDate = DT.fromFormat(String(value), "yyyy-MM-dd");
        switch (inputFormat) {
          case true:
            value = luxDate;
            break;
          case "iso":
            value = luxDate.toISO();
            break;
          default:
            value = luxDate.toFormat(inputFormat);
        }
      }
      if (success(value)) {
        cellValue = input2.value;
      }
    } else {
      cancel();
    }
  }
  input2.addEventListener("blur", function(e) {
    if (e.relatedTarget || e.rangeParent || e.explicitOriginalTarget !== input2) {
      onChange();
    }
  });
  input2.addEventListener("keydown", function(e) {
    switch (e.keyCode) {
      case 13:
        onChange();
        break;
      case 27:
        cancel();
        break;
      case 35:
      case 36:
        e.stopPropagation();
        break;
      case 38:
      case 40:
        if (vertNav == "editor") {
          e.stopImmediatePropagation();
          e.stopPropagation();
        }
        break;
    }
  });
  return input2;
}
function time(cell, onRendered, success, cancel, editorParams) {
  var inputFormat = editorParams.format, vertNav = editorParams.verticalNavigation || "editor", DT = inputFormat ? window.DateTime || luxon.DateTime : null, newDatetime;
  var cellValue = cell.getValue(), input2 = document.createElement("input");
  input2.type = "time";
  input2.style.padding = "4px";
  input2.style.width = "100%";
  input2.style.boxSizing = "border-box";
  if (editorParams.elementAttributes && typeof editorParams.elementAttributes == "object") {
    for (let key in editorParams.elementAttributes) {
      if (key.charAt(0) == "+") {
        key = key.slice(1);
        input2.setAttribute(key, input2.getAttribute(key) + editorParams.elementAttributes["+" + key]);
      } else {
        input2.setAttribute(key, editorParams.elementAttributes[key]);
      }
    }
  }
  cellValue = typeof cellValue !== "undefined" ? cellValue : "";
  if (inputFormat) {
    if (DT) {
      if (DT.isDateTime(cellValue)) {
        newDatetime = cellValue;
      } else if (inputFormat === "iso") {
        newDatetime = DT.fromISO(String(cellValue));
      } else {
        newDatetime = DT.fromFormat(String(cellValue), inputFormat);
      }
      cellValue = newDatetime.toFormat("hh:mm");
    } else {
      console.error("Editor Error - 'date' editor 'format' param is dependant on luxon.js");
    }
  }
  input2.value = cellValue;
  onRendered(function() {
    if (cell._getSelf) {
      input2.focus({ preventScroll: true });
      input2.style.height = "100%";
      if (editorParams.selectContents) {
        input2.select();
      }
    }
  });
  function onChange() {
    var value = input2.value, luxTime;
    if ((cellValue === null || typeof cellValue === "undefined") && value !== "" || value !== cellValue) {
      if (value && inputFormat) {
        luxTime = DT.fromFormat(String(value), "hh:mm");
        switch (inputFormat) {
          case true:
            value = luxTime;
            break;
          case "iso":
            value = luxTime.toISO();
            break;
          default:
            value = luxTime.toFormat(inputFormat);
        }
      }
      if (success(value)) {
        cellValue = input2.value;
      }
    } else {
      cancel();
    }
  }
  input2.addEventListener("blur", function(e) {
    if (e.relatedTarget || e.rangeParent || e.explicitOriginalTarget !== input2) {
      onChange();
    }
  });
  input2.addEventListener("keydown", function(e) {
    switch (e.keyCode) {
      case 13:
        onChange();
        break;
      case 27:
        cancel();
        break;
      case 35:
      case 36:
        e.stopPropagation();
        break;
      case 38:
      case 40:
        if (vertNav == "editor") {
          e.stopImmediatePropagation();
          e.stopPropagation();
        }
        break;
    }
  });
  return input2;
}
function datetime(cell, onRendered, success, cancel, editorParams) {
  var inputFormat = editorParams.format, vertNav = editorParams.verticalNavigation || "editor", DT = inputFormat ? window.DateTime || luxon.DateTime : null, newDatetime;
  var cellValue = cell.getValue(), input2 = document.createElement("input");
  input2.type = "datetime-local";
  input2.style.padding = "4px";
  input2.style.width = "100%";
  input2.style.boxSizing = "border-box";
  if (editorParams.elementAttributes && typeof editorParams.elementAttributes == "object") {
    for (let key in editorParams.elementAttributes) {
      if (key.charAt(0) == "+") {
        key = key.slice(1);
        input2.setAttribute(key, input2.getAttribute(key) + editorParams.elementAttributes["+" + key]);
      } else {
        input2.setAttribute(key, editorParams.elementAttributes[key]);
      }
    }
  }
  cellValue = typeof cellValue !== "undefined" ? cellValue : "";
  if (inputFormat) {
    if (DT) {
      if (DT.isDateTime(cellValue)) {
        newDatetime = cellValue;
      } else if (inputFormat === "iso") {
        newDatetime = DT.fromISO(String(cellValue));
      } else {
        newDatetime = DT.fromFormat(String(cellValue), inputFormat);
      }
      cellValue = newDatetime.toFormat("yyyy-MM-dd") + "T" + newDatetime.toFormat("hh:mm");
    } else {
      console.error("Editor Error - 'date' editor 'format' param is dependant on luxon.js");
    }
  }
  input2.value = cellValue;
  onRendered(function() {
    if (cell._getSelf) {
      input2.focus({ preventScroll: true });
      input2.style.height = "100%";
      if (editorParams.selectContents) {
        input2.select();
      }
    }
  });
  function onChange() {
    var value = input2.value, luxDateTime;
    if ((cellValue === null || typeof cellValue === "undefined") && value !== "" || value !== cellValue) {
      if (value && inputFormat) {
        luxDateTime = DT.fromISO(String(value));
        switch (inputFormat) {
          case true:
            value = luxDateTime;
            break;
          case "iso":
            value = luxDateTime.toISO();
            break;
          default:
            value = luxDateTime.toFormat(inputFormat);
        }
      }
      if (success(value)) {
        cellValue = input2.value;
      }
    } else {
      cancel();
    }
  }
  input2.addEventListener("blur", function(e) {
    if (e.relatedTarget || e.rangeParent || e.explicitOriginalTarget !== input2) {
      onChange();
    }
  });
  input2.addEventListener("keydown", function(e) {
    switch (e.keyCode) {
      case 13:
        onChange();
        break;
      case 27:
        cancel();
        break;
      case 35:
      case 36:
        e.stopPropagation();
        break;
      case 38:
      case 40:
        if (vertNav == "editor") {
          e.stopImmediatePropagation();
          e.stopPropagation();
        }
        break;
    }
  });
  return input2;
}
let Edit$1 = class Edit {
  constructor(editor, cell, onRendered, success, cancel, editorParams) {
    this.edit = editor;
    this.table = editor.table;
    this.cell = cell;
    this.params = this._initializeParams(editorParams);
    this.data = [];
    this.displayItems = [];
    this.currentItems = [];
    this.focusedItem = null;
    this.input = this._createInputElement();
    this.listEl = this._createListElement();
    this.initialValues = null;
    this.isFilter = !cell._getSelf;
    this.filterTimeout = null;
    this.filtered = false;
    this.typing = false;
    this.values = [];
    this.popup = null;
    this.listIteration = 0;
    this.lastAction = "";
    this.filterTerm = "";
    this.blurable = true;
    this.actions = {
      success,
      cancel
    };
    this._deprecatedOptionsCheck();
    this._initializeValue();
    onRendered(this._onRendered.bind(this));
  }
  _deprecatedOptionsCheck() {
    if (this.params.listItemFormatter) {
      this.cell.getTable().deprecationAdvisor.msg("The listItemFormatter editor param has been deprecated, please see the latest editor documentation for updated options");
    }
    if (this.params.sortValuesList) {
      this.cell.getTable().deprecationAdvisor.msg("The sortValuesList editor param has been deprecated, please see the latest editor documentation for updated options");
    }
    if (this.params.searchFunc) {
      this.cell.getTable().deprecationAdvisor.msg("The searchFunc editor param has been deprecated, please see the latest editor documentation for updated options");
    }
    if (this.params.searchingPlaceholder) {
      this.cell.getTable().deprecationAdvisor.msg("The searchingPlaceholder editor param has been deprecated, please see the latest editor documentation for updated options");
    }
  }
  _initializeValue() {
    var initialValue = this.cell.getValue();
    if (typeof initialValue === "undefined" && typeof this.params.defaultValue !== "undefined") {
      initialValue = this.params.defaultValue;
    }
    this.initialValues = this.params.multiselect ? initialValue : [initialValue];
    if (this.isFilter) {
      this.input.value = this.initialValues ? this.initialValues.join(",") : "";
      this.headerFilterInitialListGen();
    }
  }
  _onRendered() {
    var cellEl = this.cell.getElement();
    function clickStop(e) {
      e.stopPropagation();
    }
    if (!this.isFilter) {
      this.input.style.height = "100%";
      this.input.focus({ preventScroll: true });
    }
    cellEl.addEventListener("click", clickStop);
    setTimeout(() => {
      cellEl.removeEventListener("click", clickStop);
    }, 1e3);
    this.input.addEventListener("mousedown", this._preventPopupBlur.bind(this));
  }
  _createListElement() {
    var listEl = document.createElement("div");
    listEl.classList.add("tabulator-edit-list");
    listEl.addEventListener("mousedown", this._preventBlur.bind(this));
    listEl.addEventListener("keydown", this._inputKeyDown.bind(this));
    return listEl;
  }
  _setListWidth() {
    var element = this.isFilter ? this.input : this.cell.getElement();
    this.listEl.style.minWidth = element.offsetWidth + "px";
    if (this.params.maxWidth) {
      if (this.params.maxWidth === true) {
        this.listEl.style.maxWidth = element.offsetWidth + "px";
      } else if (typeof this.params.maxWidth === "number") {
        this.listEl.style.maxWidth = this.params.maxWidth + "px";
      } else {
        this.listEl.style.maxWidth = this.params.maxWidth;
      }
    }
  }
  _createInputElement() {
    var attribs = this.params.elementAttributes;
    var input2 = document.createElement("input");
    input2.setAttribute("type", this.params.clearable ? "search" : "text");
    input2.style.padding = "4px";
    input2.style.width = "100%";
    input2.style.boxSizing = "border-box";
    if (!this.params.autocomplete) {
      input2.style.cursor = "default";
      input2.style.caretColor = "transparent";
    }
    if (attribs && typeof attribs == "object") {
      for (let key in attribs) {
        if (key.charAt(0) == "+") {
          key = key.slice(1);
          input2.setAttribute(key, input2.getAttribute(key) + attribs["+" + key]);
        } else {
          input2.setAttribute(key, attribs[key]);
        }
      }
    }
    if (this.params.mask) {
      maskInput(input2, this.params);
    }
    this._bindInputEvents(input2);
    return input2;
  }
  _initializeParams(params) {
    var valueKeys = ["values", "valuesURL", "valuesLookup"], valueCheck;
    params = Object.assign({}, params);
    params.verticalNavigation = params.verticalNavigation || "editor";
    params.placeholderLoading = typeof params.placeholderLoading === "undefined" ? "Searching ..." : params.placeholderLoading;
    params.placeholderEmpty = typeof params.placeholderEmpty === "undefined" ? "No Results Found" : params.placeholderEmpty;
    params.filterDelay = typeof params.filterDelay === "undefined" ? 300 : params.filterDelay;
    params.emptyValue = Object.keys(params).includes("emptyValue") ? params.emptyValue : "";
    valueCheck = Object.keys(params).filter((key) => valueKeys.includes(key)).length;
    if (!valueCheck) {
      console.warn("list editor config error - either the values, valuesURL, or valuesLookup option must be set");
    } else if (valueCheck > 1) {
      console.warn("list editor config error - only one of the values, valuesURL, or valuesLookup options can be set on the same editor");
    }
    if (params.autocomplete) {
      if (params.multiselect) {
        params.multiselect = false;
        console.warn("list editor config error - multiselect option is not available when autocomplete is enabled");
      }
    } else {
      if (params.freetext) {
        params.freetext = false;
        console.warn("list editor config error - freetext option is only available when autocomplete is enabled");
      }
      if (params.filterFunc) {
        params.filterFunc = false;
        console.warn("list editor config error - filterFunc option is only available when autocomplete is enabled");
      }
      if (params.filterRemote) {
        params.filterRemote = false;
        console.warn("list editor config error - filterRemote option is only available when autocomplete is enabled");
      }
      if (params.mask) {
        params.mask = false;
        console.warn("list editor config error - mask option is only available when autocomplete is enabled");
      }
      if (params.allowEmpty) {
        params.allowEmpty = false;
        console.warn("list editor config error - allowEmpty option is only available when autocomplete is enabled");
      }
      if (params.listOnEmpty) {
        params.listOnEmpty = false;
        console.warn("list editor config error - listOnEmpty option is only available when autocomplete is enabled");
      }
    }
    if (params.filterRemote && !(typeof params.valuesLookup === "function" || params.valuesURL)) {
      params.filterRemote = false;
      console.warn("list editor config error - filterRemote option should only be used when values list is populated from a remote source");
    }
    return params;
  }
  //////////////////////////////////////
  ////////// Event Handling ////////////
  //////////////////////////////////////
  _bindInputEvents(input2) {
    input2.addEventListener("focus", this._inputFocus.bind(this));
    input2.addEventListener("click", this._inputClick.bind(this));
    input2.addEventListener("blur", this._inputBlur.bind(this));
    input2.addEventListener("keydown", this._inputKeyDown.bind(this));
    input2.addEventListener("search", this._inputSearch.bind(this));
    if (this.params.autocomplete) {
      input2.addEventListener("keyup", this._inputKeyUp.bind(this));
    }
  }
  _inputFocus(e) {
    this.rebuildOptionsList();
  }
  _filter() {
    if (this.params.filterRemote) {
      clearTimeout(this.filterTimeout);
      this.filterTimeout = setTimeout(() => {
        this.rebuildOptionsList();
      }, this.params.filterDelay);
    } else {
      this._filterList();
    }
  }
  _inputClick(e) {
    e.stopPropagation();
  }
  _inputBlur(e) {
    if (this.blurable) {
      if (this.popup) {
        this.popup.hide();
      } else {
        this._resolveValue(true);
      }
    }
  }
  _inputSearch() {
    this._clearChoices();
  }
  _inputKeyDown(e) {
    switch (e.keyCode) {
      case 38:
        this._keyUp(e);
        break;
      case 40:
        this._keyDown(e);
        break;
      case 37:
      case 39:
        this._keySide(e);
        break;
      case 13:
        this._keyEnter();
        break;
      case 27:
        this._keyEsc();
        break;
      case 36:
      case 35:
        this._keyHomeEnd(e);
        break;
      case 9:
        break;
      default:
        this._keySelectLetter(e);
    }
  }
  _inputKeyUp(e) {
    switch (e.keyCode) {
      case 38:
      case 37:
      case 39:
      case 40:
      case 13:
      case 27:
        break;
      default:
        this._keyAutoCompLetter(e);
    }
  }
  _preventPopupBlur() {
    if (this.popup) {
      this.popup.blockHide();
    }
    setTimeout(() => {
      if (this.popup) {
        this.popup.restoreHide();
      }
    }, 10);
  }
  _preventBlur() {
    this.blurable = false;
    setTimeout(() => {
      this.blurable = true;
    }, 10);
  }
  //////////////////////////////////////
  //////// Keyboard Navigation /////////
  //////////////////////////////////////
  _keyUp(e) {
    var index2 = this.displayItems.indexOf(this.focusedItem);
    if (this.params.verticalNavigation == "editor" || this.params.verticalNavigation == "hybrid" && index2) {
      e.stopImmediatePropagation();
      e.stopPropagation();
      e.preventDefault();
      if (index2 > 0) {
        this._focusItem(this.displayItems[index2 - 1]);
      }
    }
  }
  _keyDown(e) {
    var index2 = this.displayItems.indexOf(this.focusedItem);
    if (this.params.verticalNavigation == "editor" || this.params.verticalNavigation == "hybrid" && index2 < this.displayItems.length - 1) {
      e.stopImmediatePropagation();
      e.stopPropagation();
      e.preventDefault();
      if (index2 < this.displayItems.length - 1) {
        if (index2 == -1) {
          this._focusItem(this.displayItems[0]);
        } else {
          this._focusItem(this.displayItems[index2 + 1]);
        }
      }
    }
  }
  _keySide(e) {
    if (!this.params.autocomplete) {
      e.stopImmediatePropagation();
      e.stopPropagation();
      e.preventDefault();
    }
  }
  _keyEnter(e) {
    if (this.params.autocomplete && this.lastAction === "typing") {
      this._resolveValue(true);
    } else {
      if (this.focusedItem) {
        this._chooseItem(this.focusedItem);
      }
    }
  }
  _keyEsc(e) {
    this._cancel();
  }
  _keyHomeEnd(e) {
    if (this.params.autocomplete) {
      e.stopImmediatePropagation();
    }
  }
  _keySelectLetter(e) {
    if (!this.params.autocomplete) {
      e.preventDefault();
      if (e.keyCode >= 38 && e.keyCode <= 90) {
        this._scrollToValue(e.keyCode);
      }
    }
  }
  _keyAutoCompLetter(e) {
    this._filter();
    this.lastAction = "typing";
    this.typing = true;
  }
  _scrollToValue(char) {
    clearTimeout(this.filterTimeout);
    var character = String.fromCharCode(char).toLowerCase();
    this.filterTerm += character.toLowerCase();
    var match = this.displayItems.find((item) => {
      return typeof item.label !== "undefined" && item.label.toLowerCase().startsWith(this.filterTerm);
    });
    if (match) {
      this._focusItem(match);
    }
    this.filterTimeout = setTimeout(() => {
      this.filterTerm = "";
    }, 800);
  }
  _focusItem(item) {
    this.lastAction = "focus";
    if (this.focusedItem && this.focusedItem.element) {
      this.focusedItem.element.classList.remove("focused");
    }
    this.focusedItem = item;
    if (item && item.element) {
      item.element.classList.add("focused");
      item.element.scrollIntoView({ behavior: "smooth", block: "nearest", inline: "start" });
    }
  }
  //////////////////////////////////////
  /////// Data List Generation /////////
  //////////////////////////////////////
  headerFilterInitialListGen() {
    this._generateOptions(true);
  }
  rebuildOptionsList() {
    this._generateOptions().then(this._sortOptions.bind(this)).then(this._buildList.bind(this)).then(this._showList.bind(this)).catch((e) => {
      if (!Number.isInteger(e)) {
        console.error("List generation error", e);
      }
    });
  }
  _filterList() {
    this._buildList(this._filterOptions());
    this._showList();
  }
  _generateOptions(silent) {
    var values = [];
    var iteration = ++this.listIteration;
    this.filtered = false;
    if (this.params.values) {
      values = this.params.values;
    } else if (this.params.valuesURL) {
      values = this._ajaxRequest(this.params.valuesURL, this.input.value);
    } else {
      if (typeof this.params.valuesLookup === "function") {
        values = this.params.valuesLookup(this.cell, this.input.value);
      } else if (this.params.valuesLookup) {
        values = this._uniqueColumnValues(this.params.valuesLookupField);
      }
    }
    if (values instanceof Promise) {
      if (!silent) {
        this._addPlaceholder(this.params.placeholderLoading);
      }
      return values.then().then((responseValues) => {
        if (this.listIteration === iteration) {
          return this._parseList(responseValues);
        } else {
          return Promise.reject(iteration);
        }
      });
    } else {
      return Promise.resolve(this._parseList(values));
    }
  }
  _addPlaceholder(contents) {
    var placeholder = document.createElement("div");
    if (typeof contents === "function") {
      contents = contents(this.cell.getComponent(), this.listEl);
    }
    if (contents) {
      this._clearList();
      if (contents instanceof HTMLElement) {
        placeholder = contents;
      } else {
        placeholder.classList.add("tabulator-edit-list-placeholder");
        placeholder.innerHTML = contents;
      }
      this.listEl.appendChild(placeholder);
      this._showList();
    }
  }
  _ajaxRequest(url, term) {
    var params = this.params.filterRemote ? { term } : {};
    url = urlBuilder(url, {}, params);
    return fetch(url).then((response) => {
      if (response.ok) {
        return response.json().catch((error) => {
          console.warn("List Ajax Load Error - Invalid JSON returned", error);
          return Promise.reject(error);
        });
      } else {
        console.error("List Ajax Load Error - Connection Error: " + response.status, response.statusText);
        return Promise.reject(response);
      }
    }).catch((error) => {
      console.error("List Ajax Load Error - Connection Error: ", error);
      return Promise.reject(error);
    });
  }
  _uniqueColumnValues(field) {
    var output = {}, data = this.table.getData(this.params.valuesLookup), column;
    if (field) {
      column = this.table.columnManager.getColumnByField(field);
    } else {
      column = this.cell.getColumn()._getSelf();
    }
    if (column) {
      data.forEach((row) => {
        var val = column.getFieldValue(row);
        if (val !== null && typeof val !== "undefined" && val !== "") {
          output[val] = true;
        }
      });
    } else {
      console.warn("unable to find matching column to create select lookup list:", field);
      output = [];
    }
    return Object.keys(output);
  }
  _parseList(inputValues) {
    var data = [];
    if (!Array.isArray(inputValues)) {
      inputValues = Object.entries(inputValues).map(([key, value]) => {
        return {
          label: value,
          value: key
        };
      });
    }
    inputValues.forEach((value) => {
      if (typeof value !== "object") {
        value = {
          label: value,
          value
        };
      }
      this._parseListItem(value, data, 0);
    });
    if (!this.currentItems.length && this.params.freetext) {
      this.input.value = this.initialValues;
      this.typing = true;
      this.lastAction = "typing";
    }
    this.data = data;
    return data;
  }
  _parseListItem(option, data, level) {
    var item = {};
    if (option.options) {
      item = this._parseListGroup(option, level + 1);
    } else {
      item = {
        label: option.label,
        value: option.value,
        itemParams: option.itemParams,
        elementAttributes: option.elementAttributes,
        element: false,
        selected: false,
        visible: true,
        level,
        original: option
      };
      if (this.initialValues && this.initialValues.indexOf(option.value) > -1) {
        this._chooseItem(item, true);
      }
    }
    data.push(item);
  }
  _parseListGroup(option, level) {
    var item = {
      label: option.label,
      group: true,
      itemParams: option.itemParams,
      elementAttributes: option.elementAttributes,
      element: false,
      visible: true,
      level,
      options: [],
      original: option
    };
    option.options.forEach((child) => {
      this._parseListItem(child, item.options, level);
    });
    return item;
  }
  _sortOptions(options) {
    var sorter;
    if (this.params.sort) {
      sorter = typeof this.params.sort === "function" ? this.params.sort : this._defaultSortFunction.bind(this);
      this._sortGroup(sorter, options);
    }
    return options;
  }
  _sortGroup(sorter, options) {
    options.sort((a, b) => {
      return sorter(a.label, b.label, a.value, b.value, a.original, b.original);
    });
    options.forEach((option) => {
      if (option.group) {
        this._sortGroup(sorter, option.options);
      }
    });
  }
  _defaultSortFunction(as2, bs) {
    var a, b, a1, b1, i = 0, L, rx = /(\d+)|(\D+)/g, rd = /\d/;
    var emptyAlign = 0;
    if (this.params.sort === "desc") {
      [as2, bs] = [bs, as2];
    }
    if (!as2 && as2 !== 0) {
      emptyAlign = !bs && bs !== 0 ? 0 : -1;
    } else if (!bs && bs !== 0) {
      emptyAlign = 1;
    } else {
      if (isFinite(as2) && isFinite(bs))
        return as2 - bs;
      a = String(as2).toLowerCase();
      b = String(bs).toLowerCase();
      if (a === b)
        return 0;
      if (!(rd.test(a) && rd.test(b)))
        return a > b ? 1 : -1;
      a = a.match(rx);
      b = b.match(rx);
      L = a.length > b.length ? b.length : a.length;
      while (i < L) {
        a1 = a[i];
        b1 = b[i++];
        if (a1 !== b1) {
          if (isFinite(a1) && isFinite(b1)) {
            if (a1.charAt(0) === "0")
              a1 = "." + a1;
            if (b1.charAt(0) === "0")
              b1 = "." + b1;
            return a1 - b1;
          } else
            return a1 > b1 ? 1 : -1;
        }
      }
      return a.length > b.length;
    }
    return emptyAlign;
  }
  _filterOptions() {
    var filterFunc = this.params.filterFunc || this._defaultFilterFunc, term = this.input.value;
    if (term) {
      this.filtered = true;
      this.data.forEach((item) => {
        this._filterItem(filterFunc, term, item);
      });
    } else {
      this.filtered = false;
    }
    return this.data;
  }
  _filterItem(func, term, item) {
    var matches = false;
    if (!item.group) {
      item.visible = func(term, item.label, item.value, item.original);
    } else {
      item.options.forEach((option) => {
        if (this._filterItem(func, term, option)) {
          matches = true;
        }
      });
      item.visible = matches;
    }
    return item.visible;
  }
  _defaultFilterFunc(term, label, value, item) {
    term = String(term).toLowerCase();
    if (label !== null && typeof label !== "undefined") {
      if (String(label).toLowerCase().indexOf(term) > -1 || String(value).toLowerCase().indexOf(term) > -1) {
        return true;
      }
    }
    return false;
  }
  //////////////////////////////////////
  /////////// Display List /////////////
  //////////////////////////////////////
  _clearList() {
    while (this.listEl.firstChild)
      this.listEl.removeChild(this.listEl.firstChild);
    this.displayItems = [];
  }
  _buildList(data) {
    this._clearList();
    data.forEach((option) => {
      this._buildItem(option);
    });
    if (!this.displayItems.length) {
      this._addPlaceholder(this.params.placeholderEmpty);
    }
  }
  _buildItem(item) {
    var el = item.element, contents;
    if (!this.filtered || item.visible) {
      if (!el) {
        el = document.createElement("div");
        el.tabIndex = 0;
        contents = this.params.itemFormatter ? this.params.itemFormatter(item.label, item.value, item.original, el) : item.label;
        if (contents instanceof HTMLElement) {
          el.appendChild(contents);
        } else {
          el.innerHTML = contents;
        }
        if (item.group) {
          el.classList.add("tabulator-edit-list-group");
        } else {
          el.classList.add("tabulator-edit-list-item");
        }
        el.classList.add("tabulator-edit-list-group-level-" + item.level);
        if (item.elementAttributes && typeof item.elementAttributes == "object") {
          for (let key in item.elementAttributes) {
            if (key.charAt(0) == "+") {
              key = key.slice(1);
              el.setAttribute(key, this.input.getAttribute(key) + item.elementAttributes["+" + key]);
            } else {
              el.setAttribute(key, item.elementAttributes[key]);
            }
          }
        }
        if (item.group) {
          el.addEventListener("click", this._groupClick.bind(this, item));
        } else {
          el.addEventListener("click", this._itemClick.bind(this, item));
        }
        el.addEventListener("mousedown", this._preventBlur.bind(this));
        item.element = el;
      }
      this._styleItem(item);
      this.listEl.appendChild(el);
      if (item.group) {
        item.options.forEach((option) => {
          this._buildItem(option);
        });
      } else {
        this.displayItems.push(item);
      }
    }
  }
  _showList() {
    var startVis = this.popup && this.popup.isVisible();
    if (this.input.parentNode) {
      if (this.params.autocomplete && this.input.value === "" && !this.params.listOnEmpty) {
        if (this.popup) {
          this.popup.hide(true);
        }
        return;
      }
      this._setListWidth();
      if (!this.popup) {
        this.popup = this.edit.popup(this.listEl);
      }
      this.popup.show(this.cell.getElement(), "bottom");
      if (!startVis) {
        setTimeout(() => {
          this.popup.hideOnBlur(this._resolveValue.bind(this, true));
        }, 10);
      }
    }
  }
  _styleItem(item) {
    if (item && item.element) {
      if (item.selected) {
        item.element.classList.add("active");
      } else {
        item.element.classList.remove("active");
      }
    }
  }
  //////////////////////////////////////
  ///////// User Interaction ///////////
  //////////////////////////////////////
  _itemClick(item, e) {
    e.stopPropagation();
    this._chooseItem(item);
  }
  _groupClick(item, e) {
    e.stopPropagation();
  }
  //////////////////////////////////////
  ////// Current Item Management ///////
  //////////////////////////////////////
  _cancel() {
    this.popup.hide(true);
    this.actions.cancel();
  }
  _clearChoices() {
    this.typing = true;
    this.currentItems.forEach((item) => {
      item.selected = false;
      this._styleItem(item);
    });
    this.currentItems = [];
    this.focusedItem = null;
  }
  _chooseItem(item, silent) {
    var index2;
    this.typing = false;
    if (this.params.multiselect) {
      index2 = this.currentItems.indexOf(item);
      if (index2 > -1) {
        this.currentItems.splice(index2, 1);
        item.selected = false;
      } else {
        this.currentItems.push(item);
        item.selected = true;
      }
      this.input.value = this.currentItems.map((item2) => item2.label).join(",");
      this._styleItem(item);
    } else {
      this.currentItems = [item];
      item.selected = true;
      this.input.value = item.label;
      this._styleItem(item);
      if (!silent) {
        this._resolveValue();
      }
    }
    this._focusItem(item);
  }
  _resolveValue(blur) {
    var output, initialValue;
    if (this.popup) {
      this.popup.hide(true);
    }
    if (this.params.multiselect) {
      output = this.currentItems.map((item) => item.value);
    } else {
      if (blur && this.params.autocomplete && this.typing) {
        if (this.params.freetext || this.params.allowEmpty && this.input.value === "") {
          output = this.input.value;
        } else {
          this.actions.cancel();
          return;
        }
      } else {
        if (this.currentItems[0]) {
          output = this.currentItems[0].value;
        } else {
          initialValue = Array.isArray(this.initialValues) ? this.initialValues[0] : this.initialValues;
          if (initialValue === null || typeof initialValue === "undefined" || initialValue === "") {
            output = initialValue;
          } else {
            output = this.params.emptyValue;
          }
        }
      }
    }
    if (output === "") {
      output = this.params.emptyValue;
    }
    this.actions.success(output);
    if (this.isFilter) {
      this.initialValues = output && !Array.isArray(output) ? [output] : output;
      this.currentItems = [];
    }
  }
};
function select(cell, onRendered, success, cancel, editorParams) {
  this.deprecationMsg("The select editor has been deprecated, please use the new list editor");
  var list2 = new Edit$1(this, cell, onRendered, success, cancel, editorParams);
  return list2.input;
}
function list(cell, onRendered, success, cancel, editorParams) {
  var list2 = new Edit$1(this, cell, onRendered, success, cancel, editorParams);
  return list2.input;
}
function autocomplete(cell, onRendered, success, cancel, editorParams) {
  this.deprecationMsg("The autocomplete editor has been deprecated, please use the new list editor with the 'autocomplete' editorParam");
  editorParams.autocomplete = true;
  var list2 = new Edit$1(this, cell, onRendered, success, cancel, editorParams);
  return list2.input;
}
function star(cell, onRendered, success, cancel, editorParams) {
  var self2 = this, element = cell.getElement(), value = cell.getValue(), maxStars = element.getElementsByTagName("svg").length || 5, size2 = element.getElementsByTagName("svg")[0] ? element.getElementsByTagName("svg")[0].getAttribute("width") : 14, stars = [], starsHolder = document.createElement("div"), star2 = document.createElementNS("http://www.w3.org/2000/svg", "svg");
  function starChange(val) {
    stars.forEach(function(star3, i2) {
      if (i2 < val) {
        if (self2.table.browser == "ie") {
          star3.setAttribute("class", "tabulator-star-active");
        } else {
          star3.classList.replace("tabulator-star-inactive", "tabulator-star-active");
        }
        star3.innerHTML = '<polygon fill="#488CE9" stroke="#014AAE" stroke-width="37.6152" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" points="259.216,29.942 330.27,173.919 489.16,197.007 374.185,309.08 401.33,467.31 259.216,392.612 117.104,467.31 144.25,309.08 29.274,197.007 188.165,173.919 "/>';
      } else {
        if (self2.table.browser == "ie") {
          star3.setAttribute("class", "tabulator-star-inactive");
        } else {
          star3.classList.replace("tabulator-star-active", "tabulator-star-inactive");
        }
        star3.innerHTML = '<polygon fill="#010155" stroke="#686868" stroke-width="37.6152" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" points="259.216,29.942 330.27,173.919 489.16,197.007 374.185,309.08 401.33,467.31 259.216,392.612 117.104,467.31 144.25,309.08 29.274,197.007 188.165,173.919 "/>';
      }
    });
  }
  function buildStar(i2) {
    var starHolder = document.createElement("span");
    var nextStar = star2.cloneNode(true);
    stars.push(nextStar);
    starHolder.addEventListener("mouseenter", function(e) {
      e.stopPropagation();
      e.stopImmediatePropagation();
      starChange(i2);
    });
    starHolder.addEventListener("mousemove", function(e) {
      e.stopPropagation();
      e.stopImmediatePropagation();
    });
    starHolder.addEventListener("click", function(e) {
      e.stopPropagation();
      e.stopImmediatePropagation();
      success(i2);
      element.blur();
    });
    starHolder.appendChild(nextStar);
    starsHolder.appendChild(starHolder);
  }
  function changeValue(val) {
    value = val;
    starChange(val);
  }
  element.style.whiteSpace = "nowrap";
  element.style.overflow = "hidden";
  element.style.textOverflow = "ellipsis";
  starsHolder.style.verticalAlign = "middle";
  starsHolder.style.display = "inline-block";
  starsHolder.style.padding = "4px";
  star2.setAttribute("width", size2);
  star2.setAttribute("height", size2);
  star2.setAttribute("viewBox", "0 0 512 512");
  star2.setAttribute("xml:space", "preserve");
  star2.style.padding = "0 1px";
  if (editorParams.elementAttributes && typeof editorParams.elementAttributes == "object") {
    for (let key in editorParams.elementAttributes) {
      if (key.charAt(0) == "+") {
        key = key.slice(1);
        starsHolder.setAttribute(key, starsHolder.getAttribute(key) + editorParams.elementAttributes["+" + key]);
      } else {
        starsHolder.setAttribute(key, editorParams.elementAttributes[key]);
      }
    }
  }
  for (var i = 1; i <= maxStars; i++) {
    buildStar(i);
  }
  value = Math.min(parseInt(value), maxStars);
  starChange(value);
  starsHolder.addEventListener("mousemove", function(e) {
    starChange(0);
  });
  starsHolder.addEventListener("click", function(e) {
    success(0);
  });
  element.addEventListener("blur", function(e) {
    cancel();
  });
  element.addEventListener("keydown", function(e) {
    switch (e.keyCode) {
      case 39:
        changeValue(value + 1);
        break;
      case 37:
        changeValue(value - 1);
        break;
      case 13:
        success(value);
        break;
      case 27:
        cancel();
        break;
    }
  });
  return starsHolder;
}
function progress(cell, onRendered, success, cancel, editorParams) {
  var element = cell.getElement(), max2 = typeof editorParams.max === "undefined" ? element.getElementsByTagName("div")[0] && element.getElementsByTagName("div")[0].getAttribute("max") || 100 : editorParams.max, min2 = typeof editorParams.min === "undefined" ? element.getElementsByTagName("div")[0] && element.getElementsByTagName("div")[0].getAttribute("min") || 0 : editorParams.min, percent = (max2 - min2) / 100, value = cell.getValue() || 0, handle2 = document.createElement("div"), bar = document.createElement("div"), mouseDrag, mouseDragWidth;
  function updateValue() {
    var style = window.getComputedStyle(element, null);
    var calcVal = percent * Math.round(bar.offsetWidth / ((element.clientWidth - parseInt(style.getPropertyValue("padding-left")) - parseInt(style.getPropertyValue("padding-right"))) / 100)) + min2;
    success(calcVal);
    element.setAttribute("aria-valuenow", calcVal);
    element.setAttribute("aria-label", value);
  }
  handle2.style.position = "absolute";
  handle2.style.right = "0";
  handle2.style.top = "0";
  handle2.style.bottom = "0";
  handle2.style.width = "5px";
  handle2.classList.add("tabulator-progress-handle");
  bar.style.display = "inline-block";
  bar.style.position = "relative";
  bar.style.height = "100%";
  bar.style.backgroundColor = "#488CE9";
  bar.style.maxWidth = "100%";
  bar.style.minWidth = "0%";
  if (editorParams.elementAttributes && typeof editorParams.elementAttributes == "object") {
    for (let key in editorParams.elementAttributes) {
      if (key.charAt(0) == "+") {
        key = key.slice(1);
        bar.setAttribute(key, bar.getAttribute(key) + editorParams.elementAttributes["+" + key]);
      } else {
        bar.setAttribute(key, editorParams.elementAttributes[key]);
      }
    }
  }
  element.style.padding = "4px 4px";
  value = Math.min(parseFloat(value), max2);
  value = Math.max(parseFloat(value), min2);
  value = Math.round((value - min2) / percent);
  bar.style.width = value + "%";
  element.setAttribute("aria-valuemin", min2);
  element.setAttribute("aria-valuemax", max2);
  bar.appendChild(handle2);
  handle2.addEventListener("mousedown", function(e) {
    mouseDrag = e.screenX;
    mouseDragWidth = bar.offsetWidth;
  });
  handle2.addEventListener("mouseover", function() {
    handle2.style.cursor = "ew-resize";
  });
  element.addEventListener("mousemove", function(e) {
    if (mouseDrag) {
      bar.style.width = mouseDragWidth + e.screenX - mouseDrag + "px";
    }
  });
  element.addEventListener("mouseup", function(e) {
    if (mouseDrag) {
      e.stopPropagation();
      e.stopImmediatePropagation();
      mouseDrag = false;
      mouseDragWidth = false;
      updateValue();
    }
  });
  element.addEventListener("keydown", function(e) {
    switch (e.keyCode) {
      case 39:
        e.preventDefault();
        bar.style.width = bar.clientWidth + element.clientWidth / 100 + "px";
        break;
      case 37:
        e.preventDefault();
        bar.style.width = bar.clientWidth - element.clientWidth / 100 + "px";
        break;
      case 9:
      case 13:
        updateValue();
        break;
      case 27:
        cancel();
        break;
    }
  });
  element.addEventListener("blur", function() {
    cancel();
  });
  return bar;
}
function tickCross(cell, onRendered, success, cancel, editorParams) {
  var value = cell.getValue(), input2 = document.createElement("input"), tristate = editorParams.tristate, indetermValue = typeof editorParams.indeterminateValue === "undefined" ? null : editorParams.indeterminateValue, indetermState = false, trueValueSet = Object.keys(editorParams).includes("trueValue"), falseValueSet = Object.keys(editorParams).includes("falseValue");
  input2.setAttribute("type", "checkbox");
  input2.style.marginTop = "5px";
  input2.style.boxSizing = "border-box";
  if (editorParams.elementAttributes && typeof editorParams.elementAttributes == "object") {
    for (let key in editorParams.elementAttributes) {
      if (key.charAt(0) == "+") {
        key = key.slice(1);
        input2.setAttribute(key, input2.getAttribute(key) + editorParams.elementAttributes["+" + key]);
      } else {
        input2.setAttribute(key, editorParams.elementAttributes[key]);
      }
    }
  }
  input2.value = value;
  if (tristate && (typeof value === "undefined" || value === indetermValue || value === "")) {
    indetermState = true;
    input2.indeterminate = true;
  }
  if (this.table.browser != "firefox" && this.table.browser != "safari") {
    onRendered(function() {
      if (cell._getSelf) {
        input2.focus({ preventScroll: true });
      }
    });
  }
  input2.checked = trueValueSet ? value === editorParams.trueValue : value === true || value === "true" || value === "True" || value === 1;
  function setValue(blur) {
    var checkedValue = input2.checked;
    if (trueValueSet && checkedValue) {
      checkedValue = editorParams.trueValue;
    } else if (falseValueSet && !checkedValue) {
      checkedValue = editorParams.falseValue;
    }
    if (tristate) {
      if (!blur) {
        if (input2.checked && !indetermState) {
          input2.checked = false;
          input2.indeterminate = true;
          indetermState = true;
          return indetermValue;
        } else {
          indetermState = false;
          return checkedValue;
        }
      } else {
        if (indetermState) {
          return indetermValue;
        } else {
          return checkedValue;
        }
      }
    } else {
      return checkedValue;
    }
  }
  input2.addEventListener("change", function(e) {
    success(setValue());
  });
  input2.addEventListener("blur", function(e) {
    success(setValue(true));
  });
  input2.addEventListener("keydown", function(e) {
    if (e.keyCode == 13) {
      success(setValue());
    }
    if (e.keyCode == 27) {
      cancel();
    }
  });
  return input2;
}
var defaultEditors = {
  input,
  textarea,
  number,
  range,
  date,
  time,
  datetime,
  select,
  list,
  autocomplete,
  star,
  progress,
  tickCross
};
let Edit$1$1 = class Edit$12 extends Module {
  constructor(table) {
    super(table);
    this.currentCell = false;
    this.mouseClick = false;
    this.recursionBlock = false;
    this.invalidEdit = false;
    this.editedCells = [];
    this.editors = Edit$12.editors;
    this.registerColumnOption("editable");
    this.registerColumnOption("editor");
    this.registerColumnOption("editorParams");
    this.registerColumnOption("cellEditing");
    this.registerColumnOption("cellEdited");
    this.registerColumnOption("cellEditCancelled");
    this.registerTableFunction("getEditedCells", this.getEditedCells.bind(this));
    this.registerTableFunction("clearCellEdited", this.clearCellEdited.bind(this));
    this.registerTableFunction("navigatePrev", this.navigatePrev.bind(this));
    this.registerTableFunction("navigateNext", this.navigateNext.bind(this));
    this.registerTableFunction("navigateLeft", this.navigateLeft.bind(this));
    this.registerTableFunction("navigateRight", this.navigateRight.bind(this));
    this.registerTableFunction("navigateUp", this.navigateUp.bind(this));
    this.registerTableFunction("navigateDown", this.navigateDown.bind(this));
    this.registerComponentFunction("cell", "isEdited", this.cellIsEdited.bind(this));
    this.registerComponentFunction("cell", "clearEdited", this.clearEdited.bind(this));
    this.registerComponentFunction("cell", "edit", this.editCell.bind(this));
    this.registerComponentFunction("cell", "cancelEdit", this.cellCancelEdit.bind(this));
    this.registerComponentFunction("cell", "navigatePrev", this.navigatePrev.bind(this));
    this.registerComponentFunction("cell", "navigateNext", this.navigateNext.bind(this));
    this.registerComponentFunction("cell", "navigateLeft", this.navigateLeft.bind(this));
    this.registerComponentFunction("cell", "navigateRight", this.navigateRight.bind(this));
    this.registerComponentFunction("cell", "navigateUp", this.navigateUp.bind(this));
    this.registerComponentFunction("cell", "navigateDown", this.navigateDown.bind(this));
  }
  initialize() {
    this.subscribe("cell-init", this.bindEditor.bind(this));
    this.subscribe("cell-delete", this.clearEdited.bind(this));
    this.subscribe("cell-value-changed", this.updateCellClass.bind(this));
    this.subscribe("column-layout", this.initializeColumnCheck.bind(this));
    this.subscribe("column-delete", this.columnDeleteCheck.bind(this));
    this.subscribe("row-deleting", this.rowDeleteCheck.bind(this));
    this.subscribe("row-layout", this.rowEditableCheck.bind(this));
    this.subscribe("data-refreshing", this.cancelEdit.bind(this));
    this.subscribe("keybinding-nav-prev", this.navigatePrev.bind(this, void 0));
    this.subscribe("keybinding-nav-next", this.keybindingNavigateNext.bind(this));
    this.subscribe("keybinding-nav-left", this.navigateLeft.bind(this, void 0));
    this.subscribe("keybinding-nav-right", this.navigateRight.bind(this, void 0));
    this.subscribe("keybinding-nav-up", this.navigateUp.bind(this, void 0));
    this.subscribe("keybinding-nav-down", this.navigateDown.bind(this, void 0));
  }
  ///////////////////////////////////
  ////// Keybinding Functions ///////
  ///////////////////////////////////
  keybindingNavigateNext(e) {
    var cell = this.currentCell, newRow = this.options("tabEndNewRow");
    if (cell) {
      if (!this.navigateNext(cell, e)) {
        if (newRow) {
          cell.getElement().firstChild.blur();
          if (newRow === true) {
            newRow = this.table.addRow({});
          } else {
            if (typeof newRow == "function") {
              newRow = this.table.addRow(newRow(cell.row.getComponent()));
            } else {
              newRow = this.table.addRow(Object.assign({}, newRow));
            }
          }
          newRow.then(() => {
            setTimeout(() => {
              cell.getComponent().navigateNext();
            });
          });
        }
      }
    }
  }
  ///////////////////////////////////
  ///////// Cell Functions //////////
  ///////////////////////////////////
  cellIsEdited(cell) {
    return !!cell.modules.edit && cell.modules.edit.edited;
  }
  cellCancelEdit(cell) {
    if (cell === this.currentCell) {
      this.table.modules.edit.cancelEdit();
    } else {
      console.warn("Cancel Editor Error - This cell is not currently being edited ");
    }
  }
  ///////////////////////////////////
  ///////// Table Functions /////////
  ///////////////////////////////////
  updateCellClass(cell) {
    if (this.allowEdit(cell)) {
      cell.getElement().classList.add("tabulator-editable");
    } else {
      cell.getElement().classList.remove("tabulator-editable");
    }
  }
  clearCellEdited(cells) {
    if (!cells) {
      cells = this.table.modules.edit.getEditedCells();
    }
    if (!Array.isArray(cells)) {
      cells = [cells];
    }
    cells.forEach((cell) => {
      this.table.modules.edit.clearEdited(cell._getSelf());
    });
  }
  navigatePrev(cell = this.currentCell, e) {
    var nextCell, prevRow;
    if (cell) {
      if (e) {
        e.preventDefault();
      }
      nextCell = this.navigateLeft();
      if (nextCell) {
        return true;
      } else {
        prevRow = this.table.rowManager.prevDisplayRow(cell.row, true);
        if (prevRow) {
          nextCell = this.findPrevEditableCell(prevRow, prevRow.cells.length);
          if (nextCell) {
            nextCell.getComponent().edit();
            return true;
          }
        }
      }
    }
    return false;
  }
  navigateNext(cell = this.currentCell, e) {
    var nextCell, nextRow;
    if (cell) {
      if (e) {
        e.preventDefault();
      }
      nextCell = this.navigateRight();
      if (nextCell) {
        return true;
      } else {
        nextRow = this.table.rowManager.nextDisplayRow(cell.row, true);
        if (nextRow) {
          nextCell = this.findNextEditableCell(nextRow, -1);
          if (nextCell) {
            nextCell.getComponent().edit();
            return true;
          }
        }
      }
    }
    return false;
  }
  navigateLeft(cell = this.currentCell, e) {
    var index2, nextCell;
    if (cell) {
      if (e) {
        e.preventDefault();
      }
      index2 = cell.getIndex();
      nextCell = this.findPrevEditableCell(cell.row, index2);
      if (nextCell) {
        nextCell.getComponent().edit();
        return true;
      }
    }
    return false;
  }
  navigateRight(cell = this.currentCell, e) {
    var index2, nextCell;
    if (cell) {
      if (e) {
        e.preventDefault();
      }
      index2 = cell.getIndex();
      nextCell = this.findNextEditableCell(cell.row, index2);
      if (nextCell) {
        nextCell.getComponent().edit();
        return true;
      }
    }
    return false;
  }
  navigateUp(cell = this.currentCell, e) {
    var index2, nextRow;
    if (cell) {
      if (e) {
        e.preventDefault();
      }
      index2 = cell.getIndex();
      nextRow = this.table.rowManager.prevDisplayRow(cell.row, true);
      if (nextRow) {
        nextRow.cells[index2].getComponent().edit();
        return true;
      }
    }
    return false;
  }
  navigateDown(cell = this.currentCell, e) {
    var index2, nextRow;
    if (cell) {
      if (e) {
        e.preventDefault();
      }
      index2 = cell.getIndex();
      nextRow = this.table.rowManager.nextDisplayRow(cell.row, true);
      if (nextRow) {
        nextRow.cells[index2].getComponent().edit();
        return true;
      }
    }
    return false;
  }
  findNextEditableCell(row, index2) {
    var nextCell = false;
    if (index2 < row.cells.length - 1) {
      for (var i = index2 + 1; i < row.cells.length; i++) {
        let cell = row.cells[i];
        if (cell.column.modules.edit && Helpers.elVisible(cell.getElement())) {
          let allowEdit = this.allowEdit(cell);
          if (allowEdit) {
            nextCell = cell;
            break;
          }
        }
      }
    }
    return nextCell;
  }
  findPrevEditableCell(row, index2) {
    var prevCell = false;
    if (index2 > 0) {
      for (var i = index2 - 1; i >= 0; i--) {
        let cell = row.cells[i];
        if (cell.column.modules.edit && Helpers.elVisible(cell.getElement())) {
          let allowEdit = this.allowEdit(cell);
          if (allowEdit) {
            prevCell = cell;
            break;
          }
        }
      }
    }
    return prevCell;
  }
  ///////////////////////////////////
  ///////// Internal Logic //////////
  ///////////////////////////////////
  initializeColumnCheck(column) {
    if (typeof column.definition.editor !== "undefined") {
      this.initializeColumn(column);
    }
  }
  columnDeleteCheck(column) {
    if (this.currentCell && this.currentCell.column === column) {
      this.cancelEdit();
    }
  }
  rowDeleteCheck(row) {
    if (this.currentCell && this.currentCell.row === row) {
      this.cancelEdit();
    }
  }
  rowEditableCheck(row) {
    row.getCells().forEach((cell) => {
      if (cell.column.modules.edit && typeof cell.column.modules.edit.check === "function") {
        this.updateCellClass(cell);
      }
    });
  }
  //initialize column editor
  initializeColumn(column) {
    var config = {
      editor: false,
      blocked: false,
      check: column.definition.editable,
      params: column.definition.editorParams || {}
    };
    switch (typeof column.definition.editor) {
      case "string":
        if (this.editors[column.definition.editor]) {
          config.editor = this.editors[column.definition.editor];
        } else {
          console.warn("Editor Error - No such editor found: ", column.definition.editor);
        }
        break;
      case "function":
        config.editor = column.definition.editor;
        break;
      case "boolean":
        if (column.definition.editor === true) {
          if (typeof column.definition.formatter !== "function") {
            if (this.editors[column.definition.formatter]) {
              config.editor = this.editors[column.definition.formatter];
            } else {
              config.editor = this.editors["input"];
            }
          } else {
            console.warn("Editor Error - Cannot auto lookup editor for a custom formatter: ", column.definition.formatter);
          }
        }
        break;
    }
    if (config.editor) {
      column.modules.edit = config;
    }
  }
  getCurrentCell() {
    return this.currentCell ? this.currentCell.getComponent() : false;
  }
  clearEditor(cancel) {
    var cell = this.currentCell, cellEl;
    this.invalidEdit = false;
    if (cell) {
      this.currentCell = false;
      cellEl = cell.getElement();
      this.dispatch("edit-editor-clear", cell, cancel);
      cellEl.classList.remove("tabulator-editing");
      while (cellEl.firstChild)
        cellEl.removeChild(cellEl.firstChild);
      cell.row.getElement().classList.remove("tabulator-editing");
      cell.table.element.classList.remove("tabulator-editing");
    }
  }
  cancelEdit() {
    if (this.currentCell) {
      var cell = this.currentCell;
      var component = this.currentCell.getComponent();
      this.clearEditor(true);
      cell.setValueActual(cell.getValue());
      cell.cellRendered();
      if (cell.column.definition.editor == "textarea" || cell.column.definition.variableHeight) {
        cell.row.normalizeHeight(true);
      }
      if (cell.column.definition.cellEditCancelled) {
        cell.column.definition.cellEditCancelled.call(this.table, component);
      }
      this.dispatch("edit-cancelled", cell);
      this.dispatchExternal("cellEditCancelled", component);
    }
  }
  //return a formatted value for a cell
  bindEditor(cell) {
    if (cell.column.modules.edit) {
      var self2 = this, element = cell.getElement(true);
      this.updateCellClass(cell);
      element.setAttribute("tabindex", 0);
      element.addEventListener("click", function(e) {
        if (!element.classList.contains("tabulator-editing")) {
          element.focus({ preventScroll: true });
        }
      });
      element.addEventListener("mousedown", function(e) {
        if (e.button === 2) {
          e.preventDefault();
        } else {
          self2.mouseClick = true;
        }
      });
      element.addEventListener("focus", function(e) {
        if (!self2.recursionBlock) {
          self2.edit(cell, e, false);
        }
      });
    }
  }
  focusCellNoEvent(cell, block) {
    this.recursionBlock = true;
    if (!(block && this.table.browser === "ie")) {
      cell.getElement().focus({ preventScroll: true });
    }
    this.recursionBlock = false;
  }
  editCell(cell, forceEdit) {
    this.focusCellNoEvent(cell);
    this.edit(cell, false, forceEdit);
  }
  focusScrollAdjust(cell) {
    if (this.table.rowManager.getRenderMode() == "virtual") {
      var topEdge = this.table.rowManager.element.scrollTop, bottomEdge = this.table.rowManager.element.clientHeight + this.table.rowManager.element.scrollTop, rowEl = cell.row.getElement();
      if (rowEl.offsetTop < topEdge) {
        this.table.rowManager.element.scrollTop -= topEdge - rowEl.offsetTop;
      } else {
        if (rowEl.offsetTop + rowEl.offsetHeight > bottomEdge) {
          this.table.rowManager.element.scrollTop += rowEl.offsetTop + rowEl.offsetHeight - bottomEdge;
        }
      }
      var leftEdge = this.table.rowManager.element.scrollLeft, rightEdge = this.table.rowManager.element.clientWidth + this.table.rowManager.element.scrollLeft, cellEl = cell.getElement();
      if (this.table.modExists("frozenColumns")) {
        leftEdge += parseInt(this.table.modules.frozenColumns.leftMargin);
        rightEdge -= parseInt(this.table.modules.frozenColumns.rightMargin);
      }
      if (this.table.options.renderHorizontal === "virtual") {
        leftEdge -= parseInt(this.table.columnManager.renderer.vDomPadLeft);
        rightEdge -= parseInt(this.table.columnManager.renderer.vDomPadLeft);
      }
      if (cellEl.offsetLeft < leftEdge) {
        this.table.rowManager.element.scrollLeft -= leftEdge - cellEl.offsetLeft;
      } else {
        if (cellEl.offsetLeft + cellEl.offsetWidth > rightEdge) {
          this.table.rowManager.element.scrollLeft += cellEl.offsetLeft + cellEl.offsetWidth - rightEdge;
        }
      }
    }
  }
  allowEdit(cell) {
    var check = cell.column.modules.edit ? true : false;
    if (cell.column.modules.edit) {
      switch (typeof cell.column.modules.edit.check) {
        case "function":
          if (cell.row.initialized) {
            check = cell.column.modules.edit.check(cell.getComponent());
          }
          break;
        case "string":
          check = !!cell.row.data[cell.column.modules.edit.check];
          break;
        case "boolean":
          check = cell.column.modules.edit.check;
          break;
      }
    }
    return check;
  }
  edit(cell, e, forceEdit) {
    var self2 = this, allowEdit = true, rendered = function() {
    }, element = cell.getElement(), cellEditor, component, params;
    if (this.currentCell) {
      if (!this.invalidEdit && this.currentCell !== cell) {
        this.cancelEdit();
      }
      return;
    }
    function success(value) {
      if (self2.currentCell === cell) {
        var valid = self2.chain("edit-success", [cell, value], true, true);
        if (valid === true || self2.table.options.validationMode === "highlight") {
          self2.clearEditor();
          if (!cell.modules.edit) {
            cell.modules.edit = {};
          }
          cell.modules.edit.edited = true;
          if (self2.editedCells.indexOf(cell) == -1) {
            self2.editedCells.push(cell);
          }
          cell.setValue(value, true);
          return valid === true;
        } else {
          self2.invalidEdit = true;
          self2.focusCellNoEvent(cell, true);
          rendered();
          return false;
        }
      }
    }
    function cancel() {
      if (self2.currentCell === cell) {
        self2.cancelEdit();
      }
    }
    function onRendered(callback) {
      rendered = callback;
    }
    if (!cell.column.modules.edit.blocked) {
      if (e) {
        e.stopPropagation();
      }
      allowEdit = this.allowEdit(cell);
      if (allowEdit || forceEdit) {
        self2.cancelEdit();
        self2.currentCell = cell;
        this.focusScrollAdjust(cell);
        component = cell.getComponent();
        if (this.mouseClick) {
          this.mouseClick = false;
          if (cell.column.definition.cellClick) {
            cell.column.definition.cellClick.call(this.table, e, component);
          }
        }
        if (cell.column.definition.cellEditing) {
          cell.column.definition.cellEditing.call(this.table, component);
        }
        this.dispatch("cell-editing", cell);
        this.dispatchExternal("cellEditing", component);
        params = typeof cell.column.modules.edit.params === "function" ? cell.column.modules.edit.params(component) : cell.column.modules.edit.params;
        cellEditor = cell.column.modules.edit.editor.call(self2, component, onRendered, success, cancel, params);
        if (this.currentCell && cellEditor !== false) {
          if (cellEditor instanceof Node) {
            element.classList.add("tabulator-editing");
            cell.row.getElement().classList.add("tabulator-editing");
            cell.table.element.classList.add("tabulator-editing");
            while (element.firstChild)
              element.removeChild(element.firstChild);
            element.appendChild(cellEditor);
            rendered();
            var children = element.children;
            for (var i = 0; i < children.length; i++) {
              children[i].addEventListener("click", function(e2) {
                e2.stopPropagation();
              });
            }
          } else {
            console.warn("Edit Error - Editor should return an instance of Node, the editor returned:", cellEditor);
            element.blur();
            return false;
          }
        } else {
          element.blur();
          return false;
        }
        return true;
      } else {
        this.mouseClick = false;
        element.blur();
        return false;
      }
    } else {
      this.mouseClick = false;
      element.blur();
      return false;
    }
  }
  getEditedCells() {
    var output = [];
    this.editedCells.forEach((cell) => {
      output.push(cell.getComponent());
    });
    return output;
  }
  clearEdited(cell) {
    var editIndex;
    if (cell.modules.edit && cell.modules.edit.edited) {
      cell.modules.edit.edited = false;
      this.dispatch("edit-edited-clear", cell);
    }
    editIndex = this.editedCells.indexOf(cell);
    if (editIndex > -1) {
      this.editedCells.splice(editIndex, 1);
    }
  }
};
Edit$1$1.moduleName = "edit";
Edit$1$1.editors = defaultEditors;
class ExportRow {
  constructor(type, columns, component, indent) {
    this.type = type;
    this.columns = columns;
    this.component = component || false;
    this.indent = indent || 0;
  }
}
class ExportColumn {
  constructor(value, component, width, height, depth) {
    this.value = value;
    this.component = component || false;
    this.width = width;
    this.height = height;
    this.depth = depth;
  }
}
class Export extends Module {
  constructor(table) {
    super(table);
    this.config = {};
    this.cloneTableStyle = true;
    this.colVisProp = "";
    this.registerTableOption("htmlOutputConfig", false);
    this.registerColumnOption("htmlOutput");
    this.registerColumnOption("titleHtmlOutput");
  }
  initialize() {
    this.registerTableFunction("getHtml", this.getHtml.bind(this));
  }
  ///////////////////////////////////
  ///////// Table Functions /////////
  ///////////////////////////////////
  ///////////////////////////////////
  ///////// Internal Logic //////////
  ///////////////////////////////////
  generateExportList(config, style, range2, colVisProp) {
    this.cloneTableStyle = style;
    this.config = config || {};
    this.colVisProp = colVisProp;
    var headers = this.config.columnHeaders !== false ? this.headersToExportRows(this.generateColumnGroupHeaders()) : [];
    var body = this.bodyToExportRows(this.rowLookup(range2));
    return headers.concat(body);
  }
  generateTable(config, style, range2, colVisProp) {
    var list2 = this.generateExportList(config, style, range2, colVisProp);
    return this.generateTableElement(list2);
  }
  rowLookup(range2) {
    var rows2 = [];
    if (typeof range2 == "function") {
      range2.call(this.table).forEach((row) => {
        row = this.table.rowManager.findRow(row);
        if (row) {
          rows2.push(row);
        }
      });
    } else {
      switch (range2) {
        case true:
        case "visible":
          rows2 = this.table.rowManager.getVisibleRows(false, true);
          break;
        case "all":
          rows2 = this.table.rowManager.rows;
          break;
        case "selected":
          rows2 = this.table.modules.selectRow.selectedRows;
          break;
        case "active":
        default:
          if (this.table.options.pagination) {
            rows2 = this.table.rowManager.getDisplayRows(this.table.rowManager.displayRows.length - 2);
          } else {
            rows2 = this.table.rowManager.getDisplayRows();
          }
      }
    }
    return Object.assign([], rows2);
  }
  generateColumnGroupHeaders() {
    var output = [];
    var columns = this.config.columnGroups !== false ? this.table.columnManager.columns : this.table.columnManager.columnsByIndex;
    columns.forEach((column) => {
      var colData = this.processColumnGroup(column);
      if (colData) {
        output.push(colData);
      }
    });
    return output;
  }
  processColumnGroup(column) {
    var subGroups = column.columns, maxDepth = 0, title = column.definition["title" + (this.colVisProp.charAt(0).toUpperCase() + this.colVisProp.slice(1))] || column.definition.title;
    var groupData = {
      title,
      column,
      depth: 1
    };
    if (subGroups.length) {
      groupData.subGroups = [];
      groupData.width = 0;
      subGroups.forEach((subGroup) => {
        var subGroupData = this.processColumnGroup(subGroup);
        if (subGroupData) {
          groupData.width += subGroupData.width;
          groupData.subGroups.push(subGroupData);
          if (subGroupData.depth > maxDepth) {
            maxDepth = subGroupData.depth;
          }
        }
      });
      groupData.depth += maxDepth;
      if (!groupData.width) {
        return false;
      }
    } else {
      if (this.columnVisCheck(column)) {
        groupData.width = 1;
      } else {
        return false;
      }
    }
    return groupData;
  }
  columnVisCheck(column) {
    var visProp = column.definition[this.colVisProp];
    if (typeof visProp === "function") {
      visProp = visProp.call(this.table, column.getComponent());
    }
    return visProp !== false && (column.visible || !column.visible && visProp);
  }
  headersToExportRows(columns) {
    var headers = [], headerDepth = 0, exportRows = [];
    function parseColumnGroup(column, level) {
      var depth = headerDepth - level;
      if (typeof headers[level] === "undefined") {
        headers[level] = [];
      }
      column.height = column.subGroups ? 1 : depth - column.depth + 1;
      headers[level].push(column);
      if (column.height > 1) {
        for (let i = 1; i < column.height; i++) {
          if (typeof headers[level + i] === "undefined") {
            headers[level + i] = [];
          }
          headers[level + i].push(false);
        }
      }
      if (column.width > 1) {
        for (let i = 1; i < column.width; i++) {
          headers[level].push(false);
        }
      }
      if (column.subGroups) {
        column.subGroups.forEach(function(subGroup) {
          parseColumnGroup(subGroup, level + 1);
        });
      }
    }
    columns.forEach(function(column) {
      if (column.depth > headerDepth) {
        headerDepth = column.depth;
      }
    });
    columns.forEach(function(column) {
      parseColumnGroup(column, 0);
    });
    headers.forEach((header) => {
      var columns2 = [];
      header.forEach((col) => {
        if (col) {
          let title = typeof col.title === "undefined" ? "" : col.title;
          columns2.push(new ExportColumn(title, col.column.getComponent(), col.width, col.height, col.depth));
        } else {
          columns2.push(null);
        }
      });
      exportRows.push(new ExportRow("header", columns2));
    });
    return exportRows;
  }
  bodyToExportRows(rows2) {
    var columns = [];
    var exportRows = [];
    this.table.columnManager.columnsByIndex.forEach((column) => {
      if (this.columnVisCheck(column)) {
        columns.push(column.getComponent());
      }
    });
    if (this.config.columnCalcs !== false && this.table.modExists("columnCalcs")) {
      if (this.table.modules.columnCalcs.topInitialized) {
        rows2.unshift(this.table.modules.columnCalcs.topRow);
      }
      if (this.table.modules.columnCalcs.botInitialized) {
        rows2.push(this.table.modules.columnCalcs.botRow);
      }
    }
    rows2 = rows2.filter((row) => {
      switch (row.type) {
        case "group":
          return this.config.rowGroups !== false;
        case "calc":
          return this.config.columnCalcs !== false;
        case "row":
          return !(this.table.options.dataTree && this.config.dataTree === false && row.modules.dataTree.parent);
      }
      return true;
    });
    rows2.forEach((row, i) => {
      var rowData = row.getData(this.colVisProp);
      var exportCols = [];
      var indent = 0;
      switch (row.type) {
        case "group":
          indent = row.level;
          exportCols.push(new ExportColumn(row.key, row.getComponent(), columns.length, 1));
          break;
        case "calc":
        case "row":
          columns.forEach((col) => {
            exportCols.push(new ExportColumn(col._column.getFieldValue(rowData), col, 1, 1));
          });
          if (this.table.options.dataTree && this.config.dataTree !== false) {
            indent = row.modules.dataTree.index;
          }
          break;
      }
      exportRows.push(new ExportRow(row.type, exportCols, row.getComponent(), indent));
    });
    return exportRows;
  }
  generateTableElement(list2) {
    var table = document.createElement("table"), headerEl = document.createElement("thead"), bodyEl = document.createElement("tbody"), styles = this.lookupTableStyles(), rowFormatter = this.table.options["rowFormatter" + (this.colVisProp.charAt(0).toUpperCase() + this.colVisProp.slice(1))], setup = {};
    setup.rowFormatter = rowFormatter !== null ? rowFormatter : this.table.options.rowFormatter;
    if (this.table.options.dataTree && this.config.dataTree !== false && this.table.modExists("columnCalcs")) {
      setup.treeElementField = this.table.modules.dataTree.elementField;
    }
    setup.groupHeader = this.table.options["groupHeader" + (this.colVisProp.charAt(0).toUpperCase() + this.colVisProp.slice(1))];
    if (setup.groupHeader && !Array.isArray(setup.groupHeader)) {
      setup.groupHeader = [setup.groupHeader];
    }
    table.classList.add("tabulator-print-table");
    this.mapElementStyles(this.table.columnManager.getHeadersElement(), headerEl, ["border-top", "border-left", "border-right", "border-bottom", "background-color", "color", "font-weight", "font-family", "font-size"]);
    if (list2.length > 1e3) {
      console.warn("It may take a long time to render an HTML table with more than 1000 rows");
    }
    list2.forEach((row, i) => {
      let rowEl;
      switch (row.type) {
        case "header":
          headerEl.appendChild(this.generateHeaderElement(row, setup, styles));
          break;
        case "group":
          bodyEl.appendChild(this.generateGroupElement(row, setup, styles));
          break;
        case "calc":
          bodyEl.appendChild(this.generateCalcElement(row, setup, styles));
          break;
        case "row":
          rowEl = this.generateRowElement(row, setup, styles);
          this.mapElementStyles(i % 2 && styles.evenRow ? styles.evenRow : styles.oddRow, rowEl, ["border-top", "border-left", "border-right", "border-bottom", "color", "font-weight", "font-family", "font-size", "background-color"]);
          bodyEl.appendChild(rowEl);
          break;
      }
    });
    if (headerEl.innerHTML) {
      table.appendChild(headerEl);
    }
    table.appendChild(bodyEl);
    this.mapElementStyles(this.table.element, table, ["border-top", "border-left", "border-right", "border-bottom"]);
    return table;
  }
  lookupTableStyles() {
    var styles = {};
    if (this.cloneTableStyle && window.getComputedStyle) {
      styles.oddRow = this.table.element.querySelector(".tabulator-row-odd:not(.tabulator-group):not(.tabulator-calcs)");
      styles.evenRow = this.table.element.querySelector(".tabulator-row-even:not(.tabulator-group):not(.tabulator-calcs)");
      styles.calcRow = this.table.element.querySelector(".tabulator-row.tabulator-calcs");
      styles.firstRow = this.table.element.querySelector(".tabulator-row:not(.tabulator-group):not(.tabulator-calcs)");
      styles.firstGroup = this.table.element.getElementsByClassName("tabulator-group")[0];
      if (styles.firstRow) {
        styles.styleCells = styles.firstRow.getElementsByClassName("tabulator-cell");
        styles.firstCell = styles.styleCells[0];
        styles.lastCell = styles.styleCells[styles.styleCells.length - 1];
      }
    }
    return styles;
  }
  generateHeaderElement(row, setup, styles) {
    var rowEl = document.createElement("tr");
    row.columns.forEach((column) => {
      if (column) {
        var cellEl = document.createElement("th");
        var classNames = column.component._column.definition.cssClass ? column.component._column.definition.cssClass.split(" ") : [];
        cellEl.colSpan = column.width;
        cellEl.rowSpan = column.height;
        cellEl.innerHTML = column.value;
        if (this.cloneTableStyle) {
          cellEl.style.boxSizing = "border-box";
        }
        classNames.forEach(function(className) {
          cellEl.classList.add(className);
        });
        this.mapElementStyles(column.component.getElement(), cellEl, ["text-align", "border-top", "border-left", "border-right", "border-bottom", "background-color", "color", "font-weight", "font-family", "font-size"]);
        this.mapElementStyles(column.component._column.contentElement, cellEl, ["padding-top", "padding-left", "padding-right", "padding-bottom"]);
        if (column.component._column.visible) {
          this.mapElementStyles(column.component.getElement(), cellEl, ["width"]);
        } else {
          if (column.component._column.definition.width) {
            cellEl.style.width = column.component._column.definition.width + "px";
          }
        }
        if (column.component._column.parent) {
          this.mapElementStyles(column.component._column.parent.groupElement, cellEl, ["border-top"]);
        }
        rowEl.appendChild(cellEl);
      }
    });
    return rowEl;
  }
  generateGroupElement(row, setup, styles) {
    var rowEl = document.createElement("tr"), cellEl = document.createElement("td"), group = row.columns[0];
    rowEl.classList.add("tabulator-print-table-row");
    if (setup.groupHeader && setup.groupHeader[row.indent]) {
      group.value = setup.groupHeader[row.indent](group.value, row.component._group.getRowCount(), row.component._group.getData(), row.component);
    } else {
      if (setup.groupHeader !== false) {
        group.value = row.component._group.generator(group.value, row.component._group.getRowCount(), row.component._group.getData(), row.component);
      }
    }
    cellEl.colSpan = group.width;
    cellEl.innerHTML = group.value;
    rowEl.classList.add("tabulator-print-table-group");
    rowEl.classList.add("tabulator-group-level-" + row.indent);
    if (group.component.isVisible()) {
      rowEl.classList.add("tabulator-group-visible");
    }
    this.mapElementStyles(styles.firstGroup, rowEl, ["border-top", "border-left", "border-right", "border-bottom", "color", "font-weight", "font-family", "font-size", "background-color"]);
    this.mapElementStyles(styles.firstGroup, cellEl, ["padding-top", "padding-left", "padding-right", "padding-bottom"]);
    rowEl.appendChild(cellEl);
    return rowEl;
  }
  generateCalcElement(row, setup, styles) {
    var rowEl = this.generateRowElement(row, setup, styles);
    rowEl.classList.add("tabulator-print-table-calcs");
    this.mapElementStyles(styles.calcRow, rowEl, ["border-top", "border-left", "border-right", "border-bottom", "color", "font-weight", "font-family", "font-size", "background-color"]);
    return rowEl;
  }
  generateRowElement(row, setup, styles) {
    var rowEl = document.createElement("tr");
    rowEl.classList.add("tabulator-print-table-row");
    row.columns.forEach((col, i) => {
      if (col) {
        var cellEl = document.createElement("td"), column = col.component._column, index2 = this.table.columnManager.findColumnIndex(column), value = col.value, cellStyle;
        var cellWrapper = {
          modules: {},
          getValue: function() {
            return value;
          },
          getField: function() {
            return column.definition.field;
          },
          getElement: function() {
            return cellEl;
          },
          getColumn: function() {
            return column.getComponent();
          },
          getData: function() {
            return row.component.getData();
          },
          getRow: function() {
            return row.component;
          },
          getComponent: function() {
            return cellWrapper;
          },
          column
        };
        var classNames = column.definition.cssClass ? column.definition.cssClass.split(" ") : [];
        classNames.forEach(function(className) {
          cellEl.classList.add(className);
        });
        if (this.table.modExists("format") && this.config.formatCells !== false) {
          value = this.table.modules.format.formatExportValue(cellWrapper, this.colVisProp);
        } else {
          switch (typeof value) {
            case "object":
              value = value !== null ? JSON.stringify(value) : "";
              break;
            case "undefined":
              value = "";
              break;
          }
        }
        if (value instanceof Node) {
          cellEl.appendChild(value);
        } else {
          cellEl.innerHTML = value;
        }
        cellStyle = styles.styleCells && styles.styleCells[index2] ? styles.styleCells[index2] : styles.firstCell;
        if (cellStyle) {
          this.mapElementStyles(cellStyle, cellEl, ["padding-top", "padding-left", "padding-right", "padding-bottom", "border-top", "border-left", "border-right", "border-bottom", "color", "font-weight", "font-family", "font-size", "text-align"]);
          if (column.definition.align) {
            cellEl.style.textAlign = column.definition.align;
          }
        }
        if (this.table.options.dataTree && this.config.dataTree !== false) {
          if (setup.treeElementField && setup.treeElementField == column.field || !setup.treeElementField && i == 0) {
            if (row.component._row.modules.dataTree.controlEl) {
              cellEl.insertBefore(row.component._row.modules.dataTree.controlEl.cloneNode(true), cellEl.firstChild);
            }
            if (row.component._row.modules.dataTree.branchEl) {
              cellEl.insertBefore(row.component._row.modules.dataTree.branchEl.cloneNode(true), cellEl.firstChild);
            }
          }
        }
        rowEl.appendChild(cellEl);
        if (cellWrapper.modules.format && cellWrapper.modules.format.renderedCallback) {
          cellWrapper.modules.format.renderedCallback();
        }
      }
    });
    if (setup.rowFormatter && row.type === "row" && this.config.formatCells !== false) {
      let formatComponent = Object.assign(row.component);
      formatComponent.getElement = function() {
        return rowEl;
      };
      setup.rowFormatter(row.component);
    }
    return rowEl;
  }
  generateHTMLTable(list2) {
    var holder = document.createElement("div");
    holder.appendChild(this.generateTableElement(list2));
    return holder.innerHTML;
  }
  getHtml(visible, style, config, colVisProp) {
    var list2 = this.generateExportList(config || this.table.options.htmlOutputConfig, style, visible, colVisProp || "htmlOutput");
    return this.generateHTMLTable(list2);
  }
  mapElementStyles(from2, to2, props) {
    if (this.cloneTableStyle && from2 && to2) {
      var lookup2 = {
        "background-color": "backgroundColor",
        "color": "fontColor",
        "width": "width",
        "font-weight": "fontWeight",
        "font-family": "fontFamily",
        "font-size": "fontSize",
        "text-align": "textAlign",
        "border-top": "borderTop",
        "border-left": "borderLeft",
        "border-right": "borderRight",
        "border-bottom": "borderBottom",
        "padding-top": "paddingTop",
        "padding-left": "paddingLeft",
        "padding-right": "paddingRight",
        "padding-bottom": "paddingBottom"
      };
      if (window.getComputedStyle) {
        var fromStyle = window.getComputedStyle(from2);
        props.forEach(function(prop) {
          if (!to2.style[lookup2[prop]]) {
            to2.style[lookup2[prop]] = fromStyle.getPropertyValue(prop);
          }
        });
      }
    }
  }
}
Export.moduleName = "export";
var defaultFilters = {
  //equal to
  "=": function(filterVal, rowVal, rowData, filterParams) {
    return rowVal == filterVal ? true : false;
  },
  //less than
  "<": function(filterVal, rowVal, rowData, filterParams) {
    return rowVal < filterVal ? true : false;
  },
  //less than or equal to
  "<=": function(filterVal, rowVal, rowData, filterParams) {
    return rowVal <= filterVal ? true : false;
  },
  //greater than
  ">": function(filterVal, rowVal, rowData, filterParams) {
    return rowVal > filterVal ? true : false;
  },
  //greater than or equal to
  ">=": function(filterVal, rowVal, rowData, filterParams) {
    return rowVal >= filterVal ? true : false;
  },
  //not equal to
  "!=": function(filterVal, rowVal, rowData, filterParams) {
    return rowVal != filterVal ? true : false;
  },
  "regex": function(filterVal, rowVal, rowData, filterParams) {
    if (typeof filterVal == "string") {
      filterVal = new RegExp(filterVal);
    }
    return filterVal.test(rowVal);
  },
  //contains the string
  "like": function(filterVal, rowVal, rowData, filterParams) {
    if (filterVal === null || typeof filterVal === "undefined") {
      return rowVal === filterVal ? true : false;
    } else {
      if (typeof rowVal !== "undefined" && rowVal !== null) {
        return String(rowVal).toLowerCase().indexOf(filterVal.toLowerCase()) > -1;
      } else {
        return false;
      }
    }
  },
  //contains the keywords
  "keywords": function(filterVal, rowVal, rowData, filterParams) {
    var keywords = filterVal.toLowerCase().split(typeof filterParams.separator === "undefined" ? " " : filterParams.separator), value = String(rowVal === null || typeof rowVal === "undefined" ? "" : rowVal).toLowerCase(), matches = [];
    keywords.forEach((keyword) => {
      if (value.includes(keyword)) {
        matches.push(true);
      }
    });
    return filterParams.matchAll ? matches.length === keywords.length : !!matches.length;
  },
  //starts with the string
  "starts": function(filterVal, rowVal, rowData, filterParams) {
    if (filterVal === null || typeof filterVal === "undefined") {
      return rowVal === filterVal ? true : false;
    } else {
      if (typeof rowVal !== "undefined" && rowVal !== null) {
        return String(rowVal).toLowerCase().startsWith(filterVal.toLowerCase());
      } else {
        return false;
      }
    }
  },
  //ends with the string
  "ends": function(filterVal, rowVal, rowData, filterParams) {
    if (filterVal === null || typeof filterVal === "undefined") {
      return rowVal === filterVal ? true : false;
    } else {
      if (typeof rowVal !== "undefined" && rowVal !== null) {
        return String(rowVal).toLowerCase().endsWith(filterVal.toLowerCase());
      } else {
        return false;
      }
    }
  },
  //in array
  "in": function(filterVal, rowVal, rowData, filterParams) {
    if (Array.isArray(filterVal)) {
      return filterVal.length ? filterVal.indexOf(rowVal) > -1 : true;
    } else {
      console.warn("Filter Error - filter value is not an array:", filterVal);
      return false;
    }
  }
};
let Filter$1 = class Filter extends Module {
  constructor(table) {
    super(table);
    this.filterList = [];
    this.headerFilters = {};
    this.headerFilterColumns = [];
    this.prevHeaderFilterChangeCheck = "";
    this.prevHeaderFilterChangeCheck = "{}";
    this.changed = false;
    this.tableInitialized = false;
    this.registerTableOption("filterMode", "local");
    this.registerTableOption("initialFilter", false);
    this.registerTableOption("initialHeaderFilter", false);
    this.registerTableOption("headerFilterLiveFilterDelay", 300);
    this.registerColumnOption("headerFilter");
    this.registerColumnOption("headerFilterPlaceholder");
    this.registerColumnOption("headerFilterParams");
    this.registerColumnOption("headerFilterEmptyCheck");
    this.registerColumnOption("headerFilterFunc");
    this.registerColumnOption("headerFilterFuncParams");
    this.registerColumnOption("headerFilterLiveFilter");
    this.registerTableFunction("searchRows", this.searchRows.bind(this));
    this.registerTableFunction("searchData", this.searchData.bind(this));
    this.registerTableFunction("setFilter", this.userSetFilter.bind(this));
    this.registerTableFunction("refreshFilter", this.userRefreshFilter.bind(this));
    this.registerTableFunction("addFilter", this.userAddFilter.bind(this));
    this.registerTableFunction("getFilters", this.getFilters.bind(this));
    this.registerTableFunction("setHeaderFilterFocus", this.userSetHeaderFilterFocus.bind(this));
    this.registerTableFunction("getHeaderFilterValue", this.userGetHeaderFilterValue.bind(this));
    this.registerTableFunction("setHeaderFilterValue", this.userSetHeaderFilterValue.bind(this));
    this.registerTableFunction("getHeaderFilters", this.getHeaderFilters.bind(this));
    this.registerTableFunction("removeFilter", this.userRemoveFilter.bind(this));
    this.registerTableFunction("clearFilter", this.userClearFilter.bind(this));
    this.registerTableFunction("clearHeaderFilter", this.userClearHeaderFilter.bind(this));
    this.registerComponentFunction("column", "headerFilterFocus", this.setHeaderFilterFocus.bind(this));
    this.registerComponentFunction("column", "reloadHeaderFilter", this.reloadHeaderFilter.bind(this));
    this.registerComponentFunction("column", "getHeaderFilterValue", this.getHeaderFilterValue.bind(this));
    this.registerComponentFunction("column", "setHeaderFilterValue", this.setHeaderFilterValue.bind(this));
  }
  initialize() {
    this.subscribe("column-init", this.initializeColumnHeaderFilter.bind(this));
    this.subscribe("column-width-fit-before", this.hideHeaderFilterElements.bind(this));
    this.subscribe("column-width-fit-after", this.showHeaderFilterElements.bind(this));
    this.subscribe("table-built", this.tableBuilt.bind(this));
    if (this.table.options.filterMode === "remote") {
      this.subscribe("data-params", this.remoteFilterParams.bind(this));
    }
    this.registerDataHandler(this.filter.bind(this), 10);
  }
  tableBuilt() {
    if (this.table.options.initialFilter) {
      this.setFilter(this.table.options.initialFilter);
    }
    if (this.table.options.initialHeaderFilter) {
      this.table.options.initialHeaderFilter.forEach((item) => {
        var column = this.table.columnManager.findColumn(item.field);
        if (column) {
          this.setHeaderFilterValue(column, item.value);
        } else {
          console.warn("Column Filter Error - No matching column found:", item.field);
          return false;
        }
      });
    }
    this.tableInitialized = true;
  }
  remoteFilterParams(data, config, silent, params) {
    params.filter = this.getFilters(true, true);
    return params;
  }
  ///////////////////////////////////
  ///////// Table Functions /////////
  ///////////////////////////////////
  //set standard filters
  userSetFilter(field, type, value, params) {
    this.setFilter(field, type, value, params);
    this.refreshFilter();
  }
  //set standard filters
  userRefreshFilter() {
    this.refreshFilter();
  }
  //add filter to array
  userAddFilter(field, type, value, params) {
    this.addFilter(field, type, value, params);
    this.refreshFilter();
  }
  userSetHeaderFilterFocus(field) {
    var column = this.table.columnManager.findColumn(field);
    if (column) {
      this.setHeaderFilterFocus(column);
    } else {
      console.warn("Column Filter Focus Error - No matching column found:", field);
      return false;
    }
  }
  userGetHeaderFilterValue(field) {
    var column = this.table.columnManager.findColumn(field);
    if (column) {
      return this.getHeaderFilterValue(column);
    } else {
      console.warn("Column Filter Error - No matching column found:", field);
    }
  }
  userSetHeaderFilterValue(field, value) {
    var column = this.table.columnManager.findColumn(field);
    if (column) {
      this.setHeaderFilterValue(column, value);
    } else {
      console.warn("Column Filter Error - No matching column found:", field);
      return false;
    }
  }
  //remove filter from array
  userRemoveFilter(field, type, value) {
    this.removeFilter(field, type, value);
    this.refreshFilter();
  }
  //clear filters
  userClearFilter(all) {
    this.clearFilter(all);
    this.refreshFilter();
  }
  //clear header filters
  userClearHeaderFilter() {
    this.clearHeaderFilter();
    this.refreshFilter();
  }
  //search for specific row components
  searchRows(field, type, value) {
    return this.search("rows", field, type, value);
  }
  //search for specific data
  searchData(field, type, value) {
    return this.search("data", field, type, value);
  }
  ///////////////////////////////////
  ///////// Internal Logic //////////
  ///////////////////////////////////
  initializeColumnHeaderFilter(column) {
    var def2 = column.definition;
    if (def2.headerFilter) {
      this.initializeColumn(column);
    }
  }
  //initialize column header filter
  initializeColumn(column, value) {
    var self2 = this, field = column.getField();
    function success(value2) {
      var filterType = column.modules.filter.tagType == "input" && column.modules.filter.attrType == "text" || column.modules.filter.tagType == "textarea" ? "partial" : "match", type = "", filterChangeCheck = "", filterFunc;
      if (typeof column.modules.filter.prevSuccess === "undefined" || column.modules.filter.prevSuccess !== value2) {
        column.modules.filter.prevSuccess = value2;
        if (!column.modules.filter.emptyFunc(value2)) {
          column.modules.filter.value = value2;
          switch (typeof column.definition.headerFilterFunc) {
            case "string":
              if (Filter.filters[column.definition.headerFilterFunc]) {
                type = column.definition.headerFilterFunc;
                filterFunc = function(data) {
                  var params = column.definition.headerFilterFuncParams || {};
                  var fieldVal = column.getFieldValue(data);
                  params = typeof params === "function" ? params(value2, fieldVal, data) : params;
                  return Filter.filters[column.definition.headerFilterFunc](value2, fieldVal, data, params);
                };
              } else {
                console.warn("Header Filter Error - Matching filter function not found: ", column.definition.headerFilterFunc);
              }
              break;
            case "function":
              filterFunc = function(data) {
                var params = column.definition.headerFilterFuncParams || {};
                var fieldVal = column.getFieldValue(data);
                params = typeof params === "function" ? params(value2, fieldVal, data) : params;
                return column.definition.headerFilterFunc(value2, fieldVal, data, params);
              };
              type = filterFunc;
              break;
          }
          if (!filterFunc) {
            switch (filterType) {
              case "partial":
                filterFunc = function(data) {
                  var colVal = column.getFieldValue(data);
                  if (typeof colVal !== "undefined" && colVal !== null) {
                    return String(colVal).toLowerCase().indexOf(String(value2).toLowerCase()) > -1;
                  } else {
                    return false;
                  }
                };
                type = "like";
                break;
              default:
                filterFunc = function(data) {
                  return column.getFieldValue(data) == value2;
                };
                type = "=";
            }
          }
          self2.headerFilters[field] = { value: value2, func: filterFunc, type };
        } else {
          delete self2.headerFilters[field];
        }
        column.modules.filter.value = value2;
        filterChangeCheck = JSON.stringify(self2.headerFilters);
        if (self2.prevHeaderFilterChangeCheck !== filterChangeCheck) {
          self2.prevHeaderFilterChangeCheck = filterChangeCheck;
          self2.trackChanges();
          self2.refreshFilter();
        }
      }
      return true;
    }
    column.modules.filter = {
      success,
      attrType: false,
      tagType: false,
      emptyFunc: false
    };
    this.generateHeaderFilterElement(column);
  }
  generateHeaderFilterElement(column, initialValue, reinitialize) {
    var self2 = this, success = column.modules.filter.success, field = column.getField(), filterElement, editor, editorElement, cellWrapper, typingTimer, searchTrigger, params, onRenderedCallback;
    column.modules.filter.value = initialValue;
    function cancel() {
    }
    function onRendered(callback) {
      onRenderedCallback = callback;
    }
    if (column.modules.filter.headerElement && column.modules.filter.headerElement.parentNode) {
      column.contentElement.removeChild(column.modules.filter.headerElement.parentNode);
    }
    if (field) {
      column.modules.filter.emptyFunc = column.definition.headerFilterEmptyCheck || function(value) {
        return !value && value !== 0;
      };
      filterElement = document.createElement("div");
      filterElement.classList.add("tabulator-header-filter");
      switch (typeof column.definition.headerFilter) {
        case "string":
          if (self2.table.modules.edit.editors[column.definition.headerFilter]) {
            editor = self2.table.modules.edit.editors[column.definition.headerFilter];
            if ((column.definition.headerFilter === "tick" || column.definition.headerFilter === "tickCross") && !column.definition.headerFilterEmptyCheck) {
              column.modules.filter.emptyFunc = function(value) {
                return value !== true && value !== false;
              };
            }
          } else {
            console.warn("Filter Error - Cannot build header filter, No such editor found: ", column.definition.editor);
          }
          break;
        case "function":
          editor = column.definition.headerFilter;
          break;
        case "boolean":
          if (column.modules.edit && column.modules.edit.editor) {
            editor = column.modules.edit.editor;
          } else {
            if (column.definition.formatter && self2.table.modules.edit.editors[column.definition.formatter]) {
              editor = self2.table.modules.edit.editors[column.definition.formatter];
              if ((column.definition.formatter === "tick" || column.definition.formatter === "tickCross") && !column.definition.headerFilterEmptyCheck) {
                column.modules.filter.emptyFunc = function(value) {
                  return value !== true && value !== false;
                };
              }
            } else {
              editor = self2.table.modules.edit.editors["input"];
            }
          }
          break;
      }
      if (editor) {
        cellWrapper = {
          getValue: function() {
            return typeof initialValue !== "undefined" ? initialValue : "";
          },
          getField: function() {
            return column.definition.field;
          },
          getElement: function() {
            return filterElement;
          },
          getColumn: function() {
            return column.getComponent();
          },
          getTable: () => {
            return this.table;
          },
          getRow: function() {
            return {
              normalizeHeight: function() {
              }
            };
          }
        };
        params = column.definition.headerFilterParams || {};
        params = typeof params === "function" ? params.call(self2.table, cellWrapper) : params;
        editorElement = editor.call(this.table.modules.edit, cellWrapper, onRendered, success, cancel, params);
        if (!editorElement) {
          console.warn("Filter Error - Cannot add filter to " + field + " column, editor returned a value of false");
          return;
        }
        if (!(editorElement instanceof Node)) {
          console.warn("Filter Error - Cannot add filter to " + field + " column, editor should return an instance of Node, the editor returned:", editorElement);
          return;
        }
        self2.langBind("headerFilters|columns|" + column.definition.field, function(value) {
          editorElement.setAttribute("placeholder", typeof value !== "undefined" && value ? value : column.definition.headerFilterPlaceholder || self2.langText("headerFilters|default"));
        });
        editorElement.addEventListener("click", function(e) {
          e.stopPropagation();
          editorElement.focus();
        });
        editorElement.addEventListener("focus", (e) => {
          var left2 = this.table.columnManager.contentsElement.scrollLeft;
          var headerPos = this.table.rowManager.element.scrollLeft;
          if (left2 !== headerPos) {
            this.table.rowManager.scrollHorizontal(left2);
            this.table.columnManager.scrollHorizontal(left2);
          }
        });
        typingTimer = false;
        searchTrigger = function(e) {
          if (typingTimer) {
            clearTimeout(typingTimer);
          }
          typingTimer = setTimeout(function() {
            success(editorElement.value);
          }, self2.table.options.headerFilterLiveFilterDelay);
        };
        column.modules.filter.headerElement = editorElement;
        column.modules.filter.attrType = editorElement.hasAttribute("type") ? editorElement.getAttribute("type").toLowerCase() : "";
        column.modules.filter.tagType = editorElement.tagName.toLowerCase();
        if (column.definition.headerFilterLiveFilter !== false) {
          if (!(column.definition.headerFilter === "autocomplete" || column.definition.headerFilter === "tickCross" || (column.definition.editor === "autocomplete" || column.definition.editor === "tickCross") && column.definition.headerFilter === true)) {
            editorElement.addEventListener("keyup", searchTrigger);
            editorElement.addEventListener("search", searchTrigger);
            if (column.modules.filter.attrType == "number") {
              editorElement.addEventListener("change", function(e) {
                success(editorElement.value);
              });
            }
            if (column.modules.filter.attrType == "text" && this.table.browser !== "ie") {
              editorElement.setAttribute("type", "search");
            }
          }
          if (column.modules.filter.tagType == "input" || column.modules.filter.tagType == "select" || column.modules.filter.tagType == "textarea") {
            editorElement.addEventListener("mousedown", function(e) {
              e.stopPropagation();
            });
          }
        }
        filterElement.appendChild(editorElement);
        column.contentElement.appendChild(filterElement);
        if (!reinitialize) {
          self2.headerFilterColumns.push(column);
        }
        if (onRenderedCallback) {
          onRenderedCallback();
        }
      }
    } else {
      console.warn("Filter Error - Cannot add header filter, column has no field set:", column.definition.title);
    }
  }
  //hide all header filter elements (used to ensure correct column widths in "fitData" layout mode)
  hideHeaderFilterElements() {
    this.headerFilterColumns.forEach(function(column) {
      if (column.modules.filter && column.modules.filter.headerElement) {
        column.modules.filter.headerElement.style.display = "none";
      }
    });
  }
  //show all header filter elements (used to ensure correct column widths in "fitData" layout mode)
  showHeaderFilterElements() {
    this.headerFilterColumns.forEach(function(column) {
      if (column.modules.filter && column.modules.filter.headerElement) {
        column.modules.filter.headerElement.style.display = "";
      }
    });
  }
  //programmatically set focus of header filter
  setHeaderFilterFocus(column) {
    if (column.modules.filter && column.modules.filter.headerElement) {
      column.modules.filter.headerElement.focus();
    } else {
      console.warn("Column Filter Focus Error - No header filter set on column:", column.getField());
    }
  }
  //programmatically get value of header filter
  getHeaderFilterValue(column) {
    if (column.modules.filter && column.modules.filter.headerElement) {
      return column.modules.filter.value;
    } else {
      console.warn("Column Filter Error - No header filter set on column:", column.getField());
    }
  }
  //programmatically set value of header filter
  setHeaderFilterValue(column, value) {
    if (column) {
      if (column.modules.filter && column.modules.filter.headerElement) {
        this.generateHeaderFilterElement(column, value, true);
        column.modules.filter.success(value);
      } else {
        console.warn("Column Filter Error - No header filter set on column:", column.getField());
      }
    }
  }
  reloadHeaderFilter(column) {
    if (column) {
      if (column.modules.filter && column.modules.filter.headerElement) {
        this.generateHeaderFilterElement(column, column.modules.filter.value, true);
      } else {
        console.warn("Column Filter Error - No header filter set on column:", column.getField());
      }
    }
  }
  refreshFilter() {
    if (this.tableInitialized) {
      if (this.table.options.filterMode === "remote") {
        this.reloadData(null, false, false);
      } else {
        this.refreshData(true);
      }
    }
  }
  //check if the filters has changed since last use
  trackChanges() {
    this.changed = true;
    this.dispatch("filter-changed");
  }
  //check if the filters has changed since last use
  hasChanged() {
    var changed = this.changed;
    this.changed = false;
    return changed;
  }
  //set standard filters
  setFilter(field, type, value, params) {
    this.filterList = [];
    if (!Array.isArray(field)) {
      field = [{ field, type, value, params }];
    }
    this.addFilter(field);
  }
  //add filter to array
  addFilter(field, type, value, params) {
    var changed = false;
    if (!Array.isArray(field)) {
      field = [{ field, type, value, params }];
    }
    field.forEach((filter) => {
      filter = this.findFilter(filter);
      if (filter) {
        this.filterList.push(filter);
        changed = true;
      }
    });
    if (changed) {
      this.trackChanges();
    }
  }
  findFilter(filter) {
    var column;
    if (Array.isArray(filter)) {
      return this.findSubFilters(filter);
    }
    var filterFunc = false;
    if (typeof filter.field == "function") {
      filterFunc = function(data) {
        return filter.field(data, filter.type || {});
      };
    } else {
      if (Filter.filters[filter.type]) {
        column = this.table.columnManager.getColumnByField(filter.field);
        if (column) {
          filterFunc = function(data) {
            return Filter.filters[filter.type](filter.value, column.getFieldValue(data), data, filter.params || {});
          };
        } else {
          filterFunc = function(data) {
            return Filter.filters[filter.type](filter.value, data[filter.field], data, filter.params || {});
          };
        }
      } else {
        console.warn("Filter Error - No such filter type found, ignoring: ", filter.type);
      }
    }
    filter.func = filterFunc;
    return filter.func ? filter : false;
  }
  findSubFilters(filters) {
    var output = [];
    filters.forEach((filter) => {
      filter = this.findFilter(filter);
      if (filter) {
        output.push(filter);
      }
    });
    return output.length ? output : false;
  }
  //get all filters
  getFilters(all, ajax) {
    var output = [];
    if (all) {
      output = this.getHeaderFilters();
    }
    if (ajax) {
      output.forEach(function(item) {
        if (typeof item.type == "function") {
          item.type = "function";
        }
      });
    }
    output = output.concat(this.filtersToArray(this.filterList, ajax));
    return output;
  }
  //filter to Object
  filtersToArray(filterList, ajax) {
    var output = [];
    filterList.forEach((filter) => {
      var item;
      if (Array.isArray(filter)) {
        output.push(this.filtersToArray(filter, ajax));
      } else {
        item = { field: filter.field, type: filter.type, value: filter.value };
        if (ajax) {
          if (typeof item.type == "function") {
            item.type = "function";
          }
        }
        output.push(item);
      }
    });
    return output;
  }
  //get all filters
  getHeaderFilters() {
    var output = [];
    for (var key in this.headerFilters) {
      output.push({ field: key, type: this.headerFilters[key].type, value: this.headerFilters[key].value });
    }
    return output;
  }
  //remove filter from array
  removeFilter(field, type, value) {
    if (!Array.isArray(field)) {
      field = [{ field, type, value }];
    }
    field.forEach((filter) => {
      var index2 = -1;
      if (typeof filter.field == "object") {
        index2 = this.filterList.findIndex((element) => {
          return filter === element;
        });
      } else {
        index2 = this.filterList.findIndex((element) => {
          return filter.field === element.field && filter.type === element.type && filter.value === element.value;
        });
      }
      if (index2 > -1) {
        this.filterList.splice(index2, 1);
      } else {
        console.warn("Filter Error - No matching filter type found, ignoring: ", filter.type);
      }
    });
    this.trackChanges();
  }
  //clear filters
  clearFilter(all) {
    this.filterList = [];
    if (all) {
      this.clearHeaderFilter();
    }
    this.trackChanges();
  }
  //clear header filters
  clearHeaderFilter() {
    this.headerFilters = {};
    this.prevHeaderFilterChangeCheck = "{}";
    this.headerFilterColumns.forEach((column) => {
      if (typeof column.modules.filter.value !== "undefined") {
        delete column.modules.filter.value;
      }
      column.modules.filter.prevSuccess = void 0;
      this.reloadHeaderFilter(column);
    });
    this.trackChanges();
  }
  //search data and return matching rows
  search(searchType, field, type, value) {
    var activeRows = [], filterList = [];
    if (!Array.isArray(field)) {
      field = [{ field, type, value }];
    }
    field.forEach((filter) => {
      filter = this.findFilter(filter);
      if (filter) {
        filterList.push(filter);
      }
    });
    this.table.rowManager.rows.forEach((row) => {
      var match = true;
      filterList.forEach((filter) => {
        if (!this.filterRecurse(filter, row.getData())) {
          match = false;
        }
      });
      if (match) {
        activeRows.push(searchType === "data" ? row.getData("data") : row.getComponent());
      }
    });
    return activeRows;
  }
  //filter row array
  filter(rowList, filters) {
    var activeRows = [], activeRowComponents = [];
    if (this.subscribedExternal("dataFiltering")) {
      this.dispatchExternal("dataFiltering", this.getFilters(true));
    }
    if (this.table.options.filterMode !== "remote" && (this.filterList.length || Object.keys(this.headerFilters).length)) {
      rowList.forEach((row) => {
        if (this.filterRow(row)) {
          activeRows.push(row);
        }
      });
    } else {
      activeRows = rowList.slice(0);
    }
    if (this.subscribedExternal("dataFiltered")) {
      activeRows.forEach((row) => {
        activeRowComponents.push(row.getComponent());
      });
      this.dispatchExternal("dataFiltered", this.getFilters(true), activeRowComponents);
    }
    return activeRows;
  }
  //filter individual row
  filterRow(row, filters) {
    var match = true, data = row.getData();
    this.filterList.forEach((filter) => {
      if (!this.filterRecurse(filter, data)) {
        match = false;
      }
    });
    for (var field in this.headerFilters) {
      if (!this.headerFilters[field].func(data)) {
        match = false;
      }
    }
    return match;
  }
  filterRecurse(filter, data) {
    var match = false;
    if (Array.isArray(filter)) {
      filter.forEach((subFilter) => {
        if (this.filterRecurse(subFilter, data)) {
          match = true;
        }
      });
    } else {
      match = filter.func(data);
    }
    return match;
  }
};
Filter$1.moduleName = "filter";
Filter$1.filters = defaultFilters;
function plaintext(cell, formatterParams, onRendered) {
  return this.emptyToSpace(this.sanitizeHTML(cell.getValue()));
}
function html$1(cell, formatterParams, onRendered) {
  return cell.getValue();
}
function textarea$1(cell, formatterParams, onRendered) {
  cell.getElement().style.whiteSpace = "pre-wrap";
  return this.emptyToSpace(this.sanitizeHTML(cell.getValue()));
}
function money(cell, formatterParams, onRendered) {
  var floatVal = parseFloat(cell.getValue()), sign2 = "", number2, integer, decimal, rgx;
  var decimalSym = formatterParams.decimal || ".";
  var thousandSym = formatterParams.thousand || ",";
  var negativeSign = formatterParams.negativeSign || "-";
  var symbol = formatterParams.symbol || "";
  var after = !!formatterParams.symbolAfter;
  var precision = typeof formatterParams.precision !== "undefined" ? formatterParams.precision : 2;
  if (isNaN(floatVal)) {
    return this.emptyToSpace(this.sanitizeHTML(cell.getValue()));
  }
  if (floatVal < 0) {
    floatVal = Math.abs(floatVal);
    sign2 = negativeSign;
  }
  number2 = precision !== false ? floatVal.toFixed(precision) : floatVal;
  number2 = String(number2).split(".");
  integer = number2[0];
  decimal = number2.length > 1 ? decimalSym + number2[1] : "";
  if (formatterParams.thousand !== false) {
    rgx = /(\d+)(\d{3})/;
    while (rgx.test(integer)) {
      integer = integer.replace(rgx, "$1" + thousandSym + "$2");
    }
  }
  return after ? sign2 + integer + decimal + symbol : sign2 + symbol + integer + decimal;
}
function link(cell, formatterParams, onRendered) {
  var value = cell.getValue(), urlPrefix = formatterParams.urlPrefix || "", download = formatterParams.download, label = value, el = document.createElement("a"), data;
  function labelTraverse(path, data2) {
    var item = path.shift(), value2 = data2[item];
    if (path.length && typeof value2 === "object") {
      return labelTraverse(path, value2);
    }
    return value2;
  }
  if (formatterParams.labelField) {
    data = cell.getData();
    label = labelTraverse(formatterParams.labelField.split(this.table.options.nestedFieldSeparator), data);
  }
  if (formatterParams.label) {
    switch (typeof formatterParams.label) {
      case "string":
        label = formatterParams.label;
        break;
      case "function":
        label = formatterParams.label(cell);
        break;
    }
  }
  if (label) {
    if (formatterParams.urlField) {
      data = cell.getData();
      value = data[formatterParams.urlField];
    }
    if (formatterParams.url) {
      switch (typeof formatterParams.url) {
        case "string":
          value = formatterParams.url;
          break;
        case "function":
          value = formatterParams.url(cell);
          break;
      }
    }
    el.setAttribute("href", urlPrefix + value);
    if (formatterParams.target) {
      el.setAttribute("target", formatterParams.target);
    }
    if (formatterParams.download) {
      if (typeof download == "function") {
        download = download(cell);
      } else {
        download = download === true ? "" : download;
      }
      el.setAttribute("download", download);
    }
    el.innerHTML = this.emptyToSpace(this.sanitizeHTML(label));
    return el;
  } else {
    return "&nbsp;";
  }
}
function image(cell, formatterParams, onRendered) {
  var el = document.createElement("img"), src = cell.getValue();
  if (formatterParams.urlPrefix) {
    src = formatterParams.urlPrefix + cell.getValue();
  }
  if (formatterParams.urlSuffix) {
    src = src + formatterParams.urlSuffix;
  }
  el.setAttribute("src", src);
  switch (typeof formatterParams.height) {
    case "number":
      el.style.height = formatterParams.height + "px";
      break;
    case "string":
      el.style.height = formatterParams.height;
      break;
  }
  switch (typeof formatterParams.width) {
    case "number":
      el.style.width = formatterParams.width + "px";
      break;
    case "string":
      el.style.width = formatterParams.width;
      break;
  }
  el.addEventListener("load", function() {
    cell.getRow().normalizeHeight();
  });
  return el;
}
function tickCross$1(cell, formatterParams, onRendered) {
  var value = cell.getValue(), element = cell.getElement(), empty = formatterParams.allowEmpty, truthy = formatterParams.allowTruthy, trueValueSet = Object.keys(formatterParams).includes("trueValue"), tick = typeof formatterParams.tickElement !== "undefined" ? formatterParams.tickElement : '<svg enable-background="new 0 0 24 24" height="14" width="14" viewBox="0 0 24 24" xml:space="preserve" ><path fill="#2DC214" clip-rule="evenodd" d="M21.652,3.211c-0.293-0.295-0.77-0.295-1.061,0L9.41,14.34  c-0.293,0.297-0.771,0.297-1.062,0L3.449,9.351C3.304,9.203,3.114,9.13,2.923,9.129C2.73,9.128,2.534,9.201,2.387,9.351  l-2.165,1.946C0.078,11.445,0,11.63,0,11.823c0,0.194,0.078,0.397,0.223,0.544l4.94,5.184c0.292,0.296,0.771,0.776,1.062,1.07  l2.124,2.141c0.292,0.293,0.769,0.293,1.062,0l14.366-14.34c0.293-0.294,0.293-0.777,0-1.071L21.652,3.211z" fill-rule="evenodd"/></svg>', cross = typeof formatterParams.crossElement !== "undefined" ? formatterParams.crossElement : '<svg enable-background="new 0 0 24 24" height="14" width="14"  viewBox="0 0 24 24" xml:space="preserve" ><path fill="#CE1515" d="M22.245,4.015c0.313,0.313,0.313,0.826,0,1.139l-6.276,6.27c-0.313,0.312-0.313,0.826,0,1.14l6.273,6.272  c0.313,0.313,0.313,0.826,0,1.14l-2.285,2.277c-0.314,0.312-0.828,0.312-1.142,0l-6.271-6.271c-0.313-0.313-0.828-0.313-1.141,0  l-6.276,6.267c-0.313,0.313-0.828,0.313-1.141,0l-2.282-2.28c-0.313-0.313-0.313-0.826,0-1.14l6.278-6.269  c0.313-0.312,0.313-0.826,0-1.14L1.709,5.147c-0.314-0.313-0.314-0.827,0-1.14l2.284-2.278C4.308,1.417,4.821,1.417,5.135,1.73  L11.405,8c0.314,0.314,0.828,0.314,1.141,0.001l6.276-6.267c0.312-0.312,0.826-0.312,1.141,0L22.245,4.015z"/></svg>';
  if (trueValueSet && value === formatterParams.trueValue || !trueValueSet && (truthy && value || (value === true || value === "true" || value === "True" || value === 1 || value === "1"))) {
    element.setAttribute("aria-checked", true);
    return tick || "";
  } else {
    if (empty && (value === "null" || value === "" || value === null || typeof value === "undefined")) {
      element.setAttribute("aria-checked", "mixed");
      return "";
    } else {
      element.setAttribute("aria-checked", false);
      return cross || "";
    }
  }
}
function datetime$1(cell, formatterParams, onRendered) {
  var DT = window.DateTime || luxon.DateTime;
  var inputFormat = formatterParams.inputFormat || "yyyy-MM-dd HH:mm:ss";
  var outputFormat = formatterParams.outputFormat || "dd/MM/yyyy HH:mm:ss";
  var invalid = typeof formatterParams.invalidPlaceholder !== "undefined" ? formatterParams.invalidPlaceholder : "";
  var value = cell.getValue();
  if (typeof DT != "undefined") {
    var newDatetime;
    if (DT.isDateTime(value)) {
      newDatetime = value;
    } else if (inputFormat === "iso") {
      newDatetime = DT.fromISO(String(value));
    } else {
      newDatetime = DT.fromFormat(String(value), inputFormat);
    }
    if (newDatetime.isValid) {
      if (formatterParams.timezone) {
        newDatetime = newDatetime.setZone(formatterParams.timezone);
      }
      return newDatetime.toFormat(outputFormat);
    } else {
      if (invalid === true || !value) {
        return value;
      } else if (typeof invalid === "function") {
        return invalid(value);
      } else {
        return invalid;
      }
    }
  } else {
    console.error("Format Error - 'datetime' formatter is dependant on luxon.js");
  }
}
function datetimediff(cell, formatterParams, onRendered) {
  var DT = window.DateTime || luxon.DateTime;
  var inputFormat = formatterParams.inputFormat || "yyyy-MM-dd HH:mm:ss";
  var invalid = typeof formatterParams.invalidPlaceholder !== "undefined" ? formatterParams.invalidPlaceholder : "";
  var suffix = typeof formatterParams.suffix !== "undefined" ? formatterParams.suffix : false;
  var unit = typeof formatterParams.unit !== "undefined" ? formatterParams.unit : "days";
  var humanize2 = typeof formatterParams.humanize !== "undefined" ? formatterParams.humanize : false;
  var date2 = typeof formatterParams.date !== "undefined" ? formatterParams.date : DT.now();
  var value = cell.getValue();
  if (typeof DT != "undefined") {
    var newDatetime;
    if (DT.isDateTime(value)) {
      newDatetime = value;
    } else if (inputFormat === "iso") {
      newDatetime = DT.fromISO(String(value));
    } else {
      newDatetime = DT.fromFormat(String(value), inputFormat);
    }
    if (newDatetime.isValid) {
      if (humanize2) {
        return newDatetime.diff(date2, unit).toHuman() + (suffix ? " " + suffix : "");
      } else {
        return parseInt(newDatetime.diff(date2, unit)[unit]) + (suffix ? " " + suffix : "");
      }
    } else {
      if (invalid === true) {
        return value;
      } else if (typeof invalid === "function") {
        return invalid(value);
      } else {
        return invalid;
      }
    }
  } else {
    console.error("Format Error - 'datetimediff' formatter is dependant on luxon.js");
  }
}
function lookup(cell, formatterParams, onRendered) {
  var value = cell.getValue();
  if (typeof formatterParams[value] === "undefined") {
    console.warn("Missing display value for " + value);
    return value;
  }
  return formatterParams[value];
}
function star$1(cell, formatterParams, onRendered) {
  var value = cell.getValue(), element = cell.getElement(), maxStars = formatterParams && formatterParams.stars ? formatterParams.stars : 5, stars = document.createElement("span"), star2 = document.createElementNS("http://www.w3.org/2000/svg", "svg"), starActive = '<polygon fill="#FFEA00" stroke="#C1AB60" stroke-width="37.6152" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" points="259.216,29.942 330.27,173.919 489.16,197.007 374.185,309.08 401.33,467.31 259.216,392.612 117.104,467.31 144.25,309.08 29.274,197.007 188.165,173.919 "/>', starInactive = '<polygon fill="#D2D2D2" stroke="#686868" stroke-width="37.6152" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" points="259.216,29.942 330.27,173.919 489.16,197.007 374.185,309.08 401.33,467.31 259.216,392.612 117.104,467.31 144.25,309.08 29.274,197.007 188.165,173.919 "/>';
  stars.style.verticalAlign = "middle";
  star2.setAttribute("width", "14");
  star2.setAttribute("height", "14");
  star2.setAttribute("viewBox", "0 0 512 512");
  star2.setAttribute("xml:space", "preserve");
  star2.style.padding = "0 1px";
  value = value && !isNaN(value) ? parseInt(value) : 0;
  value = Math.max(0, Math.min(value, maxStars));
  for (var i = 1; i <= maxStars; i++) {
    var nextStar = star2.cloneNode(true);
    nextStar.innerHTML = i <= value ? starActive : starInactive;
    stars.appendChild(nextStar);
  }
  element.style.whiteSpace = "nowrap";
  element.style.overflow = "hidden";
  element.style.textOverflow = "ellipsis";
  element.setAttribute("aria-label", value);
  return stars;
}
function traffic(cell, formatterParams, onRendered) {
  var value = this.sanitizeHTML(cell.getValue()) || 0, el = document.createElement("span"), max2 = formatterParams && formatterParams.max ? formatterParams.max : 100, min2 = formatterParams && formatterParams.min ? formatterParams.min : 0, colors = formatterParams && typeof formatterParams.color !== "undefined" ? formatterParams.color : ["red", "orange", "green"], color2 = "#666666", percent, percentValue;
  if (isNaN(value) || typeof cell.getValue() === "undefined") {
    return;
  }
  el.classList.add("tabulator-traffic-light");
  percentValue = parseFloat(value) <= max2 ? parseFloat(value) : max2;
  percentValue = parseFloat(percentValue) >= min2 ? parseFloat(percentValue) : min2;
  percent = (max2 - min2) / 100;
  percentValue = Math.round((percentValue - min2) / percent);
  switch (typeof colors) {
    case "string":
      color2 = colors;
      break;
    case "function":
      color2 = colors(value);
      break;
    case "object":
      if (Array.isArray(colors)) {
        var unit = 100 / colors.length;
        var index2 = Math.floor(percentValue / unit);
        index2 = Math.min(index2, colors.length - 1);
        index2 = Math.max(index2, 0);
        color2 = colors[index2];
        break;
      }
  }
  el.style.backgroundColor = color2;
  return el;
}
function progress$1(cell, formatterParams = {}, onRendered) {
  var value = this.sanitizeHTML(cell.getValue()) || 0, element = cell.getElement(), max2 = formatterParams.max ? formatterParams.max : 100, min2 = formatterParams.min ? formatterParams.min : 0, legendAlign = formatterParams.legendAlign ? formatterParams.legendAlign : "center", percent, percentValue, color2, legend, legendColor;
  percentValue = parseFloat(value) <= max2 ? parseFloat(value) : max2;
  percentValue = parseFloat(percentValue) >= min2 ? parseFloat(percentValue) : min2;
  percent = (max2 - min2) / 100;
  percentValue = Math.round((percentValue - min2) / percent);
  switch (typeof formatterParams.color) {
    case "string":
      color2 = formatterParams.color;
      break;
    case "function":
      color2 = formatterParams.color(value);
      break;
    case "object":
      if (Array.isArray(formatterParams.color)) {
        let unit = 100 / formatterParams.color.length;
        let index2 = Math.floor(percentValue / unit);
        index2 = Math.min(index2, formatterParams.color.length - 1);
        index2 = Math.max(index2, 0);
        color2 = formatterParams.color[index2];
        break;
      }
    default:
      color2 = "#2DC214";
  }
  switch (typeof formatterParams.legend) {
    case "string":
      legend = formatterParams.legend;
      break;
    case "function":
      legend = formatterParams.legend(value);
      break;
    case "boolean":
      legend = value;
      break;
    default:
      legend = false;
  }
  switch (typeof formatterParams.legendColor) {
    case "string":
      legendColor = formatterParams.legendColor;
      break;
    case "function":
      legendColor = formatterParams.legendColor(value);
      break;
    case "object":
      if (Array.isArray(formatterParams.legendColor)) {
        let unit = 100 / formatterParams.legendColor.length;
        let index2 = Math.floor(percentValue / unit);
        index2 = Math.min(index2, formatterParams.legendColor.length - 1);
        index2 = Math.max(index2, 0);
        legendColor = formatterParams.legendColor[index2];
      }
      break;
    default:
      legendColor = "#000";
  }
  element.style.minWidth = "30px";
  element.style.position = "relative";
  element.setAttribute("aria-label", percentValue);
  var barEl = document.createElement("div");
  barEl.style.display = "inline-block";
  barEl.style.width = percentValue + "%";
  barEl.style.backgroundColor = color2;
  barEl.style.height = "100%";
  barEl.setAttribute("data-max", max2);
  barEl.setAttribute("data-min", min2);
  var barContainer = document.createElement("div");
  barContainer.style.position = "relative";
  barContainer.style.width = "100%";
  barContainer.style.height = "100%";
  if (legend) {
    var legendEl = document.createElement("div");
    legendEl.style.position = "absolute";
    legendEl.style.top = 0;
    legendEl.style.left = 0;
    legendEl.style.textAlign = legendAlign;
    legendEl.style.width = "100%";
    legendEl.style.color = legendColor;
    legendEl.innerHTML = legend;
  }
  onRendered(function() {
    if (!(cell instanceof CellComponent)) {
      var holderEl = document.createElement("div");
      holderEl.style.position = "absolute";
      holderEl.style.top = "4px";
      holderEl.style.bottom = "4px";
      holderEl.style.left = "4px";
      holderEl.style.right = "4px";
      element.appendChild(holderEl);
      element = holderEl;
    }
    element.appendChild(barContainer);
    barContainer.appendChild(barEl);
    if (legend) {
      barContainer.appendChild(legendEl);
    }
  });
  return "";
}
function color(cell, formatterParams, onRendered) {
  cell.getElement().style.backgroundColor = this.sanitizeHTML(cell.getValue());
  return "";
}
function buttonTick(cell, formatterParams, onRendered) {
  return '<svg enable-background="new 0 0 24 24" height="14" width="14" viewBox="0 0 24 24" xml:space="preserve" ><path fill="#2DC214" clip-rule="evenodd" d="M21.652,3.211c-0.293-0.295-0.77-0.295-1.061,0L9.41,14.34  c-0.293,0.297-0.771,0.297-1.062,0L3.449,9.351C3.304,9.203,3.114,9.13,2.923,9.129C2.73,9.128,2.534,9.201,2.387,9.351  l-2.165,1.946C0.078,11.445,0,11.63,0,11.823c0,0.194,0.078,0.397,0.223,0.544l4.94,5.184c0.292,0.296,0.771,0.776,1.062,1.07  l2.124,2.141c0.292,0.293,0.769,0.293,1.062,0l14.366-14.34c0.293-0.294,0.293-0.777,0-1.071L21.652,3.211z" fill-rule="evenodd"/></svg>';
}
function buttonCross(cell, formatterParams, onRendered) {
  return '<svg enable-background="new 0 0 24 24" height="14" width="14" viewBox="0 0 24 24" xml:space="preserve" ><path fill="#CE1515" d="M22.245,4.015c0.313,0.313,0.313,0.826,0,1.139l-6.276,6.27c-0.313,0.312-0.313,0.826,0,1.14l6.273,6.272  c0.313,0.313,0.313,0.826,0,1.14l-2.285,2.277c-0.314,0.312-0.828,0.312-1.142,0l-6.271-6.271c-0.313-0.313-0.828-0.313-1.141,0  l-6.276,6.267c-0.313,0.313-0.828,0.313-1.141,0l-2.282-2.28c-0.313-0.313-0.313-0.826,0-1.14l6.278-6.269  c0.313-0.312,0.313-0.826,0-1.14L1.709,5.147c-0.314-0.313-0.314-0.827,0-1.14l2.284-2.278C4.308,1.417,4.821,1.417,5.135,1.73  L11.405,8c0.314,0.314,0.828,0.314,1.141,0.001l6.276-6.267c0.312-0.312,0.826-0.312,1.141,0L22.245,4.015z"/></svg>';
}
function rownum(cell, formatterParams, onRendered) {
  var content = document.createElement("span");
  var row = cell.getRow();
  row.watchPosition((position) => {
    content.innerText = position;
  });
  return content;
}
function handle(cell, formatterParams, onRendered) {
  cell.getElement().classList.add("tabulator-row-handle");
  return "<div class='tabulator-row-handle-box'><div class='tabulator-row-handle-bar'></div><div class='tabulator-row-handle-bar'></div><div class='tabulator-row-handle-bar'></div></div>";
}
function responsiveCollapse(cell, formatterParams, onRendered) {
  var el = document.createElement("div"), config = cell.getRow()._row.modules.responsiveLayout;
  el.classList.add("tabulator-responsive-collapse-toggle");
  el.innerHTML = `<svg class='tabulator-responsive-collapse-toggle-open' viewbox="0 0 24 24">
  <line x1="7" y1="12" x2="17" y2="12" fill="none" stroke-width="3" stroke-linecap="round" />
  <line y1="7" x1="12" y2="17" x2="12" fill="none" stroke-width="3" stroke-linecap="round" />
</svg>

<svg class='tabulator-responsive-collapse-toggle-close' viewbox="0 0 24 24">
  <line x1="7" y1="12" x2="17" y2="12"  fill="none" stroke-width="3" stroke-linecap="round" />
</svg>`;
  cell.getElement().classList.add("tabulator-row-handle");
  function toggleList(isOpen) {
    var collapseEl = config.element;
    config.open = isOpen;
    if (collapseEl) {
      if (config.open) {
        el.classList.add("open");
        collapseEl.style.display = "";
      } else {
        el.classList.remove("open");
        collapseEl.style.display = "none";
      }
    }
  }
  el.addEventListener("click", function(e) {
    e.stopImmediatePropagation();
    toggleList(!config.open);
    cell.getTable().rowManager.adjustTableSize();
  });
  toggleList(config.open);
  return el;
}
function rowSelection(cell, formatterParams, onRendered) {
  var checkbox = document.createElement("input");
  var blocked = false;
  checkbox.type = "checkbox";
  checkbox.setAttribute("aria-label", "Select Row");
  if (this.table.modExists("selectRow", true)) {
    checkbox.addEventListener("click", (e) => {
      e.stopPropagation();
    });
    if (typeof cell.getRow == "function") {
      var row = cell.getRow();
      if (row instanceof RowComponent) {
        checkbox.addEventListener("change", (e) => {
          if (this.table.options.selectableRangeMode === "click") {
            if (!blocked) {
              row.toggleSelect();
            } else {
              blocked = false;
            }
          } else {
            row.toggleSelect();
          }
        });
        if (this.table.options.selectableRangeMode === "click") {
          checkbox.addEventListener("click", (e) => {
            blocked = true;
            this.table.modules.selectRow.handleComplexRowClick(row._row, e);
          });
        }
        checkbox.checked = row.isSelected && row.isSelected();
        this.table.modules.selectRow.registerRowSelectCheckbox(row, checkbox);
      } else {
        checkbox = "";
      }
    } else {
      checkbox.addEventListener("change", (e) => {
        if (this.table.modules.selectRow.selectedRows.length) {
          this.table.deselectRow();
        } else {
          this.table.selectRow(formatterParams.rowRange);
        }
      });
      this.table.modules.selectRow.registerHeaderSelectCheckbox(checkbox);
    }
  }
  return checkbox;
}
var defaultFormatters = {
  plaintext,
  html: html$1,
  textarea: textarea$1,
  money,
  link,
  image,
  tickCross: tickCross$1,
  datetime: datetime$1,
  datetimediff,
  lookup,
  star: star$1,
  traffic,
  progress: progress$1,
  color,
  buttonTick,
  buttonCross,
  rownum,
  handle,
  responsiveCollapse,
  rowSelection
};
class Format extends Module {
  constructor(table) {
    super(table);
    this.registerColumnOption("formatter");
    this.registerColumnOption("formatterParams");
    this.registerColumnOption("formatterPrint");
    this.registerColumnOption("formatterPrintParams");
    this.registerColumnOption("formatterClipboard");
    this.registerColumnOption("formatterClipboardParams");
    this.registerColumnOption("formatterHtmlOutput");
    this.registerColumnOption("formatterHtmlOutputParams");
    this.registerColumnOption("titleFormatter");
    this.registerColumnOption("titleFormatterParams");
  }
  initialize() {
    this.subscribe("cell-format", this.formatValue.bind(this));
    this.subscribe("cell-rendered", this.cellRendered.bind(this));
    this.subscribe("column-layout", this.initializeColumn.bind(this));
    this.subscribe("column-format", this.formatHeader.bind(this));
  }
  //initialize column formatter
  initializeColumn(column) {
    column.modules.format = this.lookupFormatter(column, "");
    if (typeof column.definition.formatterPrint !== "undefined") {
      column.modules.format.print = this.lookupFormatter(column, "Print");
    }
    if (typeof column.definition.formatterClipboard !== "undefined") {
      column.modules.format.clipboard = this.lookupFormatter(column, "Clipboard");
    }
    if (typeof column.definition.formatterHtmlOutput !== "undefined") {
      column.modules.format.htmlOutput = this.lookupFormatter(column, "HtmlOutput");
    }
  }
  lookupFormatter(column, type) {
    var config = { params: column.definition["formatter" + type + "Params"] || {} }, formatter = column.definition["formatter" + type];
    switch (typeof formatter) {
      case "string":
        if (Format.formatters[formatter]) {
          config.formatter = Format.formatters[formatter];
        } else {
          console.warn("Formatter Error - No such formatter found: ", formatter);
          config.formatter = Format.formatters.plaintext;
        }
        break;
      case "function":
        config.formatter = formatter;
        break;
      default:
        config.formatter = Format.formatters.plaintext;
        break;
    }
    return config;
  }
  cellRendered(cell) {
    if (cell.modules.format && cell.modules.format.renderedCallback && !cell.modules.format.rendered) {
      cell.modules.format.renderedCallback();
      cell.modules.format.rendered = true;
    }
  }
  //return a formatted value for a column header
  formatHeader(column, title, el) {
    var formatter, params, onRendered, mockCell;
    if (column.definition.titleFormatter) {
      formatter = this.getFormatter(column.definition.titleFormatter);
      onRendered = (callback) => {
        column.titleFormatterRendered = callback;
      };
      mockCell = {
        getValue: function() {
          return title;
        },
        getElement: function() {
          return el;
        },
        getColumn: function() {
          return column.getComponent();
        },
        getTable: () => {
          return this.table;
        }
      };
      params = column.definition.titleFormatterParams || {};
      params = typeof params === "function" ? params() : params;
      return formatter.call(this, mockCell, params, onRendered);
    } else {
      return title;
    }
  }
  //return a formatted value for a cell
  formatValue(cell) {
    var component = cell.getComponent(), params = typeof cell.column.modules.format.params === "function" ? cell.column.modules.format.params(component) : cell.column.modules.format.params;
    function onRendered(callback) {
      if (!cell.modules.format) {
        cell.modules.format = {};
      }
      cell.modules.format.renderedCallback = callback;
      cell.modules.format.rendered = false;
    }
    return cell.column.modules.format.formatter.call(this, component, params, onRendered);
  }
  formatExportValue(cell, type) {
    var formatter = cell.column.modules.format[type], params;
    if (formatter) {
      let onRendered = function(callback) {
        if (!cell.modules.format) {
          cell.modules.format = {};
        }
        cell.modules.format.renderedCallback = callback;
        cell.modules.format.rendered = false;
      };
      params = typeof formatter.params === "function" ? formatter.params(cell.getComponent()) : formatter.params;
      return formatter.formatter.call(this, cell.getComponent(), params, onRendered);
    } else {
      return this.formatValue(cell);
    }
  }
  sanitizeHTML(value) {
    if (value) {
      var entityMap = {
        "&": "&amp;",
        "<": "&lt;",
        ">": "&gt;",
        '"': "&quot;",
        "'": "&#39;",
        "/": "&#x2F;",
        "`": "&#x60;",
        "=": "&#x3D;"
      };
      return String(value).replace(/[&<>"'`=/]/g, function(s) {
        return entityMap[s];
      });
    } else {
      return value;
    }
  }
  emptyToSpace(value) {
    return value === null || typeof value === "undefined" || value === "" ? "&nbsp;" : value;
  }
  //get formatter for cell
  getFormatter(formatter) {
    switch (typeof formatter) {
      case "string":
        if (Format.formatters[formatter]) {
          formatter = Format.formatters[formatter];
        } else {
          console.warn("Formatter Error - No such formatter found: ", formatter);
          formatter = Format.formatters.plaintext;
        }
        break;
      case "function":
        break;
      default:
        formatter = Format.formatters.plaintext;
        break;
    }
    return formatter;
  }
}
Format.moduleName = "format";
Format.formatters = defaultFormatters;
class FrozenColumns extends Module {
  constructor(table) {
    super(table);
    this.leftColumns = [];
    this.rightColumns = [];
    this.initializationMode = "left";
    this.active = false;
    this.blocked = true;
    this.registerColumnOption("frozen");
  }
  //reset initial state
  reset() {
    this.initializationMode = "left";
    this.leftColumns = [];
    this.rightColumns = [];
    this.active = false;
  }
  initialize() {
    this.subscribe("cell-layout", this.layoutCell.bind(this));
    this.subscribe("column-init", this.initializeColumn.bind(this));
    this.subscribe("column-width", this.layout.bind(this));
    this.subscribe("row-layout-after", this.layoutRow.bind(this));
    this.subscribe("table-layout", this.layout.bind(this));
    this.subscribe("columns-loading", this.reset.bind(this));
    this.subscribe("column-add", this.reinitializeColumns.bind(this));
    this.subscribe("column-delete", this.reinitializeColumns.bind(this));
    this.subscribe("table-redraw", this.layout.bind(this));
    this.subscribe("layout-refreshing", this.blockLayout.bind(this));
    this.subscribe("layout-refreshed", this.unblockLayout.bind(this));
    this.subscribe("scrollbar-vertical", this.adjustForScrollbar.bind(this));
  }
  blockLayout() {
    this.blocked = true;
  }
  unblockLayout() {
    this.blocked = false;
  }
  layoutCell(cell) {
    this.layoutElement(cell.element, cell.column);
  }
  reinitializeColumns() {
    this.reset();
    this.table.columnManager.columnsByIndex.forEach((column) => {
      this.initializeColumn(column);
    });
  }
  //initialize specific column
  initializeColumn(column) {
    var config = { margin: 0, edge: false };
    if (!column.isGroup) {
      if (this.frozenCheck(column)) {
        config.position = this.initializationMode;
        if (this.initializationMode == "left") {
          this.leftColumns.push(column);
        } else {
          this.rightColumns.unshift(column);
        }
        this.active = true;
        column.modules.frozen = config;
      } else {
        this.initializationMode = "right";
      }
    }
  }
  frozenCheck(column) {
    if (column.parent.isGroup && column.definition.frozen) {
      console.warn("Frozen Column Error - Parent column group must be frozen, not individual columns or sub column groups");
    }
    if (column.parent.isGroup) {
      return this.frozenCheck(column.parent);
    } else {
      return column.definition.frozen;
    }
  }
  //layout calculation rows
  layoutCalcRows() {
    if (this.table.modExists("columnCalcs")) {
      if (this.table.modules.columnCalcs.topInitialized && this.table.modules.columnCalcs.topRow) {
        this.layoutRow(this.table.modules.columnCalcs.topRow);
      }
      if (this.table.modules.columnCalcs.botInitialized && this.table.modules.columnCalcs.botRow) {
        this.layoutRow(this.table.modules.columnCalcs.botRow);
      }
      if (this.table.modExists("groupRows")) {
        this.layoutGroupCalcs(this.table.modules.groupRows.getGroups());
      }
    }
  }
  layoutGroupCalcs(groups) {
    groups.forEach((group) => {
      if (group.calcs.top) {
        this.layoutRow(group.calcs.top);
      }
      if (group.calcs.bottom) {
        this.layoutRow(group.calcs.bottom);
      }
      if (group.groupList && group.groupList.length) {
        this.layoutGroupCalcs(group.groupList);
      }
    });
  }
  //calculate column positions and layout headers
  layoutColumnPosition(allCells) {
    var leftParents = [];
    var leftMargin = 0;
    var rightMargin = 0;
    this.leftColumns.forEach((column, i) => {
      column.modules.frozen.marginValue = leftMargin;
      column.modules.frozen.margin = column.modules.frozen.marginValue + "px";
      if (column.visible) {
        leftMargin += column.getWidth();
      }
      if (i == this.leftColumns.length - 1) {
        column.modules.frozen.edge = true;
      } else {
        column.modules.frozen.edge = false;
      }
      if (column.parent.isGroup) {
        var parentEl = this.getColGroupParentElement(column);
        if (!leftParents.includes(parentEl)) {
          this.layoutElement(parentEl, column);
          leftParents.push(parentEl);
        }
        if (column.modules.frozen.edge) {
          parentEl.classList.add("tabulator-frozen-" + column.modules.frozen.position);
        }
      } else {
        this.layoutElement(column.getElement(), column);
      }
      if (allCells) {
        column.cells.forEach((cell) => {
          this.layoutElement(cell.getElement(true), column);
        });
      }
    });
    this.rightColumns.forEach((column, i) => {
      column.modules.frozen.marginValue = rightMargin;
      column.modules.frozen.margin = column.modules.frozen.marginValue + "px";
      if (column.visible) {
        rightMargin += column.getWidth();
      }
      if (i == this.rightColumns.length - 1) {
        column.modules.frozen.edge = true;
      } else {
        column.modules.frozen.edge = false;
      }
      if (column.parent.isGroup) {
        this.layoutElement(this.getColGroupParentElement(column), column);
      } else {
        this.layoutElement(column.getElement(), column);
      }
      if (allCells) {
        column.cells.forEach((cell) => {
          this.layoutElement(cell.getElement(true), column);
        });
      }
    });
  }
  getColGroupParentElement(column) {
    return column.parent.isGroup ? this.getColGroupParentElement(column.parent) : column.getElement();
  }
  //layout columns appropriately
  layout() {
    if (this.active && !this.blocked) {
      this.layoutColumnPosition();
      this.reinitializeRows();
      this.layoutCalcRows();
    }
  }
  reinitializeRows() {
    var visibleRows = this.table.rowManager.getVisibleRows(true);
    var otherRows = this.table.rowManager.getRows().filter((row) => !visibleRows.includes(row));
    otherRows.forEach((row) => {
      row.deinitialize();
    });
    visibleRows.forEach((row) => {
      if (row.type === "row") {
        this.layoutRow(row);
      }
    });
  }
  layoutRow(row) {
    if (this.table.options.layout === "fitDataFill" && this.rightColumns.length) {
      this.table.rowManager.getTableElement().style.minWidth = "calc(100% - " + this.rightMargin + ")";
    }
    this.leftColumns.forEach((column) => {
      var cell = row.getCell(column);
      if (cell) {
        this.layoutElement(cell.getElement(true), column);
      }
    });
    this.rightColumns.forEach((column) => {
      var cell = row.getCell(column);
      if (cell) {
        this.layoutElement(cell.getElement(true), column);
      }
    });
  }
  layoutElement(element, column) {
    var position;
    if (column.modules.frozen) {
      element.style.position = "sticky";
      if (this.table.rtl) {
        position = column.modules.frozen.position === "left" ? "right" : "left";
      } else {
        position = column.modules.frozen.position;
      }
      element.style[position] = column.modules.frozen.margin;
      element.classList.add("tabulator-frozen");
      if (column.modules.frozen.edge) {
        element.classList.add("tabulator-frozen-" + column.modules.frozen.position);
      }
    }
  }
  adjustForScrollbar(width) {
    if (this.rightColumns.length) {
      this.table.columnManager.getContentsElement().style.width = "calc(100% - " + width + "px)";
    }
  }
  _calcSpace(columns, index2) {
    var width = 0;
    for (let i = 0; i < index2; i++) {
      if (columns[i].visible) {
        width += columns[i].getWidth();
      }
    }
    return width;
  }
}
FrozenColumns.moduleName = "frozenColumns";
class FrozenRows extends Module {
  constructor(table) {
    super(table);
    this.topElement = document.createElement("div");
    this.rows = [];
    this.registerComponentFunction("row", "freeze", this.freezeRow.bind(this));
    this.registerComponentFunction("row", "unfreeze", this.unfreezeRow.bind(this));
    this.registerComponentFunction("row", "isFrozen", this.isRowFrozen.bind(this));
    this.registerTableOption("frozenRowsField", "id");
    this.registerTableOption("frozenRows", false);
  }
  initialize() {
    this.rows = [];
    this.topElement.classList.add("tabulator-frozen-rows-holder");
    this.table.columnManager.getContentsElement().insertBefore(this.topElement, this.table.columnManager.headersElement.nextSibling);
    this.subscribe("row-deleting", this.detachRow.bind(this));
    this.subscribe("rows-visible", this.visibleRows.bind(this));
    this.registerDisplayHandler(this.getRows.bind(this), 10);
    if (this.table.options.frozenRows) {
      this.subscribe("data-processed", this.initializeRows.bind(this));
      this.subscribe("row-added", this.initializeRow.bind(this));
      this.subscribe("table-redrawing", this.resizeHolderWidth.bind(this));
      this.subscribe("column-resized", this.resizeHolderWidth.bind(this));
      this.subscribe("column-show", this.resizeHolderWidth.bind(this));
      this.subscribe("column-hide", this.resizeHolderWidth.bind(this));
    }
    this.resizeHolderWidth();
  }
  resizeHolderWidth() {
    this.topElement.style.minWidth = this.table.columnManager.headersElement.offsetWidth + "px";
  }
  initializeRows() {
    this.table.rowManager.getRows().forEach((row) => {
      this.initializeRow(row);
    });
  }
  initializeRow(row) {
    var frozenRows = this.table.options.frozenRows, rowType = typeof frozenRows;
    if (rowType === "number") {
      if (row.getPosition() && row.getPosition() + this.rows.length <= frozenRows) {
        this.freezeRow(row);
      }
    } else if (rowType === "function") {
      if (frozenRows.call(this.table, row.getComponent())) {
        this.freezeRow(row);
      }
    } else if (Array.isArray(frozenRows)) {
      if (frozenRows.includes(row.data[this.options("frozenRowsField")])) {
        this.freezeRow(row);
      }
    }
  }
  isRowFrozen(row) {
    var index2 = this.rows.indexOf(row);
    return index2 > -1;
  }
  isFrozen() {
    return !!this.rows.length;
  }
  visibleRows(viewable, rows2) {
    this.rows.forEach((row) => {
      rows2.push(row);
    });
    return rows2;
  }
  //filter frozen rows out of display data
  getRows(rows2) {
    var output = rows2.slice(0);
    this.rows.forEach(function(row) {
      var index2 = output.indexOf(row);
      if (index2 > -1) {
        output.splice(index2, 1);
      }
    });
    return output;
  }
  freezeRow(row) {
    if (!row.modules.frozen) {
      row.modules.frozen = true;
      this.topElement.appendChild(row.getElement());
      row.initialize();
      row.normalizeHeight();
      this.rows.push(row);
      this.refreshData(false, "display");
      this.table.rowManager.adjustTableSize();
      this.styleRows();
    } else {
      console.warn("Freeze Error - Row is already frozen");
    }
  }
  unfreezeRow(row) {
    if (row.modules.frozen) {
      row.modules.frozen = false;
      this.detachRow(row);
      this.table.rowManager.adjustTableSize();
      this.refreshData(false, "display");
      if (this.rows.length) {
        this.styleRows();
      }
    } else {
      console.warn("Freeze Error - Row is already unfrozen");
    }
  }
  detachRow(row) {
    var index2 = this.rows.indexOf(row);
    if (index2 > -1) {
      var rowEl = row.getElement();
      if (rowEl.parentNode) {
        rowEl.parentNode.removeChild(rowEl);
      }
      this.rows.splice(index2, 1);
    }
  }
  styleRows(row) {
    this.rows.forEach((row2, i) => {
      this.table.rowManager.styleRow(row2, i);
    });
  }
}
FrozenRows.moduleName = "frozenRows";
class GroupComponent {
  constructor(group) {
    this._group = group;
    this.type = "GroupComponent";
    return new Proxy(this, {
      get: function(target, name, receiver) {
        if (typeof target[name] !== "undefined") {
          return target[name];
        } else {
          return target._group.groupManager.table.componentFunctionBinder.handle("group", target._group, name);
        }
      }
    });
  }
  getKey() {
    return this._group.key;
  }
  getField() {
    return this._group.field;
  }
  getElement() {
    return this._group.element;
  }
  getRows() {
    return this._group.getRows(true);
  }
  getSubGroups() {
    return this._group.getSubGroups(true);
  }
  getParentGroup() {
    return this._group.parent ? this._group.parent.getComponent() : false;
  }
  isVisible() {
    return this._group.visible;
  }
  show() {
    this._group.show();
  }
  hide() {
    this._group.hide();
  }
  toggle() {
    this._group.toggleVisibility();
  }
  _getSelf() {
    return this._group;
  }
  getTable() {
    return this._group.groupManager.table;
  }
}
class Group {
  constructor(groupManager, parent, level, key, field, generator, oldGroup) {
    this.groupManager = groupManager;
    this.parent = parent;
    this.key = key;
    this.level = level;
    this.field = field;
    this.hasSubGroups = level < groupManager.groupIDLookups.length - 1;
    this.addRow = this.hasSubGroups ? this._addRowToGroup : this._addRow;
    this.type = "group";
    this.old = oldGroup;
    this.rows = [];
    this.groups = [];
    this.groupList = [];
    this.generator = generator;
    this.element = false;
    this.elementContents = false;
    this.height = 0;
    this.outerHeight = 0;
    this.initialized = false;
    this.calcs = {};
    this.initialized = false;
    this.modules = {};
    this.arrowElement = false;
    this.visible = oldGroup ? oldGroup.visible : typeof groupManager.startOpen[level] !== "undefined" ? groupManager.startOpen[level] : groupManager.startOpen[0];
    this.component = null;
    this.createElements();
    this.addBindings();
    this.createValueGroups();
  }
  wipe(elementsOnly) {
    if (!elementsOnly) {
      if (this.groupList.length) {
        this.groupList.forEach(function(group) {
          group.wipe();
        });
      } else {
        this.rows.forEach((row) => {
          if (row.modules) {
            delete row.modules.group;
          }
        });
      }
    }
    this.element = false;
    this.arrowElement = false;
    this.elementContents = false;
  }
  createElements() {
    var arrow2 = document.createElement("div");
    arrow2.classList.add("tabulator-arrow");
    this.element = document.createElement("div");
    this.element.classList.add("tabulator-row");
    this.element.classList.add("tabulator-group");
    this.element.classList.add("tabulator-group-level-" + this.level);
    this.element.setAttribute("role", "rowgroup");
    this.arrowElement = document.createElement("div");
    this.arrowElement.classList.add("tabulator-group-toggle");
    this.arrowElement.appendChild(arrow2);
    if (this.groupManager.table.options.movableRows !== false && this.groupManager.table.modExists("moveRow")) {
      this.groupManager.table.modules.moveRow.initializeGroupHeader(this);
    }
  }
  createValueGroups() {
    var level = this.level + 1;
    if (this.groupManager.allowedValues && this.groupManager.allowedValues[level]) {
      this.groupManager.allowedValues[level].forEach((value) => {
        this._createGroup(value, level);
      });
    }
  }
  addBindings() {
    var toggleElement;
    if (this.groupManager.table.options.groupToggleElement) {
      toggleElement = this.groupManager.table.options.groupToggleElement == "arrow" ? this.arrowElement : this.element;
      toggleElement.addEventListener("click", (e) => {
        e.stopPropagation();
        e.stopImmediatePropagation();
        this.toggleVisibility();
      });
    }
  }
  _createGroup(groupID, level) {
    var groupKey = level + "_" + groupID;
    var group = new Group(this.groupManager, this, level, groupID, this.groupManager.groupIDLookups[level].field, this.groupManager.headerGenerator[level] || this.groupManager.headerGenerator[0], this.old ? this.old.groups[groupKey] : false);
    this.groups[groupKey] = group;
    this.groupList.push(group);
  }
  _addRowToGroup(row) {
    var level = this.level + 1;
    if (this.hasSubGroups) {
      var groupID = this.groupManager.groupIDLookups[level].func(row.getData()), groupKey = level + "_" + groupID;
      if (this.groupManager.allowedValues && this.groupManager.allowedValues[level]) {
        if (this.groups[groupKey]) {
          this.groups[groupKey].addRow(row);
        }
      } else {
        if (!this.groups[groupKey]) {
          this._createGroup(groupID, level);
        }
        this.groups[groupKey].addRow(row);
      }
    }
  }
  _addRow(row) {
    this.rows.push(row);
    row.modules.group = this;
  }
  insertRow(row, to2, after) {
    var data = this.conformRowData({});
    row.updateData(data);
    var toIndex = this.rows.indexOf(to2);
    if (toIndex > -1) {
      if (after) {
        this.rows.splice(toIndex + 1, 0, row);
      } else {
        this.rows.splice(toIndex, 0, row);
      }
    } else {
      if (after) {
        this.rows.push(row);
      } else {
        this.rows.unshift(row);
      }
    }
    row.modules.group = this;
    if (this.groupManager.table.modExists("columnCalcs") && this.groupManager.table.options.columnCalcs != "table") {
      this.groupManager.table.modules.columnCalcs.recalcGroup(this);
    }
    this.groupManager.updateGroupRows(true);
  }
  scrollHeader(left2) {
    if (this.arrowElement) {
      this.arrowElement.style.marginLeft = left2;
      this.groupList.forEach(function(child) {
        child.scrollHeader(left2);
      });
    }
  }
  getRowIndex(row) {
  }
  //update row data to match grouping constraints
  conformRowData(data) {
    if (this.field) {
      data[this.field] = this.key;
    } else {
      console.warn("Data Conforming Error - Cannot conform row data to match new group as groupBy is a function");
    }
    if (this.parent) {
      data = this.parent.conformRowData(data);
    }
    return data;
  }
  removeRow(row) {
    var index2 = this.rows.indexOf(row);
    var el = row.getElement();
    if (index2 > -1) {
      this.rows.splice(index2, 1);
    }
    if (!this.groupManager.table.options.groupValues && !this.rows.length) {
      if (this.parent) {
        this.parent.removeGroup(this);
      } else {
        this.groupManager.removeGroup(this);
      }
      this.groupManager.updateGroupRows(true);
    } else {
      if (el.parentNode) {
        el.parentNode.removeChild(el);
      }
      if (!this.groupManager.blockRedraw) {
        this.generateGroupHeaderContents();
        if (this.groupManager.table.modExists("columnCalcs") && this.groupManager.table.options.columnCalcs != "table") {
          this.groupManager.table.modules.columnCalcs.recalcGroup(this);
        }
      }
    }
  }
  removeGroup(group) {
    var groupKey = group.level + "_" + group.key, index2;
    if (this.groups[groupKey]) {
      delete this.groups[groupKey];
      index2 = this.groupList.indexOf(group);
      if (index2 > -1) {
        this.groupList.splice(index2, 1);
      }
      if (!this.groupList.length) {
        if (this.parent) {
          this.parent.removeGroup(this);
        } else {
          this.groupManager.removeGroup(this);
        }
      }
    }
  }
  getHeadersAndRows() {
    var output = [];
    output.push(this);
    this._visSet();
    if (this.calcs.top) {
      this.calcs.top.detachElement();
      this.calcs.top.deleteCells();
    }
    if (this.calcs.bottom) {
      this.calcs.bottom.detachElement();
      this.calcs.bottom.deleteCells();
    }
    if (this.visible) {
      if (this.groupList.length) {
        this.groupList.forEach(function(group) {
          output = output.concat(group.getHeadersAndRows());
        });
      } else {
        if (this.groupManager.table.options.columnCalcs != "table" && this.groupManager.table.modExists("columnCalcs") && this.groupManager.table.modules.columnCalcs.hasTopCalcs()) {
          this.calcs.top = this.groupManager.table.modules.columnCalcs.generateTopRow(this.rows);
          output.push(this.calcs.top);
        }
        output = output.concat(this.rows);
        if (this.groupManager.table.options.columnCalcs != "table" && this.groupManager.table.modExists("columnCalcs") && this.groupManager.table.modules.columnCalcs.hasBottomCalcs()) {
          this.calcs.bottom = this.groupManager.table.modules.columnCalcs.generateBottomRow(this.rows);
          output.push(this.calcs.bottom);
        }
      }
    } else {
      if (!this.groupList.length && this.groupManager.table.options.columnCalcs != "table") {
        if (this.groupManager.table.modExists("columnCalcs")) {
          if (this.groupManager.table.modules.columnCalcs.hasTopCalcs()) {
            if (this.groupManager.table.options.groupClosedShowCalcs) {
              this.calcs.top = this.groupManager.table.modules.columnCalcs.generateTopRow(this.rows);
              output.push(this.calcs.top);
            }
          }
          if (this.groupManager.table.modules.columnCalcs.hasBottomCalcs()) {
            if (this.groupManager.table.options.groupClosedShowCalcs) {
              this.calcs.bottom = this.groupManager.table.modules.columnCalcs.generateBottomRow(this.rows);
              output.push(this.calcs.bottom);
            }
          }
        }
      }
    }
    return output;
  }
  getData(visible, transform) {
    var output = [];
    this._visSet();
    if (!visible || visible && this.visible) {
      this.rows.forEach((row) => {
        output.push(row.getData(transform || "data"));
      });
    }
    return output;
  }
  getRowCount() {
    var count = 0;
    if (this.groupList.length) {
      this.groupList.forEach((group) => {
        count += group.getRowCount();
      });
    } else {
      count = this.rows.length;
    }
    return count;
  }
  toggleVisibility() {
    if (this.visible) {
      this.hide();
    } else {
      this.show();
    }
  }
  hide() {
    this.visible = false;
    if (this.groupManager.table.rowManager.getRenderMode() == "basic" && !this.groupManager.table.options.pagination) {
      this.element.classList.remove("tabulator-group-visible");
      if (this.groupList.length) {
        this.groupList.forEach((group) => {
          var rows2 = group.getHeadersAndRows();
          rows2.forEach((row) => {
            row.detachElement();
          });
        });
      } else {
        this.rows.forEach((row) => {
          var rowEl = row.getElement();
          rowEl.parentNode.removeChild(rowEl);
        });
      }
      this.groupManager.updateGroupRows(true);
    } else {
      this.groupManager.updateGroupRows(true);
    }
    this.groupManager.table.externalEvents.dispatch("groupVisibilityChanged", this.getComponent(), false);
  }
  show() {
    this.visible = true;
    if (this.groupManager.table.rowManager.getRenderMode() == "basic" && !this.groupManager.table.options.pagination) {
      this.element.classList.add("tabulator-group-visible");
      var prev = this.generateElement();
      if (this.groupList.length) {
        this.groupList.forEach((group) => {
          var rows2 = group.getHeadersAndRows();
          rows2.forEach((row) => {
            var rowEl = row.getElement();
            prev.parentNode.insertBefore(rowEl, prev.nextSibling);
            row.initialize();
            prev = rowEl;
          });
        });
      } else {
        this.rows.forEach((row) => {
          var rowEl = row.getElement();
          prev.parentNode.insertBefore(rowEl, prev.nextSibling);
          row.initialize();
          prev = rowEl;
        });
      }
      this.groupManager.updateGroupRows(true);
    } else {
      this.groupManager.updateGroupRows(true);
    }
    this.groupManager.table.externalEvents.dispatch("groupVisibilityChanged", this.getComponent(), true);
  }
  _visSet() {
    var data = [];
    if (typeof this.visible == "function") {
      this.rows.forEach(function(row) {
        data.push(row.getData());
      });
      this.visible = this.visible(this.key, this.getRowCount(), data, this.getComponent());
    }
  }
  getRowGroup(row) {
    var match = false;
    if (this.groupList.length) {
      this.groupList.forEach(function(group) {
        var result = group.getRowGroup(row);
        if (result) {
          match = result;
        }
      });
    } else {
      if (this.rows.find(function(item) {
        return item === row;
      })) {
        match = this;
      }
    }
    return match;
  }
  getSubGroups(component) {
    var output = [];
    this.groupList.forEach(function(child) {
      output.push(component ? child.getComponent() : child);
    });
    return output;
  }
  getRows(component) {
    var output = [];
    this.rows.forEach(function(row) {
      output.push(component ? row.getComponent() : row);
    });
    return output;
  }
  generateGroupHeaderContents() {
    var data = [];
    this.rows.forEach(function(row) {
      data.push(row.getData());
    });
    this.elementContents = this.generator(this.key, this.getRowCount(), data, this.getComponent());
    while (this.element.firstChild)
      this.element.removeChild(this.element.firstChild);
    if (typeof this.elementContents === "string") {
      this.element.innerHTML = this.elementContents;
    } else {
      this.element.appendChild(this.elementContents);
    }
    this.element.insertBefore(this.arrowElement, this.element.firstChild);
  }
  getPath(path = []) {
    path.unshift(this.key);
    if (this.parent) {
      this.parent.getPath(path);
    }
    return path;
  }
  ////////////// Standard Row Functions //////////////
  getElement() {
    return this.elementContents ? this.element : this.generateElement();
  }
  generateElement() {
    this.addBindings = false;
    this._visSet();
    if (this.visible) {
      this.element.classList.add("tabulator-group-visible");
    } else {
      this.element.classList.remove("tabulator-group-visible");
    }
    for (var i = 0; i < this.element.childNodes.length; ++i) {
      this.element.childNodes[i].parentNode.removeChild(this.element.childNodes[i]);
    }
    this.generateGroupHeaderContents();
    return this.element;
  }
  detachElement() {
    if (this.element && this.element.parentNode) {
      this.element.parentNode.removeChild(this.element);
    }
  }
  //normalize the height of elements in the row
  normalizeHeight() {
    this.setHeight(this.element.clientHeight);
  }
  initialize(force) {
    if (!this.initialized || force) {
      this.normalizeHeight();
      this.initialized = true;
    }
  }
  reinitialize() {
    this.initialized = false;
    this.height = 0;
    if (Helpers.elVisible(this.element)) {
      this.initialize(true);
    }
  }
  setHeight(height) {
    if (this.height != height) {
      this.height = height;
      this.outerHeight = this.element.offsetHeight;
    }
  }
  //return rows outer height
  getHeight() {
    return this.outerHeight;
  }
  getGroup() {
    return this;
  }
  reinitializeHeight() {
  }
  calcHeight() {
  }
  setCellHeight() {
  }
  clearCellHeight() {
  }
  deinitializeHeight() {
  }
  //////////////// Object Generation /////////////////
  getComponent() {
    if (!this.component) {
      this.component = new GroupComponent(this);
    }
    return this.component;
  }
}
class GroupRows extends Module {
  constructor(table) {
    super(table);
    this.groupIDLookups = false;
    this.startOpen = [function() {
      return false;
    }];
    this.headerGenerator = [function() {
      return "";
    }];
    this.groupList = [];
    this.allowedValues = false;
    this.groups = {};
    this.displayHandler = this.getRows.bind(this);
    this.blockRedraw = false;
    this.registerTableOption("groupBy", false);
    this.registerTableOption("groupStartOpen", true);
    this.registerTableOption("groupValues", false);
    this.registerTableOption("groupUpdateOnCellEdit", false);
    this.registerTableOption("groupHeader", false);
    this.registerTableOption("groupHeaderPrint", null);
    this.registerTableOption("groupHeaderClipboard", null);
    this.registerTableOption("groupHeaderHtmlOutput", null);
    this.registerTableOption("groupHeaderDownload", null);
    this.registerTableOption("groupToggleElement", "arrow");
    this.registerTableOption("groupClosedShowCalcs", false);
    this.registerTableFunction("setGroupBy", this.setGroupBy.bind(this));
    this.registerTableFunction("setGroupValues", this.setGroupValues.bind(this));
    this.registerTableFunction("setGroupStartOpen", this.setGroupStartOpen.bind(this));
    this.registerTableFunction("setGroupHeader", this.setGroupHeader.bind(this));
    this.registerTableFunction("getGroups", this.userGetGroups.bind(this));
    this.registerTableFunction("getGroupedData", this.userGetGroupedData.bind(this));
    this.registerComponentFunction("row", "getGroup", this.rowGetGroup.bind(this));
  }
  //initialize group configuration
  initialize() {
    this.subscribe("table-destroy", this._blockRedrawing.bind(this));
    this.subscribe("rows-wipe", this._blockRedrawing.bind(this));
    this.subscribe("rows-wiped", this._restore_redrawing.bind(this));
    if (this.table.options.groupBy) {
      if (this.table.options.groupUpdateOnCellEdit) {
        this.subscribe("cell-value-updated", this.cellUpdated.bind(this));
        this.subscribe("row-data-changed", this.reassignRowToGroup.bind(this), 0);
      }
      this.subscribe("table-built", this.configureGroupSetup.bind(this));
      this.subscribe("row-deleting", this.rowDeleting.bind(this));
      this.subscribe("row-deleted", this.rowsUpdated.bind(this));
      this.subscribe("scroll-horizontal", this.scrollHeaders.bind(this));
      this.subscribe("rows-wipe", this.wipe.bind(this));
      this.subscribe("rows-added", this.rowsUpdated.bind(this));
      this.subscribe("row-moving", this.rowMoving.bind(this));
      this.subscribe("row-adding-index", this.rowAddingIndex.bind(this));
      this.subscribe("rows-sample", this.rowSample.bind(this));
      this.subscribe("render-virtual-fill", this.virtualRenderFill.bind(this));
      this.registerDisplayHandler(this.displayHandler, 20);
      this.initialized = true;
    }
  }
  _blockRedrawing() {
    this.blockRedraw = true;
  }
  _restore_redrawing() {
    this.blockRedraw = false;
  }
  configureGroupSetup() {
    if (this.table.options.groupBy) {
      var groupBy = this.table.options.groupBy, startOpen = this.table.options.groupStartOpen, groupHeader = this.table.options.groupHeader;
      this.allowedValues = this.table.options.groupValues;
      if (Array.isArray(groupBy) && Array.isArray(groupHeader) && groupBy.length > groupHeader.length) {
        console.warn("Error creating group headers, groupHeader array is shorter than groupBy array");
      }
      this.headerGenerator = [function() {
        return "";
      }];
      this.startOpen = [function() {
        return false;
      }];
      this.langBind("groups|item", (langValue, lang2) => {
        this.headerGenerator[0] = (value, count, data) => {
          return (typeof value === "undefined" ? "" : value) + "<span>(" + count + " " + (count === 1 ? langValue : lang2.groups.items) + ")</span>";
        };
      });
      this.groupIDLookups = [];
      if (groupBy) {
        if (this.table.modExists("columnCalcs") && this.table.options.columnCalcs != "table" && this.table.options.columnCalcs != "both") {
          this.table.modules.columnCalcs.removeCalcs();
        }
      } else {
        if (this.table.modExists("columnCalcs") && this.table.options.columnCalcs != "group") {
          var cols = this.table.columnManager.getRealColumns();
          cols.forEach((col) => {
            if (col.definition.topCalc) {
              this.table.modules.columnCalcs.initializeTopRow();
            }
            if (col.definition.bottomCalc) {
              this.table.modules.columnCalcs.initializeBottomRow();
            }
          });
        }
      }
      if (!Array.isArray(groupBy)) {
        groupBy = [groupBy];
      }
      groupBy.forEach((group, i) => {
        var lookupFunc, column;
        if (typeof group == "function") {
          lookupFunc = group;
        } else {
          column = this.table.columnManager.getColumnByField(group);
          if (column) {
            lookupFunc = function(data) {
              return column.getFieldValue(data);
            };
          } else {
            lookupFunc = function(data) {
              return data[group];
            };
          }
        }
        this.groupIDLookups.push({
          field: typeof group === "function" ? false : group,
          func: lookupFunc,
          values: this.allowedValues ? this.allowedValues[i] : false
        });
      });
      if (startOpen) {
        if (!Array.isArray(startOpen)) {
          startOpen = [startOpen];
        }
        startOpen.forEach((level) => {
        });
        this.startOpen = startOpen;
      }
      if (groupHeader) {
        this.headerGenerator = Array.isArray(groupHeader) ? groupHeader : [groupHeader];
      }
    } else {
      this.groupList = [];
      this.groups = {};
    }
  }
  rowSample(rows2, prevValue) {
    if (this.table.options.groupBy) {
      var group = this.getGroups(false)[0];
      prevValue.push(group.getRows(false)[0]);
    }
    return prevValue;
  }
  virtualRenderFill() {
    var el = this.table.rowManager.tableElement;
    var rows2 = this.table.rowManager.getVisibleRows();
    if (this.table.options.groupBy) {
      rows2 = rows2.filter((row) => {
        return row.type !== "group";
      });
      el.style.minWidth = !rows2.length ? this.table.columnManager.getWidth() + "px" : "";
    } else {
      return rows2;
    }
  }
  rowAddingIndex(row, index2, top2) {
    if (this.table.options.groupBy) {
      this.assignRowToGroup(row);
      var groupRows = row.modules.group.rows;
      if (groupRows.length > 1) {
        if (!index2 || index2 && groupRows.indexOf(index2) == -1) {
          if (top2) {
            if (groupRows[0] !== row) {
              index2 = groupRows[0];
              this.table.rowManager.moveRowInArray(row.modules.group.rows, row, index2, !top2);
            }
          } else {
            if (groupRows[groupRows.length - 1] !== row) {
              index2 = groupRows[groupRows.length - 1];
              this.table.rowManager.moveRowInArray(row.modules.group.rows, row, index2, !top2);
            }
          }
        } else {
          this.table.rowManager.moveRowInArray(row.modules.group.rows, row, index2, !top2);
        }
      }
      return index2;
    }
  }
  trackChanges() {
    this.dispatch("group-changed");
  }
  ///////////////////////////////////
  ///////// Table Functions /////////
  ///////////////////////////////////
  setGroupBy(groups) {
    this.table.options.groupBy = groups;
    if (!this.initialized) {
      this.initialize();
    }
    this.configureGroupSetup();
    if (!groups && this.table.modExists("columnCalcs") && this.table.options.columnCalcs === true) {
      this.table.modules.columnCalcs.reinitializeCalcs();
    }
    this.refreshData();
    this.trackChanges();
  }
  setGroupValues(groupValues) {
    this.table.options.groupValues = groupValues;
    this.configureGroupSetup();
    this.refreshData();
    this.trackChanges();
  }
  setGroupStartOpen(values) {
    this.table.options.groupStartOpen = values;
    this.configureGroupSetup();
    if (this.table.options.groupBy) {
      this.refreshData();
      this.trackChanges();
    } else {
      console.warn("Grouping Update - cant refresh view, no groups have been set");
    }
  }
  setGroupHeader(values) {
    this.table.options.groupHeader = values;
    this.configureGroupSetup();
    if (this.table.options.groupBy) {
      this.refreshData();
      this.trackChanges();
    } else {
      console.warn("Grouping Update - cant refresh view, no groups have been set");
    }
  }
  userGetGroups(values) {
    return this.getGroups(true);
  }
  // get grouped table data in the same format as getData()
  userGetGroupedData() {
    return this.table.options.groupBy ? this.getGroupedData() : this.getData();
  }
  ///////////////////////////////////////
  ///////// Component Functions /////////
  ///////////////////////////////////////
  rowGetGroup(row) {
    return row.modules.group ? row.modules.group.getComponent() : false;
  }
  ///////////////////////////////////
  ///////// Internal Logic //////////
  ///////////////////////////////////
  rowMoving(from2, to2, after) {
    if (this.table.options.groupBy) {
      if (!after && to2 instanceof Group) {
        to2 = this.table.rowManager.prevDisplayRow(from2) || to2;
      }
      var toGroup = to2 instanceof Group ? to2 : to2.modules.group;
      var fromGroup = from2 instanceof Group ? from2 : from2.modules.group;
      if (toGroup === fromGroup) {
        this.table.rowManager.moveRowInArray(toGroup.rows, from2, to2, after);
      } else {
        if (fromGroup) {
          fromGroup.removeRow(from2);
        }
        toGroup.insertRow(from2, to2, after);
      }
    }
  }
  rowDeleting(row) {
    if (this.table.options.groupBy && row.modules.group) {
      row.modules.group.removeRow(row);
    }
  }
  rowsUpdated(row) {
    if (this.table.options.groupBy) {
      this.updateGroupRows(true);
    }
  }
  cellUpdated(cell) {
    if (this.table.options.groupBy) {
      this.reassignRowToGroup(cell.row);
    }
  }
  //return appropriate rows with group headers
  getRows(rows2) {
    if (this.table.options.groupBy && this.groupIDLookups.length) {
      this.dispatchExternal("dataGrouping");
      this.generateGroups(rows2);
      if (this.subscribedExternal("dataGrouped")) {
        this.dispatchExternal("dataGrouped", this.getGroups(true));
      }
      return this.updateGroupRows();
    } else {
      return rows2.slice(0);
    }
  }
  getGroups(component) {
    var groupComponents = [];
    this.groupList.forEach(function(group) {
      groupComponents.push(component ? group.getComponent() : group);
    });
    return groupComponents;
  }
  getChildGroups(group) {
    var groupComponents = [];
    if (!group) {
      group = this;
    }
    group.groupList.forEach((child) => {
      if (child.groupList.length) {
        groupComponents = groupComponents.concat(this.getChildGroups(child));
      } else {
        groupComponents.push(child);
      }
    });
    return groupComponents;
  }
  wipe() {
    if (this.table.options.groupBy) {
      this.groupList.forEach(function(group) {
        group.wipe();
      });
      this.groupList = [];
      this.groups = {};
    }
  }
  pullGroupListData(groupList) {
    var groupListData = [];
    groupList.forEach((group) => {
      var groupHeader = {};
      groupHeader.level = 0;
      groupHeader.rowCount = 0;
      groupHeader.headerContent = "";
      var childData = [];
      if (group.hasSubGroups) {
        childData = this.pullGroupListData(group.groupList);
        groupHeader.level = group.level;
        groupHeader.rowCount = childData.length - group.groupList.length;
        groupHeader.headerContent = group.generator(group.key, groupHeader.rowCount, group.rows, group);
        groupListData.push(groupHeader);
        groupListData = groupListData.concat(childData);
      } else {
        groupHeader.level = group.level;
        groupHeader.headerContent = group.generator(group.key, group.rows.length, group.rows, group);
        groupHeader.rowCount = group.getRows().length;
        groupListData.push(groupHeader);
        group.getRows().forEach((row) => {
          groupListData.push(row.getData("data"));
        });
      }
    });
    return groupListData;
  }
  getGroupedData() {
    return this.pullGroupListData(this.groupList);
  }
  getRowGroup(row) {
    var match = false;
    if (this.options("dataTree")) {
      row = this.table.modules.dataTree.getTreeParentRoot(row);
    }
    this.groupList.forEach((group) => {
      var result = group.getRowGroup(row);
      if (result) {
        match = result;
      }
    });
    return match;
  }
  countGroups() {
    return this.groupList.length;
  }
  generateGroups(rows2) {
    var oldGroups = this.groups;
    this.groups = {};
    this.groupList = [];
    if (this.allowedValues && this.allowedValues[0]) {
      this.allowedValues[0].forEach((value) => {
        this.createGroup(value, 0, oldGroups);
      });
      rows2.forEach((row) => {
        this.assignRowToExistingGroup(row, oldGroups);
      });
    } else {
      rows2.forEach((row) => {
        this.assignRowToGroup(row, oldGroups);
      });
    }
    Object.values(oldGroups).forEach((group) => {
      group.wipe(true);
    });
  }
  createGroup(groupID, level, oldGroups) {
    var groupKey = level + "_" + groupID, group;
    oldGroups = oldGroups || [];
    group = new Group(this, false, level, groupID, this.groupIDLookups[0].field, this.headerGenerator[0], oldGroups[groupKey]);
    this.groups[groupKey] = group;
    this.groupList.push(group);
  }
  assignRowToExistingGroup(row, oldGroups) {
    var groupID = this.groupIDLookups[0].func(row.getData()), groupKey = "0_" + groupID;
    if (this.groups[groupKey]) {
      this.groups[groupKey].addRow(row);
    }
  }
  assignRowToGroup(row, oldGroups) {
    var groupID = this.groupIDLookups[0].func(row.getData()), newGroupNeeded = !this.groups["0_" + groupID];
    if (newGroupNeeded) {
      this.createGroup(groupID, 0, oldGroups);
    }
    this.groups["0_" + groupID].addRow(row);
    return !newGroupNeeded;
  }
  reassignRowToGroup(row) {
    if (row.type === "row") {
      var oldRowGroup = row.modules.group, oldGroupPath = oldRowGroup.getPath(), newGroupPath = this.getExpectedPath(row), samePath;
      samePath = oldGroupPath.length == newGroupPath.length && oldGroupPath.every((element, index2) => {
        return element === newGroupPath[index2];
      });
      if (!samePath) {
        oldRowGroup.removeRow(row);
        this.assignRowToGroup(row, this.groups);
        this.refreshData(true);
      }
    }
  }
  getExpectedPath(row) {
    var groupPath = [], rowData = row.getData();
    this.groupIDLookups.forEach((groupId) => {
      groupPath.push(groupId.func(rowData));
    });
    return groupPath;
  }
  updateGroupRows(force) {
    var output = [];
    if (!this.blockRedraw) {
      this.groupList.forEach((group) => {
        output = output.concat(group.getHeadersAndRows());
      });
      if (force) {
        this.refreshData(true);
      }
    }
    return output;
  }
  scrollHeaders(left2) {
    if (this.table.options.groupBy) {
      if (this.table.options.renderHorizontal === "virtual") {
        left2 -= this.table.columnManager.renderer.vDomPadLeft;
      }
      left2 = left2 + "px";
      this.groupList.forEach((group) => {
        group.scrollHeader(left2);
      });
    }
  }
  removeGroup(group) {
    var groupKey = group.level + "_" + group.key, index2;
    if (this.groups[groupKey]) {
      delete this.groups[groupKey];
      index2 = this.groupList.indexOf(group);
      if (index2 > -1) {
        this.groupList.splice(index2, 1);
      }
    }
  }
  checkBasicModeGroupHeaderWidth() {
    var element = this.table.rowManager.tableElement, onlyGroupHeaders = true;
    this.table.rowManager.getDisplayRows().forEach((row, index2) => {
      this.table.rowManager.styleRow(row, index2);
      element.appendChild(row.getElement());
      row.initialize(true);
      if (row.type !== "group") {
        onlyGroupHeaders = false;
      }
    });
    if (onlyGroupHeaders) {
      element.style.minWidth = this.table.columnManager.getWidth() + "px";
    } else {
      element.style.minWidth = "";
    }
  }
}
GroupRows.moduleName = "groupRows";
var defaultUndoers = {
  cellEdit: function(action) {
    action.component.setValueProcessData(action.data.oldValue);
    action.component.cellRendered();
  },
  rowAdd: function(action) {
    action.component.deleteActual();
  },
  rowDelete: function(action) {
    var newRow = this.table.rowManager.addRowActual(action.data.data, action.data.pos, action.data.index);
    if (this.table.options.groupBy && this.table.modExists("groupRows")) {
      this.table.modules.groupRows.updateGroupRows(true);
    }
    this._rebindRow(action.component, newRow);
  },
  rowMove: function(action) {
    this.table.rowManager.moveRowActual(action.component, this.table.rowManager.rows[action.data.posFrom], !action.data.after);
    this.table.rowManager.redraw();
  }
};
var defaultRedoers = {
  cellEdit: function(action) {
    action.component.setValueProcessData(action.data.newValue);
    action.component.cellRendered();
  },
  rowAdd: function(action) {
    var newRow = this.table.rowManager.addRowActual(action.data.data, action.data.pos, action.data.index);
    if (this.table.options.groupBy && this.table.modExists("groupRows")) {
      this.table.modules.groupRows.updateGroupRows(true);
    }
    this._rebindRow(action.component, newRow);
  },
  rowDelete: function(action) {
    action.component.deleteActual();
  },
  rowMove: function(action) {
    this.table.rowManager.moveRowActual(action.component, this.table.rowManager.rows[action.data.posTo], action.data.after);
    this.table.rowManager.redraw();
  }
};
let History$1 = class History extends Module {
  constructor(table) {
    super(table);
    this.history = [];
    this.index = -1;
    this.registerTableOption("history", false);
  }
  initialize() {
    if (this.table.options.history) {
      this.subscribe("cell-value-updated", this.cellUpdated.bind(this));
      this.subscribe("cell-delete", this.clearComponentHistory.bind(this));
      this.subscribe("row-delete", this.rowDeleted.bind(this));
      this.subscribe("rows-wipe", this.clear.bind(this));
      this.subscribe("row-added", this.rowAdded.bind(this));
      this.subscribe("row-move", this.rowMoved.bind(this));
    }
    this.registerTableFunction("undo", this.undo.bind(this));
    this.registerTableFunction("redo", this.redo.bind(this));
    this.registerTableFunction("getHistoryUndoSize", this.getHistoryUndoSize.bind(this));
    this.registerTableFunction("getHistoryRedoSize", this.getHistoryRedoSize.bind(this));
    this.registerTableFunction("clearHistory", this.clear.bind(this));
  }
  rowMoved(from2, to2, after) {
    this.action("rowMove", from2, { posFrom: from2.getPosition(), posTo: to2.getPosition(), to: to2, after });
  }
  rowAdded(row, data, pos, index2) {
    this.action("rowAdd", row, { data, pos, index: index2 });
  }
  rowDeleted(row) {
    var index2, rows2;
    if (this.table.options.groupBy) {
      rows2 = row.getComponent().getGroup()._getSelf().rows;
      index2 = rows2.indexOf(row);
      if (index2) {
        index2 = rows2[index2 - 1];
      }
    } else {
      index2 = row.table.rowManager.getRowIndex(row);
      if (index2) {
        index2 = row.table.rowManager.rows[index2 - 1];
      }
    }
    this.action("rowDelete", row, { data: row.getData(), pos: !index2, index: index2 });
  }
  cellUpdated(cell) {
    this.action("cellEdit", cell, { oldValue: cell.oldValue, newValue: cell.value });
  }
  clear() {
    this.history = [];
    this.index = -1;
  }
  action(type, component, data) {
    this.history = this.history.slice(0, this.index + 1);
    this.history.push({
      type,
      component,
      data
    });
    this.index++;
  }
  getHistoryUndoSize() {
    return this.index + 1;
  }
  getHistoryRedoSize() {
    return this.history.length - (this.index + 1);
  }
  clearComponentHistory(component) {
    var index2 = this.history.findIndex(function(item) {
      return item.component === component;
    });
    if (index2 > -1) {
      this.history.splice(index2, 1);
      if (index2 <= this.index) {
        this.index--;
      }
      this.clearComponentHistory(component);
    }
  }
  undo() {
    if (this.index > -1) {
      let action = this.history[this.index];
      History.undoers[action.type].call(this, action);
      this.index--;
      this.dispatchExternal("historyUndo", action.type, action.component.getComponent(), action.data);
      return true;
    } else {
      console.warn("History Undo Error - No more history to undo");
      return false;
    }
  }
  redo() {
    if (this.history.length - 1 > this.index) {
      this.index++;
      let action = this.history[this.index];
      History.redoers[action.type].call(this, action);
      this.dispatchExternal("historyRedo", action.type, action.component.getComponent(), action.data);
      return true;
    } else {
      console.warn("History Redo Error - No more history to redo");
      return false;
    }
  }
  //rebind rows to new element after deletion
  _rebindRow(oldRow, newRow) {
    this.history.forEach(function(action) {
      if (action.component instanceof Row) {
        if (action.component === oldRow) {
          action.component = newRow;
        }
      } else if (action.component instanceof Cell) {
        if (action.component.row === oldRow) {
          var field = action.component.column.getField();
          if (field) {
            action.component = newRow.getCell(field);
          }
        }
      }
    });
  }
};
History$1.moduleName = "history";
History$1.undoers = defaultUndoers;
History$1.redoers = defaultRedoers;
class HtmlTableImport extends Module {
  constructor(table) {
    super(table);
    this.fieldIndex = [];
    this.hasIndex = false;
  }
  initialize() {
    this.tableElementCheck();
  }
  tableElementCheck() {
    if (this.table.originalElement && this.table.originalElement.tagName === "TABLE") {
      if (this.table.originalElement.childNodes.length) {
        this.parseTable();
      } else {
        console.warn("Unable to parse data from empty table tag, Tabulator should be initialized on a div tag unless importing data from a table element.");
      }
    }
  }
  parseTable() {
    var element = this.table.originalElement, options = this.table.options, headers = element.getElementsByTagName("th"), rows2 = element.getElementsByTagName("tbody")[0], data = [];
    this.hasIndex = false;
    this.dispatchExternal("htmlImporting");
    rows2 = rows2 ? rows2.getElementsByTagName("tr") : [];
    this._extractOptions(element, options);
    if (headers.length) {
      this._extractHeaders(headers, rows2);
    } else {
      this._generateBlankHeaders(headers, rows2);
    }
    for (var index2 = 0; index2 < rows2.length; index2++) {
      var row = rows2[index2], cells = row.getElementsByTagName("td"), item = {};
      if (!this.hasIndex) {
        item[options.index] = index2;
      }
      for (var i = 0; i < cells.length; i++) {
        var cell = cells[i];
        if (typeof this.fieldIndex[i] !== "undefined") {
          item[this.fieldIndex[i]] = cell.innerHTML;
        }
      }
      data.push(item);
    }
    options.data = data;
    this.dispatchExternal("htmlImported");
  }
  //extract tabulator attribute options
  _extractOptions(element, options, defaultOptions2) {
    var attributes = element.attributes;
    var optionsArr = defaultOptions2 ? Object.keys(defaultOptions2) : Object.keys(options);
    var optionsList = {};
    optionsArr.forEach((item) => {
      optionsList[item.toLowerCase()] = item;
    });
    for (var index2 in attributes) {
      var attrib = attributes[index2];
      var name;
      if (attrib && typeof attrib == "object" && attrib.name && attrib.name.indexOf("tabulator-") === 0) {
        name = attrib.name.replace("tabulator-", "");
        if (typeof optionsList[name] !== "undefined") {
          options[optionsList[name]] = this._attribValue(attrib.value);
        }
      }
    }
  }
  //get value of attribute
  _attribValue(value) {
    if (value === "true") {
      return true;
    }
    if (value === "false") {
      return false;
    }
    return value;
  }
  //find column if it has already been defined
  _findCol(title) {
    var match = this.table.options.columns.find((column) => {
      return column.title === title;
    });
    return match || false;
  }
  //extract column from headers
  _extractHeaders(headers, rows2) {
    for (var index2 = 0; index2 < headers.length; index2++) {
      var header = headers[index2], exists2 = false, col = this._findCol(header.textContent), width;
      if (col) {
        exists2 = true;
      } else {
        col = { title: header.textContent.trim() };
      }
      if (!col.field) {
        col.field = header.textContent.trim().toLowerCase().replace(" ", "_");
      }
      width = header.getAttribute("width");
      if (width && !col.width) {
        col.width = width;
      }
      this._extractOptions(header, col, this.table.columnManager.optionsList.registeredDefaults);
      this.fieldIndex[index2] = col.field;
      if (col.field == this.table.options.index) {
        this.hasIndex = true;
      }
      if (!exists2) {
        this.table.options.columns.push(col);
      }
    }
  }
  //generate blank headers
  _generateBlankHeaders(headers, rows2) {
    for (var index2 = 0; index2 < headers.length; index2++) {
      var header = headers[index2], col = { title: "", field: "col" + index2 };
      this.fieldIndex[index2] = col.field;
      var width = header.getAttribute("width");
      if (width) {
        col.width = width;
      }
      this.table.options.columns.push(col);
    }
  }
}
HtmlTableImport.moduleName = "htmlTableImport";
function csvImporter(input2) {
  var data = [], row = 0, col = 0, inQuote = false;
  for (let index2 = 0; index2 < input2.length; index2++) {
    let char = input2[index2], nextChar = input2[index2 + 1];
    if (!data[row]) {
      data[row] = [];
    }
    if (!data[row][col]) {
      data[row][col] = "";
    }
    if (char == '"' && inQuote && nextChar == '"') {
      data[row][col] += char;
      index2++;
      continue;
    }
    if (char == '"') {
      inQuote = !inQuote;
      continue;
    }
    if (char == "," && !inQuote) {
      col++;
      continue;
    }
    if (char == "\r" && nextChar == "\n" && !inQuote) {
      col = 0;
      row++;
      index2++;
      continue;
    }
    if ((char == "\r" || char == "\n") && !inQuote) {
      col = 0;
      row++;
      continue;
    }
    data[row][col] += char;
  }
  return data;
}
function json$1(input2) {
  try {
    return JSON.parse(input2);
  } catch (e) {
    console.warn("JSON Import Error - File contents is invalid JSON", e);
    return Promise.reject();
  }
}
function arrayImporter(input2) {
  return input2;
}
var defaultImporters = {
  csv: csvImporter,
  json: json$1,
  array: arrayImporter
};
let Import$1 = class Import extends Module {
  constructor(table) {
    super(table);
    this.registerTableOption("importFormat");
    this.registerTableOption("importReader", "text");
  }
  initialize() {
    this.registerTableFunction("import", this.importFromFile.bind(this));
    if (this.table.options.importFormat) {
      this.subscribe("data-loading", this.loadDataCheck.bind(this), 10);
      this.subscribe("data-load", this.loadData.bind(this), 10);
    }
  }
  loadDataCheck(data) {
    return this.table.options.importFormat && (typeof data === "string" || Array.isArray(data) && data.length && Array.isArray(data));
  }
  loadData(data, params, config, silent, previousData) {
    return this.importData(this.lookupImporter(), data).then(this.structureData.bind(this)).catch((err) => {
      console.error("Import Error:", err || "Unable to import data");
      return Promise.reject(err);
    });
  }
  lookupImporter(importFormat) {
    var importer;
    if (!importFormat) {
      importFormat = this.table.options.importFormat;
    }
    if (typeof importFormat === "string") {
      importer = Import.importers[importFormat];
    } else {
      importer = importFormat;
    }
    if (!importer) {
      console.error("Import Error - Importer not found:", importFormat);
    }
    return importer;
  }
  importFromFile(importFormat, extension) {
    var importer = this.lookupImporter(importFormat);
    if (importer) {
      return this.pickFile(extension).then(this.importData.bind(this, importer)).then(this.structureData.bind(this)).then(this.setData.bind(this)).catch((err) => {
        console.error("Import Error:", err || "Unable to import file");
        return Promise.reject(err);
      });
    }
  }
  pickFile(extensions) {
    return new Promise((resolve2, reject) => {
      var input2 = document.createElement("input");
      input2.type = "file";
      input2.accept = extensions;
      input2.addEventListener("change", (e) => {
        var file = input2.files[0], reader = new FileReader();
        switch (this.table.options.importReader) {
          case "buffer":
            reader.readAsArrayBuffer(file);
            break;
          case "binary":
            reader.readAsBinaryString(file);
            break;
          case "url":
            reader.readAsDataURL(file);
            break;
          case "text":
          default:
            reader.readAsText(file);
        }
        reader.onload = (e2) => {
          resolve2(reader.result);
        };
        reader.onerror = (e2) => {
          console.warn("File Load Error - Unable to read file");
          reject();
        };
      });
      input2.click();
    });
  }
  importData(importer, fileContents) {
    var data = importer.call(this.table, fileContents);
    if (data instanceof Promise) {
      return data;
    } else {
      return data ? Promise.resolve(data) : Promise.reject();
    }
  }
  structureData(parsedData) {
    var data = [];
    if (Array.isArray(parsedData) && parsedData.length && Array.isArray(parsedData[0])) {
      if (this.table.options.autoColumns) {
        data = this.structureArrayToObject(parsedData);
      } else {
        data = this.structureArrayToColumns(parsedData);
      }
      return data;
    } else {
      return parsedData;
    }
  }
  structureArrayToObject(parsedData) {
    var columns = parsedData.shift();
    var data = parsedData.map((values) => {
      var row = {};
      columns.forEach((key, i) => {
        row[key] = values[i];
      });
      return row;
    });
    return data;
  }
  structureArrayToColumns(parsedData) {
    var data = [], columns = this.table.getColumns();
    if (columns[0] && parsedData[0][0]) {
      if (columns[0].getDefinition().title === parsedData[0][0]) {
        parsedData.shift();
      }
    }
    parsedData.forEach((rowData) => {
      var row = {};
      rowData.forEach((value, index2) => {
        var column = columns[index2];
        if (column) {
          row[column.getField()] = value;
        }
      });
      data.push(row);
    });
    return data;
  }
  setData(data) {
    return this.table.setData(data);
  }
};
Import$1.moduleName = "import";
Import$1.importers = defaultImporters;
class Interaction extends Module {
  constructor(table) {
    super(table);
    this.eventMap = {
      //row events
      rowClick: "row-click",
      rowDblClick: "row-dblclick",
      rowContext: "row-contextmenu",
      rowMouseEnter: "row-mouseenter",
      rowMouseLeave: "row-mouseleave",
      rowMouseOver: "row-mouseover",
      rowMouseOut: "row-mouseout",
      rowMouseMove: "row-mousemove",
      rowMouseDown: "row-mousedown",
      rowMouseUp: "row-mouseup",
      rowTap: "row",
      rowDblTap: "row",
      rowTapHold: "row",
      //cell events
      cellClick: "cell-click",
      cellDblClick: "cell-dblclick",
      cellContext: "cell-contextmenu",
      cellMouseEnter: "cell-mouseenter",
      cellMouseLeave: "cell-mouseleave",
      cellMouseOver: "cell-mouseover",
      cellMouseOut: "cell-mouseout",
      cellMouseMove: "cell-mousemove",
      cellMouseDown: "cell-mousedown",
      cellMouseUp: "cell-mouseup",
      cellTap: "cell",
      cellDblTap: "cell",
      cellTapHold: "cell",
      //column header events
      headerClick: "column-click",
      headerDblClick: "column-dblclick",
      headerContext: "column-contextmenu",
      headerMouseEnter: "column-mouseenter",
      headerMouseLeave: "column-mouseleave",
      headerMouseOver: "column-mouseover",
      headerMouseOut: "column-mouseout",
      headerMouseMove: "column-mousemove",
      headerMouseDown: "column-mousedown",
      headerMouseUp: "column-mouseup",
      headerTap: "column",
      headerDblTap: "column",
      headerTapHold: "column",
      //group header
      groupClick: "group-click",
      groupDblClick: "group-dblclick",
      groupContext: "group-contextmenu",
      groupMouseEnter: "group-mouseenter",
      groupMouseLeave: "group-mouseleave",
      groupMouseOver: "group-mouseover",
      groupMouseOut: "group-mouseout",
      groupMouseMove: "group-mousemove",
      groupMouseDown: "group-mousedown",
      groupMouseUp: "group-mouseup",
      groupTap: "group",
      groupDblTap: "group",
      groupTapHold: "group"
    };
    this.subscribers = {};
    this.touchSubscribers = {};
    this.columnSubscribers = {};
    this.touchWatchers = {
      row: {
        tap: null,
        tapDbl: null,
        tapHold: null
      },
      cell: {
        tap: null,
        tapDbl: null,
        tapHold: null
      },
      column: {
        tap: null,
        tapDbl: null,
        tapHold: null
      },
      group: {
        tap: null,
        tapDbl: null,
        tapHold: null
      }
    };
    this.registerColumnOption("headerClick");
    this.registerColumnOption("headerDblClick");
    this.registerColumnOption("headerContext");
    this.registerColumnOption("headerMouseEnter");
    this.registerColumnOption("headerMouseLeave");
    this.registerColumnOption("headerMouseOver");
    this.registerColumnOption("headerMouseOut");
    this.registerColumnOption("headerMouseMove");
    this.registerColumnOption("headerMouseDown");
    this.registerColumnOption("headerMouseUp");
    this.registerColumnOption("headerTap");
    this.registerColumnOption("headerDblTap");
    this.registerColumnOption("headerTapHold");
    this.registerColumnOption("cellClick");
    this.registerColumnOption("cellDblClick");
    this.registerColumnOption("cellContext");
    this.registerColumnOption("cellMouseEnter");
    this.registerColumnOption("cellMouseLeave");
    this.registerColumnOption("cellMouseOver");
    this.registerColumnOption("cellMouseOut");
    this.registerColumnOption("cellMouseMove");
    this.registerColumnOption("cellMouseDown");
    this.registerColumnOption("cellMouseUp");
    this.registerColumnOption("cellTap");
    this.registerColumnOption("cellDblTap");
    this.registerColumnOption("cellTapHold");
  }
  initialize() {
    this.initializeExternalEvents();
    this.subscribe("column-init", this.initializeColumn.bind(this));
    this.subscribe("cell-dblclick", this.cellContentsSelectionFixer.bind(this));
  }
  cellContentsSelectionFixer(e, cell) {
    var range2;
    if (this.table.modExists("edit")) {
      if (this.table.modules.edit.currentCell === cell) {
        return;
      }
    }
    e.preventDefault();
    try {
      if (document.selection) {
        range2 = document.body.createTextRange();
        range2.moveToElementText(cell.getElement());
        range2.select();
      } else if (window.getSelection) {
        range2 = document.createRange();
        range2.selectNode(cell.getElement());
        window.getSelection().removeAllRanges();
        window.getSelection().addRange(range2);
      }
    } catch (e2) {
    }
  }
  initializeExternalEvents() {
    for (let key in this.eventMap) {
      this.subscriptionChangeExternal(key, this.subscriptionChanged.bind(this, key));
    }
  }
  subscriptionChanged(key, added) {
    if (added) {
      if (!this.subscribers[key]) {
        if (this.eventMap[key].includes("-")) {
          this.subscribers[key] = this.handle.bind(this, key);
          this.subscribe(this.eventMap[key], this.subscribers[key]);
        } else {
          this.subscribeTouchEvents(key);
        }
      }
    } else {
      if (this.eventMap[key].includes("-")) {
        if (this.subscribers[key] && !this.columnSubscribers[key] && !this.subscribedExternal(key)) {
          this.unsubscribe(this.eventMap[key], this.subscribers[key]);
          delete this.subscribers[key];
        }
      } else {
        this.unsubscribeTouchEvents(key);
      }
    }
  }
  subscribeTouchEvents(key) {
    var type = this.eventMap[key];
    if (!this.touchSubscribers[type + "-touchstart"]) {
      this.touchSubscribers[type + "-touchstart"] = this.handleTouch.bind(this, type, "start");
      this.touchSubscribers[type + "-touchend"] = this.handleTouch.bind(this, type, "end");
      this.subscribe(type + "-touchstart", this.touchSubscribers[type + "-touchstart"]);
      this.subscribe(type + "-touchend", this.touchSubscribers[type + "-touchend"]);
    }
    this.subscribers[key] = true;
  }
  unsubscribeTouchEvents(key) {
    var noTouch = true, type = this.eventMap[key];
    if (this.subscribers[key] && !this.subscribedExternal(key)) {
      delete this.subscribers[key];
      for (let i in this.eventMap) {
        if (this.eventMap[i] === type) {
          if (this.subscribers[i]) {
            noTouch = false;
          }
        }
      }
      if (noTouch) {
        this.unsubscribe(type + "-touchstart", this.touchSubscribers[type + "-touchstart"]);
        this.unsubscribe(type + "-touchend", this.touchSubscribers[type + "-touchend"]);
        delete this.touchSubscribers[type + "-touchstart"];
        delete this.touchSubscribers[type + "-touchend"];
      }
    }
  }
  initializeColumn(column) {
    var def2 = column.definition;
    for (let key in this.eventMap) {
      if (def2[key]) {
        this.subscriptionChanged(key, true);
        if (!this.columnSubscribers[key]) {
          this.columnSubscribers[key] = [];
        }
        this.columnSubscribers[key].push(column);
      }
    }
  }
  handle(action, e, component) {
    this.dispatchEvent(action, e, component);
  }
  handleTouch(type, action, e, component) {
    var watchers = this.touchWatchers[type];
    if (type === "column") {
      type = "header";
    }
    switch (action) {
      case "start":
        watchers.tap = true;
        clearTimeout(watchers.tapHold);
        watchers.tapHold = setTimeout(() => {
          clearTimeout(watchers.tapHold);
          watchers.tapHold = null;
          watchers.tap = null;
          clearTimeout(watchers.tapDbl);
          watchers.tapDbl = null;
          this.dispatchEvent(type + "TapHold", e, component);
        }, 1e3);
        break;
      case "end":
        if (watchers.tap) {
          watchers.tap = null;
          this.dispatchEvent(type + "Tap", e, component);
        }
        if (watchers.tapDbl) {
          clearTimeout(watchers.tapDbl);
          watchers.tapDbl = null;
          this.dispatchEvent(type + "DblTap", e, component);
        } else {
          watchers.tapDbl = setTimeout(() => {
            clearTimeout(watchers.tapDbl);
            watchers.tapDbl = null;
          }, 300);
        }
        clearTimeout(watchers.tapHold);
        watchers.tapHold = null;
        break;
    }
  }
  dispatchEvent(action, e, component) {
    var componentObj = component.getComponent(), callback;
    if (this.columnSubscribers[action]) {
      if (component instanceof Cell) {
        callback = component.column.definition[action];
      } else if (component instanceof Column) {
        callback = component.definition[action];
      }
      if (callback) {
        callback(e, componentObj);
      }
    }
    this.dispatchExternal(action, e, componentObj);
  }
}
Interaction.moduleName = "interaction";
var defaultBindings = {
  navPrev: "shift + 9",
  navNext: 9,
  navUp: 38,
  navDown: 40,
  scrollPageUp: 33,
  scrollPageDown: 34,
  scrollToStart: 36,
  scrollToEnd: 35,
  undo: ["ctrl + 90", "meta + 90"],
  redo: ["ctrl + 89", "meta + 89"],
  copyToClipboard: ["ctrl + 67", "meta + 89"]
};
var defaultActions = {
  keyBlock: function(e) {
    e.stopPropagation();
    e.preventDefault();
  },
  scrollPageUp: function(e) {
    var rowManager = this.table.rowManager, newPos = rowManager.scrollTop - rowManager.element.clientHeight;
    e.preventDefault();
    if (rowManager.displayRowsCount) {
      if (newPos >= 0) {
        rowManager.element.scrollTop = newPos;
      } else {
        rowManager.scrollToRow(rowManager.getDisplayRows()[0]);
      }
    }
    this.table.element.focus();
  },
  scrollPageDown: function(e) {
    var rowManager = this.table.rowManager, newPos = rowManager.scrollTop + rowManager.element.clientHeight, scrollMax = rowManager.element.scrollHeight;
    e.preventDefault();
    if (rowManager.displayRowsCount) {
      if (newPos <= scrollMax) {
        rowManager.element.scrollTop = newPos;
      } else {
        rowManager.scrollToRow(rowManager.getDisplayRows()[rowManager.displayRowsCount - 1]);
      }
    }
    this.table.element.focus();
  },
  scrollToStart: function(e) {
    var rowManager = this.table.rowManager;
    e.preventDefault();
    if (rowManager.displayRowsCount) {
      rowManager.scrollToRow(rowManager.getDisplayRows()[0]);
    }
    this.table.element.focus();
  },
  scrollToEnd: function(e) {
    var rowManager = this.table.rowManager;
    e.preventDefault();
    if (rowManager.displayRowsCount) {
      rowManager.scrollToRow(rowManager.getDisplayRows()[rowManager.displayRowsCount - 1]);
    }
    this.table.element.focus();
  },
  navPrev: function(e) {
    this.dispatch("keybinding-nav-prev", e);
  },
  navNext: function(e) {
    this.dispatch("keybinding-nav-next", e);
  },
  navLeft: function(e) {
    this.dispatch("keybinding-nav-left", e);
  },
  navRight: function(e) {
    this.dispatch("keybinding-nav-right", e);
  },
  navUp: function(e) {
    this.dispatch("keybinding-nav-up", e);
  },
  navDown: function(e) {
    this.dispatch("keybinding-nav-down", e);
  },
  undo: function(e) {
    var cell = false;
    if (this.table.options.history && this.table.modExists("history") && this.table.modExists("edit")) {
      cell = this.table.modules.edit.currentCell;
      if (!cell) {
        e.preventDefault();
        this.table.modules.history.undo();
      }
    }
  },
  redo: function(e) {
    var cell = false;
    if (this.table.options.history && this.table.modExists("history") && this.table.modExists("edit")) {
      cell = this.table.modules.edit.currentCell;
      if (!cell) {
        e.preventDefault();
        this.table.modules.history.redo();
      }
    }
  },
  copyToClipboard: function(e) {
    if (!this.table.modules.edit.currentCell) {
      if (this.table.modExists("clipboard", true)) {
        this.table.modules.clipboard.copy(false, true);
      }
    }
  }
};
class Keybindings extends Module {
  constructor(table) {
    super(table);
    this.watchKeys = null;
    this.pressedKeys = null;
    this.keyupBinding = false;
    this.keydownBinding = false;
    this.registerTableOption("keybindings", {});
    this.registerTableOption("tabEndNewRow", false);
  }
  initialize() {
    var bindings = this.table.options.keybindings, mergedBindings = {};
    this.watchKeys = {};
    this.pressedKeys = [];
    if (bindings !== false) {
      Object.assign(mergedBindings, Keybindings.bindings);
      Object.assign(mergedBindings, bindings);
      this.mapBindings(mergedBindings);
      this.bindEvents();
    }
    this.subscribe("table-destroy", this.clearBindings.bind(this));
  }
  mapBindings(bindings) {
    for (let key in bindings) {
      if (Keybindings.actions[key]) {
        if (bindings[key]) {
          if (typeof bindings[key] !== "object") {
            bindings[key] = [bindings[key]];
          }
          bindings[key].forEach((binding) => {
            var bindingList = Array.isArray(binding) ? binding : [binding];
            bindingList.forEach((item) => {
              this.mapBinding(key, item);
            });
          });
        }
      } else {
        console.warn("Key Binding Error - no such action:", key);
      }
    }
  }
  mapBinding(action, symbolsList) {
    var binding = {
      action: Keybindings.actions[action],
      keys: [],
      ctrl: false,
      shift: false,
      meta: false
    };
    var symbols = symbolsList.toString().toLowerCase().split(" ").join("").split("+");
    symbols.forEach((symbol) => {
      switch (symbol) {
        case "ctrl":
          binding.ctrl = true;
          break;
        case "shift":
          binding.shift = true;
          break;
        case "meta":
          binding.meta = true;
          break;
        default:
          symbol = isNaN(symbol) ? symbol.toUpperCase().charCodeAt(0) : parseInt(symbol);
          binding.keys.push(symbol);
          if (!this.watchKeys[symbol]) {
            this.watchKeys[symbol] = [];
          }
          this.watchKeys[symbol].push(binding);
      }
    });
  }
  bindEvents() {
    var self2 = this;
    this.keyupBinding = function(e) {
      var code = e.keyCode;
      var bindings = self2.watchKeys[code];
      if (bindings) {
        self2.pressedKeys.push(code);
        bindings.forEach(function(binding) {
          self2.checkBinding(e, binding);
        });
      }
    };
    this.keydownBinding = function(e) {
      var code = e.keyCode;
      var bindings = self2.watchKeys[code];
      if (bindings) {
        var index2 = self2.pressedKeys.indexOf(code);
        if (index2 > -1) {
          self2.pressedKeys.splice(index2, 1);
        }
      }
    };
    this.table.element.addEventListener("keydown", this.keyupBinding);
    this.table.element.addEventListener("keyup", this.keydownBinding);
  }
  clearBindings() {
    if (this.keyupBinding) {
      this.table.element.removeEventListener("keydown", this.keyupBinding);
    }
    if (this.keydownBinding) {
      this.table.element.removeEventListener("keyup", this.keydownBinding);
    }
  }
  checkBinding(e, binding) {
    var match = true;
    if (e.ctrlKey == binding.ctrl && e.shiftKey == binding.shift && e.metaKey == binding.meta) {
      binding.keys.forEach((key) => {
        var index2 = this.pressedKeys.indexOf(key);
        if (index2 == -1) {
          match = false;
        }
      });
      if (match) {
        binding.action.call(this, e);
      }
      return true;
    }
    return false;
  }
}
Keybindings.moduleName = "keybindings";
Keybindings.bindings = defaultBindings;
Keybindings.actions = defaultActions;
let Menu$1 = class Menu extends Module {
  constructor(table) {
    super(table);
    this.menuContainer = null;
    this.nestedMenuBlock = false;
    this.currentComponent = null;
    this.rootPopup = null;
    this.columnSubscribers = {};
    this.registerTableOption("menuContainer", void 0);
    this.registerTableOption("rowContextMenu", false);
    this.registerTableOption("rowClickMenu", false);
    this.registerTableOption("rowDblClickMenu", false);
    this.registerTableOption("groupContextMenu", false);
    this.registerTableOption("groupClickMenu", false);
    this.registerTableOption("groupDblClickMenu", false);
    this.registerColumnOption("headerContextMenu");
    this.registerColumnOption("headerClickMenu");
    this.registerColumnOption("headerDblClickMenu");
    this.registerColumnOption("headerMenu");
    this.registerColumnOption("headerMenuIcon");
    this.registerColumnOption("contextMenu");
    this.registerColumnOption("clickMenu");
    this.registerColumnOption("dblClickMenu");
  }
  initialize() {
    this.deprecatedOptionsCheck();
    this.initializeRowWatchers();
    this.initializeGroupWatchers();
    this.subscribe("column-init", this.initializeColumn.bind(this));
  }
  deprecatedOptionsCheck() {
    if (!this.deprecationCheck("menuContainer", "popupContainer")) {
      this.table.options.popupContainer = this.table.options.menuContainer;
    }
  }
  initializeRowWatchers() {
    if (this.table.options.rowContextMenu) {
      this.subscribe("row-contextmenu", this.loadMenuEvent.bind(this, this.table.options.rowContextMenu));
      this.table.on("rowTapHold", this.loadMenuEvent.bind(this, this.table.options.rowContextMenu));
    }
    if (this.table.options.rowClickMenu) {
      this.subscribe("row-click", this.loadMenuEvent.bind(this, this.table.options.rowClickMenu));
    }
    if (this.table.options.rowDblClickMenu) {
      this.subscribe("row-dblclick", this.loadMenuEvent.bind(this, this.table.options.rowDblClickMenu));
    }
  }
  initializeGroupWatchers() {
    if (this.table.options.groupContextMenu) {
      this.subscribe("group-contextmenu", this.loadMenuEvent.bind(this, this.table.options.groupContextMenu));
      this.table.on("groupTapHold", this.loadMenuEvent.bind(this, this.table.options.groupContextMenu));
    }
    if (this.table.options.groupClickMenu) {
      this.subscribe("group-click", this.loadMenuEvent.bind(this, this.table.options.groupClickMenu));
    }
    if (this.table.options.groupDblClickMenu) {
      this.subscribe("group-dblclick", this.loadMenuEvent.bind(this, this.table.options.groupDblClickMenu));
    }
  }
  initializeColumn(column) {
    var def2 = column.definition;
    if (def2.headerContextMenu && !this.columnSubscribers.headerContextMenu) {
      this.columnSubscribers.headerContextMenu = this.loadMenuTableColumnEvent.bind(this, "headerContextMenu");
      this.subscribe("column-contextmenu", this.columnSubscribers.headerContextMenu);
      this.table.on("headerTapHold", this.loadMenuTableColumnEvent.bind(this, "headerContextMenu"));
    }
    if (def2.headerClickMenu && !this.columnSubscribers.headerClickMenu) {
      this.columnSubscribers.headerClickMenu = this.loadMenuTableColumnEvent.bind(this, "headerClickMenu");
      this.subscribe("column-click", this.columnSubscribers.headerClickMenu);
    }
    if (def2.headerDblClickMenu && !this.columnSubscribers.headerDblClickMenu) {
      this.columnSubscribers.headerDblClickMenu = this.loadMenuTableColumnEvent.bind(this, "headerDblClickMenu");
      this.subscribe("column-dblclick", this.columnSubscribers.headerDblClickMenu);
    }
    if (def2.headerMenu) {
      this.initializeColumnHeaderMenu(column);
    }
    if (def2.contextMenu && !this.columnSubscribers.contextMenu) {
      this.columnSubscribers.contextMenu = this.loadMenuTableCellEvent.bind(this, "contextMenu");
      this.subscribe("cell-contextmenu", this.columnSubscribers.contextMenu);
      this.table.on("cellTapHold", this.loadMenuTableCellEvent.bind(this, "contextMenu"));
    }
    if (def2.clickMenu && !this.columnSubscribers.clickMenu) {
      this.columnSubscribers.clickMenu = this.loadMenuTableCellEvent.bind(this, "clickMenu");
      this.subscribe("cell-click", this.columnSubscribers.clickMenu);
    }
    if (def2.dblClickMenu && !this.columnSubscribers.dblClickMenu) {
      this.columnSubscribers.dblClickMenu = this.loadMenuTableCellEvent.bind(this, "dblClickMenu");
      this.subscribe("cell-dblclick", this.columnSubscribers.dblClickMenu);
    }
  }
  initializeColumnHeaderMenu(column) {
    var icon = column.definition.headerMenuIcon, headerMenuEl;
    headerMenuEl = document.createElement("span");
    headerMenuEl.classList.add("tabulator-header-popup-button");
    if (icon) {
      if (typeof icon === "function") {
        icon = icon(column.getComponent());
      }
      if (icon instanceof HTMLElement) {
        headerMenuEl.appendChild(icon);
      } else {
        headerMenuEl.innerHTML = icon;
      }
    } else {
      headerMenuEl.innerHTML = "&vellip;";
    }
    headerMenuEl.addEventListener("click", (e) => {
      e.stopPropagation();
      e.preventDefault();
      this.loadMenuEvent(column.definition.headerMenu, e, column);
    });
    column.titleElement.insertBefore(headerMenuEl, column.titleElement.firstChild);
  }
  loadMenuTableCellEvent(option, e, cell) {
    if (cell._cell) {
      cell = cell._cell;
    }
    if (cell.column.definition[option]) {
      this.loadMenuEvent(cell.column.definition[option], e, cell);
    }
  }
  loadMenuTableColumnEvent(option, e, column) {
    if (column._column) {
      column = column._column;
    }
    if (column.definition[option]) {
      this.loadMenuEvent(column.definition[option], e, column);
    }
  }
  loadMenuEvent(menu, e, component) {
    if (component._group) {
      component = component._group;
    } else if (component._row) {
      component = component._row;
    }
    menu = typeof menu == "function" ? menu.call(this.table, e, component.getComponent()) : menu;
    this.loadMenu(e, component, menu);
  }
  loadMenu(e, component, menu, parentEl, parentPopup) {
    var touch = !(e instanceof MouseEvent), menuEl = document.createElement("div"), popup;
    menuEl.classList.add("tabulator-menu");
    if (!touch) {
      e.preventDefault();
    }
    if (!menu || !menu.length) {
      return;
    }
    if (!parentEl) {
      if (this.nestedMenuBlock) {
        if (this.rootPopup) {
          return;
        }
      } else {
        this.nestedMenuBlock = setTimeout(() => {
          this.nestedMenuBlock = false;
        }, 100);
      }
      if (this.rootPopup) {
        this.rootPopup.hide();
      }
      this.rootPopup = popup = this.popup(menuEl);
    } else {
      popup = parentPopup.child(menuEl);
    }
    menu.forEach((item) => {
      var itemEl = document.createElement("div"), label = item.label, disabled = item.disabled;
      if (item.separator) {
        itemEl.classList.add("tabulator-menu-separator");
      } else {
        itemEl.classList.add("tabulator-menu-item");
        if (typeof label == "function") {
          label = label.call(this.table, component.getComponent());
        }
        if (label instanceof Node) {
          itemEl.appendChild(label);
        } else {
          itemEl.innerHTML = label;
        }
        if (typeof disabled == "function") {
          disabled = disabled.call(this.table, component.getComponent());
        }
        if (disabled) {
          itemEl.classList.add("tabulator-menu-item-disabled");
          itemEl.addEventListener("click", (e2) => {
            e2.stopPropagation();
          });
        } else {
          if (item.menu && item.menu.length) {
            itemEl.addEventListener("click", (e2) => {
              e2.stopPropagation();
              this.loadMenu(e2, component, item.menu, itemEl, popup);
            });
          } else {
            if (item.action) {
              itemEl.addEventListener("click", (e2) => {
                item.action(e2, component.getComponent());
              });
            }
          }
        }
        if (item.menu && item.menu.length) {
          itemEl.classList.add("tabulator-menu-item-submenu");
        }
      }
      menuEl.appendChild(itemEl);
    });
    menuEl.addEventListener("click", (e2) => {
      if (this.rootPopup) {
        this.rootPopup.hide();
      }
    });
    popup.show(parentEl || e);
    if (popup === this.rootPopup) {
      this.rootPopup.hideOnBlur(() => {
        this.rootPopup = null;
        if (this.currentComponent) {
          this.dispatchExternal("menuClosed", this.currentComponent.getComponent());
          this.currentComponent = null;
        }
      });
      this.currentComponent = component;
      this.dispatchExternal("menuOpened", component.getComponent());
    }
  }
};
Menu$1.moduleName = "menu";
class MoveColumns extends Module {
  constructor(table) {
    super(table);
    this.placeholderElement = this.createPlaceholderElement();
    this.hoverElement = false;
    this.checkTimeout = false;
    this.checkPeriod = 250;
    this.moving = false;
    this.toCol = false;
    this.toColAfter = false;
    this.startX = 0;
    this.autoScrollMargin = 40;
    this.autoScrollStep = 5;
    this.autoScrollTimeout = false;
    this.touchMove = false;
    this.moveHover = this.moveHover.bind(this);
    this.endMove = this.endMove.bind(this);
    this.registerTableOption("movableColumns", false);
  }
  createPlaceholderElement() {
    var el = document.createElement("div");
    el.classList.add("tabulator-col");
    el.classList.add("tabulator-col-placeholder");
    return el;
  }
  initialize() {
    if (this.table.options.movableColumns) {
      this.subscribe("column-init", this.initializeColumn.bind(this));
    }
  }
  initializeColumn(column) {
    var self2 = this, config = {}, colEl;
    if (!column.modules.frozen && !column.isGroup) {
      colEl = column.getElement();
      config.mousemove = function(e) {
        if (column.parent === self2.moving.parent) {
          if ((self2.touchMove ? e.touches[0].pageX : e.pageX) - Helpers.elOffset(colEl).left + self2.table.columnManager.contentsElement.scrollLeft > column.getWidth() / 2) {
            if (self2.toCol !== column || !self2.toColAfter) {
              colEl.parentNode.insertBefore(self2.placeholderElement, colEl.nextSibling);
              self2.moveColumn(column, true);
            }
          } else {
            if (self2.toCol !== column || self2.toColAfter) {
              colEl.parentNode.insertBefore(self2.placeholderElement, colEl);
              self2.moveColumn(column, false);
            }
          }
        }
      }.bind(self2);
      colEl.addEventListener("mousedown", function(e) {
        self2.touchMove = false;
        if (e.which === 1) {
          self2.checkTimeout = setTimeout(function() {
            self2.startMove(e, column);
          }, self2.checkPeriod);
        }
      });
      colEl.addEventListener("mouseup", function(e) {
        if (e.which === 1) {
          if (self2.checkTimeout) {
            clearTimeout(self2.checkTimeout);
          }
        }
      });
      self2.bindTouchEvents(column);
    }
    column.modules.moveColumn = config;
  }
  bindTouchEvents(column) {
    var colEl = column.getElement(), startXMove = false, nextCol, prevCol, nextColWidth, prevColWidth, nextColWidthLast, prevColWidthLast;
    colEl.addEventListener("touchstart", (e) => {
      this.checkTimeout = setTimeout(() => {
        this.touchMove = true;
        nextCol = column.nextColumn();
        nextColWidth = nextCol ? nextCol.getWidth() / 2 : 0;
        prevCol = column.prevColumn();
        prevColWidth = prevCol ? prevCol.getWidth() / 2 : 0;
        nextColWidthLast = 0;
        prevColWidthLast = 0;
        startXMove = false;
        this.startMove(e, column);
      }, this.checkPeriod);
    }, { passive: true });
    colEl.addEventListener("touchmove", (e) => {
      var diff2, moveToCol;
      if (this.moving) {
        this.moveHover(e);
        if (!startXMove) {
          startXMove = e.touches[0].pageX;
        }
        diff2 = e.touches[0].pageX - startXMove;
        if (diff2 > 0) {
          if (nextCol && diff2 - nextColWidthLast > nextColWidth) {
            moveToCol = nextCol;
            if (moveToCol !== column) {
              startXMove = e.touches[0].pageX;
              moveToCol.getElement().parentNode.insertBefore(this.placeholderElement, moveToCol.getElement().nextSibling);
              this.moveColumn(moveToCol, true);
            }
          }
        } else {
          if (prevCol && -diff2 - prevColWidthLast > prevColWidth) {
            moveToCol = prevCol;
            if (moveToCol !== column) {
              startXMove = e.touches[0].pageX;
              moveToCol.getElement().parentNode.insertBefore(this.placeholderElement, moveToCol.getElement());
              this.moveColumn(moveToCol, false);
            }
          }
        }
        if (moveToCol) {
          nextCol = moveToCol.nextColumn();
          nextColWidthLast = nextColWidth;
          nextColWidth = nextCol ? nextCol.getWidth() / 2 : 0;
          prevCol = moveToCol.prevColumn();
          prevColWidthLast = prevColWidth;
          prevColWidth = prevCol ? prevCol.getWidth() / 2 : 0;
        }
      }
    }, { passive: true });
    colEl.addEventListener("touchend", (e) => {
      if (this.checkTimeout) {
        clearTimeout(this.checkTimeout);
      }
      if (this.moving) {
        this.endMove(e);
      }
    });
  }
  startMove(e, column) {
    var element = column.getElement(), headerElement = this.table.columnManager.getContentsElement(), headersElement = this.table.columnManager.getHeadersElement();
    this.moving = column;
    this.startX = (this.touchMove ? e.touches[0].pageX : e.pageX) - Helpers.elOffset(element).left;
    this.table.element.classList.add("tabulator-block-select");
    this.placeholderElement.style.width = column.getWidth() + "px";
    this.placeholderElement.style.height = column.getHeight() + "px";
    element.parentNode.insertBefore(this.placeholderElement, element);
    element.parentNode.removeChild(element);
    this.hoverElement = element.cloneNode(true);
    this.hoverElement.classList.add("tabulator-moving");
    headerElement.appendChild(this.hoverElement);
    this.hoverElement.style.left = "0";
    this.hoverElement.style.bottom = headerElement.clientHeight - headersElement.offsetHeight + "px";
    if (!this.touchMove) {
      this._bindMouseMove();
      document.body.addEventListener("mousemove", this.moveHover);
      document.body.addEventListener("mouseup", this.endMove);
    }
    this.moveHover(e);
  }
  _bindMouseMove() {
    this.table.columnManager.columnsByIndex.forEach(function(column) {
      if (column.modules.moveColumn.mousemove) {
        column.getElement().addEventListener("mousemove", column.modules.moveColumn.mousemove);
      }
    });
  }
  _unbindMouseMove() {
    this.table.columnManager.columnsByIndex.forEach(function(column) {
      if (column.modules.moveColumn.mousemove) {
        column.getElement().removeEventListener("mousemove", column.modules.moveColumn.mousemove);
      }
    });
  }
  moveColumn(column, after) {
    var movingCells = this.moving.getCells();
    this.toCol = column;
    this.toColAfter = after;
    if (after) {
      column.getCells().forEach(function(cell, i) {
        var cellEl = cell.getElement(true);
        if (cellEl.parentNode && movingCells[i]) {
          cellEl.parentNode.insertBefore(movingCells[i].getElement(), cellEl.nextSibling);
        }
      });
    } else {
      column.getCells().forEach(function(cell, i) {
        var cellEl = cell.getElement(true);
        if (cellEl.parentNode && movingCells[i]) {
          cellEl.parentNode.insertBefore(movingCells[i].getElement(), cellEl);
        }
      });
    }
  }
  endMove(e) {
    if (e.which === 1 || this.touchMove) {
      this._unbindMouseMove();
      this.placeholderElement.parentNode.insertBefore(this.moving.getElement(), this.placeholderElement.nextSibling);
      this.placeholderElement.parentNode.removeChild(this.placeholderElement);
      this.hoverElement.parentNode.removeChild(this.hoverElement);
      this.table.element.classList.remove("tabulator-block-select");
      if (this.toCol) {
        this.table.columnManager.moveColumnActual(this.moving, this.toCol, this.toColAfter);
      }
      this.moving = false;
      this.toCol = false;
      this.toColAfter = false;
      if (!this.touchMove) {
        document.body.removeEventListener("mousemove", this.moveHover);
        document.body.removeEventListener("mouseup", this.endMove);
      }
    }
  }
  moveHover(e) {
    var columnHolder = this.table.columnManager.getContentsElement(), scrollLeft = columnHolder.scrollLeft, xPos = (this.touchMove ? e.touches[0].pageX : e.pageX) - Helpers.elOffset(columnHolder).left + scrollLeft, scrollPos;
    this.hoverElement.style.left = xPos - this.startX + "px";
    if (xPos - scrollLeft < this.autoScrollMargin) {
      if (!this.autoScrollTimeout) {
        this.autoScrollTimeout = setTimeout(() => {
          scrollPos = Math.max(0, scrollLeft - 5);
          this.table.rowManager.getElement().scrollLeft = scrollPos;
          this.autoScrollTimeout = false;
        }, 1);
      }
    }
    if (scrollLeft + columnHolder.clientWidth - xPos < this.autoScrollMargin) {
      if (!this.autoScrollTimeout) {
        this.autoScrollTimeout = setTimeout(() => {
          scrollPos = Math.min(columnHolder.clientWidth, scrollLeft + 5);
          this.table.rowManager.getElement().scrollLeft = scrollPos;
          this.autoScrollTimeout = false;
        }, 1);
      }
    }
  }
}
MoveColumns.moduleName = "moveColumn";
class MoveRows extends Module {
  constructor(table) {
    super(table);
    this.placeholderElement = this.createPlaceholderElement();
    this.hoverElement = false;
    this.checkTimeout = false;
    this.checkPeriod = 150;
    this.moving = false;
    this.toRow = false;
    this.toRowAfter = false;
    this.hasHandle = false;
    this.startY = 0;
    this.startX = 0;
    this.moveHover = this.moveHover.bind(this);
    this.endMove = this.endMove.bind(this);
    this.tableRowDropEvent = false;
    this.touchMove = false;
    this.connection = false;
    this.connectionSelectorsTables = false;
    this.connectionSelectorsElements = false;
    this.connectionElements = [];
    this.connections = [];
    this.connectedTable = false;
    this.connectedRow = false;
    this.registerTableOption("movableRows", false);
    this.registerTableOption("movableRowsConnectedTables", false);
    this.registerTableOption("movableRowsConnectedElements", false);
    this.registerTableOption("movableRowsSender", false);
    this.registerTableOption("movableRowsReceiver", "insert");
    this.registerColumnOption("rowHandle");
  }
  createPlaceholderElement() {
    var el = document.createElement("div");
    el.classList.add("tabulator-row");
    el.classList.add("tabulator-row-placeholder");
    return el;
  }
  initialize() {
    if (this.table.options.movableRows) {
      this.connectionSelectorsTables = this.table.options.movableRowsConnectedTables;
      this.connectionSelectorsElements = this.table.options.movableRowsConnectedElements;
      this.connection = this.connectionSelectorsTables || this.connectionSelectorsElements;
      this.subscribe("cell-init", this.initializeCell.bind(this));
      this.subscribe("column-init", this.initializeColumn.bind(this));
      this.subscribe("row-init", this.initializeRow.bind(this));
    }
  }
  initializeGroupHeader(group) {
    var self2 = this, config = {};
    config.mouseup = function(e) {
      self2.tableRowDrop(e, group);
    }.bind(self2);
    config.mousemove = function(e) {
      var rowEl;
      if (e.pageY - Helpers.elOffset(group.element).top + self2.table.rowManager.element.scrollTop > group.getHeight() / 2) {
        if (self2.toRow !== group || !self2.toRowAfter) {
          rowEl = group.getElement();
          rowEl.parentNode.insertBefore(self2.placeholderElement, rowEl.nextSibling);
          self2.moveRow(group, true);
        }
      } else {
        if (self2.toRow !== group || self2.toRowAfter) {
          rowEl = group.getElement();
          if (rowEl.previousSibling) {
            rowEl.parentNode.insertBefore(self2.placeholderElement, rowEl);
            self2.moveRow(group, false);
          }
        }
      }
    }.bind(self2);
    group.modules.moveRow = config;
  }
  initializeRow(row) {
    var self2 = this, config = {}, rowEl;
    config.mouseup = function(e) {
      self2.tableRowDrop(e, row);
    }.bind(self2);
    config.mousemove = function(e) {
      var rowEl2 = row.getElement();
      if (e.pageY - Helpers.elOffset(rowEl2).top + self2.table.rowManager.element.scrollTop > row.getHeight() / 2) {
        if (self2.toRow !== row || !self2.toRowAfter) {
          rowEl2.parentNode.insertBefore(self2.placeholderElement, rowEl2.nextSibling);
          self2.moveRow(row, true);
        }
      } else {
        if (self2.toRow !== row || self2.toRowAfter) {
          rowEl2.parentNode.insertBefore(self2.placeholderElement, rowEl2);
          self2.moveRow(row, false);
        }
      }
    }.bind(self2);
    if (!this.hasHandle) {
      rowEl = row.getElement();
      rowEl.addEventListener("mousedown", function(e) {
        if (e.which === 1) {
          self2.checkTimeout = setTimeout(function() {
            self2.startMove(e, row);
          }, self2.checkPeriod);
        }
      });
      rowEl.addEventListener("mouseup", function(e) {
        if (e.which === 1) {
          if (self2.checkTimeout) {
            clearTimeout(self2.checkTimeout);
          }
        }
      });
      this.bindTouchEvents(row, row.getElement());
    }
    row.modules.moveRow = config;
  }
  initializeColumn(column) {
    if (column.definition.rowHandle && this.table.options.movableRows !== false) {
      this.hasHandle = true;
    }
  }
  initializeCell(cell) {
    if (cell.column.definition.rowHandle && this.table.options.movableRows !== false) {
      var self2 = this, cellEl = cell.getElement(true);
      cellEl.addEventListener("mousedown", function(e) {
        if (e.which === 1) {
          self2.checkTimeout = setTimeout(function() {
            self2.startMove(e, cell.row);
          }, self2.checkPeriod);
        }
      });
      cellEl.addEventListener("mouseup", function(e) {
        if (e.which === 1) {
          if (self2.checkTimeout) {
            clearTimeout(self2.checkTimeout);
          }
        }
      });
      this.bindTouchEvents(cell.row, cellEl);
    }
  }
  bindTouchEvents(row, element) {
    var startYMove = false, nextRow, prevRow, nextRowHeight, prevRowHeight, nextRowHeightLast, prevRowHeightLast;
    element.addEventListener("touchstart", (e) => {
      this.checkTimeout = setTimeout(() => {
        this.touchMove = true;
        nextRow = row.nextRow();
        nextRowHeight = nextRow ? nextRow.getHeight() / 2 : 0;
        prevRow = row.prevRow();
        prevRowHeight = prevRow ? prevRow.getHeight() / 2 : 0;
        nextRowHeightLast = 0;
        prevRowHeightLast = 0;
        startYMove = false;
        this.startMove(e, row);
      }, this.checkPeriod);
    }, { passive: true });
    this.moving, this.toRow, this.toRowAfter;
    element.addEventListener("touchmove", (e) => {
      var diff2, moveToRow;
      if (this.moving) {
        e.preventDefault();
        this.moveHover(e);
        if (!startYMove) {
          startYMove = e.touches[0].pageY;
        }
        diff2 = e.touches[0].pageY - startYMove;
        if (diff2 > 0) {
          if (nextRow && diff2 - nextRowHeightLast > nextRowHeight) {
            moveToRow = nextRow;
            if (moveToRow !== row) {
              startYMove = e.touches[0].pageY;
              moveToRow.getElement().parentNode.insertBefore(this.placeholderElement, moveToRow.getElement().nextSibling);
              this.moveRow(moveToRow, true);
            }
          }
        } else {
          if (prevRow && -diff2 - prevRowHeightLast > prevRowHeight) {
            moveToRow = prevRow;
            if (moveToRow !== row) {
              startYMove = e.touches[0].pageY;
              moveToRow.getElement().parentNode.insertBefore(this.placeholderElement, moveToRow.getElement());
              this.moveRow(moveToRow, false);
            }
          }
        }
        if (moveToRow) {
          nextRow = moveToRow.nextRow();
          nextRowHeightLast = nextRowHeight;
          nextRowHeight = nextRow ? nextRow.getHeight() / 2 : 0;
          prevRow = moveToRow.prevRow();
          prevRowHeightLast = prevRowHeight;
          prevRowHeight = prevRow ? prevRow.getHeight() / 2 : 0;
        }
      }
    });
    element.addEventListener("touchend", (e) => {
      if (this.checkTimeout) {
        clearTimeout(this.checkTimeout);
      }
      if (this.moving) {
        this.endMove(e);
        this.touchMove = false;
      }
    });
  }
  _bindMouseMove() {
    this.table.rowManager.getDisplayRows().forEach((row) => {
      if ((row.type === "row" || row.type === "group") && row.modules.moveRow && row.modules.moveRow.mousemove) {
        row.getElement().addEventListener("mousemove", row.modules.moveRow.mousemove);
      }
    });
  }
  _unbindMouseMove() {
    this.table.rowManager.getDisplayRows().forEach((row) => {
      if ((row.type === "row" || row.type === "group") && row.modules.moveRow && row.modules.moveRow.mousemove) {
        row.getElement().removeEventListener("mousemove", row.modules.moveRow.mousemove);
      }
    });
  }
  startMove(e, row) {
    var element = row.getElement();
    this.setStartPosition(e, row);
    this.moving = row;
    this.table.element.classList.add("tabulator-block-select");
    this.placeholderElement.style.width = row.getWidth() + "px";
    this.placeholderElement.style.height = row.getHeight() + "px";
    if (!this.connection) {
      element.parentNode.insertBefore(this.placeholderElement, element);
      element.parentNode.removeChild(element);
    } else {
      this.table.element.classList.add("tabulator-movingrow-sending");
      this.connectToTables(row);
    }
    this.hoverElement = element.cloneNode(true);
    this.hoverElement.classList.add("tabulator-moving");
    if (this.connection) {
      document.body.appendChild(this.hoverElement);
      this.hoverElement.style.left = "0";
      this.hoverElement.style.top = "0";
      this.hoverElement.style.width = this.table.element.clientWidth + "px";
      this.hoverElement.style.whiteSpace = "nowrap";
      this.hoverElement.style.overflow = "hidden";
      this.hoverElement.style.pointerEvents = "none";
    } else {
      this.table.rowManager.getTableElement().appendChild(this.hoverElement);
      this.hoverElement.style.left = "0";
      this.hoverElement.style.top = "0";
      this._bindMouseMove();
    }
    document.body.addEventListener("mousemove", this.moveHover);
    document.body.addEventListener("mouseup", this.endMove);
    this.dispatchExternal("rowMoving", row.getComponent());
    this.moveHover(e);
  }
  setStartPosition(e, row) {
    var pageX = this.touchMove ? e.touches[0].pageX : e.pageX, pageY = this.touchMove ? e.touches[0].pageY : e.pageY, element, position;
    element = row.getElement();
    if (this.connection) {
      position = element.getBoundingClientRect();
      this.startX = position.left - pageX + window.pageXOffset;
      this.startY = position.top - pageY + window.pageYOffset;
    } else {
      this.startY = pageY - element.getBoundingClientRect().top;
    }
  }
  endMove(e) {
    if (!e || e.which === 1 || this.touchMove) {
      this._unbindMouseMove();
      if (!this.connection) {
        this.placeholderElement.parentNode.insertBefore(this.moving.getElement(), this.placeholderElement.nextSibling);
        this.placeholderElement.parentNode.removeChild(this.placeholderElement);
      }
      this.hoverElement.parentNode.removeChild(this.hoverElement);
      this.table.element.classList.remove("tabulator-block-select");
      if (this.toRow) {
        this.table.rowManager.moveRow(this.moving, this.toRow, this.toRowAfter);
      } else {
        this.dispatchExternal("rowMoveCancelled", this.moving.getComponent());
      }
      this.moving = false;
      this.toRow = false;
      this.toRowAfter = false;
      document.body.removeEventListener("mousemove", this.moveHover);
      document.body.removeEventListener("mouseup", this.endMove);
      if (this.connection) {
        this.table.element.classList.remove("tabulator-movingrow-sending");
        this.disconnectFromTables();
      }
    }
  }
  moveRow(row, after) {
    this.toRow = row;
    this.toRowAfter = after;
  }
  moveHover(e) {
    if (this.connection) {
      this.moveHoverConnections.call(this, e);
    } else {
      this.moveHoverTable.call(this, e);
    }
  }
  moveHoverTable(e) {
    var rowHolder = this.table.rowManager.getElement(), scrollTop = rowHolder.scrollTop, yPos = (this.touchMove ? e.touches[0].pageY : e.pageY) - rowHolder.getBoundingClientRect().top + scrollTop;
    this.hoverElement.style.top = Math.min(yPos - this.startY, this.table.rowManager.element.scrollHeight - this.hoverElement.offsetHeight) + "px";
  }
  moveHoverConnections(e) {
    this.hoverElement.style.left = this.startX + (this.touchMove ? e.touches[0].pageX : e.pageX) + "px";
    this.hoverElement.style.top = this.startY + (this.touchMove ? e.touches[0].pageY : e.pageY) + "px";
  }
  elementRowDrop(e, element, row) {
    this.dispatchExternal("movableRowsElementDrop", e, element, row ? row.getComponent() : false);
  }
  //establish connection with other tables
  connectToTables(row) {
    var connectionTables;
    if (this.connectionSelectorsTables) {
      connectionTables = this.commsConnections(this.connectionSelectorsTables);
      this.dispatchExternal("movableRowsSendingStart", connectionTables);
      this.commsSend(this.connectionSelectorsTables, "moveRow", "connect", {
        row
      });
    }
    if (this.connectionSelectorsElements) {
      this.connectionElements = [];
      if (!Array.isArray(this.connectionSelectorsElements)) {
        this.connectionSelectorsElements = [this.connectionSelectorsElements];
      }
      this.connectionSelectorsElements.forEach((query) => {
        if (typeof query === "string") {
          this.connectionElements = this.connectionElements.concat(Array.prototype.slice.call(document.querySelectorAll(query)));
        } else {
          this.connectionElements.push(query);
        }
      });
      this.connectionElements.forEach((element) => {
        var dropEvent = (e) => {
          this.elementRowDrop(e, element, this.moving);
        };
        element.addEventListener("mouseup", dropEvent);
        element.tabulatorElementDropEvent = dropEvent;
        element.classList.add("tabulator-movingrow-receiving");
      });
    }
  }
  //disconnect from other tables
  disconnectFromTables() {
    var connectionTables;
    if (this.connectionSelectorsTables) {
      connectionTables = this.commsConnections(this.connectionSelectorsTables);
      this.dispatchExternal("movableRowsSendingStop", connectionTables);
      this.commsSend(this.connectionSelectorsTables, "moveRow", "disconnect");
    }
    this.connectionElements.forEach((element) => {
      element.classList.remove("tabulator-movingrow-receiving");
      element.removeEventListener("mouseup", element.tabulatorElementDropEvent);
      delete element.tabulatorElementDropEvent;
    });
  }
  //accept incomming connection
  connect(table, row) {
    if (!this.connectedTable) {
      this.connectedTable = table;
      this.connectedRow = row;
      this.table.element.classList.add("tabulator-movingrow-receiving");
      this.table.rowManager.getDisplayRows().forEach((row2) => {
        if (row2.type === "row" && row2.modules.moveRow && row2.modules.moveRow.mouseup) {
          row2.getElement().addEventListener("mouseup", row2.modules.moveRow.mouseup);
        }
      });
      this.tableRowDropEvent = this.tableRowDrop.bind(this);
      this.table.element.addEventListener("mouseup", this.tableRowDropEvent);
      this.dispatchExternal("movableRowsReceivingStart", row, table);
      return true;
    } else {
      console.warn("Move Row Error - Table cannot accept connection, already connected to table:", this.connectedTable);
      return false;
    }
  }
  //close incoming connection
  disconnect(table) {
    if (table === this.connectedTable) {
      this.connectedTable = false;
      this.connectedRow = false;
      this.table.element.classList.remove("tabulator-movingrow-receiving");
      this.table.rowManager.getDisplayRows().forEach((row) => {
        if (row.type === "row" && row.modules.moveRow && row.modules.moveRow.mouseup) {
          row.getElement().removeEventListener("mouseup", row.modules.moveRow.mouseup);
        }
      });
      this.table.element.removeEventListener("mouseup", this.tableRowDropEvent);
      this.dispatchExternal("movableRowsReceivingStop", table);
    } else {
      console.warn("Move Row Error - trying to disconnect from non connected table");
    }
  }
  dropComplete(table, row, success) {
    var sender = false;
    if (success) {
      switch (typeof this.table.options.movableRowsSender) {
        case "string":
          sender = this.senders[this.table.options.movableRowsSender];
          break;
        case "function":
          sender = this.table.options.movableRowsSender;
          break;
      }
      if (sender) {
        sender.call(this, this.moving ? this.moving.getComponent() : void 0, row ? row.getComponent() : void 0, table);
      } else {
        if (this.table.options.movableRowsSender) {
          console.warn("Mover Row Error - no matching sender found:", this.table.options.movableRowsSender);
        }
      }
      this.dispatchExternal("movableRowsSent", this.moving.getComponent(), row ? row.getComponent() : void 0, table);
    } else {
      this.dispatchExternal("movableRowsSentFailed", this.moving.getComponent(), row ? row.getComponent() : void 0, table);
    }
    this.endMove();
  }
  tableRowDrop(e, row) {
    var receiver = false, success = false;
    e.stopImmediatePropagation();
    switch (typeof this.table.options.movableRowsReceiver) {
      case "string":
        receiver = this.receivers[this.table.options.movableRowsReceiver];
        break;
      case "function":
        receiver = this.table.options.movableRowsReceiver;
        break;
    }
    if (receiver) {
      success = receiver.call(this, this.connectedRow.getComponent(), row ? row.getComponent() : void 0, this.connectedTable);
    } else {
      console.warn("Mover Row Error - no matching receiver found:", this.table.options.movableRowsReceiver);
    }
    if (success) {
      this.dispatchExternal("movableRowsReceived", this.connectedRow.getComponent(), row ? row.getComponent() : void 0, this.connectedTable);
    } else {
      this.dispatchExternal("movableRowsReceivedFailed", this.connectedRow.getComponent(), row ? row.getComponent() : void 0, this.connectedTable);
    }
    this.commsSend(this.connectedTable, "moveRow", "dropcomplete", {
      row,
      success
    });
  }
  commsReceived(table, action, data) {
    switch (action) {
      case "connect":
        return this.connect(table, data.row);
      case "disconnect":
        return this.disconnect(table);
      case "dropcomplete":
        return this.dropComplete(table, data.row, data.success);
    }
  }
}
MoveRows.prototype.receivers = {
  insert: function(fromRow, toRow, fromTable) {
    this.table.addRow(fromRow.getData(), void 0, toRow);
    return true;
  },
  add: function(fromRow, toRow, fromTable) {
    this.table.addRow(fromRow.getData());
    return true;
  },
  update: function(fromRow, toRow, fromTable) {
    if (toRow) {
      toRow.update(fromRow.getData());
      return true;
    }
    return false;
  },
  replace: function(fromRow, toRow, fromTable) {
    if (toRow) {
      this.table.addRow(fromRow.getData(), void 0, toRow);
      toRow.delete();
      return true;
    }
    return false;
  }
};
MoveRows.prototype.senders = {
  delete: function(fromRow, toRow, toTable) {
    fromRow.delete();
  }
};
MoveRows.moduleName = "moveRow";
var defaultMutators = {};
class Mutator extends Module {
  constructor(table) {
    super(table);
    this.allowedTypes = ["", "data", "edit", "clipboard"];
    this.enabled = true;
    this.registerColumnOption("mutator");
    this.registerColumnOption("mutatorParams");
    this.registerColumnOption("mutatorData");
    this.registerColumnOption("mutatorDataParams");
    this.registerColumnOption("mutatorEdit");
    this.registerColumnOption("mutatorEditParams");
    this.registerColumnOption("mutatorClipboard");
    this.registerColumnOption("mutatorClipboardParams");
    this.registerColumnOption("mutateLink");
  }
  initialize() {
    this.subscribe("cell-value-changing", this.transformCell.bind(this));
    this.subscribe("cell-value-changed", this.mutateLink.bind(this));
    this.subscribe("column-layout", this.initializeColumn.bind(this));
    this.subscribe("row-data-init-before", this.rowDataChanged.bind(this));
    this.subscribe("row-data-changing", this.rowDataChanged.bind(this));
  }
  rowDataChanged(row, tempData, updatedData) {
    return this.transformRow(tempData, "data", updatedData);
  }
  //initialize column mutator
  initializeColumn(column) {
    var match = false, config = {};
    this.allowedTypes.forEach((type) => {
      var key = "mutator" + (type.charAt(0).toUpperCase() + type.slice(1)), mutator;
      if (column.definition[key]) {
        mutator = this.lookupMutator(column.definition[key]);
        if (mutator) {
          match = true;
          config[key] = {
            mutator,
            params: column.definition[key + "Params"] || {}
          };
        }
      }
    });
    if (match) {
      column.modules.mutate = config;
    }
  }
  lookupMutator(value) {
    var mutator = false;
    switch (typeof value) {
      case "string":
        if (Mutator.mutators[value]) {
          mutator = Mutator.mutators[value];
        } else {
          console.warn("Mutator Error - No such mutator found, ignoring: ", value);
        }
        break;
      case "function":
        mutator = value;
        break;
    }
    return mutator;
  }
  //apply mutator to row
  transformRow(data, type, updatedData) {
    var key = "mutator" + (type.charAt(0).toUpperCase() + type.slice(1)), value;
    if (this.enabled) {
      this.table.columnManager.traverse((column) => {
        var mutator, params, component;
        if (column.modules.mutate) {
          mutator = column.modules.mutate[key] || column.modules.mutate.mutator || false;
          if (mutator) {
            value = column.getFieldValue(typeof updatedData !== "undefined" ? updatedData : data);
            if (type == "data" && !updatedData || typeof value !== "undefined") {
              component = column.getComponent();
              params = typeof mutator.params === "function" ? mutator.params(value, data, type, component) : mutator.params;
              column.setFieldValue(data, mutator.mutator(value, data, type, params, component));
            }
          }
        }
      });
    }
    return data;
  }
  //apply mutator to new cell value
  transformCell(cell, value) {
    if (cell.column.modules.mutate) {
      var mutator = cell.column.modules.mutate.mutatorEdit || cell.column.modules.mutate.mutator || false, tempData = {};
      if (mutator) {
        tempData = Object.assign(tempData, cell.row.getData());
        cell.column.setFieldValue(tempData, value);
        return mutator.mutator(value, tempData, "edit", mutator.params, cell.getComponent());
      }
    }
    return value;
  }
  mutateLink(cell) {
    var links = cell.column.definition.mutateLink;
    if (links) {
      if (!Array.isArray(links)) {
        links = [links];
      }
      links.forEach((link2) => {
        var linkCell = cell.row.getCell(link2);
        if (linkCell) {
          linkCell.setValue(linkCell.getValue(), true, true);
        }
      });
    }
  }
  enable() {
    this.enabled = true;
  }
  disable() {
    this.enabled = false;
  }
}
Mutator.moduleName = "mutator";
Mutator.mutators = defaultMutators;
function rows(pageSize, currentRow, currentPage, totalRows, totalPages) {
  var el = document.createElement("span"), showingEl = document.createElement("span"), valueEl = document.createElement("span"), ofEl = document.createElement("span"), totalEl = document.createElement("span"), rowsEl = document.createElement("span");
  this.table.modules.localize.langBind("pagination|counter|showing", (value) => {
    showingEl.innerHTML = value;
  });
  this.table.modules.localize.langBind("pagination|counter|of", (value) => {
    ofEl.innerHTML = value;
  });
  this.table.modules.localize.langBind("pagination|counter|rows", (value) => {
    rowsEl.innerHTML = value;
  });
  if (totalRows) {
    valueEl.innerHTML = " " + currentRow + "-" + Math.min(currentRow + pageSize - 1, totalRows) + " ";
    totalEl.innerHTML = " " + totalRows + " ";
    el.appendChild(showingEl);
    el.appendChild(valueEl);
    el.appendChild(ofEl);
    el.appendChild(totalEl);
    el.appendChild(rowsEl);
  } else {
    valueEl.innerHTML = " 0 ";
    el.appendChild(showingEl);
    el.appendChild(valueEl);
    el.appendChild(rowsEl);
  }
  return el;
}
function pages(pageSize, currentRow, currentPage, totalRows, totalPages) {
  var el = document.createElement("span"), showingEl = document.createElement("span"), valueEl = document.createElement("span"), ofEl = document.createElement("span"), totalEl = document.createElement("span"), rowsEl = document.createElement("span");
  this.table.modules.localize.langBind("pagination|counter|showing", (value) => {
    showingEl.innerHTML = value;
  });
  valueEl.innerHTML = " " + currentPage + " ";
  this.table.modules.localize.langBind("pagination|counter|of", (value) => {
    ofEl.innerHTML = value;
  });
  totalEl.innerHTML = " " + totalPages + " ";
  this.table.modules.localize.langBind("pagination|counter|pages", (value) => {
    rowsEl.innerHTML = value;
  });
  el.appendChild(showingEl);
  el.appendChild(valueEl);
  el.appendChild(ofEl);
  el.appendChild(totalEl);
  el.appendChild(rowsEl);
  return el;
}
var defaultPageCounters = {
  rows,
  pages
};
class Page extends Module {
  constructor(table) {
    super(table);
    this.mode = "local";
    this.progressiveLoad = false;
    this.element = null;
    this.pageCounterElement = null;
    this.pageCounter = null;
    this.size = 0;
    this.page = 1;
    this.count = 5;
    this.max = 1;
    this.remoteRowCountEstimate = null;
    this.initialLoad = true;
    this.dataChanging = false;
    this.pageSizes = [];
    this.registerTableOption("pagination", false);
    this.registerTableOption("paginationMode", "local");
    this.registerTableOption("paginationSize", false);
    this.registerTableOption("paginationInitialPage", 1);
    this.registerTableOption("paginationCounter", false);
    this.registerTableOption("paginationCounterElement", false);
    this.registerTableOption("paginationButtonCount", 5);
    this.registerTableOption("paginationSizeSelector", false);
    this.registerTableOption("paginationElement", false);
    this.registerTableOption("paginationAddRow", "page");
    this.registerTableOption("progressiveLoad", false);
    this.registerTableOption("progressiveLoadDelay", 0);
    this.registerTableOption("progressiveLoadScrollMargin", 0);
    this.registerTableFunction("setMaxPage", this.setMaxPage.bind(this));
    this.registerTableFunction("setPage", this.setPage.bind(this));
    this.registerTableFunction("setPageToRow", this.userSetPageToRow.bind(this));
    this.registerTableFunction("setPageSize", this.userSetPageSize.bind(this));
    this.registerTableFunction("getPageSize", this.getPageSize.bind(this));
    this.registerTableFunction("previousPage", this.previousPage.bind(this));
    this.registerTableFunction("nextPage", this.nextPage.bind(this));
    this.registerTableFunction("getPage", this.getPage.bind(this));
    this.registerTableFunction("getPageMax", this.getPageMax.bind(this));
    this.registerComponentFunction("row", "pageTo", this.setPageToRow.bind(this));
  }
  initialize() {
    if (this.table.options.pagination) {
      this.subscribe("row-deleted", this.rowsUpdated.bind(this));
      this.subscribe("row-added", this.rowsUpdated.bind(this));
      this.subscribe("data-processed", this.initialLoadComplete.bind(this));
      this.subscribe("table-built", this.calculatePageSizes.bind(this));
      this.subscribe("footer-redraw", this.footerRedraw.bind(this));
      if (this.table.options.paginationAddRow == "page") {
        this.subscribe("row-adding-position", this.rowAddingPosition.bind(this));
      }
      if (this.table.options.paginationMode === "remote") {
        this.subscribe("data-params", this.remotePageParams.bind(this));
        this.subscribe("data-loaded", this._parseRemoteData.bind(this));
      }
      if (this.table.options.progressiveLoad) {
        console.error("Progressive Load Error - Pagination and progressive load cannot be used at the same time");
      }
      this.registerDisplayHandler(this.restOnRenderBefore.bind(this), 40);
      this.registerDisplayHandler(this.getRows.bind(this), 50);
      this.createElements();
      this.initializePageCounter();
      this.initializePaginator();
    } else if (this.table.options.progressiveLoad) {
      this.subscribe("data-params", this.remotePageParams.bind(this));
      this.subscribe("data-loaded", this._parseRemoteData.bind(this));
      this.subscribe("table-built", this.calculatePageSizes.bind(this));
      this.subscribe("data-processed", this.initialLoadComplete.bind(this));
      this.initializeProgressive(this.table.options.progressiveLoad);
      if (this.table.options.progressiveLoad === "scroll") {
        this.subscribe("scroll-vertical", this.scrollVertical.bind(this));
      }
    }
  }
  rowAddingPosition(row, top2) {
    var rowManager = this.table.rowManager, displayRows = rowManager.getDisplayRows(), index2;
    if (top2) {
      if (displayRows.length) {
        index2 = displayRows[0];
      } else {
        if (rowManager.activeRows.length) {
          index2 = rowManager.activeRows[rowManager.activeRows.length - 1];
          top2 = false;
        }
      }
    } else {
      if (displayRows.length) {
        index2 = displayRows[displayRows.length - 1];
        top2 = displayRows.length < this.size ? false : true;
      }
    }
    return { index: index2, top: top2 };
  }
  calculatePageSizes() {
    var testElRow, testElCell;
    if (this.table.options.paginationSize) {
      this.size = this.table.options.paginationSize;
    } else {
      testElRow = document.createElement("div");
      testElRow.classList.add("tabulator-row");
      testElRow.style.visibility = "hidden";
      testElCell = document.createElement("div");
      testElCell.classList.add("tabulator-cell");
      testElCell.innerHTML = "Page Row Test";
      testElRow.appendChild(testElCell);
      this.table.rowManager.getTableElement().appendChild(testElRow);
      this.size = Math.floor(this.table.rowManager.getElement().clientHeight / testElRow.offsetHeight);
      this.table.rowManager.getTableElement().removeChild(testElRow);
    }
    this.dispatchExternal("pageSizeChanged", this.size);
    this.generatePageSizeSelectList();
  }
  initialLoadComplete() {
    this.initialLoad = false;
  }
  remotePageParams(data, config, silent, params) {
    if (!this.initialLoad) {
      if (this.progressiveLoad && !silent || !this.progressiveLoad && !this.dataChanging) {
        this.reset(true);
      }
    }
    params.page = this.page;
    if (this.size) {
      params.size = this.size;
    }
    return params;
  }
  ///////////////////////////////////
  ///////// Table Functions /////////
  ///////////////////////////////////
  userSetPageToRow(row) {
    if (this.table.options.pagination) {
      row = this.rowManager.findRow(row);
      if (row) {
        return this.setPageToRow(row);
      }
    }
    return Promise.reject();
  }
  userSetPageSize(size2) {
    if (this.table.options.pagination) {
      this.setPageSize(size2);
      return this.setPage(1);
    } else {
      return false;
    }
  }
  ///////////////////////////////////
  ///////// Internal Logic //////////
  ///////////////////////////////////
  scrollVertical(top2, dir) {
    var element, diff2, margin;
    if (!dir && !this.table.dataLoader.loading) {
      element = this.table.rowManager.getElement();
      diff2 = element.scrollHeight - element.clientHeight - top2;
      margin = this.table.options.progressiveLoadScrollMargin || element.clientHeight * 2;
      if (diff2 < margin) {
        this.nextPage().catch(() => {
        });
      }
    }
  }
  restOnRenderBefore(rows2, renderInPosition) {
    if (!renderInPosition) {
      if (this.mode === "local") {
        this.reset();
      }
    }
    return rows2;
  }
  rowsUpdated() {
    this.refreshData(true, "all");
  }
  createElements() {
    var button;
    this.element = document.createElement("span");
    this.element.classList.add("tabulator-paginator");
    this.pagesElement = document.createElement("span");
    this.pagesElement.classList.add("tabulator-pages");
    button = document.createElement("button");
    button.classList.add("tabulator-page");
    button.setAttribute("type", "button");
    button.setAttribute("role", "button");
    button.setAttribute("aria-label", "");
    button.setAttribute("title", "");
    this.firstBut = button.cloneNode(true);
    this.firstBut.setAttribute("data-page", "first");
    this.prevBut = button.cloneNode(true);
    this.prevBut.setAttribute("data-page", "prev");
    this.nextBut = button.cloneNode(true);
    this.nextBut.setAttribute("data-page", "next");
    this.lastBut = button.cloneNode(true);
    this.lastBut.setAttribute("data-page", "last");
    if (this.table.options.paginationSizeSelector) {
      this.pageSizeSelect = document.createElement("select");
      this.pageSizeSelect.classList.add("tabulator-page-size");
    }
  }
  generatePageSizeSelectList() {
    var pageSizes = [];
    if (this.pageSizeSelect) {
      if (Array.isArray(this.table.options.paginationSizeSelector)) {
        pageSizes = this.table.options.paginationSizeSelector;
        this.pageSizes = pageSizes;
        if (this.pageSizes.indexOf(this.size) == -1) {
          pageSizes.unshift(this.size);
        }
      } else {
        if (this.pageSizes.indexOf(this.size) == -1) {
          pageSizes = [];
          for (let i = 1; i < 5; i++) {
            pageSizes.push(this.size * i);
          }
          this.pageSizes = pageSizes;
        } else {
          pageSizes = this.pageSizes;
        }
      }
      while (this.pageSizeSelect.firstChild)
        this.pageSizeSelect.removeChild(this.pageSizeSelect.firstChild);
      pageSizes.forEach((item) => {
        var itemEl = document.createElement("option");
        itemEl.value = item;
        if (item === true) {
          this.langBind("pagination|all", function(value) {
            itemEl.innerHTML = value;
          });
        } else {
          itemEl.innerHTML = item;
        }
        this.pageSizeSelect.appendChild(itemEl);
      });
      this.pageSizeSelect.value = this.size;
    }
  }
  initializePageCounter() {
    var counter = this.table.options.paginationCounter, pageCounter = null;
    if (counter) {
      if (typeof counter === "function") {
        pageCounter = counter;
      } else {
        pageCounter = Page.pageCounters[counter];
      }
      if (pageCounter) {
        this.pageCounter = pageCounter;
        this.pageCounterElement = document.createElement("span");
        this.pageCounterElement.classList.add("tabulator-page-counter");
      } else {
        console.warn("Pagination Error - No such page counter found: ", counter);
      }
    }
  }
  //setup pagination
  initializePaginator(hidden) {
    var pageSelectLabel, paginationCounterHolder;
    if (!hidden) {
      this.langBind("pagination|first", (value) => {
        this.firstBut.innerHTML = value;
      });
      this.langBind("pagination|first_title", (value) => {
        this.firstBut.setAttribute("aria-label", value);
        this.firstBut.setAttribute("title", value);
      });
      this.langBind("pagination|prev", (value) => {
        this.prevBut.innerHTML = value;
      });
      this.langBind("pagination|prev_title", (value) => {
        this.prevBut.setAttribute("aria-label", value);
        this.prevBut.setAttribute("title", value);
      });
      this.langBind("pagination|next", (value) => {
        this.nextBut.innerHTML = value;
      });
      this.langBind("pagination|next_title", (value) => {
        this.nextBut.setAttribute("aria-label", value);
        this.nextBut.setAttribute("title", value);
      });
      this.langBind("pagination|last", (value) => {
        this.lastBut.innerHTML = value;
      });
      this.langBind("pagination|last_title", (value) => {
        this.lastBut.setAttribute("aria-label", value);
        this.lastBut.setAttribute("title", value);
      });
      this.firstBut.addEventListener("click", () => {
        this.setPage(1);
      });
      this.prevBut.addEventListener("click", () => {
        this.previousPage();
      });
      this.nextBut.addEventListener("click", () => {
        this.nextPage();
      });
      this.lastBut.addEventListener("click", () => {
        this.setPage(this.max);
      });
      if (this.table.options.paginationElement) {
        this.element = this.table.options.paginationElement;
      }
      if (this.pageSizeSelect) {
        pageSelectLabel = document.createElement("label");
        this.langBind("pagination|page_size", (value) => {
          this.pageSizeSelect.setAttribute("aria-label", value);
          this.pageSizeSelect.setAttribute("title", value);
          pageSelectLabel.innerHTML = value;
        });
        this.element.appendChild(pageSelectLabel);
        this.element.appendChild(this.pageSizeSelect);
        this.pageSizeSelect.addEventListener("change", (e) => {
          this.setPageSize(this.pageSizeSelect.value == "true" ? true : this.pageSizeSelect.value);
          this.setPage(1);
        });
      }
      this.element.appendChild(this.firstBut);
      this.element.appendChild(this.prevBut);
      this.element.appendChild(this.pagesElement);
      this.element.appendChild(this.nextBut);
      this.element.appendChild(this.lastBut);
      if (!this.table.options.paginationElement) {
        if (this.table.options.paginationCounter) {
          if (this.table.options.paginationCounterElement) {
            if (this.table.options.paginationCounterElement instanceof HTMLElement) {
              this.table.options.paginationCounterElement.appendChild(this.pageCounterElement);
            } else if (typeof this.table.options.paginationCounterElement === "string") {
              paginationCounterHolder = document.querySelector(this.table.options.paginationCounterElement);
              if (paginationCounterHolder) {
                paginationCounterHolder.appendChild(this.pageCounterElement);
              } else {
                console.warn("Pagination Error - Unable to find element matching paginationCounterElement selector:", this.table.options.paginationCounterElement);
              }
            }
          } else {
            this.footerAppend(this.pageCounterElement);
          }
        }
        this.footerAppend(this.element);
      }
      this.page = this.table.options.paginationInitialPage;
      this.count = this.table.options.paginationButtonCount;
    }
    this.mode = this.table.options.paginationMode;
  }
  initializeProgressive(mode) {
    this.initializePaginator(true);
    this.mode = "progressive_" + mode;
    this.progressiveLoad = true;
  }
  trackChanges() {
    this.dispatch("page-changed");
  }
  //calculate maximum page from number of rows
  setMaxRows(rowCount) {
    if (!rowCount) {
      this.max = 1;
    } else {
      this.max = this.size === true ? 1 : Math.ceil(rowCount / this.size);
    }
    if (this.page > this.max) {
      this.page = this.max;
    }
  }
  //reset to first page without triggering action
  reset(force) {
    if (!this.initialLoad) {
      if (this.mode == "local" || force) {
        this.page = 1;
        this.trackChanges();
      }
    }
  }
  //set the maximum page
  setMaxPage(max2) {
    max2 = parseInt(max2);
    this.max = max2 || 1;
    if (this.page > this.max) {
      this.page = this.max;
      this.trigger();
    }
  }
  //set current page number
  setPage(page) {
    switch (page) {
      case "first":
        return this.setPage(1);
      case "prev":
        return this.previousPage();
      case "next":
        return this.nextPage();
      case "last":
        return this.setPage(this.max);
    }
    page = parseInt(page);
    if (page > 0 && page <= this.max || this.mode !== "local") {
      this.page = page;
      this.trackChanges();
      return this.trigger();
    } else {
      console.warn("Pagination Error - Requested page is out of range of 1 - " + this.max + ":", page);
      return Promise.reject();
    }
  }
  setPageToRow(row) {
    var rows2 = this.displayRows(-1);
    var index2 = rows2.indexOf(row);
    if (index2 > -1) {
      var page = this.size === true ? 1 : Math.ceil((index2 + 1) / this.size);
      return this.setPage(page);
    } else {
      console.warn("Pagination Error - Requested row is not visible");
      return Promise.reject();
    }
  }
  setPageSize(size2) {
    if (size2 !== true) {
      size2 = parseInt(size2);
    }
    if (size2 > 0) {
      this.size = size2;
      this.dispatchExternal("pageSizeChanged", size2);
    }
    if (this.pageSizeSelect) {
      this.generatePageSizeSelectList();
    }
    this.trackChanges();
  }
  _setPageCounter(totalRows, size2, currentRow) {
    var content;
    if (this.pageCounter) {
      if (this.mode === "remote") {
        size2 = this.size;
        currentRow = (this.page - 1) * this.size + 1;
        totalRows = this.remoteRowCountEstimate;
      }
      content = this.pageCounter.call(this, size2, currentRow, this.page, totalRows, this.max);
      switch (typeof content) {
        case "object":
          if (content instanceof Node) {
            while (this.pageCounterElement.firstChild)
              this.pageCounterElement.removeChild(this.pageCounterElement.firstChild);
            this.pageCounterElement.appendChild(content);
          } else {
            this.pageCounterElement.innerHTML = "";
            if (content != null) {
              console.warn("Page Counter Error - Page Counter has returned a type of object, the only valid page counter object return is an instance of Node, the page counter returned:", content);
            }
          }
          break;
        case "undefined":
          this.pageCounterElement.innerHTML = "";
          break;
        default:
          this.pageCounterElement.innerHTML = content;
      }
    }
  }
  //setup the pagination buttons
  _setPageButtons() {
    let leftSize = Math.floor((this.count - 1) / 2);
    let rightSize = Math.ceil((this.count - 1) / 2);
    let min2 = this.max - this.page + leftSize + 1 < this.count ? this.max - this.count + 1 : Math.max(this.page - leftSize, 1);
    let max2 = this.page <= rightSize ? Math.min(this.count, this.max) : Math.min(this.page + rightSize, this.max);
    while (this.pagesElement.firstChild)
      this.pagesElement.removeChild(this.pagesElement.firstChild);
    if (this.page == 1) {
      this.firstBut.disabled = true;
      this.prevBut.disabled = true;
    } else {
      this.firstBut.disabled = false;
      this.prevBut.disabled = false;
    }
    if (this.page == this.max) {
      this.lastBut.disabled = true;
      this.nextBut.disabled = true;
    } else {
      this.lastBut.disabled = false;
      this.nextBut.disabled = false;
    }
    for (let i = min2; i <= max2; i++) {
      if (i > 0 && i <= this.max) {
        this.pagesElement.appendChild(this._generatePageButton(i));
      }
    }
    this.footerRedraw();
  }
  _generatePageButton(page) {
    var button = document.createElement("button");
    button.classList.add("tabulator-page");
    if (page == this.page) {
      button.classList.add("active");
    }
    button.setAttribute("type", "button");
    button.setAttribute("role", "button");
    this.langBind("pagination|page_title", (value) => {
      button.setAttribute("aria-label", value + " " + page);
      button.setAttribute("title", value + " " + page);
    });
    button.setAttribute("data-page", page);
    button.textContent = page;
    button.addEventListener("click", (e) => {
      this.setPage(page);
    });
    return button;
  }
  //previous page
  previousPage() {
    if (this.page > 1) {
      this.page--;
      this.trackChanges();
      return this.trigger();
    } else {
      console.warn("Pagination Error - Previous page would be less than page 1:", 0);
      return Promise.reject();
    }
  }
  //next page
  nextPage() {
    if (this.page < this.max) {
      this.page++;
      this.trackChanges();
      return this.trigger();
    } else {
      if (!this.progressiveLoad) {
        console.warn("Pagination Error - Next page would be greater than maximum page of " + this.max + ":", this.max + 1);
      }
      return Promise.reject();
    }
  }
  //return current page number
  getPage() {
    return this.page;
  }
  //return max page number
  getPageMax() {
    return this.max;
  }
  getPageSize(size2) {
    return this.size;
  }
  getMode() {
    return this.mode;
  }
  //return appropriate rows for current page
  getRows(data) {
    var actualRowPageSize = 0, output, start2, end2, actualStartRow;
    var actualRows = data.filter((row) => {
      return row.type === "row";
    });
    if (this.mode == "local") {
      output = [];
      this.setMaxRows(data.length);
      if (this.size === true) {
        start2 = 0;
        end2 = data.length;
      } else {
        start2 = this.size * (this.page - 1);
        end2 = start2 + parseInt(this.size);
      }
      this._setPageButtons();
      for (let i = start2; i < end2; i++) {
        let row = data[i];
        if (row) {
          output.push(row);
          if (row.type === "row") {
            if (!actualStartRow) {
              actualStartRow = row;
            }
            actualRowPageSize++;
          }
        }
      }
      this._setPageCounter(actualRows.length, actualRowPageSize, actualStartRow ? actualRows.indexOf(actualStartRow) + 1 : 0);
      return output;
    } else {
      this._setPageButtons();
      this._setPageCounter(actualRows.length);
      return data.slice(0);
    }
  }
  trigger() {
    var left2;
    switch (this.mode) {
      case "local":
        left2 = this.table.rowManager.scrollLeft;
        this.refreshData();
        this.table.rowManager.scrollHorizontal(left2);
        this.dispatchExternal("pageLoaded", this.getPage());
        return Promise.resolve();
      case "remote":
        this.dataChanging = true;
        return this.reloadData(null).finally(() => {
          this.dataChanging = false;
        });
      case "progressive_load":
      case "progressive_scroll":
        return this.reloadData(null, true);
      default:
        console.warn("Pagination Error - no such pagination mode:", this.mode);
        return Promise.reject();
    }
  }
  _parseRemoteData(data) {
    var margin;
    if (typeof data.last_page === "undefined") {
      console.warn("Remote Pagination Error - Server response missing '" + (this.options("dataReceiveParams").last_page || "last_page") + "' property");
    }
    if (data.data) {
      this.max = parseInt(data.last_page) || 1;
      this.remoteRowCountEstimate = typeof data.last_row !== "undefined" ? data.last_row : data.last_page * this.size - (this.page == data.last_page ? this.size - data.data.length : 0);
      if (this.progressiveLoad) {
        switch (this.mode) {
          case "progressive_load":
            if (this.page == 1) {
              this.table.rowManager.setData(data.data, false, this.page == 1);
            } else {
              this.table.rowManager.addRows(data.data);
            }
            if (this.page < this.max) {
              setTimeout(() => {
                this.nextPage();
              }, this.table.options.progressiveLoadDelay);
            }
            break;
          case "progressive_scroll":
            data = this.page === 1 ? data.data : this.table.rowManager.getData().concat(data.data);
            this.table.rowManager.setData(data, this.page !== 1, this.page == 1);
            margin = this.table.options.progressiveLoadScrollMargin || this.table.rowManager.element.clientHeight * 2;
            if (this.table.rowManager.element.scrollHeight <= this.table.rowManager.element.clientHeight + margin) {
              if (this.page < this.max) {
                setTimeout(() => {
                  this.nextPage();
                });
              }
            }
            break;
        }
        return false;
      } else {
        this.dispatchExternal("pageLoaded", this.getPage());
      }
    } else {
      console.warn("Remote Pagination Error - Server response missing '" + (this.options("dataReceiveParams").data || "data") + "' property");
    }
    return data.data;
  }
  //handle the footer element being redrawn
  footerRedraw() {
    var footer = this.table.footerManager.containerElement;
    if (Math.ceil(footer.clientWidth) - footer.scrollWidth < 0) {
      this.pagesElement.style.display = "none";
    } else {
      this.pagesElement.style.display = "";
      if (Math.ceil(footer.clientWidth) - footer.scrollWidth < 0) {
        this.pagesElement.style.display = "none";
      }
    }
  }
}
Page.moduleName = "page";
Page.pageCounters = defaultPageCounters;
var defaultReaders = {
  local: function(id, type) {
    var data = localStorage.getItem(id + "-" + type);
    return data ? JSON.parse(data) : false;
  },
  cookie: function(id, type) {
    var cookie = document.cookie, key = id + "-" + type, cookiePos = cookie.indexOf(key + "="), end2, data;
    if (cookiePos > -1) {
      cookie = cookie.slice(cookiePos);
      end2 = cookie.indexOf(";");
      if (end2 > -1) {
        cookie = cookie.slice(0, end2);
      }
      data = cookie.replace(key + "=", "");
    }
    return data ? JSON.parse(data) : false;
  }
};
var defaultWriters = {
  local: function(id, type, data) {
    localStorage.setItem(id + "-" + type, JSON.stringify(data));
  },
  cookie: function(id, type, data) {
    var expireDate = /* @__PURE__ */ new Date();
    expireDate.setDate(expireDate.getDate() + 1e4);
    document.cookie = id + "-" + type + "=" + JSON.stringify(data) + "; expires=" + expireDate.toUTCString();
  }
};
class Persistence extends Module {
  constructor(table) {
    super(table);
    this.mode = "";
    this.id = "";
    this.defWatcherBlock = false;
    this.config = {};
    this.readFunc = false;
    this.writeFunc = false;
    this.registerTableOption("persistence", false);
    this.registerTableOption("persistenceID", "");
    this.registerTableOption("persistenceMode", true);
    this.registerTableOption("persistenceReaderFunc", false);
    this.registerTableOption("persistenceWriterFunc", false);
  }
  // Test for whether localStorage is available for use.
  localStorageTest() {
    var testKey = "_tabulator_test";
    try {
      window.localStorage.setItem(testKey, testKey);
      window.localStorage.removeItem(testKey);
      return true;
    } catch (e) {
      return false;
    }
  }
  //setup parameters
  initialize() {
    if (this.table.options.persistence) {
      var mode = this.table.options.persistenceMode, id = this.table.options.persistenceID, retrievedData;
      this.mode = mode !== true ? mode : this.localStorageTest() ? "local" : "cookie";
      if (this.table.options.persistenceReaderFunc) {
        if (typeof this.table.options.persistenceReaderFunc === "function") {
          this.readFunc = this.table.options.persistenceReaderFunc;
        } else {
          if (Persistence.readers[this.table.options.persistenceReaderFunc]) {
            this.readFunc = Persistence.readers[this.table.options.persistenceReaderFunc];
          } else {
            console.warn("Persistence Read Error - invalid reader set", this.table.options.persistenceReaderFunc);
          }
        }
      } else {
        if (Persistence.readers[this.mode]) {
          this.readFunc = Persistence.readers[this.mode];
        } else {
          console.warn("Persistence Read Error - invalid reader set", this.mode);
        }
      }
      if (this.table.options.persistenceWriterFunc) {
        if (typeof this.table.options.persistenceWriterFunc === "function") {
          this.writeFunc = this.table.options.persistenceWriterFunc;
        } else {
          if (Persistence.writers[this.table.options.persistenceWriterFunc]) {
            this.writeFunc = Persistence.writers[this.table.options.persistenceWriterFunc];
          } else {
            console.warn("Persistence Write Error - invalid reader set", this.table.options.persistenceWriterFunc);
          }
        }
      } else {
        if (Persistence.writers[this.mode]) {
          this.writeFunc = Persistence.writers[this.mode];
        } else {
          console.warn("Persistence Write Error - invalid writer set", this.mode);
        }
      }
      this.id = "tabulator-" + (id || (this.table.element.getAttribute("id") || ""));
      this.config = {
        sort: this.table.options.persistence === true || this.table.options.persistence.sort,
        filter: this.table.options.persistence === true || this.table.options.persistence.filter,
        group: this.table.options.persistence === true || this.table.options.persistence.group,
        page: this.table.options.persistence === true || this.table.options.persistence.page,
        columns: this.table.options.persistence === true ? ["title", "width", "visible"] : this.table.options.persistence.columns
      };
      if (this.config.page) {
        retrievedData = this.retrieveData("page");
        if (retrievedData) {
          if (typeof retrievedData.paginationSize !== "undefined" && (this.config.page === true || this.config.page.size)) {
            this.table.options.paginationSize = retrievedData.paginationSize;
          }
          if (typeof retrievedData.paginationInitialPage !== "undefined" && (this.config.page === true || this.config.page.page)) {
            this.table.options.paginationInitialPage = retrievedData.paginationInitialPage;
          }
        }
      }
      if (this.config.group) {
        retrievedData = this.retrieveData("group");
        if (retrievedData) {
          if (typeof retrievedData.groupBy !== "undefined" && (this.config.group === true || this.config.group.groupBy)) {
            this.table.options.groupBy = retrievedData.groupBy;
          }
          if (typeof retrievedData.groupStartOpen !== "undefined" && (this.config.group === true || this.config.group.groupStartOpen)) {
            this.table.options.groupStartOpen = retrievedData.groupStartOpen;
          }
          if (typeof retrievedData.groupHeader !== "undefined" && (this.config.group === true || this.config.group.groupHeader)) {
            this.table.options.groupHeader = retrievedData.groupHeader;
          }
        }
      }
      if (this.config.columns) {
        this.table.options.columns = this.load("columns", this.table.options.columns);
        this.subscribe("column-init", this.initializeColumn.bind(this));
        this.subscribe("column-show", this.save.bind(this, "columns"));
        this.subscribe("column-hide", this.save.bind(this, "columns"));
        this.subscribe("column-moved", this.save.bind(this, "columns"));
      }
      this.subscribe("table-built", this.tableBuilt.bind(this), 0);
      this.subscribe("table-redraw", this.tableRedraw.bind(this));
      this.subscribe("filter-changed", this.eventSave.bind(this, "filter"));
      this.subscribe("sort-changed", this.eventSave.bind(this, "sort"));
      this.subscribe("group-changed", this.eventSave.bind(this, "group"));
      this.subscribe("page-changed", this.eventSave.bind(this, "page"));
      this.subscribe("column-resized", this.eventSave.bind(this, "columns"));
      this.subscribe("column-width", this.eventSave.bind(this, "columns"));
      this.subscribe("layout-refreshed", this.eventSave.bind(this, "columns"));
    }
    this.registerTableFunction("getColumnLayout", this.getColumnLayout.bind(this));
    this.registerTableFunction("setColumnLayout", this.setColumnLayout.bind(this));
  }
  eventSave(type) {
    if (this.config[type]) {
      this.save(type);
    }
  }
  tableBuilt() {
    var sorters, filters;
    if (this.config.sort) {
      sorters = this.load("sort");
      if (!sorters === false) {
        this.table.options.initialSort = sorters;
      }
    }
    if (this.config.filter) {
      filters = this.load("filter");
      if (!filters === false) {
        this.table.options.initialFilter = filters;
      }
    }
  }
  tableRedraw(force) {
    if (force && this.config.columns) {
      this.save("columns");
    }
  }
  ///////////////////////////////////
  ///////// Table Functions /////////
  ///////////////////////////////////
  getColumnLayout() {
    return this.parseColumns(this.table.columnManager.getColumns());
  }
  setColumnLayout(layout) {
    this.table.columnManager.setColumns(this.mergeDefinition(this.table.options.columns, layout));
    return true;
  }
  ///////////////////////////////////
  ///////// Internal Logic //////////
  ///////////////////////////////////
  initializeColumn(column) {
    var def2, keys2;
    if (this.config.columns) {
      this.defWatcherBlock = true;
      def2 = column.getDefinition();
      keys2 = this.config.columns === true ? Object.keys(def2) : this.config.columns;
      keys2.forEach((key) => {
        var props = Object.getOwnPropertyDescriptor(def2, key);
        var value = def2[key];
        if (props) {
          Object.defineProperty(def2, key, {
            set: (newValue) => {
              value = newValue;
              if (!this.defWatcherBlock) {
                this.save("columns");
              }
              if (props.set) {
                props.set(newValue);
              }
            },
            get: () => {
              if (props.get) {
                props.get();
              }
              return value;
            }
          });
        }
      });
      this.defWatcherBlock = false;
    }
  }
  //load saved definitions
  load(type, current) {
    var data = this.retrieveData(type);
    if (current) {
      data = data ? this.mergeDefinition(current, data) : current;
    }
    return data;
  }
  //retrieve data from memory
  retrieveData(type) {
    return this.readFunc ? this.readFunc(this.id, type) : false;
  }
  //merge old and new column definitions
  mergeDefinition(oldCols, newCols) {
    var output = [];
    newCols = newCols || [];
    newCols.forEach((column, to2) => {
      var from2 = this._findColumn(oldCols, column), keys2;
      if (from2) {
        if (this.config.columns === true || this.config.columns == void 0) {
          keys2 = Object.keys(from2);
          keys2.push("width");
        } else {
          keys2 = this.config.columns;
        }
        keys2.forEach((key) => {
          if (key !== "columns" && typeof column[key] !== "undefined") {
            from2[key] = column[key];
          }
        });
        if (from2.columns) {
          from2.columns = this.mergeDefinition(from2.columns, column.columns);
        }
        output.push(from2);
      }
    });
    oldCols.forEach((column, i) => {
      var from2 = this._findColumn(newCols, column);
      if (!from2) {
        if (output.length > i) {
          output.splice(i, 0, column);
        } else {
          output.push(column);
        }
      }
    });
    return output;
  }
  //find matching columns
  _findColumn(columns, subject) {
    var type = subject.columns ? "group" : subject.field ? "field" : "object";
    return columns.find(function(col) {
      switch (type) {
        case "group":
          return col.title === subject.title && col.columns.length === subject.columns.length;
        case "field":
          return col.field === subject.field;
        case "object":
          return col === subject;
      }
    });
  }
  //save data
  save(type) {
    var data = {};
    switch (type) {
      case "columns":
        data = this.parseColumns(this.table.columnManager.getColumns());
        break;
      case "filter":
        data = this.table.modules.filter.getFilters();
        break;
      case "sort":
        data = this.validateSorters(this.table.modules.sort.getSort());
        break;
      case "group":
        data = this.getGroupConfig();
        break;
      case "page":
        data = this.getPageConfig();
        break;
    }
    if (this.writeFunc) {
      this.writeFunc(this.id, type, data);
    }
  }
  //ensure sorters contain no function data
  validateSorters(data) {
    data.forEach(function(item) {
      item.column = item.field;
      delete item.field;
    });
    return data;
  }
  getGroupConfig() {
    var data = {};
    if (this.config.group) {
      if (this.config.group === true || this.config.group.groupBy) {
        data.groupBy = this.table.options.groupBy;
      }
      if (this.config.group === true || this.config.group.groupStartOpen) {
        data.groupStartOpen = this.table.options.groupStartOpen;
      }
      if (this.config.group === true || this.config.group.groupHeader) {
        data.groupHeader = this.table.options.groupHeader;
      }
    }
    return data;
  }
  getPageConfig() {
    var data = {};
    if (this.config.page) {
      if (this.config.page === true || this.config.page.size) {
        data.paginationSize = this.table.modules.page.getPageSize();
      }
      if (this.config.page === true || this.config.page.page) {
        data.paginationInitialPage = this.table.modules.page.getPage();
      }
    }
    return data;
  }
  //parse columns for data to store
  parseColumns(columns) {
    var definitions = [], excludedKeys = ["headerContextMenu", "headerMenu", "contextMenu", "clickMenu"];
    columns.forEach((column) => {
      var defStore = {}, colDef = column.getDefinition(), keys2;
      if (column.isGroup) {
        defStore.title = colDef.title;
        defStore.columns = this.parseColumns(column.getColumns());
      } else {
        defStore.field = column.getField();
        if (this.config.columns === true || this.config.columns == void 0) {
          keys2 = Object.keys(colDef);
          keys2.push("width");
          keys2.push("visible");
        } else {
          keys2 = this.config.columns;
        }
        keys2.forEach((key) => {
          switch (key) {
            case "width":
              defStore.width = column.getWidth();
              break;
            case "visible":
              defStore.visible = column.visible;
              break;
            default:
              if (typeof colDef[key] !== "function" && excludedKeys.indexOf(key) === -1) {
                defStore[key] = colDef[key];
              }
          }
        });
      }
      definitions.push(defStore);
    });
    return definitions;
  }
}
Persistence.moduleName = "persistence";
Persistence.moduleInitOrder = -10;
Persistence.readers = defaultReaders;
Persistence.writers = defaultWriters;
class Popup$1 extends Module {
  constructor(table) {
    super(table);
    this.columnSubscribers = {};
    this.registerTableOption("rowContextPopup", false);
    this.registerTableOption("rowClickPopup", false);
    this.registerTableOption("rowDblClickPopup", false);
    this.registerTableOption("groupContextPopup", false);
    this.registerTableOption("groupClickPopup", false);
    this.registerTableOption("groupDblClickPopup", false);
    this.registerColumnOption("headerContextPopup");
    this.registerColumnOption("headerClickPopup");
    this.registerColumnOption("headerDblClickPopup");
    this.registerColumnOption("headerPopup");
    this.registerColumnOption("headerPopupIcon");
    this.registerColumnOption("contextPopup");
    this.registerColumnOption("clickPopup");
    this.registerColumnOption("dblClickPopup");
    this.registerComponentFunction("cell", "popup", this._componentPopupCall.bind(this));
    this.registerComponentFunction("column", "popup", this._componentPopupCall.bind(this));
    this.registerComponentFunction("row", "popup", this._componentPopupCall.bind(this));
    this.registerComponentFunction("group", "popup", this._componentPopupCall.bind(this));
  }
  initialize() {
    this.initializeRowWatchers();
    this.initializeGroupWatchers();
    this.subscribe("column-init", this.initializeColumn.bind(this));
  }
  _componentPopupCall(component, contents, position) {
    this.loadPopupEvent(contents, null, component, position);
  }
  initializeRowWatchers() {
    if (this.table.options.rowContextPopup) {
      this.subscribe("row-contextmenu", this.loadPopupEvent.bind(this, this.table.options.rowContextPopup));
      this.table.on("rowTapHold", this.loadPopupEvent.bind(this, this.table.options.rowContextPopup));
    }
    if (this.table.options.rowClickPopup) {
      this.subscribe("row-click", this.loadPopupEvent.bind(this, this.table.options.rowClickPopup));
    }
    if (this.table.options.rowDblClickPopup) {
      this.subscribe("row-dblclick", this.loadPopupEvent.bind(this, this.table.options.rowDblClickPopup));
    }
  }
  initializeGroupWatchers() {
    if (this.table.options.groupContextPopup) {
      this.subscribe("group-contextmenu", this.loadPopupEvent.bind(this, this.table.options.groupContextPopup));
      this.table.on("groupTapHold", this.loadPopupEvent.bind(this, this.table.options.groupContextPopup));
    }
    if (this.table.options.groupClickPopup) {
      this.subscribe("group-click", this.loadPopupEvent.bind(this, this.table.options.groupClickPopup));
    }
    if (this.table.options.groupDblClickPopup) {
      this.subscribe("group-dblclick", this.loadPopupEvent.bind(this, this.table.options.groupDblClickPopup));
    }
  }
  initializeColumn(column) {
    var def2 = column.definition;
    if (def2.headerContextPopup && !this.columnSubscribers.headerContextPopup) {
      this.columnSubscribers.headerContextPopup = this.loadPopupTableColumnEvent.bind(this, "headerContextPopup");
      this.subscribe("column-contextmenu", this.columnSubscribers.headerContextPopup);
      this.table.on("headerTapHold", this.loadPopupTableColumnEvent.bind(this, "headerContextPopup"));
    }
    if (def2.headerClickPopup && !this.columnSubscribers.headerClickPopup) {
      this.columnSubscribers.headerClickPopup = this.loadPopupTableColumnEvent.bind(this, "headerClickPopup");
      this.subscribe("column-click", this.columnSubscribers.headerClickPopup);
    }
    if (def2.headerDblClickPopup && !this.columnSubscribers.headerDblClickPopup) {
      this.columnSubscribers.headerDblClickPopup = this.loadPopupTableColumnEvent.bind(this, "headerDblClickPopup");
      this.subscribe("column-dblclick", this.columnSubscribers.headerDblClickPopup);
    }
    if (def2.headerPopup) {
      this.initializeColumnHeaderPopup(column);
    }
    if (def2.contextPopup && !this.columnSubscribers.contextPopup) {
      this.columnSubscribers.contextPopup = this.loadPopupTableCellEvent.bind(this, "contextPopup");
      this.subscribe("cell-contextmenu", this.columnSubscribers.contextPopup);
      this.table.on("cellTapHold", this.loadPopupTableCellEvent.bind(this, "contextPopup"));
    }
    if (def2.clickPopup && !this.columnSubscribers.clickPopup) {
      this.columnSubscribers.clickPopup = this.loadPopupTableCellEvent.bind(this, "clickPopup");
      this.subscribe("cell-click", this.columnSubscribers.clickPopup);
    }
    if (def2.dblClickPopup && !this.columnSubscribers.dblClickPopup) {
      this.columnSubscribers.dblClickPopup = this.loadPopupTableCellEvent.bind(this, "dblClickPopup");
      this.subscribe("cell-click", this.columnSubscribers.dblClickPopup);
    }
  }
  initializeColumnHeaderPopup(column) {
    var icon = column.definition.headerPopupIcon, headerPopupEl;
    headerPopupEl = document.createElement("span");
    headerPopupEl.classList.add("tabulator-header-popup-button");
    if (icon) {
      if (typeof icon === "function") {
        icon = icon(column.getComponent());
      }
      if (icon instanceof HTMLElement) {
        headerPopupEl.appendChild(icon);
      } else {
        headerPopupEl.innerHTML = icon;
      }
    } else {
      headerPopupEl.innerHTML = "&vellip;";
    }
    headerPopupEl.addEventListener("click", (e) => {
      e.stopPropagation();
      e.preventDefault();
      this.loadPopupEvent(column.definition.headerPopup, e, column);
    });
    column.titleElement.insertBefore(headerPopupEl, column.titleElement.firstChild);
  }
  loadPopupTableCellEvent(option, e, cell) {
    if (cell._cell) {
      cell = cell._cell;
    }
    if (cell.column.definition[option]) {
      this.loadPopupEvent(cell.column.definition[option], e, cell);
    }
  }
  loadPopupTableColumnEvent(option, e, column) {
    if (column._column) {
      column = column._column;
    }
    if (column.definition[option]) {
      this.loadPopupEvent(column.definition[option], e, column);
    }
  }
  loadPopupEvent(contents, e, component, position) {
    var renderedCallback;
    function onRendered(callback) {
      renderedCallback = callback;
    }
    if (component._group) {
      component = component._group;
    } else if (component._row) {
      component = component._row;
    }
    contents = typeof contents == "function" ? contents.call(this.table, e, component.getComponent(), onRendered) : contents;
    this.loadPopup(e, component, contents, renderedCallback, position);
  }
  loadPopup(e, component, contents, renderedCallback, position) {
    var touch = !(e instanceof MouseEvent), contentsEl, popup;
    if (contents instanceof HTMLElement) {
      contentsEl = contents;
    } else {
      contentsEl = document.createElement("div");
      contentsEl.innerHTML = contents;
    }
    contentsEl.classList.add("tabulator-popup");
    contentsEl.addEventListener("click", (e2) => {
      e2.stopPropagation();
    });
    if (!touch) {
      e.preventDefault();
    }
    popup = this.popup(contentsEl);
    if (typeof renderedCallback === "function") {
      popup.renderCallback(renderedCallback);
    }
    if (e) {
      popup.show(e);
    } else {
      popup.show(component.getElement(), position || "center");
    }
    popup.hideOnBlur(() => {
      this.dispatchExternal("popupClosed", component.getComponent());
    });
    this.dispatchExternal("popupOpened", component.getComponent());
  }
}
Popup$1.moduleName = "popup";
class Print extends Module {
  constructor(table) {
    super(table);
    this.element = false;
    this.manualBlock = false;
    this.beforeprintEventHandler = null;
    this.afterprintEventHandler = null;
    this.registerTableOption("printAsHtml", false);
    this.registerTableOption("printFormatter", false);
    this.registerTableOption("printHeader", false);
    this.registerTableOption("printFooter", false);
    this.registerTableOption("printStyled", true);
    this.registerTableOption("printRowRange", "visible");
    this.registerTableOption("printConfig", {});
    this.registerColumnOption("print");
    this.registerColumnOption("titlePrint");
  }
  initialize() {
    if (this.table.options.printAsHtml) {
      this.beforeprintEventHandler = this.replaceTable.bind(this);
      this.afterprintEventHandler = this.cleanup.bind(this);
      window.addEventListener("beforeprint", this.beforeprintEventHandler);
      window.addEventListener("afterprint", this.afterprintEventHandler);
      this.subscribe("table-destroy", this.destroy.bind(this));
    }
    this.registerTableFunction("print", this.printFullscreen.bind(this));
  }
  destroy() {
    if (this.table.options.printAsHtml) {
      window.removeEventListener("beforeprint", this.beforeprintEventHandler);
      window.removeEventListener("afterprint", this.afterprintEventHandler);
    }
  }
  ///////////////////////////////////
  ///////// Table Functions /////////
  ///////////////////////////////////
  ///////////////////////////////////
  ///////// Internal Logic //////////
  ///////////////////////////////////
  replaceTable() {
    if (!this.manualBlock) {
      this.element = document.createElement("div");
      this.element.classList.add("tabulator-print-table");
      this.element.appendChild(this.table.modules.export.generateTable(this.table.options.printConfig, this.table.options.printStyled, this.table.options.printRowRange, "print"));
      this.table.element.style.display = "none";
      this.table.element.parentNode.insertBefore(this.element, this.table.element);
    }
  }
  cleanup() {
    document.body.classList.remove("tabulator-print-fullscreen-hide");
    if (this.element && this.element.parentNode) {
      this.element.parentNode.removeChild(this.element);
      this.table.element.style.display = "";
    }
  }
  printFullscreen(visible, style, config) {
    var scrollX = window.scrollX, scrollY = window.scrollY, headerEl = document.createElement("div"), footerEl = document.createElement("div"), tableEl = this.table.modules.export.generateTable(typeof config != "undefined" ? config : this.table.options.printConfig, typeof style != "undefined" ? style : this.table.options.printStyled, visible || this.table.options.printRowRange, "print"), headerContent, footerContent;
    this.manualBlock = true;
    this.element = document.createElement("div");
    this.element.classList.add("tabulator-print-fullscreen");
    if (this.table.options.printHeader) {
      headerEl.classList.add("tabulator-print-header");
      headerContent = typeof this.table.options.printHeader == "function" ? this.table.options.printHeader.call(this.table) : this.table.options.printHeader;
      if (typeof headerContent == "string") {
        headerEl.innerHTML = headerContent;
      } else {
        headerEl.appendChild(headerContent);
      }
      this.element.appendChild(headerEl);
    }
    this.element.appendChild(tableEl);
    if (this.table.options.printFooter) {
      footerEl.classList.add("tabulator-print-footer");
      footerContent = typeof this.table.options.printFooter == "function" ? this.table.options.printFooter.call(this.table) : this.table.options.printFooter;
      if (typeof footerContent == "string") {
        footerEl.innerHTML = footerContent;
      } else {
        footerEl.appendChild(footerContent);
      }
      this.element.appendChild(footerEl);
    }
    document.body.classList.add("tabulator-print-fullscreen-hide");
    document.body.appendChild(this.element);
    if (this.table.options.printFormatter) {
      this.table.options.printFormatter(this.element, tableEl);
    }
    window.print();
    this.cleanup();
    window.scrollTo(scrollX, scrollY);
    this.manualBlock = false;
  }
}
Print.moduleName = "print";
class ReactiveData extends Module {
  constructor(table) {
    super(table);
    this.data = false;
    this.blocked = false;
    this.origFuncs = {};
    this.currentVersion = 0;
    this.registerTableOption("reactiveData", false);
  }
  initialize() {
    if (this.table.options.reactiveData) {
      this.subscribe("cell-value-save-before", this.block.bind(this, "cellsave"));
      this.subscribe("cell-value-save-after", this.unblock.bind(this, "cellsave"));
      this.subscribe("row-data-save-before", this.block.bind(this, "rowsave"));
      this.subscribe("row-data-save-after", this.unblock.bind(this, "rowsave"));
      this.subscribe("row-data-init-after", this.watchRow.bind(this));
      this.subscribe("data-processing", this.watchData.bind(this));
      this.subscribe("table-destroy", this.unwatchData.bind(this));
    }
  }
  watchData(data) {
    var self2 = this, version2;
    this.currentVersion++;
    version2 = this.currentVersion;
    this.unwatchData();
    this.data = data;
    this.origFuncs.push = data.push;
    Object.defineProperty(this.data, "push", {
      enumerable: false,
      configurable: true,
      value: function() {
        var args = Array.from(arguments), result;
        if (!self2.blocked && version2 === self2.currentVersion) {
          self2.block("data-push");
          args.forEach((arg) => {
            self2.table.rowManager.addRowActual(arg, false);
          });
          result = self2.origFuncs.push.apply(data, arguments);
          self2.unblock("data-push");
        }
        return result;
      }
    });
    this.origFuncs.unshift = data.unshift;
    Object.defineProperty(this.data, "unshift", {
      enumerable: false,
      configurable: true,
      value: function() {
        var args = Array.from(arguments), result;
        if (!self2.blocked && version2 === self2.currentVersion) {
          self2.block("data-unshift");
          args.forEach((arg) => {
            self2.table.rowManager.addRowActual(arg, true);
          });
          result = self2.origFuncs.unshift.apply(data, arguments);
          self2.unblock("data-unshift");
        }
        return result;
      }
    });
    this.origFuncs.shift = data.shift;
    Object.defineProperty(this.data, "shift", {
      enumerable: false,
      configurable: true,
      value: function() {
        var row, result;
        if (!self2.blocked && version2 === self2.currentVersion) {
          self2.block("data-shift");
          if (self2.data.length) {
            row = self2.table.rowManager.getRowFromDataObject(self2.data[0]);
            if (row) {
              row.deleteActual();
            }
          }
          result = self2.origFuncs.shift.call(data);
          self2.unblock("data-shift");
        }
        return result;
      }
    });
    this.origFuncs.pop = data.pop;
    Object.defineProperty(this.data, "pop", {
      enumerable: false,
      configurable: true,
      value: function() {
        var row, result;
        if (!self2.blocked && version2 === self2.currentVersion) {
          self2.block("data-pop");
          if (self2.data.length) {
            row = self2.table.rowManager.getRowFromDataObject(self2.data[self2.data.length - 1]);
            if (row) {
              row.deleteActual();
            }
          }
          result = self2.origFuncs.pop.call(data);
          self2.unblock("data-pop");
        }
        return result;
      }
    });
    this.origFuncs.splice = data.splice;
    Object.defineProperty(this.data, "splice", {
      enumerable: false,
      configurable: true,
      value: function() {
        var args = Array.from(arguments), start2 = args[0] < 0 ? data.length + args[0] : args[0], end2 = args[1], newRows = args[2] ? args.slice(2) : false, startRow, result;
        if (!self2.blocked && version2 === self2.currentVersion) {
          self2.block("data-splice");
          if (newRows) {
            startRow = data[start2] ? self2.table.rowManager.getRowFromDataObject(data[start2]) : false;
            if (startRow) {
              newRows.forEach((rowData) => {
                self2.table.rowManager.addRowActual(rowData, true, startRow, true);
              });
            } else {
              newRows = newRows.slice().reverse();
              newRows.forEach((rowData) => {
                self2.table.rowManager.addRowActual(rowData, true, false, true);
              });
            }
          }
          if (end2 !== 0) {
            var oldRows = data.slice(start2, typeof args[1] === "undefined" ? args[1] : start2 + end2);
            oldRows.forEach((rowData, i) => {
              var row = self2.table.rowManager.getRowFromDataObject(rowData);
              if (row) {
                row.deleteActual(i !== oldRows.length - 1);
              }
            });
          }
          if (newRows || end2 !== 0) {
            self2.table.rowManager.reRenderInPosition();
          }
          result = self2.origFuncs.splice.apply(data, arguments);
          self2.unblock("data-splice");
        }
        return result;
      }
    });
  }
  unwatchData() {
    if (this.data !== false) {
      for (var key in this.origFuncs) {
        Object.defineProperty(this.data, key, {
          enumerable: true,
          configurable: true,
          writable: true,
          value: this.origFuncs.key
        });
      }
    }
  }
  watchRow(row) {
    var data = row.getData();
    for (var key in data) {
      this.watchKey(row, data, key);
    }
    if (this.table.options.dataTree) {
      this.watchTreeChildren(row);
    }
  }
  watchTreeChildren(row) {
    var self2 = this, childField = row.getData()[this.table.options.dataTreeChildField], origFuncs = {};
    if (childField) {
      origFuncs.push = childField.push;
      Object.defineProperty(childField, "push", {
        enumerable: false,
        configurable: true,
        value: () => {
          if (!self2.blocked) {
            self2.block("tree-push");
            var result = origFuncs.push.apply(childField, arguments);
            this.rebuildTree(row);
            self2.unblock("tree-push");
          }
          return result;
        }
      });
      origFuncs.unshift = childField.unshift;
      Object.defineProperty(childField, "unshift", {
        enumerable: false,
        configurable: true,
        value: () => {
          if (!self2.blocked) {
            self2.block("tree-unshift");
            var result = origFuncs.unshift.apply(childField, arguments);
            this.rebuildTree(row);
            self2.unblock("tree-unshift");
          }
          return result;
        }
      });
      origFuncs.shift = childField.shift;
      Object.defineProperty(childField, "shift", {
        enumerable: false,
        configurable: true,
        value: () => {
          if (!self2.blocked) {
            self2.block("tree-shift");
            var result = origFuncs.shift.call(childField);
            this.rebuildTree(row);
            self2.unblock("tree-shift");
          }
          return result;
        }
      });
      origFuncs.pop = childField.pop;
      Object.defineProperty(childField, "pop", {
        enumerable: false,
        configurable: true,
        value: () => {
          if (!self2.blocked) {
            self2.block("tree-pop");
            var result = origFuncs.pop.call(childField);
            this.rebuildTree(row);
            self2.unblock("tree-pop");
          }
          return result;
        }
      });
      origFuncs.splice = childField.splice;
      Object.defineProperty(childField, "splice", {
        enumerable: false,
        configurable: true,
        value: () => {
          if (!self2.blocked) {
            self2.block("tree-splice");
            var result = origFuncs.splice.apply(childField, arguments);
            this.rebuildTree(row);
            self2.unblock("tree-splice");
          }
          return result;
        }
      });
    }
  }
  rebuildTree(row) {
    this.table.modules.dataTree.initializeRow(row);
    this.table.modules.dataTree.layoutRow(row);
    this.table.rowManager.refreshActiveData("tree", false, true);
  }
  watchKey(row, data, key) {
    var self2 = this, props = Object.getOwnPropertyDescriptor(data, key), value = data[key], version2 = this.currentVersion;
    Object.defineProperty(data, key, {
      set: (newValue) => {
        value = newValue;
        if (!self2.blocked && version2 === self2.currentVersion) {
          self2.block("key");
          var update = {};
          update[key] = newValue;
          row.updateData(update);
          self2.unblock("key");
        }
        if (props.set) {
          props.set(newValue);
        }
      },
      get: () => {
        if (props.get) {
          props.get();
        }
        return value;
      }
    });
  }
  unwatchRow(row) {
    var data = row.getData();
    for (var key in data) {
      Object.defineProperty(data, key, {
        value: data[key]
      });
    }
  }
  block(key) {
    if (!this.blocked) {
      this.blocked = key;
    }
  }
  unblock(key) {
    if (this.blocked === key) {
      this.blocked = false;
    }
  }
}
ReactiveData.moduleName = "reactiveData";
class ResizeColumns extends Module {
  constructor(table) {
    super(table);
    this.startColumn = false;
    this.startX = false;
    this.startWidth = false;
    this.latestX = false;
    this.handle = null;
    this.initialNextColumn = null;
    this.nextColumn = null;
    this.initialized = false;
    this.registerColumnOption("resizable", true);
    this.registerTableOption("resizableColumnFit", false);
  }
  initialize() {
    this.subscribe("column-rendered", this.layoutColumnHeader.bind(this));
  }
  initializeEventWatchers() {
    if (!this.initialized) {
      this.subscribe("cell-rendered", this.layoutCellHandles.bind(this));
      this.subscribe("cell-delete", this.deInitializeComponent.bind(this));
      this.subscribe("cell-height", this.resizeHandle.bind(this));
      this.subscribe("column-moved", this.columnLayoutUpdated.bind(this));
      this.subscribe("column-hide", this.deInitializeColumn.bind(this));
      this.subscribe("column-show", this.columnLayoutUpdated.bind(this));
      this.subscribe("column-width", this.columnWidthUpdated.bind(this));
      this.subscribe("column-delete", this.deInitializeComponent.bind(this));
      this.subscribe("column-height", this.resizeHandle.bind(this));
      this.initialized = true;
    }
  }
  layoutCellHandles(cell) {
    if (cell.row.type === "row") {
      this.deInitializeComponent(cell);
      this.initializeColumn("cell", cell, cell.column, cell.element);
    }
  }
  layoutColumnHeader(column) {
    if (column.definition.resizable) {
      this.initializeEventWatchers();
      this.deInitializeComponent(column);
      this.initializeColumn("header", column, column, column.element);
    }
  }
  columnLayoutUpdated(column) {
    var prev = column.prevColumn();
    this.reinitializeColumn(column);
    if (prev) {
      this.reinitializeColumn(prev);
    }
  }
  columnWidthUpdated(column) {
    if (column.modules.frozen) {
      if (this.table.modules.frozenColumns.leftColumns.includes(column)) {
        this.table.modules.frozenColumns.leftColumns.forEach((col) => {
          this.reinitializeColumn(col);
        });
      } else if (this.table.modules.frozenColumns.rightColumns.includes(column)) {
        this.table.modules.frozenColumns.rightColumns.forEach((col) => {
          this.reinitializeColumn(col);
        });
      }
    }
  }
  frozenColumnOffset(column) {
    var offset2 = false;
    if (column.modules.frozen) {
      offset2 = column.modules.frozen.marginValue;
      if (column.modules.frozen.position === "left") {
        offset2 += column.getWidth() - 3;
      } else {
        if (offset2) {
          offset2 -= 3;
        }
      }
    }
    return offset2 !== false ? offset2 + "px" : false;
  }
  reinitializeColumn(column) {
    var frozenOffset = this.frozenColumnOffset(column);
    column.cells.forEach((cell) => {
      if (cell.modules.resize && cell.modules.resize.handleEl) {
        if (frozenOffset) {
          cell.modules.resize.handleEl.style[column.modules.frozen.position] = frozenOffset;
        }
        cell.element.after(cell.modules.resize.handleEl);
      }
    });
    if (column.modules.resize && column.modules.resize.handleEl) {
      if (frozenOffset) {
        column.modules.resize.handleEl.style[column.modules.frozen.position] = frozenOffset;
      }
      column.element.after(column.modules.resize.handleEl);
    }
  }
  initializeColumn(type, component, column, element) {
    var self2 = this, variableHeight = false, mode = column.definition.resizable, config = {}, nearestColumn = column.getLastColumn();
    if (type === "header") {
      variableHeight = column.definition.formatter == "textarea" || column.definition.variableHeight;
      config = { variableHeight };
    }
    if ((mode === true || mode == type) && this._checkResizability(nearestColumn)) {
      var handle2 = document.createElement("span");
      handle2.className = "tabulator-col-resize-handle";
      handle2.addEventListener("click", function(e) {
        e.stopPropagation();
      });
      var handleDown = function(e) {
        self2.startColumn = column;
        self2.initialNextColumn = self2.nextColumn = nearestColumn.nextColumn();
        self2._mouseDown(e, nearestColumn, handle2);
      };
      handle2.addEventListener("mousedown", handleDown);
      handle2.addEventListener("touchstart", handleDown, { passive: true });
      handle2.addEventListener("dblclick", (e) => {
        var oldWidth = nearestColumn.getWidth();
        e.stopPropagation();
        nearestColumn.reinitializeWidth(true);
        if (oldWidth !== nearestColumn.getWidth()) {
          self2.dispatch("column-resized", nearestColumn);
          self2.table.externalEvents.dispatch("columnResized", nearestColumn.getComponent());
        }
      });
      if (column.modules.frozen) {
        handle2.style.position = "sticky";
        handle2.style[column.modules.frozen.position] = this.frozenColumnOffset(column);
      }
      config.handleEl = handle2;
      if (element.parentNode && column.visible) {
        element.after(handle2);
      }
    }
    component.modules.resize = config;
  }
  deInitializeColumn(column) {
    this.deInitializeComponent(column);
    column.cells.forEach((cell) => {
      this.deInitializeComponent(cell);
    });
  }
  deInitializeComponent(component) {
    var handleEl;
    if (component.modules.resize) {
      handleEl = component.modules.resize.handleEl;
      if (handleEl && handleEl.parentElement) {
        handleEl.parentElement.removeChild(handleEl);
      }
    }
  }
  resizeHandle(component, height) {
    if (component.modules.resize && component.modules.resize.handleEl) {
      component.modules.resize.handleEl.style.height = height;
    }
  }
  _checkResizability(column) {
    return column.definition.resizable;
  }
  _mouseDown(e, column, handle2) {
    var self2 = this;
    self2.table.element.classList.add("tabulator-block-select");
    function mouseMove(e2) {
      var x = typeof e2.screenX === "undefined" ? e2.touches[0].screenX : e2.screenX, startDiff = x - self2.startX, moveDiff = x - self2.latestX, blockedBefore, blockedAfter;
      self2.latestX = x;
      if (self2.table.rtl) {
        startDiff = -startDiff;
        moveDiff = -moveDiff;
      }
      blockedBefore = column.width == column.minWidth || column.width == column.maxWidth;
      column.setWidth(self2.startWidth + startDiff);
      blockedAfter = column.width == column.minWidth || column.width == column.maxWidth;
      if (moveDiff < 0) {
        self2.nextColumn = self2.initialNextColumn;
      }
      if (self2.table.options.resizableColumnFit && self2.nextColumn && !(blockedBefore && blockedAfter)) {
        let colWidth = self2.nextColumn.getWidth();
        if (moveDiff > 0) {
          if (colWidth <= self2.nextColumn.minWidth) {
            self2.nextColumn = self2.nextColumn.nextColumn();
          }
        }
        if (self2.nextColumn) {
          self2.nextColumn.setWidth(self2.nextColumn.getWidth() - moveDiff);
        }
      }
      self2.table.columnManager.rerenderColumns(true);
      if (!self2.table.browserSlow && column.modules.resize && column.modules.resize.variableHeight) {
        column.checkCellHeights();
      }
    }
    function mouseUp(e2) {
      if (self2.startColumn.modules.edit) {
        self2.startColumn.modules.edit.blocked = false;
      }
      if (self2.table.browserSlow && column.modules.resize && column.modules.resize.variableHeight) {
        column.checkCellHeights();
      }
      document.body.removeEventListener("mouseup", mouseUp);
      document.body.removeEventListener("mousemove", mouseMove);
      handle2.removeEventListener("touchmove", mouseMove);
      handle2.removeEventListener("touchend", mouseUp);
      self2.table.element.classList.remove("tabulator-block-select");
      if (self2.startWidth !== column.getWidth()) {
        self2.table.columnManager.verticalAlignHeaders();
        self2.dispatch("column-resized", column);
        self2.table.externalEvents.dispatch("columnResized", column.getComponent());
      }
    }
    e.stopPropagation();
    if (self2.startColumn.modules.edit) {
      self2.startColumn.modules.edit.blocked = true;
    }
    self2.startX = typeof e.screenX === "undefined" ? e.touches[0].screenX : e.screenX;
    self2.latestX = self2.startX;
    self2.startWidth = column.getWidth();
    document.body.addEventListener("mousemove", mouseMove);
    document.body.addEventListener("mouseup", mouseUp);
    handle2.addEventListener("touchmove", mouseMove, { passive: true });
    handle2.addEventListener("touchend", mouseUp);
  }
}
ResizeColumns.moduleName = "resizeColumns";
class ResizeRows extends Module {
  constructor(table) {
    super(table);
    this.startColumn = false;
    this.startY = false;
    this.startHeight = false;
    this.handle = null;
    this.prevHandle = null;
    this.registerTableOption("resizableRows", false);
  }
  initialize() {
    if (this.table.options.resizableRows) {
      this.subscribe("row-layout-after", this.initializeRow.bind(this));
    }
  }
  initializeRow(row) {
    var self2 = this, rowEl = row.getElement();
    var handle2 = document.createElement("div");
    handle2.className = "tabulator-row-resize-handle";
    var prevHandle = document.createElement("div");
    prevHandle.className = "tabulator-row-resize-handle prev";
    handle2.addEventListener("click", function(e) {
      e.stopPropagation();
    });
    var handleDown = function(e) {
      self2.startRow = row;
      self2._mouseDown(e, row, handle2);
    };
    handle2.addEventListener("mousedown", handleDown);
    handle2.addEventListener("touchstart", handleDown, { passive: true });
    prevHandle.addEventListener("click", function(e) {
      e.stopPropagation();
    });
    var prevHandleDown = function(e) {
      var prevRow = self2.table.rowManager.prevDisplayRow(row);
      if (prevRow) {
        self2.startRow = prevRow;
        self2._mouseDown(e, prevRow, prevHandle);
      }
    };
    prevHandle.addEventListener("mousedown", prevHandleDown);
    prevHandle.addEventListener("touchstart", prevHandleDown, { passive: true });
    rowEl.appendChild(handle2);
    rowEl.appendChild(prevHandle);
  }
  _mouseDown(e, row, handle2) {
    var self2 = this;
    self2.table.element.classList.add("tabulator-block-select");
    function mouseMove(e2) {
      row.setHeight(self2.startHeight + ((typeof e2.screenY === "undefined" ? e2.touches[0].screenY : e2.screenY) - self2.startY));
    }
    function mouseUp(e2) {
      document.body.removeEventListener("mouseup", mouseMove);
      document.body.removeEventListener("mousemove", mouseMove);
      handle2.removeEventListener("touchmove", mouseMove);
      handle2.removeEventListener("touchend", mouseUp);
      self2.table.element.classList.remove("tabulator-block-select");
      self2.dispatchExternal("rowResized", row.getComponent());
    }
    e.stopPropagation();
    self2.startY = typeof e.screenY === "undefined" ? e.touches[0].screenY : e.screenY;
    self2.startHeight = row.getHeight();
    document.body.addEventListener("mousemove", mouseMove);
    document.body.addEventListener("mouseup", mouseUp);
    handle2.addEventListener("touchmove", mouseMove, { passive: true });
    handle2.addEventListener("touchend", mouseUp);
  }
}
ResizeRows.moduleName = "resizeRows";
class ResizeTable extends Module {
  constructor(table) {
    super(table);
    this.binding = false;
    this.visibilityObserver = false;
    this.resizeObserver = false;
    this.containerObserver = false;
    this.tableHeight = 0;
    this.tableWidth = 0;
    this.containerHeight = 0;
    this.containerWidth = 0;
    this.autoResize = false;
    this.visible = false;
    this.initialized = false;
    this.initialRedraw = false;
    this.registerTableOption("autoResize", true);
  }
  initialize() {
    if (this.table.options.autoResize) {
      var table = this.table, tableStyle;
      this.tableHeight = table.element.clientHeight;
      this.tableWidth = table.element.clientWidth;
      if (table.element.parentNode) {
        this.containerHeight = table.element.parentNode.clientHeight;
        this.containerWidth = table.element.parentNode.clientWidth;
      }
      if (typeof IntersectionObserver !== "undefined" && typeof ResizeObserver !== "undefined" && table.rowManager.getRenderMode() === "virtual") {
        this.initializeVisibilityObserver();
        this.autoResize = true;
        this.resizeObserver = new ResizeObserver((entry) => {
          if (!table.browserMobile || table.browserMobile && !table.modules.edit.currentCell) {
            var nodeHeight = Math.floor(entry[0].contentRect.height);
            var nodeWidth = Math.floor(entry[0].contentRect.width);
            if (this.tableHeight != nodeHeight || this.tableWidth != nodeWidth) {
              this.tableHeight = nodeHeight;
              this.tableWidth = nodeWidth;
              if (table.element.parentNode) {
                this.containerHeight = table.element.parentNode.clientHeight;
                this.containerWidth = table.element.parentNode.clientWidth;
              }
              this.redrawTable();
            }
          }
        });
        this.resizeObserver.observe(table.element);
        tableStyle = window.getComputedStyle(table.element);
        if (this.table.element.parentNode && !this.table.rowManager.fixedHeight && (tableStyle.getPropertyValue("max-height") || tableStyle.getPropertyValue("min-height"))) {
          this.containerObserver = new ResizeObserver((entry) => {
            if (!table.browserMobile || table.browserMobile && !table.modules.edit.currentCell) {
              var nodeHeight = Math.floor(entry[0].contentRect.height);
              var nodeWidth = Math.floor(entry[0].contentRect.width);
              if (this.containerHeight != nodeHeight || this.containerWidth != nodeWidth) {
                this.containerHeight = nodeHeight;
                this.containerWidth = nodeWidth;
                this.tableHeight = table.element.clientHeight;
                this.tableWidth = table.element.clientWidth;
              }
              this.redrawTable();
            }
          });
          this.containerObserver.observe(this.table.element.parentNode);
        }
        this.subscribe("table-resize", this.tableResized.bind(this));
      } else {
        this.binding = function() {
          if (!table.browserMobile || table.browserMobile && !table.modules.edit.currentCell) {
            table.columnManager.rerenderColumns(true);
            table.redraw();
          }
        };
        window.addEventListener("resize", this.binding);
      }
      this.subscribe("table-destroy", this.clearBindings.bind(this));
    }
  }
  initializeVisibilityObserver() {
    this.visibilityObserver = new IntersectionObserver((entries) => {
      this.visible = entries[0].isIntersecting;
      if (!this.initialized) {
        this.initialized = true;
        this.initialRedraw = !this.visible;
      } else {
        if (this.visible) {
          this.redrawTable(this.initialRedraw);
          this.initialRedraw = false;
        }
      }
    });
    this.visibilityObserver.observe(this.table.element);
  }
  redrawTable(force) {
    if (this.initialized && this.visible) {
      this.table.columnManager.rerenderColumns(true);
      this.table.redraw(force);
    }
  }
  tableResized() {
    this.table.rowManager.redraw();
  }
  clearBindings() {
    if (this.binding) {
      window.removeEventListener("resize", this.binding);
    }
    if (this.resizeObserver) {
      this.resizeObserver.unobserve(this.table.element);
    }
    if (this.visibilityObserver) {
      this.visibilityObserver.unobserve(this.table.element);
    }
    if (this.containerObserver) {
      this.containerObserver.unobserve(this.table.element.parentNode);
    }
  }
}
ResizeTable.moduleName = "resizeTable";
class ResponsiveLayout extends Module {
  constructor(table) {
    super(table);
    this.columns = [];
    this.hiddenColumns = [];
    this.mode = "";
    this.index = 0;
    this.collapseFormatter = [];
    this.collapseStartOpen = true;
    this.collapseHandleColumn = false;
    this.registerTableOption("responsiveLayout", false);
    this.registerTableOption("responsiveLayoutCollapseStartOpen", true);
    this.registerTableOption("responsiveLayoutCollapseUseFormatters", true);
    this.registerTableOption("responsiveLayoutCollapseFormatter", false);
    this.registerColumnOption("responsive");
  }
  //generate responsive columns list
  initialize() {
    if (this.table.options.responsiveLayout) {
      this.subscribe("column-layout", this.initializeColumn.bind(this));
      this.subscribe("column-show", this.updateColumnVisibility.bind(this));
      this.subscribe("column-hide", this.updateColumnVisibility.bind(this));
      this.subscribe("columns-loaded", this.initializeResponsivity.bind(this));
      this.subscribe("column-moved", this.initializeResponsivity.bind(this));
      this.subscribe("column-add", this.initializeResponsivity.bind(this));
      this.subscribe("column-delete", this.initializeResponsivity.bind(this));
      this.subscribe("table-redrawing", this.tableRedraw.bind(this));
      if (this.table.options.responsiveLayout === "collapse") {
        this.subscribe("row-data-changed", this.generateCollapsedRowContent.bind(this));
        this.subscribe("row-init", this.initializeRow.bind(this));
        this.subscribe("row-layout", this.layoutRow.bind(this));
      }
    }
  }
  tableRedraw(force) {
    if (["fitColumns", "fitDataStretch"].indexOf(this.layoutMode()) === -1) {
      if (!force) {
        this.update();
      }
    }
  }
  initializeResponsivity() {
    var columns = [];
    this.mode = this.table.options.responsiveLayout;
    this.collapseFormatter = this.table.options.responsiveLayoutCollapseFormatter || this.formatCollapsedData;
    this.collapseStartOpen = this.table.options.responsiveLayoutCollapseStartOpen;
    this.hiddenColumns = [];
    this.table.columnManager.columnsByIndex.forEach((column, i) => {
      if (column.modules.responsive) {
        if (column.modules.responsive.order && column.modules.responsive.visible) {
          column.modules.responsive.index = i;
          columns.push(column);
          if (!column.visible && this.mode === "collapse") {
            this.hiddenColumns.push(column);
          }
        }
      }
    });
    columns = columns.reverse();
    columns = columns.sort((a, b) => {
      var diff2 = b.modules.responsive.order - a.modules.responsive.order;
      return diff2 || b.modules.responsive.index - a.modules.responsive.index;
    });
    this.columns = columns;
    if (this.mode === "collapse") {
      this.generateCollapsedContent();
    }
    for (let col of this.table.columnManager.columnsByIndex) {
      if (col.definition.formatter == "responsiveCollapse") {
        this.collapseHandleColumn = col;
        break;
      }
    }
    if (this.collapseHandleColumn) {
      if (this.hiddenColumns.length) {
        this.collapseHandleColumn.show();
      } else {
        this.collapseHandleColumn.hide();
      }
    }
  }
  //define layout information
  initializeColumn(column) {
    var def2 = column.getDefinition();
    column.modules.responsive = { order: typeof def2.responsive === "undefined" ? 1 : def2.responsive, visible: def2.visible === false ? false : true };
  }
  initializeRow(row) {
    var el;
    if (row.type !== "calc") {
      el = document.createElement("div");
      el.classList.add("tabulator-responsive-collapse");
      row.modules.responsiveLayout = {
        element: el,
        open: this.collapseStartOpen
      };
      if (!this.collapseStartOpen) {
        el.style.display = "none";
      }
    }
  }
  layoutRow(row) {
    var rowEl = row.getElement();
    if (row.modules.responsiveLayout) {
      rowEl.appendChild(row.modules.responsiveLayout.element);
      this.generateCollapsedRowContent(row);
    }
  }
  //update column visibility
  updateColumnVisibility(column, responsiveToggle) {
    if (!responsiveToggle && column.modules.responsive) {
      column.modules.responsive.visible = column.visible;
      this.initializeResponsivity();
    }
  }
  hideColumn(column) {
    var colCount = this.hiddenColumns.length;
    column.hide(false, true);
    if (this.mode === "collapse") {
      this.hiddenColumns.unshift(column);
      this.generateCollapsedContent();
      if (this.collapseHandleColumn && !colCount) {
        this.collapseHandleColumn.show();
      }
    }
  }
  showColumn(column) {
    var index2;
    column.show(false, true);
    column.setWidth(column.getWidth());
    if (this.mode === "collapse") {
      index2 = this.hiddenColumns.indexOf(column);
      if (index2 > -1) {
        this.hiddenColumns.splice(index2, 1);
      }
      this.generateCollapsedContent();
      if (this.collapseHandleColumn && !this.hiddenColumns.length) {
        this.collapseHandleColumn.hide();
      }
    }
  }
  //redraw columns to fit space
  update() {
    var working = true;
    while (working) {
      let width = this.table.modules.layout.getMode() == "fitColumns" ? this.table.columnManager.getFlexBaseWidth() : this.table.columnManager.getWidth();
      let diff2 = (this.table.options.headerVisible ? this.table.columnManager.element.clientWidth : this.table.element.clientWidth) - width;
      if (diff2 < 0) {
        let column = this.columns[this.index];
        if (column) {
          this.hideColumn(column);
          this.index++;
        } else {
          working = false;
        }
      } else {
        let column = this.columns[this.index - 1];
        if (column) {
          if (diff2 > 0) {
            if (diff2 >= column.getWidth()) {
              this.showColumn(column);
              this.index--;
            } else {
              working = false;
            }
          } else {
            working = false;
          }
        } else {
          working = false;
        }
      }
      if (!this.table.rowManager.activeRowsCount) {
        this.table.rowManager.renderEmptyScroll();
      }
    }
  }
  generateCollapsedContent() {
    var rows2 = this.table.rowManager.getDisplayRows();
    rows2.forEach((row) => {
      this.generateCollapsedRowContent(row);
    });
  }
  generateCollapsedRowContent(row) {
    var el, contents;
    if (row.modules.responsiveLayout) {
      el = row.modules.responsiveLayout.element;
      while (el.firstChild)
        el.removeChild(el.firstChild);
      contents = this.collapseFormatter(this.generateCollapsedRowData(row));
      if (contents) {
        el.appendChild(contents);
      }
    }
  }
  generateCollapsedRowData(row) {
    var data = row.getData(), output = [], mockCellComponent;
    this.hiddenColumns.forEach((column) => {
      var value = column.getFieldValue(data);
      if (column.definition.title && column.field) {
        if (column.modules.format && this.table.options.responsiveLayoutCollapseUseFormatters) {
          let onRendered = function(callback) {
            callback();
          };
          mockCellComponent = {
            value: false,
            data: {},
            getValue: function() {
              return value;
            },
            getData: function() {
              return data;
            },
            getElement: function() {
              return document.createElement("div");
            },
            getRow: function() {
              return row.getComponent();
            },
            getColumn: function() {
              return column.getComponent();
            },
            getTable: () => {
              return this.table;
            }
          };
          output.push({
            field: column.field,
            title: column.definition.title,
            value: column.modules.format.formatter.call(this.table.modules.format, mockCellComponent, column.modules.format.params, onRendered)
          });
        } else {
          output.push({
            field: column.field,
            title: column.definition.title,
            value
          });
        }
      }
    });
    return output;
  }
  formatCollapsedData(data) {
    var list2 = document.createElement("table");
    data.forEach(function(item) {
      var row = document.createElement("tr");
      var titleData = document.createElement("td");
      var valueData = document.createElement("td");
      var node_content;
      var titleHighlight = document.createElement("strong");
      titleData.appendChild(titleHighlight);
      this.langBind("columns|" + item.field, function(text) {
        titleHighlight.innerHTML = text || item.title;
      });
      if (item.value instanceof Node) {
        node_content = document.createElement("div");
        node_content.appendChild(item.value);
        valueData.appendChild(node_content);
      } else {
        valueData.innerHTML = item.value;
      }
      row.appendChild(titleData);
      row.appendChild(valueData);
      list2.appendChild(row);
    }, this);
    return Object.keys(data).length ? list2 : "";
  }
}
ResponsiveLayout.moduleName = "responsiveLayout";
class SelectRow extends Module {
  constructor(table) {
    super(table);
    this.selecting = false;
    this.lastClickedRow = false;
    this.selectPrev = [];
    this.selectedRows = [];
    this.headerCheckboxElement = null;
    this.registerTableOption("selectable", "highlight");
    this.registerTableOption("selectableRangeMode", "drag");
    this.registerTableOption("selectableRollingSelection", true);
    this.registerTableOption("selectablePersistence", true);
    this.registerTableOption("selectableCheck", function(data, row) {
      return true;
    });
    this.registerTableFunction("selectRow", this.selectRows.bind(this));
    this.registerTableFunction("deselectRow", this.deselectRows.bind(this));
    this.registerTableFunction("toggleSelectRow", this.toggleRow.bind(this));
    this.registerTableFunction("getSelectedRows", this.getSelectedRows.bind(this));
    this.registerTableFunction("getSelectedData", this.getSelectedData.bind(this));
    this.registerComponentFunction("row", "select", this.selectRows.bind(this));
    this.registerComponentFunction("row", "deselect", this.deselectRows.bind(this));
    this.registerComponentFunction("row", "toggleSelect", this.toggleRow.bind(this));
    this.registerComponentFunction("row", "isSelected", this.isRowSelected.bind(this));
  }
  initialize() {
    if (this.table.options.selectable !== false) {
      this.subscribe("row-init", this.initializeRow.bind(this));
      this.subscribe("row-deleting", this.rowDeleted.bind(this));
      this.subscribe("rows-wipe", this.clearSelectionData.bind(this));
      this.subscribe("rows-retrieve", this.rowRetrieve.bind(this));
      if (this.table.options.selectable && !this.table.options.selectablePersistence) {
        this.subscribe("data-refreshing", this.deselectRows.bind(this));
      }
    }
  }
  rowRetrieve(type, prevValue) {
    return type === "selected" ? this.selectedRows : prevValue;
  }
  rowDeleted(row) {
    this._deselectRow(row, true);
  }
  clearSelectionData(silent) {
    var prevSelected = this.selectedRows.length;
    this.selecting = false;
    this.lastClickedRow = false;
    this.selectPrev = [];
    this.selectedRows = [];
    if (prevSelected && silent !== true) {
      this._rowSelectionChanged();
    }
  }
  initializeRow(row) {
    var self2 = this, element = row.getElement();
    var endSelect = function() {
      setTimeout(function() {
        self2.selecting = false;
      }, 50);
      document.body.removeEventListener("mouseup", endSelect);
    };
    row.modules.select = { selected: false };
    if (self2.checkRowSelectability(row)) {
      element.classList.add("tabulator-selectable");
      element.classList.remove("tabulator-unselectable");
      if (self2.table.options.selectable && self2.table.options.selectable != "highlight") {
        if (self2.table.options.selectableRangeMode === "click") {
          element.addEventListener("click", this.handleComplexRowClick.bind(this, row));
        } else {
          element.addEventListener("click", function(e) {
            if (!self2.table.modExists("edit") || !self2.table.modules.edit.getCurrentCell()) {
              self2.table._clearSelection();
            }
            if (!self2.selecting) {
              self2.toggleRow(row);
            }
          });
          element.addEventListener("mousedown", function(e) {
            if (e.shiftKey) {
              self2.table._clearSelection();
              self2.selecting = true;
              self2.selectPrev = [];
              document.body.addEventListener("mouseup", endSelect);
              document.body.addEventListener("keyup", endSelect);
              self2.toggleRow(row);
              return false;
            }
          });
          element.addEventListener("mouseenter", function(e) {
            if (self2.selecting) {
              self2.table._clearSelection();
              self2.toggleRow(row);
              if (self2.selectPrev[1] == row) {
                self2.toggleRow(self2.selectPrev[0]);
              }
            }
          });
          element.addEventListener("mouseout", function(e) {
            if (self2.selecting) {
              self2.table._clearSelection();
              self2.selectPrev.unshift(row);
            }
          });
        }
      }
    } else {
      element.classList.add("tabulator-unselectable");
      element.classList.remove("tabulator-selectable");
    }
  }
  handleComplexRowClick(row, e) {
    if (e.shiftKey) {
      this.table._clearSelection();
      this.lastClickedRow = this.lastClickedRow || row;
      var lastClickedRowIdx = this.table.rowManager.getDisplayRowIndex(this.lastClickedRow);
      var rowIdx = this.table.rowManager.getDisplayRowIndex(row);
      var fromRowIdx = lastClickedRowIdx <= rowIdx ? lastClickedRowIdx : rowIdx;
      var toRowIdx = lastClickedRowIdx >= rowIdx ? lastClickedRowIdx : rowIdx;
      var rows2 = this.table.rowManager.getDisplayRows().slice(0);
      var toggledRows = rows2.splice(fromRowIdx, toRowIdx - fromRowIdx + 1);
      if (e.ctrlKey || e.metaKey) {
        toggledRows.forEach((toggledRow) => {
          if (toggledRow !== this.lastClickedRow) {
            if (this.table.options.selectable !== true && !this.isRowSelected(row)) {
              if (this.selectedRows.length < this.table.options.selectable) {
                this.toggleRow(toggledRow);
              }
            } else {
              this.toggleRow(toggledRow);
            }
          }
        });
        this.lastClickedRow = row;
      } else {
        this.deselectRows(void 0, true);
        if (this.table.options.selectable !== true) {
          if (toggledRows.length > this.table.options.selectable) {
            toggledRows = toggledRows.slice(0, this.table.options.selectable);
          }
        }
        this.selectRows(toggledRows);
      }
      this.table._clearSelection();
    } else if (e.ctrlKey || e.metaKey) {
      this.toggleRow(row);
      this.lastClickedRow = row;
    } else {
      this.deselectRows(void 0, true);
      this.selectRows(row);
      this.lastClickedRow = row;
    }
  }
  checkRowSelectability(row) {
    if (row.type === "row") {
      return this.table.options.selectableCheck.call(this.table, row.getComponent());
    }
    return false;
  }
  //toggle row selection
  toggleRow(row) {
    if (this.checkRowSelectability(row)) {
      if (row.modules.select && row.modules.select.selected) {
        this._deselectRow(row);
      } else {
        this._selectRow(row);
      }
    }
  }
  //select a number of rows
  selectRows(rows2) {
    var rowMatch;
    switch (typeof rows2) {
      case "undefined":
        this.table.rowManager.rows.forEach((row) => {
          this._selectRow(row, true, true);
        });
        this._rowSelectionChanged();
        break;
      case "string":
        rowMatch = this.table.rowManager.findRow(rows2);
        if (rowMatch) {
          this._selectRow(rowMatch, true, true);
          this._rowSelectionChanged();
        } else {
          rowMatch = this.table.rowManager.getRows(rows2);
          rowMatch.forEach((row) => {
            this._selectRow(row, true, true);
          });
          if (rowMatch.length) {
            this._rowSelectionChanged();
          }
        }
        break;
      default:
        if (Array.isArray(rows2)) {
          rows2.forEach((row) => {
            this._selectRow(row, true, true);
          });
          this._rowSelectionChanged();
        } else {
          this._selectRow(rows2, false, true);
        }
        break;
    }
  }
  //select an individual row
  _selectRow(rowInfo, silent, force) {
    if (!isNaN(this.table.options.selectable) && this.table.options.selectable !== true && !force) {
      if (this.selectedRows.length >= this.table.options.selectable) {
        if (this.table.options.selectableRollingSelection) {
          this._deselectRow(this.selectedRows[0]);
        } else {
          return false;
        }
      }
    }
    var row = this.table.rowManager.findRow(rowInfo);
    if (row) {
      if (this.selectedRows.indexOf(row) == -1) {
        row.getElement().classList.add("tabulator-selected");
        if (!row.modules.select) {
          row.modules.select = {};
        }
        row.modules.select.selected = true;
        if (row.modules.select.checkboxEl) {
          row.modules.select.checkboxEl.checked = true;
        }
        this.selectedRows.push(row);
        if (this.table.options.dataTreeSelectPropagate) {
          this.childRowSelection(row, true);
        }
        this.dispatchExternal("rowSelected", row.getComponent());
        this._rowSelectionChanged(silent);
      }
    } else {
      if (!silent) {
        console.warn("Selection Error - No such row found, ignoring selection:" + rowInfo);
      }
    }
  }
  isRowSelected(row) {
    return this.selectedRows.indexOf(row) !== -1;
  }
  //deselect a number of rows
  deselectRows(rows2, silent) {
    var self2 = this, rowCount;
    if (typeof rows2 == "undefined") {
      rowCount = self2.selectedRows.length;
      for (let i = 0; i < rowCount; i++) {
        self2._deselectRow(self2.selectedRows[0], true);
      }
      if (rowCount) {
        self2._rowSelectionChanged(silent);
      }
    } else {
      if (Array.isArray(rows2)) {
        rows2.forEach(function(row) {
          self2._deselectRow(row, true);
        });
        self2._rowSelectionChanged(silent);
      } else {
        self2._deselectRow(rows2, silent);
      }
    }
  }
  //deselect an individual row
  _deselectRow(rowInfo, silent) {
    var self2 = this, row = self2.table.rowManager.findRow(rowInfo), index2;
    if (row) {
      index2 = self2.selectedRows.findIndex(function(selectedRow) {
        return selectedRow == row;
      });
      if (index2 > -1) {
        row.getElement().classList.remove("tabulator-selected");
        if (!row.modules.select) {
          row.modules.select = {};
        }
        row.modules.select.selected = false;
        if (row.modules.select.checkboxEl) {
          row.modules.select.checkboxEl.checked = false;
        }
        self2.selectedRows.splice(index2, 1);
        if (this.table.options.dataTreeSelectPropagate) {
          this.childRowSelection(row, false);
        }
        this.dispatchExternal("rowDeselected", row.getComponent());
        self2._rowSelectionChanged(silent);
      }
    } else {
      if (!silent) {
        console.warn("Deselection Error - No such row found, ignoring selection:" + rowInfo);
      }
    }
  }
  getSelectedData() {
    var data = [];
    this.selectedRows.forEach(function(row) {
      data.push(row.getData());
    });
    return data;
  }
  getSelectedRows() {
    var rows2 = [];
    this.selectedRows.forEach(function(row) {
      rows2.push(row.getComponent());
    });
    return rows2;
  }
  _rowSelectionChanged(silent) {
    if (this.headerCheckboxElement) {
      if (this.selectedRows.length === 0) {
        this.headerCheckboxElement.checked = false;
        this.headerCheckboxElement.indeterminate = false;
      } else if (this.table.rowManager.rows.length === this.selectedRows.length) {
        this.headerCheckboxElement.checked = true;
        this.headerCheckboxElement.indeterminate = false;
      } else {
        this.headerCheckboxElement.indeterminate = true;
        this.headerCheckboxElement.checked = false;
      }
    }
    if (!silent) {
      this.dispatchExternal("rowSelectionChanged", this.getSelectedData(), this.getSelectedRows());
    }
  }
  registerRowSelectCheckbox(row, element) {
    if (!row._row.modules.select) {
      row._row.modules.select = {};
    }
    row._row.modules.select.checkboxEl = element;
  }
  registerHeaderSelectCheckbox(element) {
    this.headerCheckboxElement = element;
  }
  childRowSelection(row, select2) {
    var children = this.table.modules.dataTree.getChildren(row, true);
    if (select2) {
      for (let child of children) {
        this._selectRow(child, true);
      }
    } else {
      for (let child of children) {
        this._deselectRow(child, true);
      }
    }
  }
}
SelectRow.moduleName = "selectRow";
function number$1(a, b, aRow, bRow, column, dir, params) {
  var alignEmptyValues = params.alignEmptyValues;
  var decimal = params.decimalSeparator;
  var thousand = params.thousandSeparator;
  var emptyAlign = 0;
  a = String(a);
  b = String(b);
  if (thousand) {
    a = a.split(thousand).join("");
    b = b.split(thousand).join("");
  }
  if (decimal) {
    a = a.split(decimal).join(".");
    b = b.split(decimal).join(".");
  }
  a = parseFloat(a);
  b = parseFloat(b);
  if (isNaN(a)) {
    emptyAlign = isNaN(b) ? 0 : -1;
  } else if (isNaN(b)) {
    emptyAlign = 1;
  } else {
    return a - b;
  }
  if (alignEmptyValues === "top" && dir === "desc" || alignEmptyValues === "bottom" && dir === "asc") {
    emptyAlign *= -1;
  }
  return emptyAlign;
}
function string(a, b, aRow, bRow, column, dir, params) {
  var alignEmptyValues = params.alignEmptyValues;
  var emptyAlign = 0;
  var locale2;
  if (!a) {
    emptyAlign = !b ? 0 : -1;
  } else if (!b) {
    emptyAlign = 1;
  } else {
    switch (typeof params.locale) {
      case "boolean":
        if (params.locale) {
          locale2 = this.langLocale();
        }
        break;
      case "string":
        locale2 = params.locale;
        break;
    }
    return String(a).toLowerCase().localeCompare(String(b).toLowerCase(), locale2);
  }
  if (alignEmptyValues === "top" && dir === "desc" || alignEmptyValues === "bottom" && dir === "asc") {
    emptyAlign *= -1;
  }
  return emptyAlign;
}
function datetime$2(a, b, aRow, bRow, column, dir, params) {
  var DT = window.DateTime || luxon.DateTime;
  var format2 = params.format || "dd/MM/yyyy HH:mm:ss", alignEmptyValues = params.alignEmptyValues, emptyAlign = 0;
  if (typeof DT != "undefined") {
    if (!DT.isDateTime(a)) {
      if (format2 === "iso") {
        a = DT.fromISO(String(a));
      } else {
        a = DT.fromFormat(String(a), format2);
      }
    }
    if (!DT.isDateTime(b)) {
      if (format2 === "iso") {
        b = DT.fromISO(String(b));
      } else {
        b = DT.fromFormat(String(b), format2);
      }
    }
    if (!a.isValid) {
      emptyAlign = !b.isValid ? 0 : -1;
    } else if (!b.isValid) {
      emptyAlign = 1;
    } else {
      return a - b;
    }
    if (alignEmptyValues === "top" && dir === "desc" || alignEmptyValues === "bottom" && dir === "asc") {
      emptyAlign *= -1;
    }
    return emptyAlign;
  } else {
    console.error("Sort Error - 'datetime' sorter is dependant on luxon.js");
  }
}
function date$1(a, b, aRow, bRow, column, dir, params) {
  if (!params.format) {
    params.format = "dd/MM/yyyy";
  }
  return datetime$2.call(this, a, b, aRow, bRow, column, dir, params);
}
function time$1(a, b, aRow, bRow, column, dir, params) {
  if (!params.format) {
    params.format = "HH:mm";
  }
  return datetime$2.call(this, a, b, aRow, bRow, column, dir, params);
}
function boolean(a, b, aRow, bRow, column, dir, params) {
  var el1 = a === true || a === "true" || a === "True" || a === 1 ? 1 : 0;
  var el2 = b === true || b === "true" || b === "True" || b === 1 ? 1 : 0;
  return el1 - el2;
}
function array(a, b, aRow, bRow, column, dir, params) {
  var type = params.type || "length", alignEmptyValues = params.alignEmptyValues, emptyAlign = 0;
  function calc(value) {
    var result;
    switch (type) {
      case "length":
        result = value.length;
        break;
      case "sum":
        result = value.reduce(function(c, d) {
          return c + d;
        });
        break;
      case "max":
        result = Math.max.apply(null, value);
        break;
      case "min":
        result = Math.min.apply(null, value);
        break;
      case "avg":
        result = value.reduce(function(c, d) {
          return c + d;
        }) / value.length;
        break;
    }
    return result;
  }
  if (!Array.isArray(a)) {
    emptyAlign = !Array.isArray(b) ? 0 : -1;
  } else if (!Array.isArray(b)) {
    emptyAlign = 1;
  } else {
    return calc(b) - calc(a);
  }
  if (alignEmptyValues === "top" && dir === "desc" || alignEmptyValues === "bottom" && dir === "asc") {
    emptyAlign *= -1;
  }
  return emptyAlign;
}
function exists(a, b, aRow, bRow, column, dir, params) {
  var el1 = typeof a == "undefined" ? 0 : 1;
  var el2 = typeof b == "undefined" ? 0 : 1;
  return el1 - el2;
}
function alphanum(as2, bs, aRow, bRow, column, dir, params) {
  var a, b, a1, b1, i = 0, L, rx = /(\d+)|(\D+)/g, rd = /\d/;
  var alignEmptyValues = params.alignEmptyValues;
  var emptyAlign = 0;
  if (!as2 && as2 !== 0) {
    emptyAlign = !bs && bs !== 0 ? 0 : -1;
  } else if (!bs && bs !== 0) {
    emptyAlign = 1;
  } else {
    if (isFinite(as2) && isFinite(bs))
      return as2 - bs;
    a = String(as2).toLowerCase();
    b = String(bs).toLowerCase();
    if (a === b)
      return 0;
    if (!(rd.test(a) && rd.test(b)))
      return a > b ? 1 : -1;
    a = a.match(rx);
    b = b.match(rx);
    L = a.length > b.length ? b.length : a.length;
    while (i < L) {
      a1 = a[i];
      b1 = b[i++];
      if (a1 !== b1) {
        if (isFinite(a1) && isFinite(b1)) {
          if (a1.charAt(0) === "0")
            a1 = "." + a1;
          if (b1.charAt(0) === "0")
            b1 = "." + b1;
          return a1 - b1;
        } else
          return a1 > b1 ? 1 : -1;
      }
    }
    return a.length > b.length;
  }
  if (alignEmptyValues === "top" && dir === "desc" || alignEmptyValues === "bottom" && dir === "asc") {
    emptyAlign *= -1;
  }
  return emptyAlign;
}
var defaultSorters = {
  number: number$1,
  string,
  date: date$1,
  time: time$1,
  datetime: datetime$2,
  boolean,
  array,
  exists,
  alphanum
};
class Sort extends Module {
  constructor(table) {
    super(table);
    this.sortList = [];
    this.changed = false;
    this.registerTableOption("sortMode", "local");
    this.registerTableOption("initialSort", false);
    this.registerTableOption("columnHeaderSortMulti", true);
    this.registerTableOption("sortOrderReverse", false);
    this.registerTableOption("headerSortElement", "<div class='tabulator-arrow'></div>");
    this.registerTableOption("headerSortClickElement", "header");
    this.registerColumnOption("sorter");
    this.registerColumnOption("sorterParams");
    this.registerColumnOption("headerSort", true);
    this.registerColumnOption("headerSortStartingDir");
    this.registerColumnOption("headerSortTristate");
  }
  initialize() {
    this.subscribe("column-layout", this.initializeColumn.bind(this));
    this.subscribe("table-built", this.tableBuilt.bind(this));
    this.registerDataHandler(this.sort.bind(this), 20);
    this.registerTableFunction("setSort", this.userSetSort.bind(this));
    this.registerTableFunction("getSorters", this.getSort.bind(this));
    this.registerTableFunction("clearSort", this.clearSort.bind(this));
    if (this.table.options.sortMode === "remote") {
      this.subscribe("data-params", this.remoteSortParams.bind(this));
    }
  }
  tableBuilt() {
    if (this.table.options.initialSort) {
      this.setSort(this.table.options.initialSort);
    }
  }
  remoteSortParams(data, config, silent, params) {
    var sorters = this.getSort();
    sorters.forEach((item) => {
      delete item.column;
    });
    params.sort = sorters;
    return params;
  }
  ///////////////////////////////////
  ///////// Table Functions /////////
  ///////////////////////////////////
  userSetSort(sortList, dir) {
    this.setSort(sortList, dir);
    this.refreshSort();
  }
  clearSort() {
    this.clear();
    this.refreshSort();
  }
  ///////////////////////////////////
  ///////// Internal Logic //////////
  ///////////////////////////////////
  //initialize column header for sorting
  initializeColumn(column) {
    var sorter = false, colEl, arrowEl;
    switch (typeof column.definition.sorter) {
      case "string":
        if (Sort.sorters[column.definition.sorter]) {
          sorter = Sort.sorters[column.definition.sorter];
        } else {
          console.warn("Sort Error - No such sorter found: ", column.definition.sorter);
        }
        break;
      case "function":
        sorter = column.definition.sorter;
        break;
    }
    column.modules.sort = {
      sorter,
      dir: "none",
      params: column.definition.sorterParams || {},
      startingDir: column.definition.headerSortStartingDir || "asc",
      tristate: column.definition.headerSortTristate
    };
    if (column.definition.headerSort !== false) {
      colEl = column.getElement();
      colEl.classList.add("tabulator-sortable");
      arrowEl = document.createElement("div");
      arrowEl.classList.add("tabulator-col-sorter");
      switch (this.table.options.headerSortClickElement) {
        case "icon":
          arrowEl.classList.add("tabulator-col-sorter-element");
          break;
        case "header":
          colEl.classList.add("tabulator-col-sorter-element");
          break;
        default:
          colEl.classList.add("tabulator-col-sorter-element");
          break;
      }
      switch (this.table.options.headerSortElement) {
        case "function":
          break;
        case "object":
          arrowEl.appendChild(this.table.options.headerSortElement);
          break;
        default:
          arrowEl.innerHTML = this.table.options.headerSortElement;
      }
      column.titleHolderElement.appendChild(arrowEl);
      column.modules.sort.element = arrowEl;
      this.setColumnHeaderSortIcon(column, "none");
      (this.table.options.headerSortClickElement === "icon" ? arrowEl : colEl).addEventListener("click", (e) => {
        var dir = "", sorters = [], match = false;
        if (column.modules.sort) {
          if (column.modules.sort.tristate) {
            if (column.modules.sort.dir == "none") {
              dir = column.modules.sort.startingDir;
            } else {
              if (column.modules.sort.dir == column.modules.sort.startingDir) {
                dir = column.modules.sort.dir == "asc" ? "desc" : "asc";
              } else {
                dir = "none";
              }
            }
          } else {
            switch (column.modules.sort.dir) {
              case "asc":
                dir = "desc";
                break;
              case "desc":
                dir = "asc";
                break;
              default:
                dir = column.modules.sort.startingDir;
            }
          }
          if (this.table.options.columnHeaderSortMulti && (e.shiftKey || e.ctrlKey)) {
            sorters = this.getSort();
            match = sorters.findIndex((sorter2) => {
              return sorter2.field === column.getField();
            });
            if (match > -1) {
              sorters[match].dir = dir;
              match = sorters.splice(match, 1)[0];
              if (dir != "none") {
                sorters.push(match);
              }
            } else {
              if (dir != "none") {
                sorters.push({ column, dir });
              }
            }
            this.setSort(sorters);
          } else {
            if (dir == "none") {
              this.clear();
            } else {
              this.setSort(column, dir);
            }
          }
          this.refreshSort();
        }
      });
    }
  }
  refreshSort() {
    if (this.table.options.sortMode === "remote") {
      this.reloadData(null, false, false);
    } else {
      this.refreshData(true);
    }
  }
  //check if the sorters have changed since last use
  hasChanged() {
    var changed = this.changed;
    this.changed = false;
    return changed;
  }
  //return current sorters
  getSort() {
    var self2 = this, sorters = [];
    self2.sortList.forEach(function(item) {
      if (item.column) {
        sorters.push({ column: item.column.getComponent(), field: item.column.getField(), dir: item.dir });
      }
    });
    return sorters;
  }
  //change sort list and trigger sort
  setSort(sortList, dir) {
    var self2 = this, newSortList = [];
    if (!Array.isArray(sortList)) {
      sortList = [{ column: sortList, dir }];
    }
    sortList.forEach(function(item) {
      var column;
      column = self2.table.columnManager.findColumn(item.column);
      if (column) {
        item.column = column;
        newSortList.push(item);
        self2.changed = true;
      } else {
        console.warn("Sort Warning - Sort field does not exist and is being ignored: ", item.column);
      }
    });
    self2.sortList = newSortList;
    this.dispatch("sort-changed");
  }
  //clear sorters
  clear() {
    this.setSort([]);
  }
  //find appropriate sorter for column
  findSorter(column) {
    var row = this.table.rowManager.activeRows[0], sorter = "string", field, value;
    if (row) {
      row = row.getData();
      field = column.getField();
      if (field) {
        value = column.getFieldValue(row);
        switch (typeof value) {
          case "undefined":
            sorter = "string";
            break;
          case "boolean":
            sorter = "boolean";
            break;
          default:
            if (!isNaN(value) && value !== "") {
              sorter = "number";
            } else {
              if (value.match(/((^[0-9]+[a-z]+)|(^[a-z]+[0-9]+))+$/i)) {
                sorter = "alphanum";
              }
            }
            break;
        }
      }
    }
    return Sort.sorters[sorter];
  }
  //work through sort list sorting data
  sort(data) {
    var self2 = this, sortList = this.table.options.sortOrderReverse ? self2.sortList.slice().reverse() : self2.sortList, sortListActual = [], rowComponents = [];
    if (this.subscribedExternal("dataSorting")) {
      this.dispatchExternal("dataSorting", self2.getSort());
    }
    self2.clearColumnHeaders();
    if (this.table.options.sortMode !== "remote") {
      sortList.forEach(function(item, i) {
        var sortObj;
        if (item.column) {
          sortObj = item.column.modules.sort;
          if (sortObj) {
            if (!sortObj.sorter) {
              sortObj.sorter = self2.findSorter(item.column);
            }
            item.params = typeof sortObj.params === "function" ? sortObj.params(item.column.getComponent(), item.dir) : sortObj.params;
            sortListActual.push(item);
          }
          self2.setColumnHeader(item.column, item.dir);
        }
      });
      if (sortListActual.length) {
        self2._sortItems(data, sortListActual);
      }
    } else {
      sortList.forEach(function(item, i) {
        self2.setColumnHeader(item.column, item.dir);
      });
    }
    if (this.subscribedExternal("dataSorted")) {
      data.forEach((row) => {
        rowComponents.push(row.getComponent());
      });
      this.dispatchExternal("dataSorted", self2.getSort(), rowComponents);
    }
    return data;
  }
  //clear sort arrows on columns
  clearColumnHeaders() {
    this.table.columnManager.getRealColumns().forEach((column) => {
      if (column.modules.sort) {
        column.modules.sort.dir = "none";
        column.getElement().setAttribute("aria-sort", "none");
        this.setColumnHeaderSortIcon(column, "none");
      }
    });
  }
  //set the column header sort direction
  setColumnHeader(column, dir) {
    column.modules.sort.dir = dir;
    column.getElement().setAttribute("aria-sort", dir === "asc" ? "ascending" : "descending");
    this.setColumnHeaderSortIcon(column, dir);
  }
  setColumnHeaderSortIcon(column, dir) {
    var sortEl = column.modules.sort.element, arrowEl;
    if (column.definition.headerSort && typeof this.table.options.headerSortElement === "function") {
      while (sortEl.firstChild)
        sortEl.removeChild(sortEl.firstChild);
      arrowEl = this.table.options.headerSortElement.call(this.table, column.getComponent(), dir);
      if (typeof arrowEl === "object") {
        sortEl.appendChild(arrowEl);
      } else {
        sortEl.innerHTML = arrowEl;
      }
    }
  }
  //sort each item in sort list
  _sortItems(data, sortList) {
    var sorterCount = sortList.length - 1;
    data.sort((a, b) => {
      var result;
      for (var i = sorterCount; i >= 0; i--) {
        let sortItem = sortList[i];
        result = this._sortRow(a, b, sortItem.column, sortItem.dir, sortItem.params);
        if (result !== 0) {
          break;
        }
      }
      return result;
    });
  }
  //process individual rows for a sort function on active data
  _sortRow(a, b, column, dir, params) {
    var el1Comp, el2Comp;
    var el1 = dir == "asc" ? a : b;
    var el2 = dir == "asc" ? b : a;
    a = column.getFieldValue(el1.getData());
    b = column.getFieldValue(el2.getData());
    a = typeof a !== "undefined" ? a : "";
    b = typeof b !== "undefined" ? b : "";
    el1Comp = el1.getComponent();
    el2Comp = el2.getComponent();
    return column.modules.sort.sorter.call(this, a, b, el1Comp, el2Comp, column.getComponent(), dir, params);
  }
}
Sort.moduleName = "sort";
Sort.sorters = defaultSorters;
class Tooltip extends Module {
  constructor(table) {
    super(table);
    this.tooltipSubscriber = null, this.headerSubscriber = null, this.timeout = null;
    this.popupInstance = null;
    this.registerTableOption("tooltipGenerationMode", void 0);
    this.registerTableOption("tooltipDelay", 300);
    this.registerColumnOption("tooltip");
    this.registerColumnOption("headerTooltip");
  }
  initialize() {
    this.deprecatedOptionsCheck();
    this.subscribe("column-init", this.initializeColumn.bind(this));
  }
  deprecatedOptionsCheck() {
    this.deprecationCheckMsg("tooltipGenerationMode", "This option is no longer needed as tooltips are always generated on hover now");
  }
  initializeColumn(column) {
    if (column.definition.headerTooltip && !this.headerSubscriber) {
      this.headerSubscriber = true;
      this.subscribe("column-mousemove", this.mousemoveCheck.bind(this, "headerTooltip"));
      this.subscribe("column-mouseout", this.mouseoutCheck.bind(this, "headerTooltip"));
    }
    if (column.definition.tooltip && !this.tooltipSubscriber) {
      this.tooltipSubscriber = true;
      this.subscribe("cell-mousemove", this.mousemoveCheck.bind(this, "tooltip"));
      this.subscribe("cell-mouseout", this.mouseoutCheck.bind(this, "tooltip"));
    }
  }
  mousemoveCheck(action, e, component) {
    var tooltip = action === "tooltip" ? component.column.definition.tooltip : component.definition.headerTooltip;
    if (tooltip) {
      this.clearPopup();
      this.timeout = setTimeout(this.loadTooltip.bind(this, e, component, tooltip), this.table.options.tooltipDelay);
    }
  }
  mouseoutCheck(action, e, component) {
    if (!this.popupInstance) {
      this.clearPopup();
    }
  }
  clearPopup(action, e, component) {
    clearTimeout(this.timeout);
    this.timeout = null;
    if (this.popupInstance) {
      this.popupInstance.hide();
    }
  }
  loadTooltip(e, component, tooltip) {
    var contentsEl, renderedCallback, coords;
    function onRendered(callback) {
      renderedCallback = callback;
    }
    if (typeof tooltip === "function") {
      tooltip = tooltip(e, component.getComponent(), onRendered);
    }
    if (tooltip instanceof HTMLElement) {
      contentsEl = tooltip;
    } else {
      contentsEl = document.createElement("div");
      if (tooltip === true) {
        if (component instanceof Cell) {
          tooltip = component.value;
        } else {
          if (component.definition.field) {
            this.langBind("columns|" + component.definition.field, (value) => {
              contentsEl.innerHTML = tooltip = value || component.definition.title;
            });
          } else {
            tooltip = component.definition.title;
          }
        }
      }
      contentsEl.innerHTML = tooltip;
    }
    if (tooltip || tooltip === 0 || tooltip === false) {
      contentsEl.classList.add("tabulator-tooltip");
      contentsEl.addEventListener("mousemove", (e2) => e2.preventDefault());
      this.popupInstance = this.popup(contentsEl);
      if (typeof renderedCallback === "function") {
        this.popupInstance.renderCallback(renderedCallback);
      }
      coords = this.popupInstance.containerEventCoords(e);
      this.popupInstance.show(coords.x + 15, coords.y + 15).hideOnBlur(() => {
        this.dispatchExternal("TooltipClosed", component.getComponent());
        this.popupInstance = null;
      });
      this.dispatchExternal("TooltipOpened", component.getComponent());
    }
  }
}
Tooltip.moduleName = "tooltip";
var defaultValidators = {
  //is integer
  integer: function(cell, value, parameters) {
    if (value === "" || value === null || typeof value === "undefined") {
      return true;
    }
    value = Number(value);
    return !isNaN(value) && isFinite(value) && Math.floor(value) === value;
  },
  //is float
  float: function(cell, value, parameters) {
    if (value === "" || value === null || typeof value === "undefined") {
      return true;
    }
    value = Number(value);
    return !isNaN(value) && isFinite(value) && value % 1 !== 0;
  },
  //must be a number
  numeric: function(cell, value, parameters) {
    if (value === "" || value === null || typeof value === "undefined") {
      return true;
    }
    return !isNaN(value);
  },
  //must be a string
  string: function(cell, value, parameters) {
    if (value === "" || value === null || typeof value === "undefined") {
      return true;
    }
    return isNaN(value);
  },
  //maximum value
  max: function(cell, value, parameters) {
    if (value === "" || value === null || typeof value === "undefined") {
      return true;
    }
    return parseFloat(value) <= parameters;
  },
  //minimum value
  min: function(cell, value, parameters) {
    if (value === "" || value === null || typeof value === "undefined") {
      return true;
    }
    return parseFloat(value) >= parameters;
  },
  //starts with  value
  starts: function(cell, value, parameters) {
    if (value === "" || value === null || typeof value === "undefined") {
      return true;
    }
    return String(value).toLowerCase().startsWith(String(parameters).toLowerCase());
  },
  //ends with  value
  ends: function(cell, value, parameters) {
    if (value === "" || value === null || typeof value === "undefined") {
      return true;
    }
    return String(value).toLowerCase().endsWith(String(parameters).toLowerCase());
  },
  //minimum string length
  minLength: function(cell, value, parameters) {
    if (value === "" || value === null || typeof value === "undefined") {
      return true;
    }
    return String(value).length >= parameters;
  },
  //maximum string length
  maxLength: function(cell, value, parameters) {
    if (value === "" || value === null || typeof value === "undefined") {
      return true;
    }
    return String(value).length <= parameters;
  },
  //in provided value list
  in: function(cell, value, parameters) {
    if (value === "" || value === null || typeof value === "undefined") {
      return true;
    }
    if (typeof parameters == "string") {
      parameters = parameters.split("|");
    }
    return parameters.indexOf(value) > -1;
  },
  //must match provided regex
  regex: function(cell, value, parameters) {
    if (value === "" || value === null || typeof value === "undefined") {
      return true;
    }
    var reg = new RegExp(parameters);
    return reg.test(value);
  },
  //value must be unique in this column
  unique: function(cell, value, parameters) {
    if (value === "" || value === null || typeof value === "undefined") {
      return true;
    }
    var unique = true;
    var cellData = cell.getData();
    var column = cell.getColumn()._getSelf();
    this.table.rowManager.rows.forEach(function(row) {
      var data = row.getData();
      if (data !== cellData) {
        if (value == column.getFieldValue(data)) {
          unique = false;
        }
      }
    });
    return unique;
  },
  //must have a value
  required: function(cell, value, parameters) {
    return value !== "" && value !== null && typeof value !== "undefined";
  }
};
class Validate extends Module {
  constructor(table) {
    super(table);
    this.invalidCells = [];
    this.registerTableOption("validationMode", "blocking");
    this.registerColumnOption("validator");
    this.registerTableFunction("getInvalidCells", this.getInvalidCells.bind(this));
    this.registerTableFunction("clearCellValidation", this.userClearCellValidation.bind(this));
    this.registerTableFunction("validate", this.userValidate.bind(this));
    this.registerComponentFunction("cell", "isValid", this.cellIsValid.bind(this));
    this.registerComponentFunction("cell", "clearValidation", this.clearValidation.bind(this));
    this.registerComponentFunction("cell", "validate", this.cellValidate.bind(this));
    this.registerComponentFunction("column", "validate", this.columnValidate.bind(this));
    this.registerComponentFunction("row", "validate", this.rowValidate.bind(this));
  }
  initialize() {
    this.subscribe("cell-delete", this.clearValidation.bind(this));
    this.subscribe("column-layout", this.initializeColumnCheck.bind(this));
    this.subscribe("edit-success", this.editValidate.bind(this));
    this.subscribe("edit-editor-clear", this.editorClear.bind(this));
    this.subscribe("edit-edited-clear", this.editedClear.bind(this));
  }
  ///////////////////////////////////
  ///////// Event Handling //////////
  ///////////////////////////////////
  editValidate(cell, value, previousValue) {
    var valid = this.table.options.validationMode !== "manual" ? this.validate(cell.column.modules.validate, cell, value) : true;
    if (valid !== true) {
      setTimeout(() => {
        cell.getElement().classList.add("tabulator-validation-fail");
        this.dispatchExternal("validationFailed", cell.getComponent(), value, valid);
      });
    }
    return valid;
  }
  editorClear(cell, cancelled) {
    if (cancelled) {
      if (cell.column.modules.validate) {
        this.cellValidate(cell);
      }
    }
    cell.getElement().classList.remove("tabulator-validation-fail");
  }
  editedClear(cell) {
    if (cell.modules.validate) {
      cell.modules.validate.invalid = false;
    }
  }
  ///////////////////////////////////
  ////////// Cell Functions /////////
  ///////////////////////////////////
  cellIsValid(cell) {
    return cell.modules.validate ? cell.modules.validate.invalid || true : true;
  }
  cellValidate(cell) {
    return this.validate(cell.column.modules.validate, cell, cell.getValue());
  }
  ///////////////////////////////////
  ///////// Column Functions ////////
  ///////////////////////////////////
  columnValidate(column) {
    var invalid = [];
    column.cells.forEach((cell) => {
      if (this.cellValidate(cell) !== true) {
        invalid.push(cell.getComponent());
      }
    });
    return invalid.length ? invalid : true;
  }
  ///////////////////////////////////
  ////////// Row Functions //////////
  ///////////////////////////////////
  rowValidate(row) {
    var invalid = [];
    row.cells.forEach((cell) => {
      if (this.cellValidate(cell) !== true) {
        invalid.push(cell.getComponent());
      }
    });
    return invalid.length ? invalid : true;
  }
  ///////////////////////////////////
  ///////// Table Functions /////////
  ///////////////////////////////////
  userClearCellValidation(cells) {
    if (!cells) {
      cells = this.getInvalidCells();
    }
    if (!Array.isArray(cells)) {
      cells = [cells];
    }
    cells.forEach((cell) => {
      this.clearValidation(cell._getSelf());
    });
  }
  userValidate(cells) {
    var output = [];
    this.table.rowManager.rows.forEach((row) => {
      row = row.getComponent();
      var valid = row.validate();
      if (valid !== true) {
        output = output.concat(valid);
      }
    });
    return output.length ? output : true;
  }
  ///////////////////////////////////
  ///////// Internal Logic //////////
  ///////////////////////////////////
  initializeColumnCheck(column) {
    if (typeof column.definition.validator !== "undefined") {
      this.initializeColumn(column);
    }
  }
  //validate
  initializeColumn(column) {
    var self2 = this, config = [], validator;
    if (column.definition.validator) {
      if (Array.isArray(column.definition.validator)) {
        column.definition.validator.forEach((item) => {
          validator = self2._extractValidator(item);
          if (validator) {
            config.push(validator);
          }
        });
      } else {
        validator = this._extractValidator(column.definition.validator);
        if (validator) {
          config.push(validator);
        }
      }
      column.modules.validate = config.length ? config : false;
    }
  }
  _extractValidator(value) {
    var type, params, pos;
    switch (typeof value) {
      case "string":
        pos = value.indexOf(":");
        if (pos > -1) {
          type = value.substring(0, pos);
          params = value.substring(pos + 1);
        } else {
          type = value;
        }
        return this._buildValidator(type, params);
      case "function":
        return this._buildValidator(value);
      case "object":
        return this._buildValidator(value.type, value.parameters);
    }
  }
  _buildValidator(type, params) {
    var func = typeof type == "function" ? type : Validate.validators[type];
    if (!func) {
      console.warn("Validator Setup Error - No matching validator found:", type);
      return false;
    } else {
      return {
        type: typeof type == "function" ? "function" : type,
        func,
        params
      };
    }
  }
  validate(validators, cell, value) {
    var self2 = this, failedValidators = [], invalidIndex = this.invalidCells.indexOf(cell);
    if (validators) {
      validators.forEach((item) => {
        if (!item.func.call(self2, cell.getComponent(), value, item.params)) {
          failedValidators.push({
            type: item.type,
            parameters: item.params
          });
        }
      });
    }
    if (!cell.modules.validate) {
      cell.modules.validate = {};
    }
    if (!failedValidators.length) {
      cell.modules.validate.invalid = false;
      cell.getElement().classList.remove("tabulator-validation-fail");
      if (invalidIndex > -1) {
        this.invalidCells.splice(invalidIndex, 1);
      }
    } else {
      cell.modules.validate.invalid = failedValidators;
      if (this.table.options.validationMode !== "manual") {
        cell.getElement().classList.add("tabulator-validation-fail");
      }
      if (invalidIndex == -1) {
        this.invalidCells.push(cell);
      }
    }
    return failedValidators.length ? failedValidators : true;
  }
  getInvalidCells() {
    var output = [];
    this.invalidCells.forEach((cell) => {
      output.push(cell.getComponent());
    });
    return output;
  }
  clearValidation(cell) {
    var invalidIndex;
    if (cell.modules.validate && cell.modules.validate.invalid) {
      cell.getElement().classList.remove("tabulator-validation-fail");
      cell.modules.validate.invalid = false;
      invalidIndex = this.invalidCells.indexOf(cell);
      if (invalidIndex > -1) {
        this.invalidCells.splice(invalidIndex, 1);
      }
    }
  }
}
Validate.moduleName = "validate";
Validate.validators = defaultValidators;
var modules = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  AccessorModule: Accessor,
  AjaxModule: Ajax,
  ClipboardModule: Clipboard$1,
  ColumnCalcsModule: ColumnCalcs,
  DataTreeModule: DataTree,
  DownloadModule: Download$1,
  EditModule: Edit$1$1,
  ExportModule: Export,
  FilterModule: Filter$1,
  FormatModule: Format,
  FrozenColumnsModule: FrozenColumns,
  FrozenRowsModule: FrozenRows,
  GroupRowsModule: GroupRows,
  HistoryModule: History$1,
  HtmlTableImportModule: HtmlTableImport,
  ImportModule: Import$1,
  InteractionModule: Interaction,
  KeybindingsModule: Keybindings,
  MenuModule: Menu$1,
  MoveColumnsModule: MoveColumns,
  MoveRowsModule: MoveRows,
  MutatorModule: Mutator,
  PageModule: Page,
  PersistenceModule: Persistence,
  PopupModule: Popup$1,
  PrintModule: Print,
  ReactiveDataModule: ReactiveData,
  ResizeColumnsModule: ResizeColumns,
  ResizeRowsModule: ResizeRows,
  ResizeTableModule: ResizeTable,
  ResponsiveLayoutModule: ResponsiveLayout,
  SelectRowModule: SelectRow,
  SortModule: Sort,
  TooltipModule: Tooltip,
  ValidateModule: Validate
});
var defaultOptions = {
  debugEventsExternal: false,
  //flag to console log events
  debugEventsInternal: false,
  //flag to console log events
  debugInvalidOptions: true,
  //allow toggling of invalid option warnings
  debugInvalidComponentFuncs: true,
  //allow toggling of invalid component warnings
  debugInitialization: true,
  //allow toggling of pre initialization function call warnings
  debugDeprecation: true,
  //allow toggling of deprecation warnings
  height: false,
  //height of tabulator
  minHeight: false,
  //minimum height of tabulator
  maxHeight: false,
  //maximum height of tabulator
  columnHeaderVertAlign: "top",
  //vertical alignment of column headers
  popupContainer: false,
  columns: [],
  //store for colum header info
  columnDefaults: {},
  //store column default props
  data: false,
  //default starting data
  autoColumns: false,
  //build columns from data row structure
  autoColumnsDefinitions: false,
  nestedFieldSeparator: ".",
  //separator for nested data
  footerElement: false,
  //hold footer element
  index: "id",
  //filed for row index
  textDirection: "auto",
  addRowPos: "bottom",
  //position to insert blank rows, top|bottom
  headerVisible: true,
  //hide header
  renderVertical: "virtual",
  renderHorizontal: "basic",
  renderVerticalBuffer: 0,
  // set virtual DOM buffer size
  scrollToRowPosition: "top",
  scrollToRowIfVisible: true,
  scrollToColumnPosition: "left",
  scrollToColumnIfVisible: true,
  rowFormatter: false,
  rowFormatterPrint: null,
  rowFormatterClipboard: null,
  rowFormatterHtmlOutput: null,
  rowHeight: null,
  placeholder: false,
  dataLoader: true,
  dataLoaderLoading: false,
  dataLoaderError: false,
  dataLoaderErrorTimeout: 3e3,
  dataSendParams: {},
  dataReceiveParams: {}
};
class OptionsList {
  constructor(table, msgType, defaults2 = {}) {
    this.table = table;
    this.msgType = msgType;
    this.registeredDefaults = Object.assign({}, defaults2);
  }
  register(option, value) {
    this.registeredDefaults[option] = value;
  }
  generate(defaultOptions2, userOptions = {}) {
    var output = Object.assign({}, this.registeredDefaults), warn2 = this.table.options.debugInvalidOptions || userOptions.debugInvalidOptions === true;
    Object.assign(output, defaultOptions2);
    for (let key in userOptions) {
      if (!output.hasOwnProperty(key)) {
        if (warn2) {
          console.warn("Invalid " + this.msgType + " option:", key);
        }
        output[key] = userOptions.key;
      }
    }
    for (let key in output) {
      if (key in userOptions) {
        output[key] = userOptions[key];
      } else {
        if (Array.isArray(output[key])) {
          output[key] = Object.assign([], output[key]);
        } else if (typeof output[key] === "object" && output[key] !== null) {
          output[key] = Object.assign({}, output[key]);
        } else if (typeof output[key] === "undefined") {
          delete output[key];
        }
      }
    }
    return output;
  }
}
class Renderer extends CoreFeature {
  constructor(table) {
    super(table);
    this.elementVertical = table.rowManager.element;
    this.elementHorizontal = table.columnManager.element;
    this.tableElement = table.rowManager.tableElement;
    this.verticalFillMode = "fit";
  }
  ///////////////////////////////////
  /////// Internal Bindings /////////
  ///////////////////////////////////
  initialize() {
  }
  clearRows() {
  }
  clearColumns() {
  }
  reinitializeColumnWidths(columns) {
  }
  renderRows() {
  }
  renderColumns() {
  }
  rerenderRows(callback) {
    if (callback) {
      callback();
    }
  }
  rerenderColumns(update, blockRedraw) {
  }
  renderRowCells(row) {
  }
  rerenderRowCells(row, force) {
  }
  scrollColumns(left2, dir) {
  }
  scrollRows(top2, dir) {
  }
  resize() {
  }
  scrollToRow(row) {
  }
  scrollToRowNearestTop(row) {
  }
  visibleRows(includingBuffer) {
    return [];
  }
  ///////////////////////////////////
  //////// Helper Functions /////////
  ///////////////////////////////////
  rows() {
    return this.table.rowManager.getDisplayRows();
  }
  styleRow(row, index2) {
    var rowEl = row.getElement();
    if (index2 % 2) {
      rowEl.classList.add("tabulator-row-even");
      rowEl.classList.remove("tabulator-row-odd");
    } else {
      rowEl.classList.add("tabulator-row-odd");
      rowEl.classList.remove("tabulator-row-even");
    }
  }
  ///////////////////////////////////
  /////// External Triggers /////////
  /////// (DO NOT OVERRIDE) /////////
  ///////////////////////////////////
  clear() {
    this.clearRows();
    this.clearColumns();
  }
  render() {
    this.renderRows();
    this.renderColumns();
  }
  rerender(callback) {
    this.rerenderRows();
    this.rerenderColumns();
  }
  scrollToRowPosition(row, position, ifVisible) {
    var rowIndex = this.rows().indexOf(row), rowEl = row.getElement(), offset2 = 0;
    return new Promise((resolve2, reject) => {
      if (rowIndex > -1) {
        if (typeof ifVisible === "undefined") {
          ifVisible = this.table.options.scrollToRowIfVisible;
        }
        if (!ifVisible) {
          if (Helpers.elVisible(rowEl)) {
            offset2 = Helpers.elOffset(rowEl).top - Helpers.elOffset(this.elementVertical).top;
            if (offset2 > 0 && offset2 < this.elementVertical.clientHeight - rowEl.offsetHeight) {
              resolve2();
              return false;
            }
          }
        }
        if (typeof position === "undefined") {
          position = this.table.options.scrollToRowPosition;
        }
        if (position === "nearest") {
          position = this.scrollToRowNearestTop(row) ? "top" : "bottom";
        }
        this.scrollToRow(row);
        switch (position) {
          case "middle":
          case "center":
            if (this.elementVertical.scrollHeight - this.elementVertical.scrollTop == this.elementVertical.clientHeight) {
              this.elementVertical.scrollTop = this.elementVertical.scrollTop + (rowEl.offsetTop - this.elementVertical.scrollTop) - (this.elementVertical.scrollHeight - rowEl.offsetTop) / 2;
            } else {
              this.elementVertical.scrollTop = this.elementVertical.scrollTop - this.elementVertical.clientHeight / 2;
            }
            break;
          case "bottom":
            if (this.elementVertical.scrollHeight - this.elementVertical.scrollTop == this.elementVertical.clientHeight) {
              this.elementVertical.scrollTop = this.elementVertical.scrollTop - (this.elementVertical.scrollHeight - rowEl.offsetTop) + rowEl.offsetHeight;
            } else {
              this.elementVertical.scrollTop = this.elementVertical.scrollTop - this.elementVertical.clientHeight + rowEl.offsetHeight;
            }
            break;
          case "top":
            this.elementVertical.scrollTop = rowEl.offsetTop;
            break;
        }
        resolve2();
      } else {
        console.warn("Scroll Error - Row not visible");
        reject("Scroll Error - Row not visible");
      }
    });
  }
}
class BasicHorizontal extends Renderer {
  constructor(table) {
    super(table);
  }
  renderRowCells(row) {
    row.cells.forEach((cell) => {
      row.element.appendChild(cell.getElement());
      cell.cellRendered();
    });
  }
  reinitializeColumnWidths(columns) {
    columns.forEach(function(column) {
      column.reinitializeWidth();
    });
  }
}
class VirtualDomHorizontal extends Renderer {
  constructor(table) {
    super(table);
    this.leftCol = 0;
    this.rightCol = 0;
    this.scrollLeft = 0;
    this.vDomScrollPosLeft = 0;
    this.vDomScrollPosRight = 0;
    this.vDomPadLeft = 0;
    this.vDomPadRight = 0;
    this.fitDataColAvg = 0;
    this.windowBuffer = 200;
    this.visibleRows = null;
    this.initialized = false;
    this.isFitData = false;
    this.columns = [];
  }
  initialize() {
    this.compatibilityCheck();
    this.layoutCheck();
    this.vertScrollListen();
  }
  compatibilityCheck() {
    if (this.options("layout") == "fitDataTable") {
      console.warn("Horizontal Virtual DOM is not compatible with fitDataTable layout mode");
    }
    if (this.options("responsiveLayout")) {
      console.warn("Horizontal Virtual DOM is not compatible with responsive columns");
    }
    if (this.options("rtl")) {
      console.warn("Horizontal Virtual DOM is not currently compatible with RTL text direction");
    }
  }
  layoutCheck() {
    this.isFitData = this.options("layout").startsWith("fitData");
  }
  vertScrollListen() {
    this.subscribe("scroll-vertical", this.clearVisRowCache.bind(this));
    this.subscribe("data-refreshed", this.clearVisRowCache.bind(this));
  }
  clearVisRowCache() {
    this.visibleRows = null;
  }
  //////////////////////////////////////
  ///////// Public Functions ///////////
  //////////////////////////////////////
  renderColumns(row, force) {
    this.dataChange();
  }
  scrollColumns(left2, dir) {
    if (this.scrollLeft != left2) {
      this.scrollLeft = left2;
      this.scroll(left2 - (this.vDomScrollPosLeft + this.windowBuffer));
    }
  }
  calcWindowBuffer() {
    var buffer = this.elementVertical.clientWidth;
    this.table.columnManager.columnsByIndex.forEach((column) => {
      if (column.visible) {
        var width = column.getWidth();
        if (width > buffer) {
          buffer = width;
        }
      }
    });
    this.windowBuffer = buffer * 2;
  }
  rerenderColumns(update, blockRedraw) {
    var old = {
      cols: this.columns,
      leftCol: this.leftCol,
      rightCol: this.rightCol
    }, colPos = 0;
    if (update && !this.initialized) {
      return;
    }
    this.clear();
    this.calcWindowBuffer();
    this.scrollLeft = this.elementVertical.scrollLeft;
    this.vDomScrollPosLeft = this.scrollLeft - this.windowBuffer;
    this.vDomScrollPosRight = this.scrollLeft + this.elementVertical.clientWidth + this.windowBuffer;
    this.table.columnManager.columnsByIndex.forEach((column) => {
      var config = {}, width;
      if (column.visible) {
        if (!column.modules.frozen) {
          width = column.getWidth();
          config.leftPos = colPos;
          config.rightPos = colPos + width;
          config.width = width;
          if (this.isFitData) {
            config.fitDataCheck = column.modules.vdomHoz ? column.modules.vdomHoz.fitDataCheck : true;
          }
          if (colPos + width > this.vDomScrollPosLeft && colPos < this.vDomScrollPosRight) {
            if (this.leftCol == -1) {
              this.leftCol = this.columns.length;
              this.vDomPadLeft = colPos;
            }
            this.rightCol = this.columns.length;
          } else {
            if (this.leftCol !== -1) {
              this.vDomPadRight += width;
            }
          }
          this.columns.push(column);
          column.modules.vdomHoz = config;
          colPos += width;
        }
      }
    });
    this.tableElement.style.paddingLeft = this.vDomPadLeft + "px";
    this.tableElement.style.paddingRight = this.vDomPadRight + "px";
    this.initialized = true;
    if (!blockRedraw) {
      if (!update || this.reinitChanged(old)) {
        this.reinitializeRows();
      }
    }
    this.elementVertical.scrollLeft = this.scrollLeft;
  }
  renderRowCells(row) {
    if (this.initialized) {
      this.initializeRow(row);
    } else {
      row.cells.forEach((cell) => {
        row.element.appendChild(cell.getElement());
        cell.cellRendered();
      });
    }
  }
  rerenderRowCells(row, force) {
    this.reinitializeRow(row, force);
  }
  reinitializeColumnWidths(columns) {
    for (let i = this.leftCol; i <= this.rightCol; i++) {
      this.columns[i].reinitializeWidth();
    }
  }
  //////////////////////////////////////
  //////// Internal Rendering //////////
  //////////////////////////////////////
  deinitialize() {
    this.initialized = false;
  }
  clear() {
    this.columns = [];
    this.leftCol = -1;
    this.rightCol = 0;
    this.vDomScrollPosLeft = 0;
    this.vDomScrollPosRight = 0;
    this.vDomPadLeft = 0;
    this.vDomPadRight = 0;
  }
  dataChange() {
    var change = false, row, rowEl;
    if (this.isFitData) {
      this.table.columnManager.columnsByIndex.forEach((column) => {
        if (!column.definition.width && column.visible) {
          change = true;
        }
      });
      if (change && this.table.rowManager.getDisplayRows().length) {
        this.vDomScrollPosRight = this.scrollLeft + this.elementVertical.clientWidth + this.windowBuffer;
        row = this.chain("rows-sample", [1], [], () => {
          return this.table.rowManager.getDisplayRows();
        })[0];
        if (row) {
          rowEl = row.getElement();
          row.generateCells();
          this.tableElement.appendChild(rowEl);
          for (let colEnd = 0; colEnd < row.cells.length; colEnd++) {
            let cell = row.cells[colEnd];
            rowEl.appendChild(cell.getElement());
            cell.column.reinitializeWidth();
          }
          rowEl.parentNode.removeChild(rowEl);
          this.rerenderColumns(false, true);
        }
      }
    } else {
      if (this.options("layout") === "fitColumns") {
        this.layoutRefresh();
        this.rerenderColumns(false, true);
      }
    }
  }
  reinitChanged(old) {
    var match = true;
    if (old.cols.length !== this.columns.length || old.leftCol !== this.leftCol || old.rightCol !== this.rightCol) {
      return true;
    }
    old.cols.forEach((col, i) => {
      if (col !== this.columns[i]) {
        match = false;
      }
    });
    return !match;
  }
  reinitializeRows() {
    var visibleRows = this.getVisibleRows(), otherRows = this.table.rowManager.getRows().filter((row) => !visibleRows.includes(row));
    visibleRows.forEach((row) => {
      this.reinitializeRow(row, true);
    });
    otherRows.forEach((row) => {
      row.deinitialize();
    });
  }
  getVisibleRows() {
    if (!this.visibleRows) {
      this.visibleRows = this.table.rowManager.getVisibleRows();
    }
    return this.visibleRows;
  }
  scroll(diff2) {
    this.vDomScrollPosLeft += diff2;
    this.vDomScrollPosRight += diff2;
    if (Math.abs(diff2) > this.windowBuffer / 2) {
      this.rerenderColumns();
    } else {
      if (diff2 > 0) {
        this.addColRight();
        this.removeColLeft();
      } else {
        this.addColLeft();
        this.removeColRight();
      }
    }
  }
  colPositionAdjust(start2, end2, diff2) {
    for (let i = start2; i < end2; i++) {
      let column = this.columns[i];
      column.modules.vdomHoz.leftPos += diff2;
      column.modules.vdomHoz.rightPos += diff2;
    }
  }
  addColRight() {
    var changes = false, working = true;
    while (working) {
      let column = this.columns[this.rightCol + 1];
      if (column) {
        if (column.modules.vdomHoz.leftPos <= this.vDomScrollPosRight) {
          changes = true;
          this.getVisibleRows().forEach((row) => {
            if (row.type !== "group") {
              var cell = row.getCell(column);
              row.getElement().insertBefore(cell.getElement(), row.getCell(this.columns[this.rightCol]).getElement().nextSibling);
              cell.cellRendered();
            }
          });
          this.fitDataColActualWidthCheck(column);
          this.rightCol++;
          this.getVisibleRows().forEach((row) => {
            if (row.type !== "group") {
              row.modules.vdomHoz.rightCol = this.rightCol;
            }
          });
          if (this.rightCol >= this.columns.length - 1) {
            this.vDomPadRight = 0;
          } else {
            this.vDomPadRight -= column.getWidth();
          }
        } else {
          working = false;
        }
      } else {
        working = false;
      }
    }
    if (changes) {
      this.tableElement.style.paddingRight = this.vDomPadRight + "px";
    }
  }
  addColLeft() {
    var changes = false, working = true;
    while (working) {
      let column = this.columns[this.leftCol - 1];
      if (column) {
        if (column.modules.vdomHoz.rightPos >= this.vDomScrollPosLeft) {
          changes = true;
          this.getVisibleRows().forEach((row) => {
            if (row.type !== "group") {
              var cell = row.getCell(column);
              row.getElement().insertBefore(cell.getElement(), row.getCell(this.columns[this.leftCol]).getElement());
              cell.cellRendered();
            }
          });
          this.leftCol--;
          this.getVisibleRows().forEach((row) => {
            if (row.type !== "group") {
              row.modules.vdomHoz.leftCol = this.leftCol;
            }
          });
          if (this.leftCol <= 0) {
            this.vDomPadLeft = 0;
          } else {
            this.vDomPadLeft -= column.getWidth();
          }
          let diff2 = this.fitDataColActualWidthCheck(column);
          if (diff2) {
            this.scrollLeft = this.elementVertical.scrollLeft = this.elementVertical.scrollLeft + diff2;
            this.vDomPadRight -= diff2;
          }
        } else {
          working = false;
        }
      } else {
        working = false;
      }
    }
    if (changes) {
      this.tableElement.style.paddingLeft = this.vDomPadLeft + "px";
    }
  }
  removeColRight() {
    var changes = false, working = true;
    while (working) {
      let column = this.columns[this.rightCol];
      if (column) {
        if (column.modules.vdomHoz.leftPos > this.vDomScrollPosRight) {
          changes = true;
          this.getVisibleRows().forEach((row) => {
            if (row.type !== "group") {
              var cell = row.getCell(column);
              try {
                row.getElement().removeChild(cell.getElement());
              } catch (ex) {
                console.warn("Could not removeColRight", ex.message);
              }
            }
          });
          this.vDomPadRight += column.getWidth();
          this.rightCol--;
          this.getVisibleRows().forEach((row) => {
            if (row.type !== "group") {
              row.modules.vdomHoz.rightCol = this.rightCol;
            }
          });
        } else {
          working = false;
        }
      } else {
        working = false;
      }
    }
    if (changes) {
      this.tableElement.style.paddingRight = this.vDomPadRight + "px";
    }
  }
  removeColLeft() {
    var changes = false, working = true;
    while (working) {
      let column = this.columns[this.leftCol];
      if (column) {
        if (column.modules.vdomHoz.rightPos < this.vDomScrollPosLeft) {
          changes = true;
          this.getVisibleRows().forEach((row) => {
            if (row.type !== "group") {
              var cell = row.getCell(column);
              try {
                row.getElement().removeChild(cell.getElement());
              } catch (ex) {
                console.warn("Could not removeColLeft", ex.message);
              }
            }
          });
          this.vDomPadLeft += column.getWidth();
          this.leftCol++;
          this.getVisibleRows().forEach((row) => {
            if (row.type !== "group") {
              row.modules.vdomHoz.leftCol = this.leftCol;
            }
          });
        } else {
          working = false;
        }
      } else {
        working = false;
      }
    }
    if (changes) {
      this.tableElement.style.paddingLeft = this.vDomPadLeft + "px";
    }
  }
  fitDataColActualWidthCheck(column) {
    var newWidth, widthDiff;
    if (column.modules.vdomHoz.fitDataCheck) {
      column.reinitializeWidth();
      newWidth = column.getWidth();
      widthDiff = newWidth - column.modules.vdomHoz.width;
      if (widthDiff) {
        column.modules.vdomHoz.rightPos += widthDiff;
        column.modules.vdomHoz.width = newWidth;
        this.colPositionAdjust(this.columns.indexOf(column) + 1, this.columns.length, widthDiff);
      }
      column.modules.vdomHoz.fitDataCheck = false;
    }
    return widthDiff;
  }
  initializeRow(row) {
    if (row.type !== "group") {
      row.modules.vdomHoz = {
        leftCol: this.leftCol,
        rightCol: this.rightCol
      };
      if (this.table.modules.frozenColumns) {
        this.table.modules.frozenColumns.leftColumns.forEach((column) => {
          this.appendCell(row, column);
        });
      }
      for (let i = this.leftCol; i <= this.rightCol; i++) {
        this.appendCell(row, this.columns[i]);
      }
      if (this.table.modules.frozenColumns) {
        this.table.modules.frozenColumns.rightColumns.forEach((column) => {
          this.appendCell(row, column);
        });
      }
    }
  }
  appendCell(row, column) {
    if (column && column.visible) {
      let cell = row.getCell(column);
      row.getElement().appendChild(cell.getElement());
      cell.cellRendered();
    }
  }
  reinitializeRow(row, force) {
    if (row.type !== "group") {
      if (force || !row.modules.vdomHoz || row.modules.vdomHoz.leftCol !== this.leftCol || row.modules.vdomHoz.rightCol !== this.rightCol) {
        var rowEl = row.getElement();
        while (rowEl.firstChild)
          rowEl.removeChild(rowEl.firstChild);
        this.initializeRow(row);
      }
    }
  }
}
class ColumnManager extends CoreFeature {
  constructor(table) {
    super(table);
    this.blockHozScrollEvent = false;
    this.headersElement = null;
    this.contentsElement = null;
    this.element = null;
    this.columns = [];
    this.columnsByIndex = [];
    this.columnsByField = {};
    this.scrollLeft = 0;
    this.optionsList = new OptionsList(this.table, "column definition", defaultColumnOptions);
    this.redrawBlock = false;
    this.redrawBlockUpdate = null;
    this.renderer = null;
  }
  ////////////// Setup Functions /////////////////
  initialize() {
    this.initializeRenderer();
    this.headersElement = this.createHeadersElement();
    this.contentsElement = this.createHeaderContentsElement();
    this.element = this.createHeaderElement();
    this.contentsElement.insertBefore(this.headersElement, this.contentsElement.firstChild);
    this.element.insertBefore(this.contentsElement, this.element.firstChild);
    this.subscribe("scroll-horizontal", this.scrollHorizontal.bind(this));
    this.subscribe("scrollbar-vertical", this.padVerticalScrollbar.bind(this));
  }
  padVerticalScrollbar(width) {
    if (this.table.rtl) {
      this.headersElement.style.marginLeft = width + "px";
    } else {
      this.headersElement.style.marginRight = width + "px";
    }
  }
  initializeRenderer() {
    var renderClass;
    var renderers = {
      "virtual": VirtualDomHorizontal,
      "basic": BasicHorizontal
    };
    if (typeof this.table.options.renderHorizontal === "string") {
      renderClass = renderers[this.table.options.renderHorizontal];
    } else {
      renderClass = this.table.options.renderHorizontal;
    }
    if (renderClass) {
      this.renderer = new renderClass(this.table, this.element, this.tableElement);
      this.renderer.initialize();
    } else {
      console.error("Unable to find matching renderer:", this.table.options.renderHorizontal);
    }
  }
  createHeadersElement() {
    var el = document.createElement("div");
    el.classList.add("tabulator-headers");
    el.setAttribute("role", "row");
    return el;
  }
  createHeaderContentsElement() {
    var el = document.createElement("div");
    el.classList.add("tabulator-header-contents");
    el.setAttribute("role", "rowgroup");
    return el;
  }
  createHeaderElement() {
    var el = document.createElement("div");
    el.classList.add("tabulator-header");
    el.setAttribute("role", "rowgroup");
    if (!this.table.options.headerVisible) {
      el.classList.add("tabulator-header-hidden");
    }
    return el;
  }
  //return containing element
  getElement() {
    return this.element;
  }
  //return containing contents element
  getContentsElement() {
    return this.contentsElement;
  }
  //return header containing element
  getHeadersElement() {
    return this.headersElement;
  }
  //scroll horizontally to match table body
  scrollHorizontal(left2) {
    this.contentsElement.scrollLeft = left2;
    this.scrollLeft = left2;
    this.renderer.scrollColumns(left2);
  }
  ///////////// Column Setup Functions /////////////
  generateColumnsFromRowData(data) {
    var cols = [], definitions = this.table.options.autoColumnsDefinitions, row, sorter;
    if (data && data.length) {
      row = data[0];
      for (var key in row) {
        let col = {
          field: key,
          title: key
        };
        let value = row[key];
        switch (typeof value) {
          case "undefined":
            sorter = "string";
            break;
          case "boolean":
            sorter = "boolean";
            break;
          case "object":
            if (Array.isArray(value)) {
              sorter = "array";
            } else {
              sorter = "string";
            }
            break;
          default:
            if (!isNaN(value) && value !== "") {
              sorter = "number";
            } else {
              if (value.match(/((^[0-9]+[a-z]+)|(^[a-z]+[0-9]+))+$/i)) {
                sorter = "alphanum";
              } else {
                sorter = "string";
              }
            }
            break;
        }
        col.sorter = sorter;
        cols.push(col);
      }
      if (definitions) {
        switch (typeof definitions) {
          case "function":
            this.table.options.columns = definitions.call(this.table, cols);
            break;
          case "object":
            if (Array.isArray(definitions)) {
              cols.forEach((col) => {
                var match = definitions.find((def2) => {
                  return def2.field === col.field;
                });
                if (match) {
                  Object.assign(col, match);
                }
              });
            } else {
              cols.forEach((col) => {
                if (definitions[col.field]) {
                  Object.assign(col, definitions[col.field]);
                }
              });
            }
            this.table.options.columns = cols;
            break;
        }
      } else {
        this.table.options.columns = cols;
      }
      this.setColumns(this.table.options.columns);
    }
  }
  setColumns(cols, row) {
    while (this.headersElement.firstChild)
      this.headersElement.removeChild(this.headersElement.firstChild);
    this.columns = [];
    this.columnsByIndex = [];
    this.columnsByField = {};
    this.dispatch("columns-loading");
    cols.forEach((def2, i) => {
      this._addColumn(def2);
    });
    this._reIndexColumns();
    this.dispatch("columns-loaded");
    this.rerenderColumns(false, true);
    this.redraw(true);
  }
  _addColumn(definition, before, nextToColumn) {
    var column = new Column(definition, this), colEl = column.getElement(), index2 = nextToColumn ? this.findColumnIndex(nextToColumn) : nextToColumn;
    if (nextToColumn && index2 > -1) {
      var topColumn = nextToColumn.getTopColumn();
      var parentIndex = this.columns.indexOf(topColumn);
      var nextEl = topColumn.getElement();
      if (before) {
        this.columns.splice(parentIndex, 0, column);
        nextEl.parentNode.insertBefore(colEl, nextEl);
      } else {
        this.columns.splice(parentIndex + 1, 0, column);
        nextEl.parentNode.insertBefore(colEl, nextEl.nextSibling);
      }
    } else {
      if (before) {
        this.columns.unshift(column);
        this.headersElement.insertBefore(column.getElement(), this.headersElement.firstChild);
      } else {
        this.columns.push(column);
        this.headersElement.appendChild(column.getElement());
      }
    }
    column.columnRendered();
    return column;
  }
  registerColumnField(col) {
    if (col.definition.field) {
      this.columnsByField[col.definition.field] = col;
    }
  }
  registerColumnPosition(col) {
    this.columnsByIndex.push(col);
  }
  _reIndexColumns() {
    this.columnsByIndex = [];
    this.columns.forEach(function(column) {
      column.reRegisterPosition();
    });
  }
  //ensure column headers take up the correct amount of space in column groups
  verticalAlignHeaders() {
    var minHeight = 0;
    if (!this.redrawBlock) {
      this.headersElement.style.height = "";
      this.columns.forEach((column) => {
        column.clearVerticalAlign();
      });
      this.columns.forEach((column) => {
        var height = column.getHeight();
        if (height > minHeight) {
          minHeight = height;
        }
      });
      this.headersElement.style.height = minHeight + "px";
      this.columns.forEach((column) => {
        column.verticalAlign(this.table.options.columnHeaderVertAlign, minHeight);
      });
      this.table.rowManager.adjustTableSize();
    }
  }
  //////////////// Column Details /////////////////
  findColumn(subject) {
    var columns;
    if (typeof subject == "object") {
      if (subject instanceof Column) {
        return subject;
      } else if (subject instanceof ColumnComponent) {
        return subject._getSelf() || false;
      } else if (typeof HTMLElement !== "undefined" && subject instanceof HTMLElement) {
        columns = [];
        this.columns.forEach((column) => {
          columns.push(column);
          columns = columns.concat(column.getColumns(true));
        });
        let match = columns.find((column) => {
          return column.element === subject;
        });
        return match || false;
      }
    } else {
      return this.columnsByField[subject] || false;
    }
    return false;
  }
  getColumnByField(field) {
    return this.columnsByField[field];
  }
  getColumnsByFieldRoot(root) {
    var matches = [];
    Object.keys(this.columnsByField).forEach((field) => {
      var fieldRoot = field.split(".")[0];
      if (fieldRoot === root) {
        matches.push(this.columnsByField[field]);
      }
    });
    return matches;
  }
  getColumnByIndex(index2) {
    return this.columnsByIndex[index2];
  }
  getFirstVisibleColumn() {
    var index2 = this.columnsByIndex.findIndex((col) => {
      return col.visible;
    });
    return index2 > -1 ? this.columnsByIndex[index2] : false;
  }
  getColumns() {
    return this.columns;
  }
  findColumnIndex(column) {
    return this.columnsByIndex.findIndex((col) => {
      return column === col;
    });
  }
  //return all columns that are not groups
  getRealColumns() {
    return this.columnsByIndex;
  }
  //traverse across columns and call action
  traverse(callback) {
    this.columnsByIndex.forEach((column, i) => {
      callback(column, i);
    });
  }
  //get definitions of actual columns
  getDefinitions(active) {
    var output = [];
    this.columnsByIndex.forEach((column) => {
      if (!active || active && column.visible) {
        output.push(column.getDefinition());
      }
    });
    return output;
  }
  //get full nested definition tree
  getDefinitionTree() {
    var output = [];
    this.columns.forEach((column) => {
      output.push(column.getDefinition(true));
    });
    return output;
  }
  getComponents(structured) {
    var output = [], columns = structured ? this.columns : this.columnsByIndex;
    columns.forEach((column) => {
      output.push(column.getComponent());
    });
    return output;
  }
  getWidth() {
    var width = 0;
    this.columnsByIndex.forEach((column) => {
      if (column.visible) {
        width += column.getWidth();
      }
    });
    return width;
  }
  moveColumn(from2, to2, after) {
    to2.element.parentNode.insertBefore(from2.element, to2.element);
    if (after) {
      to2.element.parentNode.insertBefore(to2.element, from2.element);
    }
    this.moveColumnActual(from2, to2, after);
    this.verticalAlignHeaders();
    this.table.rowManager.reinitialize();
  }
  moveColumnActual(from2, to2, after) {
    if (from2.parent.isGroup) {
      this._moveColumnInArray(from2.parent.columns, from2, to2, after);
    } else {
      this._moveColumnInArray(this.columns, from2, to2, after);
    }
    this._moveColumnInArray(this.columnsByIndex, from2, to2, after, true);
    this.rerenderColumns(true);
    this.dispatch("column-moved", from2, to2, after);
    if (this.subscribedExternal("columnMoved")) {
      this.dispatchExternal("columnMoved", from2.getComponent(), this.table.columnManager.getComponents());
    }
  }
  _moveColumnInArray(columns, from2, to2, after, updateRows) {
    var fromIndex = columns.indexOf(from2), toIndex, rows2 = [];
    if (fromIndex > -1) {
      columns.splice(fromIndex, 1);
      toIndex = columns.indexOf(to2);
      if (toIndex > -1) {
        if (after) {
          toIndex = toIndex + 1;
        }
      } else {
        toIndex = fromIndex;
      }
      columns.splice(toIndex, 0, from2);
      if (updateRows) {
        rows2 = this.chain("column-moving-rows", [from2, to2, after], null, []) || [];
        rows2 = rows2.concat(this.table.rowManager.rows);
        rows2.forEach(function(row) {
          if (row.cells.length) {
            var cell = row.cells.splice(fromIndex, 1)[0];
            row.cells.splice(toIndex, 0, cell);
          }
        });
      }
    }
  }
  scrollToColumn(column, position, ifVisible) {
    var left2 = 0, offset2 = column.getLeftOffset(), adjust = 0, colEl = column.getElement();
    return new Promise((resolve2, reject) => {
      if (typeof position === "undefined") {
        position = this.table.options.scrollToColumnPosition;
      }
      if (typeof ifVisible === "undefined") {
        ifVisible = this.table.options.scrollToColumnIfVisible;
      }
      if (column.visible) {
        switch (position) {
          case "middle":
          case "center":
            adjust = -this.element.clientWidth / 2;
            break;
          case "right":
            adjust = colEl.clientWidth - this.headersElement.clientWidth;
            break;
        }
        if (!ifVisible) {
          if (offset2 > 0 && offset2 + colEl.offsetWidth < this.element.clientWidth) {
            return false;
          }
        }
        left2 = offset2 + adjust;
        left2 = Math.max(Math.min(left2, this.table.rowManager.element.scrollWidth - this.table.rowManager.element.clientWidth), 0);
        this.table.rowManager.scrollHorizontal(left2);
        this.scrollHorizontal(left2);
        resolve2();
      } else {
        console.warn("Scroll Error - Column not visible");
        reject("Scroll Error - Column not visible");
      }
    });
  }
  //////////////// Cell Management /////////////////
  generateCells(row) {
    var cells = [];
    this.columnsByIndex.forEach((column) => {
      cells.push(column.generateCell(row));
    });
    return cells;
  }
  //////////////// Column Management /////////////////
  getFlexBaseWidth() {
    var totalWidth = this.table.element.clientWidth, fixedWidth = 0;
    if (this.table.rowManager.element.scrollHeight > this.table.rowManager.element.clientHeight) {
      totalWidth -= this.table.rowManager.element.offsetWidth - this.table.rowManager.element.clientWidth;
    }
    this.columnsByIndex.forEach(function(column) {
      var width, minWidth, colWidth;
      if (column.visible) {
        width = column.definition.width || 0;
        minWidth = parseInt(column.minWidth);
        if (typeof width == "string") {
          if (width.indexOf("%") > -1) {
            colWidth = totalWidth / 100 * parseInt(width);
          } else {
            colWidth = parseInt(width);
          }
        } else {
          colWidth = width;
        }
        fixedWidth += colWidth > minWidth ? colWidth : minWidth;
      }
    });
    return fixedWidth;
  }
  addColumn(definition, before, nextToColumn) {
    return new Promise((resolve2, reject) => {
      var column = this._addColumn(definition, before, nextToColumn);
      this._reIndexColumns();
      this.dispatch("column-add", definition, before, nextToColumn);
      if (this.layoutMode() != "fitColumns") {
        column.reinitializeWidth();
      }
      this.redraw(true);
      this.table.rowManager.reinitialize();
      this.rerenderColumns();
      resolve2(column);
    });
  }
  //remove column from system
  deregisterColumn(column) {
    var field = column.getField(), index2;
    if (field) {
      delete this.columnsByField[field];
    }
    index2 = this.columnsByIndex.indexOf(column);
    if (index2 > -1) {
      this.columnsByIndex.splice(index2, 1);
    }
    index2 = this.columns.indexOf(column);
    if (index2 > -1) {
      this.columns.splice(index2, 1);
    }
    this.verticalAlignHeaders();
    this.redraw();
  }
  rerenderColumns(update, silent) {
    if (!this.redrawBlock) {
      this.renderer.rerenderColumns(update, silent);
    } else {
      if (update === false || update === true && this.redrawBlockUpdate === null) {
        this.redrawBlockUpdate = update;
      }
    }
  }
  blockRedraw() {
    this.redrawBlock = true;
    this.redrawBlockUpdate = null;
  }
  restoreRedraw() {
    this.redrawBlock = false;
    this.verticalAlignHeaders();
    this.renderer.rerenderColumns(this.redrawBlockUpdate);
  }
  //redraw columns
  redraw(force) {
    if (Helpers.elVisible(this.element)) {
      this.verticalAlignHeaders();
    }
    if (force) {
      this.table.rowManager.resetScroll();
      this.table.rowManager.reinitialize();
    }
    if (!this.confirm("table-redrawing", force)) {
      this.layoutRefresh(force);
    }
    this.dispatch("table-redraw", force);
    this.table.footerManager.redraw();
  }
}
class BasicVertical extends Renderer {
  constructor(table) {
    super(table);
    this.verticalFillMode = "fill";
    this.scrollTop = 0;
    this.scrollLeft = 0;
    this.scrollTop = 0;
    this.scrollLeft = 0;
  }
  clearRows() {
    var element = this.tableElement;
    while (element.firstChild)
      element.removeChild(element.firstChild);
    element.scrollTop = 0;
    element.scrollLeft = 0;
    element.style.minWidth = "";
    element.style.minHeight = "";
    element.style.display = "";
    element.style.visibility = "";
  }
  renderRows() {
    var element = this.tableElement, onlyGroupHeaders = true;
    this.rows().forEach((row, index2) => {
      this.styleRow(row, index2);
      element.appendChild(row.getElement());
      row.initialize(true);
      if (row.type !== "group") {
        onlyGroupHeaders = false;
      }
    });
    if (onlyGroupHeaders) {
      element.style.minWidth = this.table.columnManager.getWidth() + "px";
    } else {
      element.style.minWidth = "";
    }
  }
  rerenderRows(callback) {
    this.clearRows();
    if (callback) {
      callback();
    }
    this.renderRows();
  }
  scrollToRowNearestTop(row) {
    var rowTop = Helpers.elOffset(row.getElement()).top;
    return !(Math.abs(this.elementVertical.scrollTop - rowTop) > Math.abs(this.elementVertical.scrollTop + this.elementVertical.clientHeight - rowTop));
  }
  scrollToRow(row) {
    var rowEl = row.getElement();
    this.elementVertical.scrollTop = Helpers.elOffset(rowEl).top - Helpers.elOffset(this.elementVertical).top + this.elementVertical.scrollTop;
  }
  visibleRows(includingBuffer) {
    return this.rows();
  }
}
class VirtualDomVertical extends Renderer {
  constructor(table) {
    super(table);
    this.verticalFillMode = "fill";
    this.scrollTop = 0;
    this.scrollLeft = 0;
    this.vDomRowHeight = 20;
    this.vDomTop = 0;
    this.vDomBottom = 0;
    this.vDomScrollPosTop = 0;
    this.vDomScrollPosBottom = 0;
    this.vDomTopPad = 0;
    this.vDomBottomPad = 0;
    this.vDomMaxRenderChain = 90;
    this.vDomWindowBuffer = 0;
    this.vDomWindowMinTotalRows = 20;
    this.vDomWindowMinMarginRows = 5;
    this.vDomTopNewRows = [];
    this.vDomBottomNewRows = [];
  }
  //////////////////////////////////////
  ///////// Public Functions ///////////
  //////////////////////////////////////
  clearRows() {
    var element = this.tableElement;
    while (element.firstChild)
      element.removeChild(element.firstChild);
    element.style.paddingTop = "";
    element.style.paddingBottom = "";
    element.style.minHeight = "";
    element.style.display = "";
    element.style.visibility = "";
    this.elementVertical.scrollTop = 0;
    this.elementVertical.scrollLeft = 0;
    this.scrollTop = 0;
    this.scrollLeft = 0;
    this.vDomTop = 0;
    this.vDomBottom = 0;
    this.vDomTopPad = 0;
    this.vDomBottomPad = 0;
    this.vDomScrollPosTop = 0;
    this.vDomScrollPosBottom = 0;
  }
  renderRows() {
    this._virtualRenderFill();
  }
  rerenderRows(callback) {
    var scrollTop = this.elementVertical.scrollTop;
    var topRow = false;
    var topOffset = false;
    var left2 = this.table.rowManager.scrollLeft;
    var rows2 = this.rows();
    for (var i = this.vDomTop; i <= this.vDomBottom; i++) {
      if (rows2[i]) {
        var diff2 = scrollTop - rows2[i].getElement().offsetTop;
        if (topOffset === false || Math.abs(diff2) < topOffset) {
          topOffset = diff2;
          topRow = i;
        } else {
          break;
        }
      }
    }
    rows2.forEach((row) => {
      row.deinitializeHeight();
    });
    if (callback) {
      callback();
    }
    if (this.rows().length) {
      this._virtualRenderFill(topRow === false ? this.rows.length - 1 : topRow, true, topOffset || 0);
    } else {
      this.clear();
      this.table.rowManager.tableEmpty();
    }
    this.scrollColumns(left2);
  }
  scrollColumns(left2) {
    this.table.rowManager.scrollHorizontal(left2);
  }
  scrollRows(top2, dir) {
    var topDiff = top2 - this.vDomScrollPosTop;
    var bottomDiff = top2 - this.vDomScrollPosBottom;
    var margin = this.vDomWindowBuffer * 2;
    var rows2 = this.rows();
    this.scrollTop = top2;
    if (-topDiff > margin || bottomDiff > margin) {
      var left2 = this.table.rowManager.scrollLeft;
      this._virtualRenderFill(Math.floor(this.elementVertical.scrollTop / this.elementVertical.scrollHeight * rows2.length));
      this.scrollColumns(left2);
    } else {
      if (dir) {
        if (topDiff < 0) {
          this._addTopRow(rows2, -topDiff);
        }
        if (bottomDiff < 0) {
          if (this.vDomScrollHeight - this.scrollTop > this.vDomWindowBuffer) {
            this._removeBottomRow(rows2, -bottomDiff);
          } else {
            this.vDomScrollPosBottom = this.scrollTop;
          }
        }
      } else {
        if (bottomDiff >= 0) {
          this._addBottomRow(rows2, bottomDiff);
        }
        if (topDiff >= 0) {
          if (this.scrollTop > this.vDomWindowBuffer) {
            this._removeTopRow(rows2, topDiff);
          } else {
            this.vDomScrollPosTop = this.scrollTop;
          }
        }
      }
    }
  }
  resize() {
    this.vDomWindowBuffer = this.table.options.renderVerticalBuffer || this.elementVertical.clientHeight;
  }
  scrollToRowNearestTop(row) {
    var rowIndex = this.rows().indexOf(row);
    return !(Math.abs(this.vDomTop - rowIndex) > Math.abs(this.vDomBottom - rowIndex));
  }
  scrollToRow(row) {
    var index2 = this.rows().indexOf(row);
    if (index2 > -1) {
      this._virtualRenderFill(index2, true);
    }
  }
  visibleRows(includingBuffer) {
    var topEdge = this.elementVertical.scrollTop, bottomEdge = this.elementVertical.clientHeight + topEdge, topFound = false, topRow = 0, bottomRow = 0, rows2 = this.rows();
    if (includingBuffer) {
      topRow = this.vDomTop;
      bottomRow = this.vDomBottom;
    } else {
      for (var i = this.vDomTop; i <= this.vDomBottom; i++) {
        if (rows2[i]) {
          if (!topFound) {
            if (topEdge - rows2[i].getElement().offsetTop >= 0) {
              topRow = i;
            } else {
              topFound = true;
              if (bottomEdge - rows2[i].getElement().offsetTop >= 0) {
                bottomRow = i;
              } else {
                break;
              }
            }
          } else {
            if (bottomEdge - rows2[i].getElement().offsetTop >= 0) {
              bottomRow = i;
            } else {
              break;
            }
          }
        }
      }
    }
    return rows2.slice(topRow, bottomRow + 1);
  }
  //////////////////////////////////////
  //////// Internal Rendering //////////
  //////////////////////////////////////
  //full virtual render
  _virtualRenderFill(position, forceMove, offset2) {
    var element = this.tableElement, holder = this.elementVertical, topPad = 0, rowsHeight = 0, heightOccupied = 0, topPadHeight = 0, i = 0, rows2 = this.rows(), rowsCount = rows2.length, containerHeight = this.elementVertical.clientHeight;
    position = position || 0;
    offset2 = offset2 || 0;
    if (!position) {
      this.clear();
    } else {
      while (element.firstChild)
        element.removeChild(element.firstChild);
      heightOccupied = (rowsCount - position + 1) * this.vDomRowHeight;
      if (heightOccupied < containerHeight) {
        position -= Math.ceil((containerHeight - heightOccupied) / this.vDomRowHeight);
        if (position < 0) {
          position = 0;
        }
      }
      topPad = Math.min(Math.max(Math.floor(this.vDomWindowBuffer / this.vDomRowHeight), this.vDomWindowMinMarginRows), position);
      position -= topPad;
    }
    if (rowsCount && Helpers.elVisible(this.elementVertical)) {
      this.vDomTop = position;
      this.vDomBottom = position - 1;
      while ((rowsHeight <= containerHeight + this.vDomWindowBuffer || i < this.vDomWindowMinTotalRows) && this.vDomBottom < rowsCount - 1) {
        var index2 = this.vDomBottom + 1, row = rows2[index2], rowHeight = 0;
        this.styleRow(row, index2);
        element.appendChild(row.getElement());
        row.initialize();
        if (!row.heightInitialized) {
          row.normalizeHeight(true);
        }
        rowHeight = row.getHeight();
        if (i < topPad) {
          topPadHeight += rowHeight;
        } else {
          rowsHeight += rowHeight;
        }
        if (rowHeight > this.vDomWindowBuffer) {
          this.vDomWindowBuffer = rowHeight * 2;
        }
        this.vDomBottom++;
        i++;
      }
      if (!position) {
        this.vDomTopPad = 0;
        this.vDomRowHeight = Math.floor((rowsHeight + topPadHeight) / i);
        this.vDomBottomPad = this.vDomRowHeight * (rowsCount - this.vDomBottom - 1);
        this.vDomScrollHeight = topPadHeight + rowsHeight + this.vDomBottomPad - containerHeight;
      } else {
        this.vDomTopPad = !forceMove ? this.scrollTop - topPadHeight : this.vDomRowHeight * this.vDomTop + offset2;
        this.vDomBottomPad = this.vDomBottom == rowsCount - 1 ? 0 : Math.max(this.vDomScrollHeight - this.vDomTopPad - rowsHeight - topPadHeight, 0);
      }
      element.style.paddingTop = this.vDomTopPad + "px";
      element.style.paddingBottom = this.vDomBottomPad + "px";
      if (forceMove) {
        this.scrollTop = this.vDomTopPad + topPadHeight + offset2 - (this.elementVertical.scrollWidth > this.elementVertical.clientWidth ? this.elementVertical.offsetHeight - containerHeight : 0);
      }
      this.scrollTop = Math.min(this.scrollTop, this.elementVertical.scrollHeight - containerHeight);
      if (this.elementVertical.scrollWidth > this.elementVertical.clientWidth && forceMove) {
        this.scrollTop += this.elementVertical.offsetHeight - containerHeight;
      }
      this.vDomScrollPosTop = this.scrollTop;
      this.vDomScrollPosBottom = this.scrollTop;
      holder.scrollTop = this.scrollTop;
      this.dispatch("render-virtual-fill");
    }
  }
  _addTopRow(rows2, fillableSpace) {
    var table = this.tableElement, addedRows = [], paddingAdjust = 0, index2 = this.vDomTop - 1, i = 0, working = true;
    while (working) {
      if (this.vDomTop) {
        let row = rows2[index2], rowHeight, initialized;
        if (row && i < this.vDomMaxRenderChain) {
          rowHeight = row.getHeight() || this.vDomRowHeight;
          initialized = row.initialized;
          if (fillableSpace >= rowHeight) {
            this.styleRow(row, index2);
            table.insertBefore(row.getElement(), table.firstChild);
            if (!row.initialized || !row.heightInitialized) {
              addedRows.push(row);
            }
            row.initialize();
            if (!initialized) {
              rowHeight = row.getElement().offsetHeight;
              if (rowHeight > this.vDomWindowBuffer) {
                this.vDomWindowBuffer = rowHeight * 2;
              }
            }
            fillableSpace -= rowHeight;
            paddingAdjust += rowHeight;
            this.vDomTop--;
            index2--;
            i++;
          } else {
            working = false;
          }
        } else {
          working = false;
        }
      } else {
        working = false;
      }
    }
    for (let row of addedRows) {
      row.clearCellHeight();
    }
    this._quickNormalizeRowHeight(addedRows);
    if (paddingAdjust) {
      this.vDomTopPad -= paddingAdjust;
      if (this.vDomTopPad < 0) {
        this.vDomTopPad = index2 * this.vDomRowHeight;
      }
      if (index2 < 1) {
        this.vDomTopPad = 0;
      }
      table.style.paddingTop = this.vDomTopPad + "px";
      this.vDomScrollPosTop -= paddingAdjust;
    }
  }
  _removeTopRow(rows2, fillableSpace) {
    var removableRows = [], paddingAdjust = 0, i = 0, working = true;
    while (working) {
      let row = rows2[this.vDomTop], rowHeight;
      if (row && i < this.vDomMaxRenderChain) {
        rowHeight = row.getHeight() || this.vDomRowHeight;
        if (fillableSpace >= rowHeight) {
          this.vDomTop++;
          fillableSpace -= rowHeight;
          paddingAdjust += rowHeight;
          removableRows.push(row);
          i++;
        } else {
          working = false;
        }
      } else {
        working = false;
      }
    }
    for (let row of removableRows) {
      let rowEl = row.getElement();
      if (rowEl.parentNode) {
        rowEl.parentNode.removeChild(rowEl);
      }
    }
    if (paddingAdjust) {
      this.vDomTopPad += paddingAdjust;
      this.tableElement.style.paddingTop = this.vDomTopPad + "px";
      this.vDomScrollPosTop += this.vDomTop ? paddingAdjust : paddingAdjust + this.vDomWindowBuffer;
    }
  }
  _addBottomRow(rows2, fillableSpace) {
    var table = this.tableElement, addedRows = [], paddingAdjust = 0, index2 = this.vDomBottom + 1, i = 0, working = true;
    while (working) {
      let row = rows2[index2], rowHeight, initialized;
      if (row && i < this.vDomMaxRenderChain) {
        rowHeight = row.getHeight() || this.vDomRowHeight;
        initialized = row.initialized;
        if (fillableSpace >= rowHeight) {
          this.styleRow(row, index2);
          table.appendChild(row.getElement());
          if (!row.initialized || !row.heightInitialized) {
            addedRows.push(row);
          }
          row.initialize();
          if (!initialized) {
            rowHeight = row.getElement().offsetHeight;
            if (rowHeight > this.vDomWindowBuffer) {
              this.vDomWindowBuffer = rowHeight * 2;
            }
          }
          fillableSpace -= rowHeight;
          paddingAdjust += rowHeight;
          this.vDomBottom++;
          index2++;
          i++;
        } else {
          working = false;
        }
      } else {
        working = false;
      }
    }
    for (let row of addedRows) {
      row.clearCellHeight();
    }
    this._quickNormalizeRowHeight(addedRows);
    if (paddingAdjust) {
      this.vDomBottomPad -= paddingAdjust;
      if (this.vDomBottomPad < 0 || index2 == rows2.length - 1) {
        this.vDomBottomPad = 0;
      }
      table.style.paddingBottom = this.vDomBottomPad + "px";
      this.vDomScrollPosBottom += paddingAdjust;
    }
  }
  _removeBottomRow(rows2, fillableSpace) {
    var removableRows = [], paddingAdjust = 0, i = 0, working = true;
    while (working) {
      let row = rows2[this.vDomBottom], rowHeight;
      if (row && i < this.vDomMaxRenderChain) {
        rowHeight = row.getHeight() || this.vDomRowHeight;
        if (fillableSpace >= rowHeight) {
          this.vDomBottom--;
          fillableSpace -= rowHeight;
          paddingAdjust += rowHeight;
          removableRows.push(row);
          i++;
        } else {
          working = false;
        }
      } else {
        working = false;
      }
    }
    for (let row of removableRows) {
      let rowEl = row.getElement();
      if (rowEl.parentNode) {
        rowEl.parentNode.removeChild(rowEl);
      }
    }
    if (paddingAdjust) {
      this.vDomBottomPad += paddingAdjust;
      if (this.vDomBottomPad < 0) {
        this.vDomBottomPad = 0;
      }
      this.tableElement.style.paddingBottom = this.vDomBottomPad + "px";
      this.vDomScrollPosBottom -= paddingAdjust;
    }
  }
  _quickNormalizeRowHeight(rows2) {
    for (let row of rows2) {
      row.calcHeight();
    }
    for (let row of rows2) {
      row.setCellHeight();
    }
  }
}
class RowManager extends CoreFeature {
  constructor(table) {
    super(table);
    this.element = this.createHolderElement();
    this.tableElement = this.createTableElement();
    this.heightFixer = this.createTableElement();
    this.placeholder = null;
    this.placeholderContents = null;
    this.firstRender = false;
    this.renderMode = "virtual";
    this.fixedHeight = false;
    this.rows = [];
    this.activeRowsPipeline = [];
    this.activeRows = [];
    this.activeRowsCount = 0;
    this.displayRows = [];
    this.displayRowsCount = 0;
    this.scrollTop = 0;
    this.scrollLeft = 0;
    this.redrawBlock = false;
    this.redrawBlockRestoreConfig = false;
    this.redrawBlockRenderInPosition = false;
    this.dataPipeline = [];
    this.displayPipeline = [];
    this.scrollbarWidth = 0;
    this.renderer = null;
  }
  //////////////// Setup Functions /////////////////
  createHolderElement() {
    var el = document.createElement("div");
    el.classList.add("tabulator-tableholder");
    el.setAttribute("tabindex", 0);
    return el;
  }
  createTableElement() {
    var el = document.createElement("div");
    el.classList.add("tabulator-table");
    el.setAttribute("role", "rowgroup");
    return el;
  }
  initializePlaceholder() {
    var placeholder = this.table.options.placeholder;
    if (placeholder) {
      let el = document.createElement("div");
      el.classList.add("tabulator-placeholder");
      if (typeof placeholder == "string") {
        let contents = document.createElement("div");
        contents.classList.add("tabulator-placeholder-contents");
        contents.innerHTML = placeholder;
        el.appendChild(contents);
        this.placeholderContents = contents;
      } else if (typeof HTMLElement !== "undefined" && placeholder instanceof HTMLElement) {
        el.appendChild(placeholder);
        this.placeholderContents = placeholder;
      } else {
        console.warn("Invalid placeholder provided, must be string or HTML Element", placeholder);
        this.el = null;
      }
      this.placeholder = el;
    }
  }
  //return containing element
  getElement() {
    return this.element;
  }
  //return table element
  getTableElement() {
    return this.tableElement;
  }
  initialize() {
    this.initializePlaceholder();
    this.initializeRenderer();
    this.element.appendChild(this.tableElement);
    this.firstRender = true;
    this.element.addEventListener("scroll", () => {
      var left2 = this.element.scrollLeft, leftDir = this.scrollLeft > left2, top2 = this.element.scrollTop, topDir = this.scrollTop > top2;
      if (this.scrollLeft != left2) {
        this.scrollLeft = left2;
        this.dispatch("scroll-horizontal", left2, leftDir);
        this.dispatchExternal("scrollHorizontal", left2, leftDir);
        this._positionPlaceholder();
      }
      if (this.scrollTop != top2) {
        this.scrollTop = top2;
        this.renderer.scrollRows(top2, topDir);
        this.dispatch("scroll-vertical", top2, topDir);
        this.dispatchExternal("scrollVertical", top2, topDir);
      }
    });
  }
  ////////////////// Row Manipulation //////////////////
  findRow(subject) {
    if (typeof subject == "object") {
      if (subject instanceof Row) {
        return subject;
      } else if (subject instanceof RowComponent) {
        return subject._getSelf() || false;
      } else if (typeof HTMLElement !== "undefined" && subject instanceof HTMLElement) {
        let match = this.rows.find((row) => {
          return row.getElement() === subject;
        });
        return match || false;
      } else if (subject === null) {
        return false;
      }
    } else if (typeof subject == "undefined") {
      return false;
    } else {
      let match = this.rows.find((row) => {
        return row.data[this.table.options.index] == subject;
      });
      return match || false;
    }
    return false;
  }
  getRowFromDataObject(data) {
    var match = this.rows.find((row) => {
      return row.data === data;
    });
    return match || false;
  }
  getRowFromPosition(position) {
    return this.getDisplayRows().find((row) => {
      return row.getPosition() === position && row.isDisplayed();
    });
  }
  scrollToRow(row, position, ifVisible) {
    return this.renderer.scrollToRowPosition(row, position, ifVisible);
  }
  ////////////////// Data Handling //////////////////
  setData(data, renderInPosition, columnsChanged) {
    return new Promise((resolve2, reject) => {
      if (renderInPosition && this.getDisplayRows().length) {
        if (this.table.options.pagination) {
          this._setDataActual(data, true);
        } else {
          this.reRenderInPosition(() => {
            this._setDataActual(data);
          });
        }
      } else {
        if (this.table.options.autoColumns && columnsChanged && this.table.initialized) {
          this.table.columnManager.generateColumnsFromRowData(data);
        }
        this.resetScroll();
        this._setDataActual(data);
      }
      resolve2();
    });
  }
  _setDataActual(data, renderInPosition) {
    this.dispatchExternal("dataProcessing", data);
    this._wipeElements();
    if (Array.isArray(data)) {
      this.dispatch("data-processing", data);
      data.forEach((def2, i) => {
        if (def2 && typeof def2 === "object") {
          var row = new Row(def2, this);
          this.rows.push(row);
        } else {
          console.warn("Data Loading Warning - Invalid row data detected and ignored, expecting object but received:", def2);
        }
      });
      this.refreshActiveData(false, false, renderInPosition);
      this.dispatch("data-processed", data);
      this.dispatchExternal("dataProcessed", data);
    } else {
      console.error("Data Loading Error - Unable to process data due to invalid data type \nExpecting: array \nReceived: ", typeof data, "\nData:     ", data);
    }
  }
  _wipeElements() {
    this.dispatch("rows-wipe");
    this.destroy();
    this.adjustTableSize();
    this.dispatch("rows-wiped");
  }
  destroy() {
    this.rows.forEach((row) => {
      row.wipe();
    });
    this.rows = [];
    this.activeRows = [];
    this.activeRowsPipeline = [];
    this.activeRowsCount = 0;
    this.displayRows = [];
    this.displayRowsCount = 0;
  }
  deleteRow(row, blockRedraw) {
    var allIndex = this.rows.indexOf(row), activeIndex = this.activeRows.indexOf(row);
    if (activeIndex > -1) {
      this.activeRows.splice(activeIndex, 1);
    }
    if (allIndex > -1) {
      this.rows.splice(allIndex, 1);
    }
    this.setActiveRows(this.activeRows);
    this.displayRowIterator((rows2) => {
      var displayIndex = rows2.indexOf(row);
      if (displayIndex > -1) {
        rows2.splice(displayIndex, 1);
      }
    });
    if (!blockRedraw) {
      this.reRenderInPosition();
    }
    this.regenerateRowPositions();
    this.dispatchExternal("rowDeleted", row.getComponent());
    if (!this.displayRowsCount) {
      this.tableEmpty();
    }
    if (this.subscribedExternal("dataChanged")) {
      this.dispatchExternal("dataChanged", this.getData());
    }
  }
  addRow(data, pos, index2, blockRedraw) {
    var row = this.addRowActual(data, pos, index2, blockRedraw);
    return row;
  }
  //add multiple rows
  addRows(data, pos, index2, refreshDisplayOnly) {
    var rows2 = [];
    return new Promise((resolve2, reject) => {
      pos = this.findAddRowPos(pos);
      if (!Array.isArray(data)) {
        data = [data];
      }
      if (typeof index2 == "undefined" && pos || typeof index2 !== "undefined" && !pos) {
        data.reverse();
      }
      data.forEach((item, i) => {
        var row = this.addRow(item, pos, index2, true);
        rows2.push(row);
        this.dispatch("row-added", row, item, pos, index2);
      });
      this.refreshActiveData(refreshDisplayOnly ? "displayPipeline" : false, false, true);
      this.regenerateRowPositions();
      if (rows2.length) {
        this._clearPlaceholder();
      }
      resolve2(rows2);
    });
  }
  findAddRowPos(pos) {
    if (typeof pos === "undefined") {
      pos = this.table.options.addRowPos;
    }
    if (pos === "pos") {
      pos = true;
    }
    if (pos === "bottom") {
      pos = false;
    }
    return pos;
  }
  addRowActual(data, pos, index2, blockRedraw) {
    var row = data instanceof Row ? data : new Row(data || {}, this), top2 = this.findAddRowPos(pos), allIndex = -1, activeIndex, chainResult;
    if (!index2) {
      chainResult = this.chain("row-adding-position", [row, top2], null, { index: index2, top: top2 });
      index2 = chainResult.index;
      top2 = chainResult.top;
    }
    if (typeof index2 !== "undefined") {
      index2 = this.findRow(index2);
    }
    index2 = this.chain("row-adding-index", [row, index2, top2], null, index2);
    if (index2) {
      allIndex = this.rows.indexOf(index2);
    }
    if (index2 && allIndex > -1) {
      activeIndex = this.activeRows.indexOf(index2);
      this.displayRowIterator(function(rows2) {
        var displayIndex = rows2.indexOf(index2);
        if (displayIndex > -1) {
          rows2.splice(top2 ? displayIndex : displayIndex + 1, 0, row);
        }
      });
      if (activeIndex > -1) {
        this.activeRows.splice(top2 ? activeIndex : activeIndex + 1, 0, row);
      }
      this.rows.splice(top2 ? allIndex : allIndex + 1, 0, row);
    } else {
      if (top2) {
        this.displayRowIterator(function(rows2) {
          rows2.unshift(row);
        });
        this.activeRows.unshift(row);
        this.rows.unshift(row);
      } else {
        this.displayRowIterator(function(rows2) {
          rows2.push(row);
        });
        this.activeRows.push(row);
        this.rows.push(row);
      }
    }
    this.setActiveRows(this.activeRows);
    this.dispatchExternal("rowAdded", row.getComponent());
    if (this.subscribedExternal("dataChanged")) {
      this.dispatchExternal("dataChanged", this.table.rowManager.getData());
    }
    if (!blockRedraw) {
      this.reRenderInPosition();
    }
    return row;
  }
  moveRow(from2, to2, after) {
    this.dispatch("row-move", from2, to2, after);
    this.moveRowActual(from2, to2, after);
    this.regenerateRowPositions();
    this.dispatch("row-moved", from2, to2, after);
    this.dispatchExternal("rowMoved", from2.getComponent());
  }
  moveRowActual(from2, to2, after) {
    this.moveRowInArray(this.rows, from2, to2, after);
    this.moveRowInArray(this.activeRows, from2, to2, after);
    this.displayRowIterator((rows2) => {
      this.moveRowInArray(rows2, from2, to2, after);
    });
    this.dispatch("row-moving", from2, to2, after);
  }
  moveRowInArray(rows2, from2, to2, after) {
    var fromIndex, toIndex, start2, end2;
    if (from2 !== to2) {
      fromIndex = rows2.indexOf(from2);
      if (fromIndex > -1) {
        rows2.splice(fromIndex, 1);
        toIndex = rows2.indexOf(to2);
        if (toIndex > -1) {
          if (after) {
            rows2.splice(toIndex + 1, 0, from2);
          } else {
            rows2.splice(toIndex, 0, from2);
          }
        } else {
          rows2.splice(fromIndex, 0, from2);
        }
      }
      if (rows2 === this.getDisplayRows()) {
        start2 = fromIndex < toIndex ? fromIndex : toIndex;
        end2 = toIndex > fromIndex ? toIndex : fromIndex + 1;
        for (let i = start2; i <= end2; i++) {
          if (rows2[i]) {
            this.styleRow(rows2[i], i);
          }
        }
      }
    }
  }
  clearData() {
    this.setData([]);
  }
  getRowIndex(row) {
    return this.findRowIndex(row, this.rows);
  }
  getDisplayRowIndex(row) {
    var index2 = this.getDisplayRows().indexOf(row);
    return index2 > -1 ? index2 : false;
  }
  nextDisplayRow(row, rowOnly) {
    var index2 = this.getDisplayRowIndex(row), nextRow = false;
    if (index2 !== false && index2 < this.displayRowsCount - 1) {
      nextRow = this.getDisplayRows()[index2 + 1];
    }
    if (nextRow && (!(nextRow instanceof Row) || nextRow.type != "row")) {
      return this.nextDisplayRow(nextRow, rowOnly);
    }
    return nextRow;
  }
  prevDisplayRow(row, rowOnly) {
    var index2 = this.getDisplayRowIndex(row), prevRow = false;
    if (index2) {
      prevRow = this.getDisplayRows()[index2 - 1];
    }
    if (rowOnly && prevRow && (!(prevRow instanceof Row) || prevRow.type != "row")) {
      return this.prevDisplayRow(prevRow, rowOnly);
    }
    return prevRow;
  }
  findRowIndex(row, list2) {
    var rowIndex;
    row = this.findRow(row);
    if (row) {
      rowIndex = list2.indexOf(row);
      if (rowIndex > -1) {
        return rowIndex;
      }
    }
    return false;
  }
  getData(active, transform) {
    var output = [], rows2 = this.getRows(active);
    rows2.forEach(function(row) {
      if (row.type == "row") {
        output.push(row.getData(transform || "data"));
      }
    });
    return output;
  }
  getComponents(active) {
    var output = [], rows2 = this.getRows(active);
    rows2.forEach(function(row) {
      output.push(row.getComponent());
    });
    return output;
  }
  getDataCount(active) {
    var rows2 = this.getRows(active);
    return rows2.length;
  }
  scrollHorizontal(left2) {
    this.scrollLeft = left2;
    this.element.scrollLeft = left2;
    this.dispatch("scroll-horizontal", left2);
  }
  registerDataPipelineHandler(handler, priority) {
    if (typeof priority !== "undefined") {
      this.dataPipeline.push({ handler, priority });
      this.dataPipeline.sort((a, b) => {
        return a.priority - b.priority;
      });
    } else {
      console.error("Data pipeline handlers must have a priority in order to be registered");
    }
  }
  registerDisplayPipelineHandler(handler, priority) {
    if (typeof priority !== "undefined") {
      this.displayPipeline.push({ handler, priority });
      this.displayPipeline.sort((a, b) => {
        return a.priority - b.priority;
      });
    } else {
      console.error("Display pipeline handlers must have a priority in order to be registered");
    }
  }
  //set active data set
  refreshActiveData(handler, skipStage, renderInPosition) {
    var table = this.table, stage = "", index2 = 0, cascadeOrder = ["all", "dataPipeline", "display", "displayPipeline", "end"];
    if (!this.table.destroyed) {
      if (typeof handler === "function") {
        index2 = this.dataPipeline.findIndex((item) => {
          return item.handler === handler;
        });
        if (index2 > -1) {
          stage = "dataPipeline";
          if (skipStage) {
            if (index2 == this.dataPipeline.length - 1) {
              stage = "display";
            } else {
              index2++;
            }
          }
        } else {
          index2 = this.displayPipeline.findIndex((item) => {
            return item.handler === handler;
          });
          if (index2 > -1) {
            stage = "displayPipeline";
            if (skipStage) {
              if (index2 == this.displayPipeline.length - 1) {
                stage = "end";
              } else {
                index2++;
              }
            }
          } else {
            console.error("Unable to refresh data, invalid handler provided", handler);
            return;
          }
        }
      } else {
        stage = handler || "all";
        index2 = 0;
      }
      if (this.redrawBlock) {
        if (!this.redrawBlockRestoreConfig || this.redrawBlockRestoreConfig && (this.redrawBlockRestoreConfig.stage === stage && index2 < this.redrawBlockRestoreConfig.index || cascadeOrder.indexOf(stage) < cascadeOrder.indexOf(this.redrawBlockRestoreConfig.stage))) {
          this.redrawBlockRestoreConfig = {
            handler,
            skipStage,
            renderInPosition,
            stage,
            index: index2
          };
        }
        return;
      } else {
        if (Helpers.elVisible(this.element)) {
          if (renderInPosition) {
            this.reRenderInPosition(this.refreshPipelines.bind(this, handler, stage, index2, renderInPosition));
          } else {
            this.refreshPipelines(handler, stage, index2, renderInPosition);
            if (!handler) {
              this.table.columnManager.renderer.renderColumns();
            }
            this.renderTable();
            if (table.options.layoutColumnsOnNewData) {
              this.table.columnManager.redraw(true);
            }
          }
        } else {
          this.refreshPipelines(handler, stage, index2, renderInPosition);
        }
        this.dispatch("data-refreshed");
      }
    }
  }
  refreshPipelines(handler, stage, index2, renderInPosition) {
    this.dispatch("data-refreshing");
    if (!handler) {
      this.activeRowsPipeline[0] = this.rows.slice(0);
    }
    switch (stage) {
      case "all":
      case "dataPipeline":
        for (let i = index2; i < this.dataPipeline.length; i++) {
          let result = this.dataPipeline[i].handler(this.activeRowsPipeline[i].slice(0));
          this.activeRowsPipeline[i + 1] = result || this.activeRowsPipeline[i].slice(0);
        }
        this.setActiveRows(this.activeRowsPipeline[this.dataPipeline.length]);
      case "display":
        index2 = 0;
        this.resetDisplayRows();
      case "displayPipeline":
        for (let i = index2; i < this.displayPipeline.length; i++) {
          let result = this.displayPipeline[i].handler((i ? this.getDisplayRows(i - 1) : this.activeRows).slice(0), renderInPosition);
          this.setDisplayRows(result || this.getDisplayRows(i - 1).slice(0), i);
        }
      case "end":
        this.regenerateRowPositions();
    }
    if (this.getDisplayRows().length) {
      this._clearPlaceholder();
    }
  }
  //regenerate row positions
  regenerateRowPositions() {
    var rows2 = this.getDisplayRows();
    var index2 = 1;
    rows2.forEach((row) => {
      if (row.type === "row") {
        row.setPosition(index2);
        index2++;
      }
    });
  }
  setActiveRows(activeRows) {
    this.activeRows = this.activeRows = Object.assign([], activeRows);
    this.activeRowsCount = this.activeRows.length;
  }
  //reset display rows array
  resetDisplayRows() {
    this.displayRows = [];
    this.displayRows.push(this.activeRows.slice(0));
    this.displayRowsCount = this.displayRows[0].length;
  }
  //set display row pipeline data
  setDisplayRows(displayRows, index2) {
    this.displayRows[index2] = displayRows;
    if (index2 == this.displayRows.length - 1) {
      this.displayRowsCount = this.displayRows[this.displayRows.length - 1].length;
    }
  }
  getDisplayRows(index2) {
    if (typeof index2 == "undefined") {
      return this.displayRows.length ? this.displayRows[this.displayRows.length - 1] : [];
    } else {
      return this.displayRows[index2] || [];
    }
  }
  getVisibleRows(chain, viewable) {
    var rows2 = Object.assign([], this.renderer.visibleRows(!viewable));
    if (chain) {
      rows2 = this.chain("rows-visible", [viewable], rows2, rows2);
    }
    return rows2;
  }
  //repeat action across display rows
  displayRowIterator(callback) {
    this.activeRowsPipeline.forEach(callback);
    this.displayRows.forEach(callback);
    this.displayRowsCount = this.displayRows[this.displayRows.length - 1].length;
  }
  //return only actual rows (not group headers etc)
  getRows(type) {
    var rows2 = [];
    switch (type) {
      case "active":
        rows2 = this.activeRows;
        break;
      case "display":
        rows2 = this.table.rowManager.getDisplayRows();
        break;
      case "visible":
        rows2 = this.getVisibleRows(false, true);
        break;
      default:
        rows2 = this.chain("rows-retrieve", type, null, this.rows) || this.rows;
    }
    return rows2;
  }
  ///////////////// Table Rendering /////////////////
  //trigger rerender of table in current position
  reRenderInPosition(callback) {
    if (this.redrawBlock) {
      if (callback) {
        callback();
      } else {
        this.redrawBlockRenderInPosition = true;
      }
    } else {
      this.dispatchExternal("renderStarted");
      this.renderer.rerenderRows(callback);
      if (!this.fixedHeight) {
        this.adjustTableSize();
      }
      this.scrollBarCheck();
      this.dispatchExternal("renderComplete");
    }
  }
  scrollBarCheck() {
    var scrollbarWidth = 0;
    if (this.element.scrollHeight > this.element.clientHeight) {
      scrollbarWidth = this.element.offsetWidth - this.element.clientWidth;
    }
    if (scrollbarWidth !== this.scrollbarWidth) {
      this.scrollbarWidth = scrollbarWidth;
      this.dispatch("scrollbar-vertical", scrollbarWidth);
    }
  }
  initializeRenderer() {
    var renderClass;
    var renderers = {
      "virtual": VirtualDomVertical,
      "basic": BasicVertical
    };
    if (typeof this.table.options.renderVertical === "string") {
      renderClass = renderers[this.table.options.renderVertical];
    } else {
      renderClass = this.table.options.renderVertical;
    }
    if (renderClass) {
      this.renderMode = this.table.options.renderVertical;
      this.renderer = new renderClass(this.table, this.element, this.tableElement);
      this.renderer.initialize();
      if ((this.table.element.clientHeight || this.table.options.height) && !(this.table.options.minHeight && this.table.options.maxHeight)) {
        this.fixedHeight = true;
      } else {
        this.fixedHeight = false;
      }
    } else {
      console.error("Unable to find matching renderer:", this.table.options.renderVertical);
    }
  }
  getRenderMode() {
    return this.renderMode;
  }
  renderTable() {
    this.dispatchExternal("renderStarted");
    this.element.scrollTop = 0;
    this._clearTable();
    if (this.displayRowsCount) {
      this.renderer.renderRows();
      if (this.firstRender) {
        this.firstRender = false;
        if (!this.fixedHeight) {
          this.adjustTableSize();
        }
        this.layoutRefresh(true);
      }
    } else {
      this.renderEmptyScroll();
    }
    if (!this.fixedHeight) {
      this.adjustTableSize();
    }
    this.dispatch("table-layout");
    if (!this.displayRowsCount) {
      this._showPlaceholder();
    }
    this.scrollBarCheck();
    this.dispatchExternal("renderComplete");
  }
  //show scrollbars on empty table div
  renderEmptyScroll() {
    if (this.placeholder) {
      this.tableElement.style.display = "none";
    } else {
      this.tableElement.style.minWidth = this.table.columnManager.getWidth() + "px";
    }
  }
  _clearTable() {
    this._clearPlaceholder();
    this.scrollTop = 0;
    this.scrollLeft = 0;
    this.renderer.clearRows();
  }
  tableEmpty() {
    this.renderEmptyScroll();
    this._showPlaceholder();
  }
  _showPlaceholder() {
    if (this.placeholder) {
      this.placeholder.setAttribute("tabulator-render-mode", this.renderMode);
      this.getElement().appendChild(this.placeholder);
      this._positionPlaceholder();
    }
  }
  _clearPlaceholder() {
    if (this.placeholder && this.placeholder.parentNode) {
      this.placeholder.parentNode.removeChild(this.placeholder);
    }
    this.tableElement.style.minWidth = "";
    this.tableElement.style.display = "";
  }
  _positionPlaceholder() {
    if (this.placeholder && this.placeholder.parentNode) {
      this.placeholder.style.width = this.table.columnManager.getWidth() + "px";
      this.placeholderContents.style.width = this.table.rowManager.element.clientWidth + "px";
      this.placeholderContents.style.marginLeft = this.scrollLeft + "px";
    }
  }
  styleRow(row, index2) {
    var rowEl = row.getElement();
    if (index2 % 2) {
      rowEl.classList.add("tabulator-row-even");
      rowEl.classList.remove("tabulator-row-odd");
    } else {
      rowEl.classList.add("tabulator-row-odd");
      rowEl.classList.remove("tabulator-row-even");
    }
  }
  //normalize height of active rows
  normalizeHeight() {
    this.activeRows.forEach(function(row) {
      row.normalizeHeight();
    });
  }
  //adjust the height of the table holder to fit in the Tabulator element
  adjustTableSize() {
    var initialHeight = this.element.clientHeight, minHeight;
    if (this.renderer.verticalFillMode === "fill") {
      let otherHeight = Math.floor(this.table.columnManager.getElement().getBoundingClientRect().height + (this.table.footerManager && this.table.footerManager.active && !this.table.footerManager.external ? this.table.footerManager.getElement().getBoundingClientRect().height : 0));
      if (this.fixedHeight) {
        minHeight = isNaN(this.table.options.minHeight) ? this.table.options.minHeight : this.table.options.minHeight + "px";
        this.element.style.minHeight = minHeight || "calc(100% - " + otherHeight + "px)";
        this.element.style.height = "calc(100% - " + otherHeight + "px)";
        this.element.style.maxHeight = "calc(100% - " + otherHeight + "px)";
      } else {
        this.element.style.height = "";
        this.element.style.height = this.table.element.clientHeight - otherHeight + "px";
        this.element.scrollTop = this.scrollTop;
      }
      this.renderer.resize();
      if (!this.fixedHeight && initialHeight != this.element.clientHeight) {
        if (this.subscribed("table-resize")) {
          this.dispatch("table-resize");
        } else {
          this.redraw();
        }
      }
      this.scrollBarCheck();
    }
    this._positionPlaceholder();
  }
  //reinitialize all rows
  reinitialize() {
    this.rows.forEach(function(row) {
      row.reinitialize(true);
    });
  }
  //prevent table from being redrawn
  blockRedraw() {
    this.redrawBlock = true;
    this.redrawBlockRestoreConfig = false;
  }
  //restore table redrawing
  restoreRedraw() {
    this.redrawBlock = false;
    if (this.redrawBlockRestoreConfig) {
      this.refreshActiveData(this.redrawBlockRestoreConfig.handler, this.redrawBlockRestoreConfig.skipStage, this.redrawBlockRestoreConfig.renderInPosition);
      this.redrawBlockRestoreConfig = false;
    } else {
      if (this.redrawBlockRenderInPosition) {
        this.reRenderInPosition();
      }
    }
    this.redrawBlockRenderInPosition = false;
  }
  //redraw table
  redraw(force) {
    var left2 = this.scrollLeft;
    this.adjustTableSize();
    this.table.tableWidth = this.table.element.clientWidth;
    if (!force) {
      this.reRenderInPosition();
      this.scrollHorizontal(left2);
    } else {
      this.renderTable();
    }
  }
  resetScroll() {
    this.element.scrollLeft = 0;
    this.element.scrollTop = 0;
    if (this.table.browser === "ie") {
      var event = document.createEvent("Event");
      event.initEvent("scroll", false, true);
      this.element.dispatchEvent(event);
    } else {
      this.element.dispatchEvent(new Event("scroll"));
    }
  }
}
class FooterManager extends CoreFeature {
  constructor(table) {
    super(table);
    this.active = false;
    this.element = this.createElement();
    this.containerElement = this.createContainerElement();
    this.external = false;
  }
  initialize() {
    this.initializeElement();
  }
  createElement() {
    var el = document.createElement("div");
    el.classList.add("tabulator-footer");
    return el;
  }
  createContainerElement() {
    var el = document.createElement("div");
    el.classList.add("tabulator-footer-contents");
    this.element.appendChild(el);
    return el;
  }
  initializeElement() {
    if (this.table.options.footerElement) {
      switch (typeof this.table.options.footerElement) {
        case "string":
          if (this.table.options.footerElement[0] === "<") {
            this.containerElement.innerHTML = this.table.options.footerElement;
          } else {
            this.external = true;
            this.containerElement = document.querySelector(this.table.options.footerElement);
          }
          break;
        default:
          this.element = this.table.options.footerElement;
          break;
      }
    }
  }
  getElement() {
    return this.element;
  }
  append(element) {
    this.activate();
    this.containerElement.appendChild(element);
    this.table.rowManager.adjustTableSize();
  }
  prepend(element) {
    this.activate();
    this.element.insertBefore(element, this.element.firstChild);
    this.table.rowManager.adjustTableSize();
  }
  remove(element) {
    element.parentNode.removeChild(element);
    this.deactivate();
  }
  deactivate(force) {
    if (!this.element.firstChild || force) {
      if (!this.external) {
        this.element.parentNode.removeChild(this.element);
      }
      this.active = false;
    }
  }
  activate() {
    if (!this.active) {
      this.active = true;
      if (!this.external) {
        this.table.element.appendChild(this.getElement());
        this.table.element.style.display = "";
      }
    }
  }
  redraw() {
    this.dispatch("footer-redraw");
  }
}
class InteractionManager extends CoreFeature {
  constructor(table) {
    super(table);
    this.el = null;
    this.abortClasses = ["tabulator-headers", "tabulator-table"];
    this.previousTargets = {};
    this.listeners = [
      "click",
      "dblclick",
      "contextmenu",
      "mouseenter",
      "mouseleave",
      "mouseover",
      "mouseout",
      "mousemove",
      "mouseup",
      "mousedown",
      "touchstart",
      "touchend"
    ];
    this.componentMap = {
      "tabulator-cell": "cell",
      "tabulator-row": "row",
      "tabulator-group": "group",
      "tabulator-col": "column"
    };
    this.pseudoTrackers = {
      "row": {
        subscriber: null,
        target: null
      },
      "cell": {
        subscriber: null,
        target: null
      },
      "group": {
        subscriber: null,
        target: null
      },
      "column": {
        subscriber: null,
        target: null
      }
    };
    this.pseudoTracking = false;
  }
  initialize() {
    this.el = this.table.element;
    this.buildListenerMap();
    this.bindSubscriptionWatchers();
  }
  buildListenerMap() {
    var listenerMap = {};
    this.listeners.forEach((listener) => {
      listenerMap[listener] = {
        handler: null,
        components: []
      };
    });
    this.listeners = listenerMap;
  }
  bindPseudoEvents() {
    Object.keys(this.pseudoTrackers).forEach((key) => {
      this.pseudoTrackers[key].subscriber = this.pseudoMouseEnter.bind(this, key);
      this.subscribe(key + "-mouseover", this.pseudoTrackers[key].subscriber);
    });
    this.pseudoTracking = true;
  }
  pseudoMouseEnter(key, e, target) {
    if (this.pseudoTrackers[key].target !== target) {
      if (this.pseudoTrackers[key].target) {
        this.dispatch(key + "-mouseleave", e, this.pseudoTrackers[key].target);
      }
      this.pseudoMouseLeave(key, e);
      this.pseudoTrackers[key].target = target;
      this.dispatch(key + "-mouseenter", e, target);
    }
  }
  pseudoMouseLeave(key, e) {
    var leaveList = Object.keys(this.pseudoTrackers), linkedKeys = {
      "row": ["cell"],
      "cell": ["row"]
    };
    leaveList = leaveList.filter((item) => {
      var links = linkedKeys[key];
      return item !== key && (!links || links && !links.includes(item));
    });
    leaveList.forEach((key2) => {
      var target = this.pseudoTrackers[key2].target;
      if (this.pseudoTrackers[key2].target) {
        this.dispatch(key2 + "-mouseleave", e, target);
        this.pseudoTrackers[key2].target = null;
      }
    });
  }
  bindSubscriptionWatchers() {
    var listeners = Object.keys(this.listeners), components = Object.values(this.componentMap);
    for (let comp of components) {
      for (let listener of listeners) {
        let key = comp + "-" + listener;
        this.subscriptionChange(key, this.subscriptionChanged.bind(this, comp, listener));
      }
    }
    this.subscribe("table-destroy", this.clearWatchers.bind(this));
  }
  subscriptionChanged(component, key, added) {
    var listener = this.listeners[key].components, index2 = listener.indexOf(component), changed = false;
    if (added) {
      if (index2 === -1) {
        listener.push(component);
        changed = true;
      }
    } else {
      if (!this.subscribed(component + "-" + key)) {
        if (index2 > -1) {
          listener.splice(index2, 1);
          changed = true;
        }
      }
    }
    if ((key === "mouseenter" || key === "mouseleave") && !this.pseudoTracking) {
      this.bindPseudoEvents();
    }
    if (changed) {
      this.updateEventListeners();
    }
  }
  updateEventListeners() {
    for (let key in this.listeners) {
      let listener = this.listeners[key];
      if (listener.components.length) {
        if (!listener.handler) {
          listener.handler = this.track.bind(this, key);
          this.el.addEventListener(key, listener.handler);
        }
      } else {
        if (listener.handler) {
          this.el.removeEventListener(key, listener.handler);
          listener.handler = null;
        }
      }
    }
  }
  track(type, e) {
    var path = e.composedPath && e.composedPath() || e.path;
    var targets = this.findTargets(path);
    targets = this.bindComponents(type, targets);
    this.triggerEvents(type, e, targets);
    if (this.pseudoTracking && (type == "mouseover" || type == "mouseleave") && !Object.keys(targets).length) {
      this.pseudoMouseLeave("none", e);
    }
  }
  findTargets(path) {
    var targets = {};
    let componentMap = Object.keys(this.componentMap);
    for (let el of path) {
      let classList = el.classList ? [...el.classList] : [];
      let abort = classList.filter((item) => {
        return this.abortClasses.includes(item);
      });
      if (abort.length) {
        break;
      }
      let elTargets = classList.filter((item) => {
        return componentMap.includes(item);
      });
      for (let target of elTargets) {
        if (!targets[this.componentMap[target]]) {
          targets[this.componentMap[target]] = el;
        }
      }
    }
    if (targets.group && targets.group === targets.row) {
      delete targets.row;
    }
    return targets;
  }
  bindComponents(type, targets) {
    var keys2 = Object.keys(targets).reverse(), listener = this.listeners[type], matches = {}, targetMatches = {};
    for (let key of keys2) {
      let component, target = targets[key], previousTarget = this.previousTargets[key];
      if (previousTarget && previousTarget.target === target) {
        component = previousTarget.component;
      } else {
        switch (key) {
          case "row":
          case "group":
            if (listener.components.includes("row") || listener.components.includes("cell") || listener.components.includes("group")) {
              let rows2 = this.table.rowManager.getVisibleRows(true);
              component = rows2.find((row) => {
                return row.getElement() === target;
              });
              if (targets["row"] && targets["row"].parentNode && targets["row"].parentNode.closest(".tabulator-row")) {
                targets[key] = false;
              }
            }
            break;
          case "column":
            if (listener.components.includes("column")) {
              component = this.table.columnManager.findColumn(target);
            }
            break;
          case "cell":
            if (listener.components.includes("cell")) {
              if (matches["row"] instanceof Row) {
                component = matches["row"].findCell(target);
              } else {
                if (targets["row"]) {
                  console.warn("Event Target Lookup Error - The row this cell is attached to cannot be found, has the table been reinitialized without being destroyed first?");
                }
              }
            }
            break;
        }
      }
      if (component) {
        matches[key] = component;
        targetMatches[key] = {
          target,
          component
        };
      }
    }
    this.previousTargets = targetMatches;
    return matches;
  }
  triggerEvents(type, e, targets) {
    var listener = this.listeners[type];
    for (let key in targets) {
      if (targets[key] && listener.components.includes(key)) {
        this.dispatch(key + "-" + type, e, targets[key]);
      }
    }
  }
  clearWatchers() {
    for (let key in this.listeners) {
      let listener = this.listeners[key];
      if (listener.handler) {
        this.el.removeEventListener(key, listener.handler);
        listener.handler = null;
      }
    }
  }
}
class ComponentFunctionBinder {
  constructor(table) {
    this.table = table;
    this.bindings = {};
  }
  bind(type, funcName, handler) {
    if (!this.bindings[type]) {
      this.bindings[type] = {};
    }
    if (this.bindings[type][funcName]) {
      console.warn("Unable to bind component handler, a matching function name is already bound", type, funcName, handler);
    } else {
      this.bindings[type][funcName] = handler;
    }
  }
  handle(type, component, name) {
    if (this.bindings[type] && this.bindings[type][name] && typeof this.bindings[type][name].bind === "function") {
      return this.bindings[type][name].bind(null, component);
    } else {
      if (name !== "then" && typeof name === "string" && !name.startsWith("_")) {
        if (this.table.options.debugInvalidComponentFuncs) {
          console.error("The " + type + " component does not have a " + name + " function, have you checked that you have the correct Tabulator module installed?");
        }
      }
    }
  }
}
class DataLoader extends CoreFeature {
  constructor(table) {
    super(table);
    this.requestOrder = 0;
    this.loading = false;
  }
  initialize() {
  }
  load(data, params, config, replace, silent, columnsChanged) {
    var requestNo = ++this.requestOrder;
    this.dispatchExternal("dataLoading", data);
    if (data && (data.indexOf("{") == 0 || data.indexOf("[") == 0)) {
      data = JSON.parse(data);
    }
    if (this.confirm("data-loading", [data, params, config, silent])) {
      this.loading = true;
      if (!silent) {
        this.alertLoader();
      }
      params = this.chain("data-params", [data, config, silent], params || {}, params || {});
      params = this.mapParams(params, this.table.options.dataSendParams);
      var result = this.chain("data-load", [data, params, config, silent], false, Promise.resolve([]));
      return result.then((response) => {
        if (!Array.isArray(response) && typeof response == "object") {
          response = this.mapParams(response, this.objectInvert(this.table.options.dataReceiveParams));
        }
        var rowData = this.chain("data-loaded", response, null, response);
        if (requestNo == this.requestOrder) {
          this.clearAlert();
          if (rowData !== false) {
            this.dispatchExternal("dataLoaded", rowData);
            this.table.rowManager.setData(rowData, replace, typeof columnsChanged === "undefined" ? !replace : columnsChanged);
          }
        } else {
          console.warn("Data Load Response Blocked - An active data load request was blocked by an attempt to change table data while the request was being made");
        }
      }).catch((error) => {
        console.error("Data Load Error: ", error);
        this.dispatchExternal("dataLoadError", error);
        if (!silent) {
          this.alertError();
        }
        setTimeout(() => {
          this.clearAlert();
        }, this.table.options.dataLoaderErrorTimeout);
      }).finally(() => {
        this.loading = false;
      });
    } else {
      this.dispatchExternal("dataLoaded", data);
      if (!data) {
        data = [];
      }
      this.table.rowManager.setData(data, replace, typeof columnsChanged === "undefined" ? !replace : columnsChanged);
      return Promise.resolve();
    }
  }
  mapParams(params, map2) {
    var output = {};
    for (let key in params) {
      output[map2.hasOwnProperty(key) ? map2[key] : key] = params[key];
    }
    return output;
  }
  objectInvert(obj) {
    var output = {};
    for (let key in obj) {
      output[obj[key]] = key;
    }
    return output;
  }
  blockActiveLoad() {
    this.requestOrder++;
  }
  alertLoader() {
    var shouldLoad = typeof this.table.options.dataLoader === "function" ? this.table.options.dataLoader() : this.table.options.dataLoader;
    if (shouldLoad) {
      this.table.alertManager.alert(this.table.options.dataLoaderLoading || this.langText("data|loading"));
    }
  }
  alertError() {
    this.table.alertManager.alert(this.table.options.dataLoaderError || this.langText("data|error"), "error");
  }
  clearAlert() {
    this.table.alertManager.clear();
  }
}
class ExternalEventBus {
  constructor(table, optionsList, debug) {
    this.table = table;
    this.events = {};
    this.optionsList = optionsList || {};
    this.subscriptionNotifiers = {};
    this.dispatch = debug ? this._debugDispatch.bind(this) : this._dispatch.bind(this);
    this.debug = debug;
  }
  subscriptionChange(key, callback) {
    if (!this.subscriptionNotifiers[key]) {
      this.subscriptionNotifiers[key] = [];
    }
    this.subscriptionNotifiers[key].push(callback);
    if (this.subscribed(key)) {
      this._notifySubscriptionChange(key, true);
    }
  }
  subscribe(key, callback) {
    if (!this.events[key]) {
      this.events[key] = [];
    }
    this.events[key].push(callback);
    this._notifySubscriptionChange(key, true);
  }
  unsubscribe(key, callback) {
    var index2;
    if (this.events[key]) {
      if (callback) {
        index2 = this.events[key].findIndex((item) => {
          return item === callback;
        });
        if (index2 > -1) {
          this.events[key].splice(index2, 1);
        } else {
          console.warn("Cannot remove event, no matching event found:", key, callback);
          return;
        }
      } else {
        delete this.events[key];
      }
    } else {
      console.warn("Cannot remove event, no events set on:", key);
      return;
    }
    this._notifySubscriptionChange(key, false);
  }
  subscribed(key) {
    return this.events[key] && this.events[key].length;
  }
  _notifySubscriptionChange(key, subscribed) {
    var notifiers = this.subscriptionNotifiers[key];
    if (notifiers) {
      notifiers.forEach((callback) => {
        callback(subscribed);
      });
    }
  }
  _dispatch() {
    var args = Array.from(arguments), key = args.shift(), result;
    if (this.events[key]) {
      this.events[key].forEach((callback, i) => {
        let callResult = callback.apply(this.table, args);
        if (!i) {
          result = callResult;
        }
      });
    }
    return result;
  }
  _debugDispatch() {
    var args = Array.from(arguments), key = args[0];
    args[0] = "ExternalEvent:" + args[0];
    if (this.debug === true || this.debug.includes(key)) {
      console.log(...args);
    }
    return this._dispatch(...arguments);
  }
}
class InternalEventBus {
  constructor(debug) {
    this.events = {};
    this.subscriptionNotifiers = {};
    this.dispatch = debug ? this._debugDispatch.bind(this) : this._dispatch.bind(this);
    this.chain = debug ? this._debugChain.bind(this) : this._chain.bind(this);
    this.confirm = debug ? this._debugConfirm.bind(this) : this._confirm.bind(this);
    this.debug = debug;
  }
  subscriptionChange(key, callback) {
    if (!this.subscriptionNotifiers[key]) {
      this.subscriptionNotifiers[key] = [];
    }
    this.subscriptionNotifiers[key].push(callback);
    if (this.subscribed(key)) {
      this._notifySubscriptionChange(key, true);
    }
  }
  subscribe(key, callback, priority = 1e4) {
    if (!this.events[key]) {
      this.events[key] = [];
    }
    this.events[key].push({ callback, priority });
    this.events[key].sort((a, b) => {
      return a.priority - b.priority;
    });
    this._notifySubscriptionChange(key, true);
  }
  unsubscribe(key, callback) {
    var index2;
    if (this.events[key]) {
      if (callback) {
        index2 = this.events[key].findIndex((item) => {
          return item.callback === callback;
        });
        if (index2 > -1) {
          this.events[key].splice(index2, 1);
        } else {
          console.warn("Cannot remove event, no matching event found:", key, callback);
          return;
        }
      }
    } else {
      console.warn("Cannot remove event, no events set on:", key);
      return;
    }
    this._notifySubscriptionChange(key, false);
  }
  subscribed(key) {
    return this.events[key] && this.events[key].length;
  }
  _chain(key, args, initialValue, fallback) {
    var value = initialValue;
    if (!Array.isArray(args)) {
      args = [args];
    }
    if (this.subscribed(key)) {
      this.events[key].forEach((subscriber, i) => {
        value = subscriber.callback.apply(this, args.concat([value]));
      });
      return value;
    } else {
      return typeof fallback === "function" ? fallback() : fallback;
    }
  }
  _confirm(key, args) {
    var confirmed = false;
    if (!Array.isArray(args)) {
      args = [args];
    }
    if (this.subscribed(key)) {
      this.events[key].forEach((subscriber, i) => {
        if (subscriber.callback.apply(this, args)) {
          confirmed = true;
        }
      });
    }
    return confirmed;
  }
  _notifySubscriptionChange(key, subscribed) {
    var notifiers = this.subscriptionNotifiers[key];
    if (notifiers) {
      notifiers.forEach((callback) => {
        callback(subscribed);
      });
    }
  }
  _dispatch() {
    var args = Array.from(arguments), key = args.shift();
    if (this.events[key]) {
      this.events[key].forEach((subscriber) => {
        subscriber.callback.apply(this, args);
      });
    }
  }
  _debugDispatch() {
    var args = Array.from(arguments), key = args[0];
    args[0] = "InternalEvent:" + key;
    if (this.debug === true || this.debug.includes(key)) {
      console.log(...args);
    }
    return this._dispatch(...arguments);
  }
  _debugChain() {
    var args = Array.from(arguments), key = args[0];
    args[0] = "InternalEvent:" + key;
    if (this.debug === true || this.debug.includes(key)) {
      console.log(...args);
    }
    return this._chain(...arguments);
  }
  _debugConfirm() {
    var args = Array.from(arguments), key = args[0];
    args[0] = "InternalEvent:" + key;
    if (this.debug === true || this.debug.includes(key)) {
      console.log(...args);
    }
    return this._confirm(...arguments);
  }
}
class DeprecationAdvisor extends CoreFeature {
  constructor(table) {
    super(table);
  }
  _warnUser() {
    if (this.options("debugDeprecation")) {
      console.warn(...arguments);
    }
  }
  check(oldOption, newOption) {
    var msg = "";
    if (typeof this.options(oldOption) !== "undefined") {
      msg = "Deprecated Setup Option - Use of the %c" + oldOption + "%c option is now deprecated";
      if (newOption) {
        msg = msg + ", Please use the %c" + newOption + "%c option instead";
        this._warnUser(msg, "font-weight: bold;", "font-weight: normal;", "font-weight: bold;", "font-weight: normal;");
      } else {
        this._warnUser(msg, "font-weight: bold;", "font-weight: normal;");
      }
      return false;
    } else {
      return true;
    }
  }
  checkMsg(oldOption, msg) {
    if (typeof this.options(oldOption) !== "undefined") {
      this._warnUser("%cDeprecated Setup Option - Use of the %c" + oldOption + " %c option is now deprecated, " + msg, "font-weight: normal;", "font-weight: bold;", "font-weight: normal;");
      return false;
    } else {
      return true;
    }
  }
  msg(msg) {
    this._warnUser(msg);
  }
}
class TableRegistry {
  static register(table) {
    TableRegistry.tables.push(table);
  }
  static deregister(table) {
    var index2 = TableRegistry.tables.indexOf(table);
    if (index2 > -1) {
      TableRegistry.tables.splice(index2, 1);
    }
  }
  static lookupTable(query, silent) {
    var results = [], matches, match;
    if (typeof query === "string") {
      matches = document.querySelectorAll(query);
      if (matches.length) {
        for (var i = 0; i < matches.length; i++) {
          match = TableRegistry.matchElement(matches[i]);
          if (match) {
            results.push(match);
          }
        }
      }
    } else if (typeof HTMLElement !== "undefined" && query instanceof HTMLElement || query instanceof Tabulator) {
      match = TableRegistry.matchElement(query);
      if (match) {
        results.push(match);
      }
    } else if (Array.isArray(query)) {
      query.forEach(function(item) {
        results = results.concat(TableRegistry.lookupTable(item));
      });
    } else {
      if (!silent) {
        console.warn("Table Connection Error - Invalid Selector", query);
      }
    }
    return results;
  }
  static matchElement(element) {
    return TableRegistry.tables.find(function(table) {
      return element instanceof Tabulator ? table === element : table.element === element;
    });
  }
}
TableRegistry.tables = [];
function fitData(columns, forced) {
  if (forced) {
    this.table.columnManager.renderer.reinitializeColumnWidths(columns);
  }
  if (this.table.options.responsiveLayout && this.table.modExists("responsiveLayout", true)) {
    this.table.modules.responsiveLayout.update();
  }
}
function fitDataGeneral(columns, forced) {
  columns.forEach(function(column) {
    column.reinitializeWidth();
  });
  if (this.table.options.responsiveLayout && this.table.modExists("responsiveLayout", true)) {
    this.table.modules.responsiveLayout.update();
  }
}
function fitDataStretch(columns, forced) {
  var colsWidth = 0, tableWidth = this.table.rowManager.element.clientWidth, gap = 0, lastCol = false;
  columns.forEach((column, i) => {
    if (!column.widthFixed) {
      column.reinitializeWidth();
    }
    if (this.table.options.responsiveLayout ? column.modules.responsive.visible : column.visible) {
      lastCol = column;
    }
    if (column.visible) {
      colsWidth += column.getWidth();
    }
  });
  if (lastCol) {
    gap = tableWidth - colsWidth + lastCol.getWidth();
    if (this.table.options.responsiveLayout && this.table.modExists("responsiveLayout", true)) {
      lastCol.setWidth(0);
      this.table.modules.responsiveLayout.update();
    }
    if (gap > 0) {
      lastCol.setWidth(gap);
    } else {
      lastCol.reinitializeWidth();
    }
  } else {
    if (this.table.options.responsiveLayout && this.table.modExists("responsiveLayout", true)) {
      this.table.modules.responsiveLayout.update();
    }
  }
}
function fitColumns(columns, forced) {
  var totalWidth = this.table.rowManager.element.getBoundingClientRect().width;
  var fixedWidth = 0;
  var flexWidth = 0;
  var flexGrowUnits = 0;
  var flexColWidth = 0;
  var flexColumns = [];
  var fixedShrinkColumns = [];
  var flexShrinkUnits = 0;
  var overflowWidth = 0;
  var gapFill = 0;
  function calcWidth(width) {
    var colWidth;
    if (typeof width == "string") {
      if (width.indexOf("%") > -1) {
        colWidth = totalWidth / 100 * parseInt(width);
      } else {
        colWidth = parseInt(width);
      }
    } else {
      colWidth = width;
    }
    return colWidth;
  }
  function scaleColumns(columns2, freeSpace, colWidth, shrinkCols) {
    var oversizeCols = [], oversizeSpace = 0, remainingSpace = 0, nextColWidth = 0, remainingFlexGrowUnits = flexGrowUnits, gap = 0, changeUnits = 0, undersizeCols = [];
    function calcGrow(col) {
      return colWidth * (col.column.definition.widthGrow || 1);
    }
    function calcShrink(col) {
      return calcWidth(col.width) - colWidth * (col.column.definition.widthShrink || 0);
    }
    columns2.forEach(function(col, i) {
      var width = shrinkCols ? calcShrink(col) : calcGrow(col);
      if (col.column.minWidth >= width) {
        oversizeCols.push(col);
      } else {
        if (col.column.maxWidth && col.column.maxWidth < width) {
          col.width = col.column.maxWidth;
          freeSpace -= col.column.maxWidth;
          remainingFlexGrowUnits -= shrinkCols ? col.column.definition.widthShrink || 1 : col.column.definition.widthGrow || 1;
          if (remainingFlexGrowUnits) {
            colWidth = Math.floor(freeSpace / remainingFlexGrowUnits);
          }
        } else {
          undersizeCols.push(col);
          changeUnits += shrinkCols ? col.column.definition.widthShrink || 1 : col.column.definition.widthGrow || 1;
        }
      }
    });
    if (oversizeCols.length) {
      oversizeCols.forEach(function(col) {
        oversizeSpace += shrinkCols ? col.width - col.column.minWidth : col.column.minWidth;
        col.width = col.column.minWidth;
      });
      remainingSpace = freeSpace - oversizeSpace;
      nextColWidth = changeUnits ? Math.floor(remainingSpace / changeUnits) : remainingSpace;
      gap = scaleColumns(undersizeCols, remainingSpace, nextColWidth, shrinkCols);
    } else {
      gap = changeUnits ? freeSpace - Math.floor(freeSpace / changeUnits) * changeUnits : freeSpace;
      undersizeCols.forEach(function(column) {
        column.width = shrinkCols ? calcShrink(column) : calcGrow(column);
      });
    }
    return gap;
  }
  if (this.table.options.responsiveLayout && this.table.modExists("responsiveLayout", true)) {
    this.table.modules.responsiveLayout.update();
  }
  if (this.table.rowManager.element.scrollHeight > this.table.rowManager.element.clientHeight) {
    totalWidth -= this.table.rowManager.element.offsetWidth - this.table.rowManager.element.clientWidth;
  }
  columns.forEach(function(column) {
    var width, minWidth, colWidth;
    if (column.visible) {
      width = column.definition.width;
      minWidth = parseInt(column.minWidth);
      if (width) {
        colWidth = calcWidth(width);
        fixedWidth += colWidth > minWidth ? colWidth : minWidth;
        if (column.definition.widthShrink) {
          fixedShrinkColumns.push({
            column,
            width: colWidth > minWidth ? colWidth : minWidth
          });
          flexShrinkUnits += column.definition.widthShrink;
        }
      } else {
        flexColumns.push({
          column,
          width: 0
        });
        flexGrowUnits += column.definition.widthGrow || 1;
      }
    }
  });
  flexWidth = totalWidth - fixedWidth;
  flexColWidth = Math.floor(flexWidth / flexGrowUnits);
  gapFill = scaleColumns(flexColumns, flexWidth, flexColWidth, false);
  if (flexColumns.length && gapFill > 0) {
    flexColumns[flexColumns.length - 1].width += gapFill;
  }
  flexColumns.forEach(function(col) {
    flexWidth -= col.width;
  });
  overflowWidth = Math.abs(gapFill) + flexWidth;
  if (overflowWidth > 0 && flexShrinkUnits) {
    gapFill = scaleColumns(fixedShrinkColumns, overflowWidth, Math.floor(overflowWidth / flexShrinkUnits), true);
  }
  if (gapFill && fixedShrinkColumns.length) {
    fixedShrinkColumns[fixedShrinkColumns.length - 1].width -= gapFill;
  }
  flexColumns.forEach(function(col) {
    col.column.setWidth(col.width);
  });
  fixedShrinkColumns.forEach(function(col) {
    col.column.setWidth(col.width);
  });
}
var defaultModes = {
  fitData,
  fitDataFill: fitDataGeneral,
  fitDataTable: fitDataGeneral,
  fitDataStretch,
  fitColumns
};
let Layout$1 = class Layout extends Module {
  constructor(table) {
    super(table, "layout");
    this.mode = null;
    this.registerTableOption("layout", "fitData");
    this.registerTableOption("layoutColumnsOnNewData", false);
    this.registerColumnOption("widthGrow");
    this.registerColumnOption("widthShrink");
  }
  //initialize layout system
  initialize() {
    var layout = this.table.options.layout;
    if (Layout.modes[layout]) {
      this.mode = layout;
    } else {
      console.warn("Layout Error - invalid mode set, defaulting to 'fitData' : " + layout);
      this.mode = "fitData";
    }
    this.table.element.setAttribute("tabulator-layout", this.mode);
  }
  getMode() {
    return this.mode;
  }
  //trigger table layout
  layout(dataChanged) {
    this.dispatch("layout-refreshing");
    Layout.modes[this.mode].call(this, this.table.columnManager.columnsByIndex, dataChanged);
    this.dispatch("layout-refreshed");
  }
};
Layout$1.moduleName = "layout";
Layout$1.modes = defaultModes;
var defaultLangs = {
  "default": {
    //hold default locale text
    "groups": {
      "item": "item",
      "items": "items"
    },
    "columns": {},
    "data": {
      "loading": "Loading",
      "error": "Error"
    },
    "pagination": {
      "page_size": "Page Size",
      "page_title": "Show Page",
      "first": "First",
      "first_title": "First Page",
      "last": "Last",
      "last_title": "Last Page",
      "prev": "Prev",
      "prev_title": "Prev Page",
      "next": "Next",
      "next_title": "Next Page",
      "all": "All",
      "counter": {
        "showing": "Showing",
        "of": "of",
        "rows": "rows",
        "pages": "pages"
      }
    },
    "headerFilters": {
      "default": "filter column...",
      "columns": {}
    }
  }
};
class Localize extends Module {
  constructor(table) {
    super(table);
    this.locale = "default";
    this.lang = false;
    this.bindings = {};
    this.langList = {};
    this.registerTableOption("locale", false);
    this.registerTableOption("langs", {});
  }
  initialize() {
    this.langList = Helpers.deepClone(Localize.langs);
    if (this.table.options.columnDefaults.headerFilterPlaceholder !== false) {
      this.setHeaderFilterPlaceholder(this.table.options.columnDefaults.headerFilterPlaceholder);
    }
    for (let locale2 in this.table.options.langs) {
      this.installLang(locale2, this.table.options.langs[locale2]);
    }
    this.setLocale(this.table.options.locale);
    this.registerTableFunction("setLocale", this.setLocale.bind(this));
    this.registerTableFunction("getLocale", this.getLocale.bind(this));
    this.registerTableFunction("getLang", this.getLang.bind(this));
  }
  //set header placeholder
  setHeaderFilterPlaceholder(placeholder) {
    this.langList.default.headerFilters.default = placeholder;
  }
  //setup a lang description object
  installLang(locale2, lang2) {
    if (this.langList[locale2]) {
      this._setLangProp(this.langList[locale2], lang2);
    } else {
      this.langList[locale2] = lang2;
    }
  }
  _setLangProp(lang2, values) {
    for (let key in values) {
      if (lang2[key] && typeof lang2[key] == "object") {
        this._setLangProp(lang2[key], values[key]);
      } else {
        lang2[key] = values[key];
      }
    }
  }
  //set current locale
  setLocale(desiredLocale) {
    desiredLocale = desiredLocale || "default";
    function traverseLang(trans, path) {
      for (var prop in trans) {
        if (typeof trans[prop] == "object") {
          if (!path[prop]) {
            path[prop] = {};
          }
          traverseLang(trans[prop], path[prop]);
        } else {
          path[prop] = trans[prop];
        }
      }
    }
    if (desiredLocale === true && navigator.language) {
      desiredLocale = navigator.language.toLowerCase();
    }
    if (desiredLocale) {
      if (!this.langList[desiredLocale]) {
        let prefix = desiredLocale.split("-")[0];
        if (this.langList[prefix]) {
          console.warn("Localization Error - Exact matching locale not found, using closest match: ", desiredLocale, prefix);
          desiredLocale = prefix;
        } else {
          console.warn("Localization Error - Matching locale not found, using default: ", desiredLocale);
          desiredLocale = "default";
        }
      }
    }
    this.locale = desiredLocale;
    this.lang = Helpers.deepClone(this.langList.default || {});
    if (desiredLocale != "default") {
      traverseLang(this.langList[desiredLocale], this.lang);
    }
    this.dispatchExternal("localized", this.locale, this.lang);
    this._executeBindings();
  }
  //get current locale
  getLocale(locale2) {
    return this.locale;
  }
  //get lang object for given local or current if none provided
  getLang(locale2) {
    return locale2 ? this.langList[locale2] : this.lang;
  }
  //get text for current locale
  getText(path, value) {
    var fillPath = value ? path + "|" + value : path, pathArray = fillPath.split("|"), text = this._getLangElement(pathArray, this.locale);
    return text || "";
  }
  //traverse langs object and find localized copy
  _getLangElement(path, locale2) {
    var root = this.lang;
    path.forEach(function(level) {
      var rootPath;
      if (root) {
        rootPath = root[level];
        if (typeof rootPath != "undefined") {
          root = rootPath;
        } else {
          root = false;
        }
      }
    });
    return root;
  }
  //set update binding
  bind(path, callback) {
    if (!this.bindings[path]) {
      this.bindings[path] = [];
    }
    this.bindings[path].push(callback);
    callback(this.getText(path), this.lang);
  }
  //iterate through bindings and trigger updates
  _executeBindings() {
    for (let path in this.bindings) {
      this.bindings[path].forEach((binding) => {
        binding(this.getText(path), this.lang);
      });
    }
  }
}
Localize.moduleName = "localize";
Localize.langs = defaultLangs;
class Comms extends Module {
  constructor(table) {
    super(table);
  }
  initialize() {
    this.registerTableFunction("tableComms", this.receive.bind(this));
  }
  getConnections(selectors) {
    var connections = [], connection;
    connection = TableRegistry.lookupTable(selectors);
    connection.forEach((con) => {
      if (this.table !== con) {
        connections.push(con);
      }
    });
    return connections;
  }
  send(selectors, module2, action, data) {
    var connections = this.getConnections(selectors);
    connections.forEach((connection) => {
      connection.tableComms(this.table.element, module2, action, data);
    });
    if (!connections.length && selectors) {
      console.warn("Table Connection Error - No tables matching selector found", selectors);
    }
  }
  receive(table, module2, action, data) {
    if (this.table.modExists(module2)) {
      return this.table.modules[module2].commsReceived(table, action, data);
    } else {
      console.warn("Inter-table Comms Error - no such module:", module2);
    }
  }
}
Comms.moduleName = "comms";
var coreModules = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  LayoutModule: Layout$1,
  LocalizeModule: Localize,
  CommsModule: Comms
});
class ModuleBinder {
  constructor(tabulator, modules2) {
    this.bindStaticFunctionality(tabulator);
    this.bindModules(tabulator, coreModules, true);
    if (modules2) {
      this.bindModules(tabulator, modules2);
    }
  }
  bindStaticFunctionality(tabulator) {
    tabulator.moduleBindings = {};
    tabulator.extendModule = function(name, property, values) {
      if (tabulator.moduleBindings[name]) {
        var source = tabulator.moduleBindings[name][property];
        if (source) {
          if (typeof values == "object") {
            for (let key in values) {
              source[key] = values[key];
            }
          } else {
            console.warn("Module Error - Invalid value type, it must be an object");
          }
        } else {
          console.warn("Module Error - property does not exist:", property);
        }
      } else {
        console.warn("Module Error - module does not exist:", name);
      }
    };
    tabulator.registerModule = function(modules2) {
      if (!Array.isArray(modules2)) {
        modules2 = [modules2];
      }
      modules2.forEach((mod2) => {
        tabulator.registerModuleBinding(mod2);
      });
    };
    tabulator.registerModuleBinding = function(mod2) {
      tabulator.moduleBindings[mod2.moduleName] = mod2;
    };
    tabulator.findTable = function(query) {
      var results = TableRegistry.lookupTable(query, true);
      return Array.isArray(results) && !results.length ? false : results;
    };
    tabulator.prototype.bindModules = function() {
      var orderedStartMods = [], orderedEndMods = [], unOrderedMods = [];
      this.modules = {};
      for (var name in tabulator.moduleBindings) {
        let mod2 = tabulator.moduleBindings[name];
        let module2 = new mod2(this);
        this.modules[name] = module2;
        if (mod2.prototype.moduleCore) {
          this.modulesCore.push(module2);
        } else {
          if (mod2.moduleInitOrder) {
            if (mod2.moduleInitOrder < 0) {
              orderedStartMods.push(module2);
            } else {
              orderedEndMods.push(module2);
            }
          } else {
            unOrderedMods.push(module2);
          }
        }
      }
      orderedStartMods.sort((a, b) => a.moduleInitOrder > b.moduleInitOrder ? 1 : -1);
      orderedEndMods.sort((a, b) => a.moduleInitOrder > b.moduleInitOrder ? 1 : -1);
      this.modulesRegular = orderedStartMods.concat(unOrderedMods.concat(orderedEndMods));
    };
  }
  bindModules(tabulator, modules2, core) {
    var mods = Object.values(modules2);
    if (core) {
      mods.forEach((mod2) => {
        mod2.prototype.moduleCore = true;
      });
    }
    tabulator.registerModule(mods);
  }
}
class Alert extends CoreFeature {
  constructor(table) {
    super(table);
    this.element = this._createAlertElement();
    this.msgElement = this._createMsgElement();
    this.type = null;
    this.element.appendChild(this.msgElement);
  }
  _createAlertElement() {
    var el = document.createElement("div");
    el.classList.add("tabulator-alert");
    return el;
  }
  _createMsgElement() {
    var el = document.createElement("div");
    el.classList.add("tabulator-alert-msg");
    el.setAttribute("role", "alert");
    return el;
  }
  _typeClass() {
    return "tabulator-alert-state-" + this.type;
  }
  alert(content, type = "msg") {
    if (content) {
      this.clear();
      this.type = type;
      while (this.msgElement.firstChild)
        this.msgElement.removeChild(this.msgElement.firstChild);
      this.msgElement.classList.add(this._typeClass());
      if (typeof content === "function") {
        content = content();
      }
      if (content instanceof HTMLElement) {
        this.msgElement.appendChild(content);
      } else {
        this.msgElement.innerHTML = content;
      }
      this.table.element.appendChild(this.element);
    }
  }
  clear() {
    if (this.element.parentNode) {
      this.element.parentNode.removeChild(this.element);
    }
    this.msgElement.classList.remove(this._typeClass());
  }
}
class Tabulator {
  constructor(element, options) {
    this.options = {};
    this.columnManager = null;
    this.rowManager = null;
    this.footerManager = null;
    this.alertManager = null;
    this.vdomHoz = null;
    this.externalEvents = null;
    this.eventBus = null;
    this.interactionMonitor = false;
    this.browser = "";
    this.browserSlow = false;
    this.browserMobile = false;
    this.rtl = false;
    this.originalElement = null;
    this.componentFunctionBinder = new ComponentFunctionBinder(this);
    this.dataLoader = false;
    this.modules = {};
    this.modulesCore = [];
    this.modulesRegular = [];
    this.deprecationAdvisor = new DeprecationAdvisor(this);
    this.optionsList = new OptionsList(this, "table constructor");
    this.initialized = false;
    this.destroyed = false;
    if (this.initializeElement(element)) {
      this.initializeCoreSystems(options);
      setTimeout(() => {
        this._create();
      });
    }
    TableRegistry.register(this);
  }
  initializeElement(element) {
    if (typeof HTMLElement !== "undefined" && element instanceof HTMLElement) {
      this.element = element;
      return true;
    } else if (typeof element === "string") {
      this.element = document.querySelector(element);
      if (this.element) {
        return true;
      } else {
        console.error("Tabulator Creation Error - no element found matching selector: ", element);
        return false;
      }
    } else {
      console.error("Tabulator Creation Error - Invalid element provided:", element);
      return false;
    }
  }
  initializeCoreSystems(options) {
    this.columnManager = new ColumnManager(this);
    this.rowManager = new RowManager(this);
    this.footerManager = new FooterManager(this);
    this.dataLoader = new DataLoader(this);
    this.alertManager = new Alert(this);
    this.bindModules();
    this.options = this.optionsList.generate(Tabulator.defaultOptions, options);
    this._clearObjectPointers();
    this._mapDeprecatedFunctionality();
    this.externalEvents = new ExternalEventBus(this, this.options, this.options.debugEventsExternal);
    this.eventBus = new InternalEventBus(this.options.debugEventsInternal);
    this.interactionMonitor = new InteractionManager(this);
    this.dataLoader.initialize();
    this.footerManager.initialize();
  }
  //convert deprecated functionality to new functions
  _mapDeprecatedFunctionality() {
  }
  _clearSelection() {
    this.element.classList.add("tabulator-block-select");
    if (window.getSelection) {
      if (window.getSelection().empty) {
        window.getSelection().empty();
      } else if (window.getSelection().removeAllRanges) {
        window.getSelection().removeAllRanges();
      }
    } else if (document.selection) {
      document.selection.empty();
    }
    this.element.classList.remove("tabulator-block-select");
  }
  //create table
  _create() {
    this.externalEvents.dispatch("tableBuilding");
    this.eventBus.dispatch("table-building");
    this._rtlCheck();
    this._buildElement();
    this._initializeTable();
    this._loadInitialData();
    this.initialized = true;
    this.externalEvents.dispatch("tableBuilt");
  }
  _rtlCheck() {
    var style = window.getComputedStyle(this.element);
    switch (this.options.textDirection) {
      case "auto":
        if (style.direction !== "rtl") {
          break;
        }
      case "rtl":
        this.element.classList.add("tabulator-rtl");
        this.rtl = true;
        break;
      case "ltr":
        this.element.classList.add("tabulator-ltr");
      default:
        this.rtl = false;
    }
  }
  //clear pointers to objects in default config object
  _clearObjectPointers() {
    this.options.columns = this.options.columns.slice(0);
    if (Array.isArray(this.options.data) && !this.options.reactiveData) {
      this.options.data = this.options.data.slice(0);
    }
  }
  //build tabulator element
  _buildElement() {
    var element = this.element, options = this.options, newElement;
    if (element.tagName === "TABLE") {
      this.originalElement = this.element;
      newElement = document.createElement("div");
      var attributes = element.attributes;
      for (var i in attributes) {
        if (typeof attributes[i] == "object") {
          newElement.setAttribute(attributes[i].name, attributes[i].value);
        }
      }
      element.parentNode.replaceChild(newElement, element);
      this.element = element = newElement;
    }
    element.classList.add("tabulator");
    element.setAttribute("role", "grid");
    while (element.firstChild)
      element.removeChild(element.firstChild);
    if (options.height) {
      options.height = isNaN(options.height) ? options.height : options.height + "px";
      element.style.height = options.height;
    }
    if (options.minHeight !== false) {
      options.minHeight = isNaN(options.minHeight) ? options.minHeight : options.minHeight + "px";
      element.style.minHeight = options.minHeight;
    }
    if (options.maxHeight !== false) {
      options.maxHeight = isNaN(options.maxHeight) ? options.maxHeight : options.maxHeight + "px";
      element.style.maxHeight = options.maxHeight;
    }
  }
  //initialize core systems and modules
  _initializeTable() {
    var element = this.element, options = this.options;
    this.interactionMonitor.initialize();
    this.columnManager.initialize();
    this.rowManager.initialize();
    this._detectBrowser();
    this.modulesCore.forEach((mod2) => {
      mod2.initialize();
    });
    element.appendChild(this.columnManager.getElement());
    element.appendChild(this.rowManager.getElement());
    if (options.footerElement) {
      this.footerManager.activate();
    }
    if (options.autoColumns && options.data) {
      this.columnManager.generateColumnsFromRowData(this.options.data);
    }
    this.modulesRegular.forEach((mod2) => {
      mod2.initialize();
    });
    this.columnManager.setColumns(options.columns);
    this.eventBus.dispatch("table-built");
  }
  _loadInitialData() {
    this.dataLoader.load(this.options.data);
  }
  //deconstructor
  destroy() {
    var element = this.element;
    this.destroyed = true;
    TableRegistry.deregister(this);
    this.eventBus.dispatch("table-destroy");
    this.rowManager.destroy();
    while (element.firstChild)
      element.removeChild(element.firstChild);
    element.classList.remove("tabulator");
    this.externalEvents.dispatch("tableDestroyed");
  }
  _detectBrowser() {
    var ua = navigator.userAgent || navigator.vendor || window.opera;
    if (ua.indexOf("Trident") > -1) {
      this.browser = "ie";
      this.browserSlow = true;
    } else if (ua.indexOf("Edge") > -1) {
      this.browser = "edge";
      this.browserSlow = true;
    } else if (ua.indexOf("Firefox") > -1) {
      this.browser = "firefox";
      this.browserSlow = false;
    } else if (ua.indexOf("Mac OS") > -1) {
      this.browser = "safari";
      this.browserSlow = false;
    } else {
      this.browser = "other";
      this.browserSlow = false;
    }
    this.browserMobile = /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(ua) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw-(n|u)|c55\/|capi|ccwa|cdm-|cell|chtm|cldc|cmd-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc-s|devi|dica|dmob|do(c|p)o|ds(12|-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(-|_)|g1 u|g560|gene|gf-5|g-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd-(m|p|t)|hei-|hi(pt|ta)|hp( i|ip)|hs-c|ht(c(-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i-(20|go|ma)|i230|iac( |-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|-[a-w])|libw|lynx|m1-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|-([1-8]|c))|phil|pire|pl(ay|uc)|pn-2|po(ck|rt|se)|prox|psio|pt-g|qa-a|qc(07|12|21|32|60|-[2-7]|i-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h-|oo|p-)|sdk\/|se(c(-|0|1)|47|mc|nd|ri)|sgh-|shar|sie(-|m)|sk-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h-|v-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl-|tdg-|tel(i|m)|tim-|t-mo|to(pl|sh)|ts(70|m-|m3|m5)|tx-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas-|your|zeto|zte-/i.test(ua.slice(0, 4));
  }
  initGuard(func, msg) {
    var stack, line;
    if (this.options.debugInitialization && !this.initialized) {
      if (!func) {
        stack = new Error().stack.split("\n");
        line = stack[0] == "Error" ? stack[2] : stack[1];
        if (line[0] == " ") {
          func = line.trim().split(" ")[1].split(".")[1];
        } else {
          func = line.trim().split("@")[0];
        }
      }
      console.warn("Table Not Initialized - Calling the " + func + " function before the table is initialized may result in inconsistent behavior, Please wait for the `tableBuilt` event before calling this function." + (msg ? " " + msg : ""));
    }
    return this.initialized;
  }
  ////////////////// Data Handling //////////////////
  //block table redrawing
  blockRedraw() {
    this.initGuard();
    this.eventBus.dispatch("redraw-blocking");
    this.rowManager.blockRedraw();
    this.columnManager.blockRedraw();
    this.eventBus.dispatch("redraw-blocked");
  }
  //restore table redrawing
  restoreRedraw() {
    this.initGuard();
    this.eventBus.dispatch("redraw-restoring");
    this.rowManager.restoreRedraw();
    this.columnManager.restoreRedraw();
    this.eventBus.dispatch("redraw-restored");
  }
  //load data
  setData(data, params, config) {
    this.initGuard(false, "To set initial data please use the 'data' property in the table constructor.");
    return this.dataLoader.load(data, params, config, false);
  }
  //clear data
  clearData() {
    this.initGuard();
    this.dataLoader.blockActiveLoad();
    this.rowManager.clearData();
  }
  //get table data array
  getData(active) {
    return this.rowManager.getData(active);
  }
  //get table data array count
  getDataCount(active) {
    return this.rowManager.getDataCount(active);
  }
  //replace data, keeping table in position with same sort
  replaceData(data, params, config) {
    this.initGuard();
    return this.dataLoader.load(data, params, config, true, true);
  }
  //update table data
  updateData(data) {
    var responses = 0;
    this.initGuard();
    return new Promise((resolve2, reject) => {
      this.dataLoader.blockActiveLoad();
      if (typeof data === "string") {
        data = JSON.parse(data);
      }
      if (data && data.length > 0) {
        data.forEach((item) => {
          var row = this.rowManager.findRow(item[this.options.index]);
          if (row) {
            responses++;
            row.updateData(item).then(() => {
              responses--;
              if (!responses) {
                resolve2();
              }
            }).catch((e) => {
              reject("Update Error - Unable to update row", item, e);
            });
          } else {
            reject("Update Error - Unable to find row", item);
          }
        });
      } else {
        console.warn("Update Error - No data provided");
        reject("Update Error - No data provided");
      }
    });
  }
  addData(data, pos, index2) {
    this.initGuard();
    return new Promise((resolve2, reject) => {
      this.dataLoader.blockActiveLoad();
      if (typeof data === "string") {
        data = JSON.parse(data);
      }
      if (data) {
        this.rowManager.addRows(data, pos, index2).then((rows2) => {
          var output = [];
          rows2.forEach(function(row) {
            output.push(row.getComponent());
          });
          resolve2(output);
        });
      } else {
        console.warn("Update Error - No data provided");
        reject("Update Error - No data provided");
      }
    });
  }
  //update table data
  updateOrAddData(data) {
    var rows2 = [], responses = 0;
    this.initGuard();
    return new Promise((resolve2, reject) => {
      this.dataLoader.blockActiveLoad();
      if (typeof data === "string") {
        data = JSON.parse(data);
      }
      if (data && data.length > 0) {
        data.forEach((item) => {
          var row = this.rowManager.findRow(item[this.options.index]);
          responses++;
          if (row) {
            row.updateData(item).then(() => {
              responses--;
              rows2.push(row.getComponent());
              if (!responses) {
                resolve2(rows2);
              }
            });
          } else {
            this.rowManager.addRows(item).then((newRows) => {
              responses--;
              rows2.push(newRows[0].getComponent());
              if (!responses) {
                resolve2(rows2);
              }
            });
          }
        });
      } else {
        console.warn("Update Error - No data provided");
        reject("Update Error - No data provided");
      }
    });
  }
  //get row object
  getRow(index2) {
    var row = this.rowManager.findRow(index2);
    if (row) {
      return row.getComponent();
    } else {
      console.warn("Find Error - No matching row found:", index2);
      return false;
    }
  }
  //get row object
  getRowFromPosition(position) {
    var row = this.rowManager.getRowFromPosition(position);
    if (row) {
      return row.getComponent();
    } else {
      console.warn("Find Error - No matching row found:", position);
      return false;
    }
  }
  //delete row from table
  deleteRow(index2) {
    var foundRows = [];
    this.initGuard();
    if (!Array.isArray(index2)) {
      index2 = [index2];
    }
    for (let item of index2) {
      let row = this.rowManager.findRow(item, true);
      if (row) {
        foundRows.push(row);
      } else {
        console.error("Delete Error - No matching row found:", item);
        return Promise.reject("Delete Error - No matching row found");
      }
    }
    foundRows.sort((a, b) => {
      return this.rowManager.rows.indexOf(a) > this.rowManager.rows.indexOf(b) ? 1 : -1;
    });
    foundRows.forEach((row) => {
      row.delete();
    });
    this.rowManager.reRenderInPosition();
    return Promise.resolve();
  }
  //add row to table
  addRow(data, pos, index2) {
    this.initGuard();
    if (typeof data === "string") {
      data = JSON.parse(data);
    }
    return this.rowManager.addRows(data, pos, index2, true).then((rows2) => {
      return rows2[0].getComponent();
    });
  }
  //update a row if it exists otherwise create it
  updateOrAddRow(index2, data) {
    var row = this.rowManager.findRow(index2);
    this.initGuard();
    if (typeof data === "string") {
      data = JSON.parse(data);
    }
    if (row) {
      return row.updateData(data).then(() => {
        return row.getComponent();
      });
    } else {
      return this.rowManager.addRows(data).then((rows2) => {
        return rows2[0].getComponent();
      });
    }
  }
  //update row data
  updateRow(index2, data) {
    var row = this.rowManager.findRow(index2);
    this.initGuard();
    if (typeof data === "string") {
      data = JSON.parse(data);
    }
    if (row) {
      return row.updateData(data).then(() => {
        return Promise.resolve(row.getComponent());
      });
    } else {
      console.warn("Update Error - No matching row found:", index2);
      return Promise.reject("Update Error - No matching row found");
    }
  }
  //scroll to row in DOM
  scrollToRow(index2, position, ifVisible) {
    var row = this.rowManager.findRow(index2);
    if (row) {
      return this.rowManager.scrollToRow(row, position, ifVisible);
    } else {
      console.warn("Scroll Error - No matching row found:", index2);
      return Promise.reject("Scroll Error - No matching row found");
    }
  }
  moveRow(from2, to2, after) {
    var fromRow = this.rowManager.findRow(from2);
    this.initGuard();
    if (fromRow) {
      fromRow.moveToRow(to2, after);
    } else {
      console.warn("Move Error - No matching row found:", from2);
    }
  }
  getRows(active) {
    return this.rowManager.getComponents(active);
  }
  //get position of row in table
  getRowPosition(index2) {
    var row = this.rowManager.findRow(index2);
    if (row) {
      return row.getPosition();
    } else {
      console.warn("Position Error - No matching row found:", index2);
      return false;
    }
  }
  /////////////// Column Functions  ///////////////
  setColumns(definition) {
    this.initGuard(false, "To set initial columns please use the 'columns' property in the table constructor");
    this.columnManager.setColumns(definition);
  }
  getColumns(structured) {
    return this.columnManager.getComponents(structured);
  }
  getColumn(field) {
    var column = this.columnManager.findColumn(field);
    if (column) {
      return column.getComponent();
    } else {
      console.warn("Find Error - No matching column found:", field);
      return false;
    }
  }
  getColumnDefinitions() {
    return this.columnManager.getDefinitionTree();
  }
  showColumn(field) {
    var column = this.columnManager.findColumn(field);
    this.initGuard();
    if (column) {
      column.show();
    } else {
      console.warn("Column Show Error - No matching column found:", field);
      return false;
    }
  }
  hideColumn(field) {
    var column = this.columnManager.findColumn(field);
    this.initGuard();
    if (column) {
      column.hide();
    } else {
      console.warn("Column Hide Error - No matching column found:", field);
      return false;
    }
  }
  toggleColumn(field) {
    var column = this.columnManager.findColumn(field);
    this.initGuard();
    if (column) {
      if (column.visible) {
        column.hide();
      } else {
        column.show();
      }
    } else {
      console.warn("Column Visibility Toggle Error - No matching column found:", field);
      return false;
    }
  }
  addColumn(definition, before, field) {
    var column = this.columnManager.findColumn(field);
    this.initGuard();
    return this.columnManager.addColumn(definition, before, column).then((column2) => {
      return column2.getComponent();
    });
  }
  deleteColumn(field) {
    var column = this.columnManager.findColumn(field);
    this.initGuard();
    if (column) {
      return column.delete();
    } else {
      console.warn("Column Delete Error - No matching column found:", field);
      return Promise.reject();
    }
  }
  updateColumnDefinition(field, definition) {
    var column = this.columnManager.findColumn(field);
    this.initGuard();
    if (column) {
      return column.updateDefinition(definition);
    } else {
      console.warn("Column Update Error - No matching column found:", field);
      return Promise.reject();
    }
  }
  moveColumn(from2, to2, after) {
    var fromColumn = this.columnManager.findColumn(from2), toColumn = this.columnManager.findColumn(to2);
    this.initGuard();
    if (fromColumn) {
      if (toColumn) {
        this.columnManager.moveColumn(fromColumn, toColumn, after);
      } else {
        console.warn("Move Error - No matching column found:", toColumn);
      }
    } else {
      console.warn("Move Error - No matching column found:", from2);
    }
  }
  //scroll to column in DOM
  scrollToColumn(field, position, ifVisible) {
    return new Promise((resolve2, reject) => {
      var column = this.columnManager.findColumn(field);
      if (column) {
        return this.columnManager.scrollToColumn(column, position, ifVisible);
      } else {
        console.warn("Scroll Error - No matching column found:", field);
        return Promise.reject("Scroll Error - No matching column found");
      }
    });
  }
  //////////// General Public Functions ////////////
  //redraw list without updating data
  redraw(force) {
    this.initGuard();
    this.columnManager.redraw(force);
    this.rowManager.redraw(force);
  }
  setHeight(height) {
    this.options.height = isNaN(height) ? height : height + "px";
    this.element.style.height = this.options.height;
    this.rowManager.initializeRenderer();
    this.rowManager.redraw();
  }
  //////////////////// Event Bus ///////////////////
  on(key, callback) {
    this.externalEvents.subscribe(key, callback);
  }
  off(key, callback) {
    this.externalEvents.unsubscribe(key, callback);
  }
  dispatchEvent() {
    var args = Array.from(arguments);
    args.shift();
    this.externalEvents.dispatch(...arguments);
  }
  //////////////////// Alerts ///////////////////
  alert(contents, type) {
    this.initGuard();
    this.alertManager.alert(contents, type);
  }
  clearAlert() {
    this.initGuard();
    this.alertManager.clear();
  }
  ////////////// Extension Management //////////////
  modExists(plugin, required) {
    if (this.modules[plugin]) {
      return true;
    } else {
      if (required) {
        console.error("Tabulator Module Not Installed: " + plugin);
      }
      return false;
    }
  }
  module(key) {
    var mod2 = this.modules[key];
    if (!mod2) {
      console.error("Tabulator module not installed: " + key);
    }
    return mod2;
  }
}
Tabulator.defaultOptions = defaultOptions;
new ModuleBinder(Tabulator);
class TabulatorFull extends Tabulator {
}
new ModuleBinder(TabulatorFull, modules);
const PrintDaftarAnggota_vue_vue_type_style_index_0_scoped_aef47ffd_lang = "";
const _withScopeId$1 = (n) => (pushScopeId("data-v-aef47ffd"), n = n(), popScopeId(), n);
const _hoisted_1$1 = { class: "h-full w-full mx-auto" };
const _hoisted_2$1 = { class: "border-t border-black flex w-full" };
const _hoisted_3$1 = { class: "w-3/12 border-black flex justify-center items-center py-1" };
const _hoisted_4$1 = ["src"];
const _hoisted_5$1 = /* @__PURE__ */ createStaticVNode('<div class="w-9/12 border-black text-center align-middle" data-v-aef47ffd><span class="uppercase text-md font-bold -mb-1" data-v-aef47ffd>koperasi simpan pinjam bina niaga</span><p class="text-xs mb-1 font-medium" data-v-aef47ffd>Jl. Diponegoro 134, Pati, Jawa Tengah - Indonesia</p><p class="text-xs mb-1 font-medium" data-v-aef47ffd> Telp. (6221) 225 66288, (+6221) 226 08887 Fax: (+6221) 225 66399 </p><p class="text-xs mb-1 font-medium" data-v-aef47ffd> Website: hubud.dephub.go.id; e-mail: daao_dgca@dephub.go.id </p></div>', 1);
const _hoisted_6$1 = /* @__PURE__ */ _withScopeId$1(() => /* @__PURE__ */ createBaseVNode("p", { class: "w-full text-sm font-bold text-center border-y border-black p-1" }, " DAFTAR ANGGOTA KOPERASI ", -1));
const _hoisted_7$1 = { class: "flex border-b border-black text-sm" };
const _hoisted_8$1 = /* @__PURE__ */ _withScopeId$1(() => /* @__PURE__ */ createBaseVNode("div", { class: "w-6/12 p-1" }, "Resort: all", -1));
const _hoisted_9$1 = { class: "w-6/12 border-l border-black p-1" };
const _hoisted_10$1 = { class: "overflow-x-auto scrollbar-hidden" };
const _hoisted_11$1 = /* @__PURE__ */ _withScopeId$1(() => /* @__PURE__ */ createBaseVNode("h2", { class: "font-bold uppercase text-base mx-auto" }, "Laporan Daftar Anggota", -1));
const _hoisted_12$1 = { method: "post" };
const _hoisted_13$1 = { class: "bg-slate-200 p-3 rounded" };
const _hoisted_14$1 = { class: "text-gray-700 flex items-center mx-auto w-9/12 mb-1" };
const _hoisted_15$1 = /* @__PURE__ */ _withScopeId$1(() => /* @__PURE__ */ createBaseVNode("div", { class: "mb-1 w-2/5 text-xs" }, [
  /* @__PURE__ */ createBaseVNode("label", null, "Jumlah Data")
], -1));
const _hoisted_16$1 = /* @__PURE__ */ _withScopeId$1(() => /* @__PURE__ */ createBaseVNode("span", { class: "mr-3 pb-2" }, ":", -1));
const _hoisted_17$1 = { class: "w-3/5 flex-grow" };
const _hoisted_18$1 = /* @__PURE__ */ _withScopeId$1(() => /* @__PURE__ */ createBaseVNode("option", { value: "100" }, "100", -1));
const _hoisted_19$1 = /* @__PURE__ */ _withScopeId$1(() => /* @__PURE__ */ createBaseVNode("option", { value: "200" }, "200", -1));
const _hoisted_20$1 = /* @__PURE__ */ _withScopeId$1(() => /* @__PURE__ */ createBaseVNode("option", { value: "300" }, "300", -1));
const _hoisted_21$1 = /* @__PURE__ */ _withScopeId$1(() => /* @__PURE__ */ createBaseVNode("option", { value: "400" }, "400", -1));
const _hoisted_22 = /* @__PURE__ */ _withScopeId$1(() => /* @__PURE__ */ createBaseVNode("option", { value: "500" }, "500", -1));
const _hoisted_23 = /* @__PURE__ */ _withScopeId$1(() => /* @__PURE__ */ createBaseVNode("option", { value: "1000" }, "1.000", -1));
const _hoisted_24$1 = /* @__PURE__ */ _withScopeId$1(() => /* @__PURE__ */ createBaseVNode("option", { value: "5000" }, "5.000", -1));
const _hoisted_25$1 = /* @__PURE__ */ _withScopeId$1(() => /* @__PURE__ */ createBaseVNode("option", { value: "10000" }, "10.000", -1));
const _hoisted_26$1 = /* @__PURE__ */ _withScopeId$1(() => /* @__PURE__ */ createBaseVNode("option", { value: "0" }, "Semua Data", -1));
const _hoisted_27$1 = [
  _hoisted_18$1,
  _hoisted_19$1,
  _hoisted_20$1,
  _hoisted_21$1,
  _hoisted_22,
  _hoisted_23,
  _hoisted_24$1,
  _hoisted_25$1,
  _hoisted_26$1
];
const _hoisted_28$1 = { class: "text-gray-700 flex items-center mx-auto w-9/12 mb-1" };
const _hoisted_29$1 = /* @__PURE__ */ _withScopeId$1(() => /* @__PURE__ */ createBaseVNode("div", { class: "mb-1 w-2/5 text-xs" }, [
  /* @__PURE__ */ createBaseVNode("label", null, "Kantor")
], -1));
const _hoisted_30$1 = /* @__PURE__ */ _withScopeId$1(() => /* @__PURE__ */ createBaseVNode("span", { class: "mr-3 pb-2" }, ":", -1));
const _hoisted_31$1 = { class: "w-3/5 flex-grow" };
const _hoisted_32$1 = /* @__PURE__ */ _withScopeId$1(() => /* @__PURE__ */ createBaseVNode("option", {
  value: "kantor",
  selected: "",
  disabled: ""
}, "Pilih Kantor", -1));
const _hoisted_33$1 = ["value"];
const _hoisted_34$1 = { class: "text-gray-700 flex items-center mx-auto w-9/12" };
const _hoisted_35$1 = /* @__PURE__ */ _withScopeId$1(() => /* @__PURE__ */ createBaseVNode("div", { class: "mb-1 w-2/5 text-xs" }, [
  /* @__PURE__ */ createBaseVNode("label", null, "Tanggal")
], -1));
const _hoisted_36$1 = /* @__PURE__ */ _withScopeId$1(() => /* @__PURE__ */ createBaseVNode("span", { class: "mr-3 pb-2" }, ":", -1));
const _hoisted_37$1 = { class: "w-3/5 flex-grow" };
const _hoisted_38$1 = { class: "text-gray-700 flex items-center mx-auto w-9/12 mt-1" };
const _hoisted_39$1 = /* @__PURE__ */ _withScopeId$1(() => /* @__PURE__ */ createBaseVNode("div", { class: "mb-1 w-2/5 text-xs" }, [
  /* @__PURE__ */ createBaseVNode("label", null, "Resort")
], -1));
const _hoisted_40$1 = /* @__PURE__ */ _withScopeId$1(() => /* @__PURE__ */ createBaseVNode("span", { class: "mr-3 pb-2" }, ":", -1));
const _hoisted_41$1 = { class: "w-3/5 flex-grow" };
const _hoisted_42$1 = /* @__PURE__ */ _withScopeId$1(() => /* @__PURE__ */ createBaseVNode("option", {
  value: "resort",
  selected: "",
  disabled: ""
}, "Pilih Resort", -1));
const _hoisted_43$1 = ["value"];
const _hoisted_44$1 = { class: "fixed intleft-2 right-0 top-0 bottom-0 w-full h-[100vh] z-50 overflow-hidden bg-gray-500 opacity-75 flex flex-col items-center justify-center" };
const _hoisted_45$1 = /* @__PURE__ */ _withScopeId$1(() => /* @__PURE__ */ createBaseVNode("h2", { class: "text-center text-white text-xl font-semibold" }, "Loading...", -1));
const _hoisted_46$1 = /* @__PURE__ */ _withScopeId$1(() => /* @__PURE__ */ createBaseVNode("p", { class: "w-1/3 text-center text-white" }, "Sedang Memuat Data", -1));
const _hoisted_47$1 = /* @__PURE__ */ _withScopeId$1(() => /* @__PURE__ */ createBaseVNode("p", { class: "w-1/3 text-center text-white" }, " Ini mungkin memakan waktu beberapa saat, tolong jangan tutup halaman ini. ", -1));
const _sfc_main$2 = {
  __name: "PrintDaftarAnggota",
  setup(__props) {
    const swal = inject("$swal");
    const daftarAnggota = useDaftarAnggotaStore();
    const router2 = useRouter();
    const modal_utama = ref(true);
    const isLoading = ref(false);
    const limit = ref(100);
    const kantor = ref("0001");
    const tanggal = ref(hooks(Date.now()).format("YYYY-MM-DD"));
    const resort = ref("resort");
    const tableRef = ref();
    const tabulator = ref();
    const initTabulator = () => {
      tabulator.value = new TabulatorFull(tableRef.value, {
        data: daftarAnggota.items,
        printHeader: `<div class="h-full w-full mx-auto">
    <div class="border border-black flex">
      <div class="w-3/12 border-black flex justify-center items-center py-1">
        <img src=${LOGO} alt="logo" class="m-auto h-16" />
      </div>
      <div class="w-9/12 border-black text-center align-middle">
        <span class="uppercase text-md font-bold -mb-1">koperasi simpan pinjam bina niaga</span>
        <p class="text-xs mb-1 font-medium">
          Jl. Diponegoro 134, Pati, Jawa Tengah - Indonesia
        </p>
        <p class="text-xs mb-1 font-medium">
          Telp. (6221) 225 66288, (+6221) 226 08887 Fax: (+6221) 225 66399
        </p>
        <p class="text-xs mb-1 font-medium">
          Website: hubud.dephub.go.id; e-mail: daao_dgca@dephub.go.id
        </p>
      </div>
    </div>
    <p class="w-full text-sm font-bold text-center border-b border-x border-black p-1">
      DAFTAR ANGGOTA KOPERASI
    </p>
    <div class="flex border-x border-black text-sm">
      <div class="w-6/12 border-b border-black p-1">Resort: all</div>
      <div class="w-6/12 border-b border-l border-black p-1">Date of Inspection: ${hooks(
          tanggal.value
        ).format("DD MMM YYYY")}</div>
    </div>`,
        printFooter: `<h2 class='p-2 m-2 text-center text-xs mt-4'>${hooks(Date.now()).format(
          "DD-MMM-YYYY HH:SS"
        )}<h2>`,
        printAsHtml: true,
        printStyled: true,
        layout: "fitColumns",
        responsiveLayout: "collapse",
        placeholder: "Tida ada Data di temukan",
        columns: [
          // For print format
          {
            title: "ID",
            field: "iddata",
            width: 75,
            visible: true,
            print: true,
            download: true
          },
          {
            title: "NO. ANGG",
            field: "cif",
            width: 150,
            visible: true,
            print: true,
            download: true
          },
          {
            title: "TANGGAL",
            field: "tanggal",
            width: 150,
            vertAlign: "middle",
            hozAlign: "center",
            visible: true,
            print: true,
            download: true,
            formatter(cell) {
              return `<div>
                ${hooks(cell.getData().tanggal).format("DD-MM-YYYY")}
              </div>`;
            }
          },
          {
            title: "RESORT",
            field: "resort",
            visible: true,
            print: true,
            width: 100,
            vertAlign: "middle",
            hozAlign: "center",
            download: true
          },
          {
            title: "NAMA NASABAH",
            field: "nama",
            visible: true,
            print: true,
            download: true
          },
          {
            title: "ALAMAT",
            field: "alamat",
            visible: true,
            print: true,
            download: true
          }
        ]
      });
    };
    const printData = async (e) => {
      try {
        modal_utama.value = false;
        isLoading.value = true;
        const data = await daftarAnggota.readLaporan(
          kantor.value,
          tanggal.value,
          resort.value,
          limit.value
        );
        initTabulator();
        reInitOnResizeWindow();
        setTimeout(() => {
          tabulator.value.print();
        }, 1e3);
        isLoading.value = false;
        modal_utama.value = true;
      } catch (error) {
        isLoading.value = false;
        swal({
          icon: "error",
          title: "Oops...",
          text: "ERROR PRINT: " + error
        });
      }
    };
    const exportCSV = async (e) => {
      try {
        modal_utama.value = false;
        isLoading.value = true;
        const data = await daftarAnggota.readLaporan(
          kantor.value,
          tanggal.value,
          resort.value,
          limit.value
        );
        initTabulator();
        reInitOnResizeWindow();
        setTimeout(() => {
          tabulator.value.download("csv", "data.csv");
        }, 1e3);
        isLoading.value = false;
        modal_utama.value = true;
      } catch (error) {
        isLoading.value = false;
        swal({
          icon: "error",
          title: "Oops...",
          text: "ERROR CSV: " + error
        });
      }
    };
    const reInitOnResizeWindow = () => {
      window.addEventListener("resize", () => {
        tabulator.value.redraw();
      });
    };
    onMounted(async () => {
      try {
        initTabulator();
        reInitOnResizeWindow();
      } catch (error) {
        console.error(error);
        swal({
          icon: "error",
          title: "Oops...",
          text: "ERROR MOUNTED: " + error
        });
        isLoading.value = false;
      }
    });
    return (_ctx, _cache) => {
      const _component_XIcon = resolveComponent("XIcon");
      const _component_ModalHeader = resolveComponent("ModalHeader");
      const _component_ModalBody = resolveComponent("ModalBody");
      const _component_ExternalLinkIcon = resolveComponent("ExternalLinkIcon");
      const _component_PrinterIcon = resolveComponent("PrinterIcon");
      const _component_ModalFooter = resolveComponent("ModalFooter");
      const _component_Modal = resolveComponent("Modal");
      const _component_Loader2Icon = resolveComponent("Loader2Icon");
      return openBlock(), createElementBlock(Fragment, null, [
        createVNode(_sfc_main$9, {
          title: "Laporan",
          subTitle: "Keanggotaan",
          icon: unref(LAPORAN)
        }, null, 8, ["icon"]),
        createBaseVNode("div", _hoisted_1$1, [
          createBaseVNode("div", _hoisted_2$1, [
            createBaseVNode("div", _hoisted_3$1, [
              createBaseVNode("img", {
                src: unref(LOGO),
                alt: "logo",
                class: "m-auto h-16"
              }, null, 8, _hoisted_4$1)
            ]),
            _hoisted_5$1
          ]),
          _hoisted_6$1,
          createBaseVNode("div", _hoisted_7$1, [
            _hoisted_8$1,
            createBaseVNode("div", _hoisted_9$1, " Date of Inspection: " + toDisplayString(unref(hooks)(tanggal.value).format("DD MMM YYYY")), 1)
          ])
        ]),
        createBaseVNode("div", _hoisted_10$1, [
          createBaseVNode("div", {
            id: "tabulator",
            ref_key: "tableRef",
            ref: tableRef,
            class: ""
          }, null, 512)
        ]),
        createVNode(_component_Modal, {
          backdrop: "static",
          show: modal_utama.value,
          onHidden: _cache[5] || (_cache[5] = ($event) => modal_utama.value = false)
        }, {
          default: withCtx(() => [
            createVNode(_component_ModalHeader, null, {
              default: withCtx(() => [
                _hoisted_11$1,
                createBaseVNode("a", {
                  "data-tw-dismiss": "modal",
                  onClick: _cache[0] || (_cache[0] = ($event) => unref(router2).back()),
                  href: "javascript:;",
                  class: "border bg-danger rounded-lg hover:bg-red-700 -my-5 -mr-3"
                }, [
                  createVNode(_component_XIcon, { class: "lucide lucide-x w-7 h-7 text-white hover:text-slate-100" })
                ])
              ]),
              _: 1
            }),
            createVNode(_component_ModalBody, { class: "" }, {
              default: withCtx(() => [
                createBaseVNode("form", _hoisted_12$1, [
                  createBaseVNode("div", _hoisted_13$1, [
                    createBaseVNode("div", _hoisted_14$1, [
                      _hoisted_15$1,
                      _hoisted_16$1,
                      createBaseVNode("div", _hoisted_17$1, [
                        withDirectives(createBaseVNode("select", {
                          name: "data_list",
                          id: "data_list",
                          "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => limit.value = $event),
                          class: "w-full h-10 mb-1 px-0 text-xs border rounded focus:shadow-outline",
                          required: ""
                        }, _hoisted_27$1, 512), [
                          [vModelSelect, limit.value]
                        ])
                      ])
                    ]),
                    createBaseVNode("div", _hoisted_28$1, [
                      _hoisted_29$1,
                      _hoisted_30$1,
                      createBaseVNode("div", _hoisted_31$1, [
                        withDirectives(createBaseVNode("select", {
                          name: "perkiraan_list",
                          id: "perkiraan_list",
                          "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => kantor.value = $event),
                          class: "w-full h-10 mb-1 px-0 text-xs border rounded focus:shadow-outline",
                          required: ""
                        }, [
                          _hoisted_32$1,
                          (openBlock(true), createElementBlock(Fragment, null, renderList(unref(list_kantor), (kantor2) => {
                            return openBlock(), createElementBlock("option", {
                              value: kantor2.value
                            }, toDisplayString(kantor2.nama), 9, _hoisted_33$1);
                          }), 256))
                        ], 512), [
                          [vModelSelect, kantor.value]
                        ])
                      ])
                    ]),
                    createBaseVNode("div", _hoisted_34$1, [
                      _hoisted_35$1,
                      _hoisted_36$1,
                      createBaseVNode("div", _hoisted_37$1, [
                        withDirectives(createBaseVNode("input", {
                          class: "w-full h-10 mb-1 px-0.5 text-xs border rounded focus:shadow-outline",
                          type: "date",
                          "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => tanggal.value = $event),
                          required: ""
                        }, null, 512), [
                          [vModelText, tanggal.value]
                        ])
                      ])
                    ]),
                    createBaseVNode("div", _hoisted_38$1, [
                      _hoisted_39$1,
                      _hoisted_40$1,
                      createBaseVNode("div", _hoisted_41$1, [
                        withDirectives(createBaseVNode("select", {
                          name: "resort_list",
                          id: "resort_list",
                          "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => resort.value = $event),
                          class: "w-full h-10 mb-1 px-0 text-xs border rounded focus:shadow-outline",
                          required: ""
                        }, [
                          _hoisted_42$1,
                          (openBlock(true), createElementBlock(Fragment, null, renderList(unref(list_resort), (resort2) => {
                            return openBlock(), createElementBlock("option", {
                              value: resort2.value
                            }, toDisplayString(resort2.nama), 9, _hoisted_43$1);
                          }), 256))
                        ], 512), [
                          [vModelSelect, resort.value]
                        ])
                      ])
                    ])
                  ])
                ])
              ]),
              _: 1
            }),
            createVNode(_component_ModalFooter, { class: "text-center" }, {
              default: withCtx(() => [
                createBaseVNode("button", {
                  type: "button",
                  class: "btn btn-outline-secondary w-32 mr-5 text-sm",
                  onClick: exportCSV
                }, [
                  createVNode(_component_ExternalLinkIcon, { class: "mr-1" }),
                  createTextVNode("Export CSV ")
                ]),
                createBaseVNode("button", {
                  onClick: printData,
                  class: "btn btn-primary w-32 text-sm space-x-3"
                }, [
                  createVNode(_component_PrinterIcon, { class: "mr-1" }),
                  createTextVNode("Print ")
                ])
              ]),
              _: 1
            })
          ]),
          _: 1
        }, 8, ["show"]),
        withDirectives(createBaseVNode("div", _hoisted_44$1, [
          createVNode(_component_Loader2Icon, { class: "motion-safe:animate-spin stroke-[5px] text-white h-12 w-12 mb-2" }),
          _hoisted_45$1,
          _hoisted_46$1,
          _hoisted_47$1
        ], 512), [
          [vShow, isLoading.value]
        ])
      ], 64);
    };
  }
};
const PrintDaftarAnggota = /* @__PURE__ */ _export_sfc(_sfc_main$2, [["__scopeId", "data-v-aef47ffd"]]);
const routes = [
  {
    path: "/",
    name: "home",
    component: HomeView,
    meta: { authorize: [] }
  },
  {
    path: "/produk-pinjaman",
    name: "produk-pinjaman",
    component: _sfc_main$8,
    meta: { authorize: [] }
  },
  {
    path: "/daftar-anggota-koperasi",
    name: "daftar-anggota-koperasi",
    component: _sfc_main$7,
    meta: { authorize: [] }
  },
  {
    path: "/history-anggota-koperasi",
    name: "history-anggota-koperasi",
    component: _sfc_main$6,
    meta: { authorize: [] }
  },
  {
    path: "/jurnal-transaksi",
    name: "jurnal-transaksi",
    component: _sfc_main$4,
    meta: { authorize: [] }
  },
  {
    path: "/daftar-perkiraan-akuntansi",
    name: "daftar-perkiraan-akuntansi",
    component: _sfc_main$3,
    meta: { authorize: [] }
  },
  {
    path: "/laporan-daftar-anggota",
    name: "laporan-daftar-anggota",
    component: PrintDaftarAnggota,
    meta: { authorize: [] }
  },
  {
    path: "/auth",
    name: "auth",
    component: _sfc_main$a
  },
  {
    path: "/tentang-aplikasi",
    name: "tentang-aplikasi",
    component: () => __vitePreload(() => import("./AboutAplikasi-a0f8d03a.js"), true ? ["./AboutAplikasi-a0f8d03a.js","./AboutAplikasi-fe0787ef.css"] : void 0, import.meta.url),
    meta: { authorize: [] }
  },
  {
    path: "/:pathMatch(.*)*",
    component: () => __vitePreload(() => import("./404-21e323c5.js"), true ? ["./404-21e323c5.js","./404-50ce9b0e.css"] : void 0, import.meta.url)
  }
];
const router$1 = createRouter({
  history: createWebHashHistory(),
  routes,
  scrollBehavior(to2, from2, savedPosition) {
    return savedPosition || { left: 0, top: 0 };
  }
});
router$1.beforeEach((to2, from2, next) => {
  const { authorize } = to2.meta;
  const publicPages = ["/auth"];
  const authRequired = !publicPages.includes(to2.path);
  const auth = useAuthStore();
  const currentUser = auth.items;
  if (authorize) {
    if (authRequired && !auth.user || authRequired && currentUser.token == null && from2.name !== "auth") {
      auth.returnUrl = to2.fullPath;
      return next({ path: "/auth" });
    }
    if (authorize.length && !authorize.includes(currentUser.role)) {
      Swal.fire({
        icon: "error",
        title: "Oops...",
        text: "Role Akun Anda, Tidak Bisa Mengakses Halaman ini !"
      }).then((data) => {
        return next({ path: "/" });
      });
    }
  }
  next();
});
const request = window.api.oAuth;
const useAuthStore = defineStore({
  id: "authorization",
  state: () => ({
    user: JSON.parse(localStorage.getItem("user")),
    returnUrl: null
  }),
  getters: {
    items: (state) => state.user
  },
  actions: {
    async login(input_user, password) {
      try {
        const data = await request.auth(input_user, password);
        if (data.success) {
          this.user = data.data;
          localStorage.setItem("user", JSON.stringify(this.user));
          router$1.push(this.returnUrl || "/");
        }
        return data;
      } catch (error) {
        console.error(error);
        throw new Error(error);
      }
    },
    async logout() {
      try {
        const data = await request.logOut();
        if (data.success) {
          router$1.push("/auth");
          this.user = null;
          localStorage.removeItem("user");
        }
        window.location.reload();
      } catch (error) {
        console.error(error);
        throw new Error(error);
      }
    }
  }
});
const NavbarView_vue_vue_type_style_index_0_scoped_c8e38b5c_lang = "";
const _withScopeId = (n) => (pushScopeId("data-v-c8e38b5c"), n = n(), popScopeId(), n);
const _hoisted_1 = { class: "bg-slate-50 h-12 px-2 sm:px-4 py-2.5 dark:bg-gray-900 sticky w-full z-50 top-0 left-0 border-b border-gray-200 dark:border-gray-600" };
const _hoisted_2 = { class: "container flex flex-wrap items-center justify-between -mt-2 mx-auto" };
const _hoisted_3 = {
  href: "javascript:void(0);",
  class: "items-center hover:scale-125 transition duration-700 ease-in-out hidden xl:flex"
};
const _hoisted_4 = ["src"];
const _hoisted_5 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("span", { class: "self-center text-base font-bold tracking-wide font-mono whitespace-nowrap dark:text-white" }, "Binaniaga", -1));
const _hoisted_6 = { class: "flex md:order-2 mt-[6px]" };
const _hoisted_7 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("div", { class: "text-sm font-medium" }, "Nama User", -1));
const _hoisted_8 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("div", { class: "text-xs text-black/70 mt-0.5 dark:text-slate-500" }, "Nama Lembaga", -1));
const _hoisted_9 = {
  class: "items-center justify-between hidden w-full md:flex md:w-auto md:order-1 h-10",
  id: "navbar-sticky"
};
const _hoisted_10 = { class: "h-12 navbar-nav justify-center flex flex-col p-4 mt-4 border border-gray-100 rounded-lg bg-slate-50 md:flex-row md:space-x-3 md:mt-0 md:text-sm md:font-medium md:border-0" };
const _hoisted_11 = { class: "group mx-2" };
const _hoisted_12 = {
  href: "javascript:void(0);",
  class: "rounded text-sm bg-transparent hover:text-primary flex items-center hover:bg-slate-200 p-2 -m-2",
  "aria-current": "page"
};
const _hoisted_13 = { class: "shadow-lg space-y-1 p-2 ring-1 py-2 ring-opacity-5 focus:outline-none bg-white mt-2 border rounded transform scale-0 group-hover:scale-100 absolute transition duration-150 ease-in-out origin-top min-w-max" };
const _hoisted_14 = { class: "px-2 hover:bg-slate-200 pb-1 relative rounded" };
const _hoisted_15 = {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
};
const _hoisted_16 = { class: "shadow-lg space-y-1 ring-1 p-2 ring-black ring-opacity-50 focus:outline-none bg-white border rounded absolute transform top-0 right-0 transition duration-150 ease-in-out origin-top-left min-w-max" };
const _hoisted_17 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_18 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Produk Pinjaman", -1));
const _hoisted_19 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_20 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Cara Hitung Pinjaman", -1));
const _hoisted_21 = /* @__PURE__ */ createStaticVNode('<li class="px-2 hover:bg-slate-200 pb-1 rounded cursor-not-allowed" aria-disabled="true" data-v-c8e38b5c><span class="rounded text-sm bg-transparent text-secondary p-2 -mt-3" data-v-c8e38b5c>Jenis Pengunaan</span></li><li class="px-2 hover:bg-slate-200 pb-1 rounded cursor-not-allowed" aria-disabled="true" data-v-c8e38b5c><span class="rounded text-sm bg-transparent text-secondary p-2 -mt-3" data-v-c8e38b5c>Sektor Ekonomi</span></li><li class="px-2 hover:bg-slate-200 pb-1 rounded cursor-not-allowed" aria-disabled="true" data-v-c8e38b5c><span class="rounded text-sm bg-transparent text-secondary p-2 -mt-3" data-v-c8e38b5c>Sumber Pelunasan</span></li>', 3);
const _hoisted_24 = { class: "px-2 hover:bg-slate-200 pb-1 relative rounded" };
const _hoisted_25 = {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
};
const _hoisted_26 = { class: "shadow-lg space-y-1 ring-1 p-2 ring-black ring-opacity-50 focus:outline-none bg-white border rounded absolute transform top-0 right-0 transition duration-150 ease-in-out origin-top-left min-w-max" };
const _hoisted_27 = { class: "px-2 hover:bg-slate-200 pb-1 relative rounded" };
const _hoisted_28 = {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
};
const _hoisted_29 = { class: "shadow-lg space-y-1 ring-1 p-2 ring-[#00913E] ring-opacity-50 focus:outline-none bg-white border rounded absolute transform top-0 right-0 transition duration-150 ease-in-out origin-top-left min-w-max" };
const _hoisted_30 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_31 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Produk Simpata/ Tabungan", -1));
const _hoisted_32 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_33 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Produk Simpanan Berjangka", -1));
const _hoisted_34 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("li", {
  class: "px-2 hover:bg-slate-200 pb-1 rounded cursor-not-allowed",
  "aria-disabled": "true"
}, [
  /* @__PURE__ */ createBaseVNode("span", { class: "rounded text-sm bg-transparent text-secondary p-2 -mt-3" }, "Modal Penyertaan")
], -1));
const _hoisted_35 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("li", {
  class: "px-2 hover:bg-slate-200 pb-1 rounded cursor-not-allowed",
  "aria-disabled": "true"
}, [
  /* @__PURE__ */ createBaseVNode("span", { class: "rounded text-sm bg-transparent text-secondary p-2 -mt-3" }, "Cara Hitung Simpanan")
], -1));
const _hoisted_36 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("li", {
  class: "px-2 hover:bg-slate-200 pb-1 rounded cursor-not-allowed",
  "aria-disabled": "true"
}, [
  /* @__PURE__ */ createBaseVNode("span", { class: "rounded text-sm bg-transparent text-secondary p-2 -mt-3" }, "Kelompok Simpanan")
], -1));
const _hoisted_37 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_38 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "kode Perkiraan", -1));
const _hoisted_39 = { class: "px-2 hover:bg-slate-200 pb-1 relative rounded" };
const _hoisted_40 = {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
};
const _hoisted_41 = { class: "shadow-lg space-y-1 ring-1 p-2 ring-black ring-opacity-50 focus:outline-none bg-white border rounded absolute transform top-0 right-0 transition duration-150 ease-in-out origin-top-left min-w-max" };
const _hoisted_42 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_43 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Barang Bergerak", -1));
const _hoisted_44 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_45 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Tanah & Bangunan", -1));
const _hoisted_46 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_47 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Jaminan Simpanan", -1));
const _hoisted_48 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_49 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Jaminan Lain - Lain", -1));
const _hoisted_50 = { class: "px-2 hover:bg-slate-200 pb-1 relative rounded" };
const _hoisted_51 = {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
};
const _hoisted_52 = { class: "shadow-lg space-y-1 ring-1 p-2 ring-black ring-opacity-50 focus:outline-none bg-white border rounded absolute transform top-0 right-0 transition duration-150 ease-in-out origin-top-left min-w-max" };
const _hoisted_53 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_54 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Daftar Kolektor", -1));
const _hoisted_55 = /* @__PURE__ */ createStaticVNode('<li class="px-2 hover:bg-slate-200 pb-1 rounded cursor-not-allowed" aria-disabled="true" data-v-c8e38b5c><span class="rounded text-sm bg-transparent text-secondary p-2 -mt-3" data-v-c8e38b5c>Daftar Resort</span></li><li class="px-2 hover:bg-slate-200 pb-1 rounded cursor-not-allowed" aria-disabled="true" data-v-c8e38b5c><span class="rounded text-sm bg-transparent text-secondary p-2 -mt-3" data-v-c8e38b5c>Daftar Notaris</span></li><li class="px-2 hover:bg-slate-200 pb-1 rounded cursor-not-allowed" aria-disabled="true" data-v-c8e38b5c><span class="rounded text-sm bg-transparent text-secondary p-2 -mt-3" data-v-c8e38b5c>Daftar Asuransi</span></li><li class="px-2 hover:bg-slate-200 pb-1 rounded cursor-not-allowed" aria-disabled="true" data-v-c8e38b5c><span class="rounded text-sm bg-transparent text-secondary p-2 -mt-3" data-v-c8e38b5c>Wilayah Pinjaman</span></li><li class="px-2 hover:bg-slate-200 pb-1 rounded cursor-not-allowed" aria-disabled="true" data-v-c8e38b5c><span class="rounded text-sm bg-transparent text-secondary p-2 -mt-3" data-v-c8e38b5c>Kode Kota</span></li><li class="px-2 hover:bg-slate-200 pb-1 rounded cursor-not-allowed" aria-disabled="true" data-v-c8e38b5c><span class="rounded text-sm bg-transparent text-secondary p-2 -mt-3" data-v-c8e38b5c>Kode Marketing</span></li>', 6);
const _hoisted_61 = { class: "group mx-2" };
const _hoisted_62 = {
  href: "javascript:void(0);",
  class: "rounded text-sm bg-transparent hover:text-primary flex items-center hover:bg-slate-200 p-2 -m-2",
  "aria-current": "page"
};
const _hoisted_63 = { class: "shadow-lg p-2 space-y-1 ring-1 py-2 ring-opacity-5 focus:outline-none bg-white mt-2 border rounded transform scale-0 group-hover:scale-100 absolute transition duration-150 ease-in-out origin-top min-w-max" };
const _hoisted_64 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_65 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Transaksi Kas dan Non Kas", -1));
const _hoisted_66 = { class: "px-2 hover:bg-slate-200 pb-1 relative rounded" };
const _hoisted_67 = {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
};
const _hoisted_68 = { class: "shadow-lg space-y-1 ring-1 p-2 ring-black ring-opacity-50 focus:outline-none bg-white border rounded absolute transform top-0 right-0 transition duration-150 ease-in-out origin-top-left min-w-max" };
const _hoisted_69 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_70 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Daftar Pinjaman/ Pembiayaan", -1));
const _hoisted_71 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_72 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Data History Pinjaman", -1));
const _hoisted_73 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_74 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Data Debius Pinjaman", -1));
const _hoisted_75 = { class: "px-2 hover:bg-slate-200 pb-1 relative rounded" };
const _hoisted_76 = {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
};
const _hoisted_77 = { class: "shadow-lg space-y-1 ring-1 p-2 ring-black ring-opacity-50 focus:outline-none bg-white border rounded absolute transform top-0 right-0 transition duration-150 ease-in-out origin-top-left min-w-max" };
const _hoisted_78 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_79 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Daftar Anggota Koperasi", -1));
const _hoisted_80 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_81 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "History Anggota Koperasi", -1));
const _hoisted_82 = { class: "px-2 hover:bg-slate-200 pb-1 relative rounded" };
const _hoisted_83 = {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
};
const _hoisted_84 = { class: "shadow-lg space-y-1 ring-1 p-2 ring-black ring-opacity-50 focus:outline-none bg-white border rounded absolute transform top-0 right-0 transition duration-150 ease-in-out origin-top-left min-w-max" };
const _hoisted_85 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_86 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Jurnal Transaksi", -1));
const _hoisted_87 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_88 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Daftar Perkiraan Akuntansi", -1));
const _hoisted_89 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_90 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Daftar Inventaris", -1));
const _hoisted_91 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_92 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "History Inventaris", -1));
const _hoisted_93 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_94 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Pembayaran Kolektor", -1));
const _hoisted_95 = { class: "px-2 hover:bg-slate-200 pb-1 relative rounded" };
const _hoisted_96 = {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
};
const _hoisted_97 = { class: "shadow-lg space-y-1 ring-1 p-2 ring-black ring-opacity-50 focus:outline-none bg-white border rounded absolute transform top-0 right-0 transition duration-150 ease-in-out origin-top-left min-w-max" };
const _hoisted_98 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_99 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Agunan BPKB", -1));
const _hoisted_100 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_101 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Agunan STPK", -1));
const _hoisted_102 = { class: "group mx-2" };
const _hoisted_103 = {
  href: "javascript:void(0);",
  class: "rounded text-sm bg-transparent hover:text-primary flex items-center hover:bg-slate-200 p-2 -m-2",
  "aria-current": "page"
};
const _hoisted_104 = { class: "shadow-lg p-2 space-y-1 ring-1 py-2 ring-opacity-5 focus:outline-none bg-white mt-2 border rounded transform scale-0 group-hover:scale-100 absolute transition duration-150 ease-in-out origin-top min-w-max" };
const _hoisted_105 = { class: "px-2 hover:bg-slate-200 pb-1 relative rounded" };
const _hoisted_106 = {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
};
const _hoisted_107 = { class: "shadow-lg space-y-1 ring-1 p-2 ring-black ring-opacity-50 focus:outline-none bg-white border rounded absolute transform top-0 right-0 transition duration-150 ease-in-out origin-top-left min-w-max" };
const _hoisted_108 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_109 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Daftar Anggota", -1));
const _hoisted_110 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_111 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Mutasi Simpanan Pokok", -1));
const _hoisted_112 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_113 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Mutasi Simpanan Wajib", -1));
const _hoisted_114 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_115 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Mutasi Simpanan SWK", -1));
const _hoisted_116 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_117 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Mutasi Simpanan Lain - Lain", -1));
const _hoisted_118 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_119 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Mutasi Simpanan SHU", -1));
const _hoisted_120 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_121 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Rician SHU", -1));
const _hoisted_122 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_123 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Anggota Keluar", -1));
const _hoisted_124 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_125 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Terima SHU", -1));
const _hoisted_126 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_127 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Anggota Baru", -1));
const _hoisted_128 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_129 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Nominatif Simpanan Pokok", -1));
const _hoisted_130 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_131 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Nominatif Simpanan Wajib", -1));
const _hoisted_132 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_133 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Nominatif Simpanan SWK", -1));
const _hoisted_134 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_135 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Nominatif Simpanan Lain - Lain", -1));
const _hoisted_136 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_137 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Nominatif Simpanan SHU", -1));
const _hoisted_138 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_139 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Nominatif Simpanan Anggota", -1));
const _hoisted_140 = { class: "px-2 hover:bg-slate-200 pb-1 relative rounded" };
const _hoisted_141 = {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
};
const _hoisted_142 = { class: "shadow-lg space-y-1 ring-1 p-2 ring-black ring-opacity-50 focus:outline-none bg-white border rounded absolute transform top-0 right-0 transition duration-150 ease-in-out origin-top-left min-w-max" };
const _hoisted_143 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_144 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Pembukaan Rekening Baru", -1));
const _hoisted_145 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_146 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Mutasi SMB", -1));
const _hoisted_147 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_148 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Nominatif SMB", -1));
const _hoisted_149 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_150 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Penutupan Rekening", -1));
const _hoisted_151 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_152 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Rekap Buku Besar", -1));
const _hoisted_153 = { class: "px-2 hover:bg-slate-200 pb-1 relative rounded" };
const _hoisted_154 = {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
};
const _hoisted_155 = { class: "shadow-lg space-y-1 ring-1 p-2 ring-[#00913E] ring-opacity-50 focus:outline-none bg-white border rounded absolute transform top-0 right-0 transition duration-150 ease-in-out origin-top-left min-w-max" };
const _hoisted_156 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_157 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Daftar Mutasi Pengambilan Simpanan", -1));
const _hoisted_158 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_159 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Laporan SMB Tiap Resort", -1));
const _hoisted_160 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_161 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Mutasi Saldo", -1));
const _hoisted_162 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_163 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Pengambilan SMB", -1));
const _hoisted_164 = { class: "px-2 hover:bg-slate-200 pb-1 relative rounded" };
const _hoisted_165 = {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
};
const _hoisted_166 = { class: "shadow-lg space-y-1 ring-1 p-2 ring-black ring-opacity-50 focus:outline-none bg-white border rounded absolute transform top-0 right-0 transition duration-150 ease-in-out origin-top-left min-w-max" };
const _hoisted_167 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_168 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Realisasi Pinjaman", -1));
const _hoisted_169 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_170 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Penerimaan Angsuran", -1));
const _hoisted_171 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_172 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Nominatif Pinjaman", -1));
const _hoisted_173 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_174 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Pelunasan Pinjaman", -1));
const _hoisted_175 = { class: "px-2 hover:bg-slate-200 pb-1 relative rounded" };
const _hoisted_176 = {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
};
const _hoisted_177 = { class: "shadow-lg space-y-1 ring-1 p-2 ring-[#00913E] ring-opacity-50 focus:outline-none bg-white border rounded absolute transform top-0 right-0 transition duration-150 ease-in-out origin-top-left min-w-max" };
const _hoisted_178 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_179 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Agunan Masuk", -1));
const _hoisted_180 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_181 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Agunan Keluar", -1));
const _hoisted_182 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_183 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Saldo Agunan", -1));
const _hoisted_184 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_185 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Jaminan Kosong", -1));
const _hoisted_186 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_187 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Jaminan Belum Diambil", -1));
const _hoisted_188 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_189 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Agunan Titipan Masuk", -1));
const _hoisted_190 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_191 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Agunan Titipan Keluar", -1));
const _hoisted_192 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_193 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Saldo Agunan Titipan", -1));
const _hoisted_194 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_195 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Rekap Agunan Harian", -1));
const _hoisted_196 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_197 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Tunggakan Angsuran", -1));
const _hoisted_198 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_199 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Angsuran Menurut Realisasi", -1));
const _hoisted_200 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_201 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Pinjaman Belum Cair", -1));
const _hoisted_202 = { class: "px-2 hover:bg-slate-200 pb-1 relative rounded" };
const _hoisted_203 = {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
};
const _hoisted_204 = { class: "shadow-lg space-y-1 ring-1 p-2 ring-[#00913E] ring-opacity-50 focus:outline-none bg-white border rounded absolute transform top-0 -right-[1px] transition duration-150 ease-in-out origin-top-left min-w-max" };
const _hoisted_205 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_206 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Rekapitulasi NPL", -1));
const _hoisted_207 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_208 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Nasabah Turun Bunga", -1));
const _hoisted_209 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_210 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Pinjaman Debius", -1));
const _hoisted_211 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_212 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Penerimaan Angsuran Debius", -1));
const _hoisted_213 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_214 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Nominatif Pinjaman Debius", -1));
const _hoisted_215 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_216 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Pelunasan Pinjaman Debius", -1));
const _hoisted_217 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_218 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Nominatif Pinjaman 2", -1));
const _hoisted_219 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_220 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Nominatif Pinjaman 3", -1));
const _hoisted_221 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_222 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Kurang Lebih Jasa Lunas", -1));
const _hoisted_223 = { class: "px-2 hover:bg-slate-200 pb-1 relative rounded" };
const _hoisted_224 = {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
};
const _hoisted_225 = { class: "shadow-lg space-y-1 ring-1 p-2 ring-black ring-opacity-50 focus:outline-none bg-white border rounded absolute transform top-0 right-0 transition duration-150 ease-in-out origin-top-left min-w-max" };
const _hoisted_226 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_227 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Penerimaan Kas", -1));
const _hoisted_228 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_229 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Mutasi Non Kas", -1));
const _hoisted_230 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_231 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Rician Uang Kas", -1));
const _hoisted_232 = { class: "px-2 hover:bg-slate-200 pb-1 relative rounded" };
const _hoisted_233 = {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
};
const _hoisted_234 = { class: "shadow-lg space-y-1 ring-1 p-2 ring-black ring-opacity-50 focus:outline-none bg-white border rounded absolute transform top-0 right-0 transition duration-150 ease-in-out origin-top-left min-w-max" };
const _hoisted_235 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_236 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Neraca", -1));
const _hoisted_237 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_238 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Laba Rugi", -1));
const _hoisted_239 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_240 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Neraca Perbandingan", -1));
const _hoisted_241 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_242 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Laba Rugi Perbandingan", -1));
const _hoisted_243 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_244 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Neraca Harian", -1));
const _hoisted_245 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_246 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Laba Rugi Harian", -1));
const _hoisted_247 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_248 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Rician Transaksi", -1));
const _hoisted_249 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_250 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Rekap Buku Besar", -1));
const _hoisted_251 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_252 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Daftar Inventaris", -1));
const _hoisted_253 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_254 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Rician Aktiva", -1));
const _hoisted_255 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_256 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Rician Pasiva", -1));
const _hoisted_257 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_258 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Rician Pendapatan", -1));
const _hoisted_259 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_260 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Rician Biaya", -1));
const _hoisted_261 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_262 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Cetak Jurnal Transaksi", -1));
const _hoisted_263 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_264 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Cetak Neraca & Laba/ Rugi", -1));
const _hoisted_265 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_266 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Rekap Transaksi", -1));
const _hoisted_267 = { class: "px-2 hover:bg-slate-200 pb-1 relative rounded" };
const _hoisted_268 = {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
};
const _hoisted_269 = { class: "shadow-lg space-y-1 ring-1 p-2 ring-black ring-opacity-50 focus:outline-none bg-white border rounded absolute transform top-0 right-0 transition duration-150 ease-in-out origin-top-left min-w-max" };
const _hoisted_270 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_271 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Daftar Tagihan Instansi", -1));
const _hoisted_272 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_273 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Laporan Rekap Transaksi", -1));
const _hoisted_274 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_275 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Laporan Daftar Transaksi", -1));
const _hoisted_276 = { class: "px-2 hover:bg-slate-200 pb-1 relative rounded" };
const _hoisted_277 = {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
};
const _hoisted_278 = { class: "shadow-lg space-y-1 ring-1 p-2 ring-black ring-opacity-50 focus:outline-none bg-white border rounded absolute transform top-0 right-0 transition duration-150 ease-in-out origin-top-left min-w-max" };
const _hoisted_279 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_280 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Pembukaan Rekening Baru", -1));
const _hoisted_281 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_282 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Mutasi SIMPATA", -1));
const _hoisted_283 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_284 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Nominatif SIMPATA", -1));
const _hoisted_285 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_286 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Penutupan Rekening", -1));
const _hoisted_287 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_288 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "SIMPATA Keluar", -1));
const _hoisted_289 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_290 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "RBB SIMPATA", -1));
const _hoisted_291 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_292 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Pengambilan SIMPATA", -1));
const _hoisted_293 = { class: "px-2 hover:bg-slate-200 pb-1 relative rounded" };
const _hoisted_294 = {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
};
const _hoisted_295 = { class: "shadow-lg space-y-1 ring-1 p-2 ring-black ring-opacity-50 focus:outline-none bg-white border rounded absolute transform top-0 right-0 transition duration-150 ease-in-out origin-top-left min-w-max" };
const _hoisted_296 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_297 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Pembukaan Rekening Baru", -1));
const _hoisted_298 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_299 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Mutasi SMA", -1));
const _hoisted_300 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_301 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Nominatif SMA", -1));
const _hoisted_302 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_303 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Penutupan Rekening", -1));
const _hoisted_304 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_305 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "SMA Keluar", -1));
const _hoisted_306 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_307 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "RBB SMA", -1));
const _hoisted_308 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_309 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Pengambilan SMA", -1));
const _hoisted_310 = { class: "group mx-2" };
const _hoisted_311 = {
  href: "javascript:void(0);",
  class: "rounded text-sm bg-transparent hover:text-primary flex items-center hover:bg-slate-200 p-2 -m-2",
  "aria-current": "page"
};
const _hoisted_312 = { class: "shadow-lg p-2 space-y-1 ring-1 py-2 ring-opacity-5 focus:outline-none bg-white mt-2 border rounded transform scale-0 group-hover:scale-100 absolute transition duration-150 ease-in-out origin-top min-w-max" };
const _hoisted_313 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_314 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Harian", -1));
const _hoisted_315 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_316 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Hitung Perbagian", -1));
const _hoisted_317 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_318 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Perubahan Ketentuan", -1));
const _hoisted_319 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_320 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Hitung Ulang Saldo SMB, SIMPATA, SMA", -1));
const _hoisted_321 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_322 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Hitung Ulang Simpanan Anggota", -1));
const _hoisted_323 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_324 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Hitung Ulang Saldo Pinjaman", -1));
const _hoisted_325 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_326 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Hitung Ulang Saldo Inventaris", -1));
const _hoisted_327 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("hr", null, null, -1));
const _hoisted_328 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_329 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "ACC Pengeluaran", -1));
const _hoisted_330 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("hr", null, null, -1));
const _hoisted_331 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_332 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Verifikasi Proses Harian", -1));
const _hoisted_333 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("hr", null, null, -1));
const _hoisted_334 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_335 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Tutup Buku", -1));
const _hoisted_336 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_337 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Batal Tutup Buku", -1));
const _hoisted_338 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("hr", null, null, -1));
const _hoisted_339 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_340 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Perhitungan SHU", -1));
const _hoisted_341 = { class: "group mx-2" };
const _hoisted_342 = {
  href: "javascript:void(0);",
  class: "rounded text-sm bg-transparent hover:text-primary flex items-center hover:bg-slate-200 p-2 -m-2",
  "aria-current": "page"
};
const _hoisted_343 = { class: "shadow-lg p-2 space-y-1 ring-1 py-2 ring-opacity-5 focus:outline-none bg-white mt-2 border rounded transform scale-0 group-hover:scale-100 absolute transition duration-150 ease-in-out origin-top min-w-max" };
const _hoisted_344 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_345 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Pembatasan Tanggal", -1));
const _hoisted_346 = { class: "px-2 hover:bg-slate-200 pb-1 relative rounded" };
const _hoisted_347 = {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
};
const _hoisted_348 = { class: "shadow-lg space-y-1 ring-1 p-2 ring-black ring-opacity-50 focus:outline-none bg-white border rounded absolute transform top-0 right-[395px] transition duration-150 ease-in-out origin-top-left min-w-max" };
const _hoisted_349 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_350 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Setting Laporan/ Cetakan", -1));
const _hoisted_351 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_352 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Setting Posisi Cetakan", -1));
const _hoisted_353 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_354 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Sms GateWay", -1));
const _hoisted_355 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_356 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Cek Transaksi", -1));
const _hoisted_357 = { class: "px-2 hover:bg-slate-200 pb-1 relative rounded" };
const _hoisted_358 = {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
};
const _hoisted_359 = { class: "shadow-lg space-y-1 ring-1 p-2 ring-black ring-opacity-50 focus:outline-none bg-white border rounded absolute transform top-0 right-[355px] transition duration-150 ease-in-out origin-top-left min-w-max" };
const _hoisted_360 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_361 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Transaksi Simpanan", -1));
const _hoisted_362 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_363 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Mutasi Anggota", -1));
const _hoisted_364 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_365 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Mutasi pinjaman", -1));
const _hoisted_366 = { class: "px-2 hover:bg-slate-200 pb-1 relative rounded" };
const _hoisted_367 = {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
};
const _hoisted_368 = { class: "shadow-lg space-y-1 ring-1 p-2 ring-black ring-opacity-50 focus:outline-none bg-white border rounded absolute transform top-0 right-[395px] transition duration-150 ease-in-out origin-top-left min-w-max" };
const _hoisted_369 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_370 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Setting Laporan/ Cetakan", -1));
const _hoisted_371 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_372 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Setting Posisi Cetakan", -1));
const _hoisted_373 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_374 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Setting Default Printer", -1));
const _hoisted_375 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_376 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Perbaikan Data", -1));
const _hoisted_377 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("hr", null, null, -1));
const _hoisted_378 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_379 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Backup Database", -1));
const _hoisted_380 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_381 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Restore Database", -1));
const _hoisted_382 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("hr", null, null, -1));
const _hoisted_383 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_384 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Migrasi Data", -1));
const _hoisted_385 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_386 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Migrasi Inventaris", -1));
const _hoisted_387 = { class: "group mx-2" };
const _hoisted_388 = {
  href: "javascript:void(0);",
  class: "rounded text-sm bg-transparent hover:text-primary flex items-center hover:bg-slate-200 p-2 -m-2",
  "aria-current": "page"
};
const _hoisted_389 = { class: "shadow-lg p-2 space-y-1 ring-1 py-2 ring-opacity-5 focus:outline-none bg-white mt-2 border rounded transform scale-0 group-hover:scale-100 absolute transition duration-150 ease-in-out origin-top min-w-max" };
const _hoisted_390 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_391 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Tentang Aplikasi", -1));
const _hoisted_392 = { class: "px-2 hover:bg-slate-200 pb-1 rounded" };
const _hoisted_393 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("a", {
  class: "rounded text-sm bg-transparent hover:text-primary p-2 -mt-3",
  href: "javascript:void(0);"
}, "Registrasi Aplikasi", -1));
const _hoisted_394 = { class: "p-5 text-center" };
const _hoisted_395 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("div", { class: "text-xl mt-5" }, "Apakah Anda yakin ingin Keluar ?", -1));
const _hoisted_396 = { class: "px-5 pb-8 text-center" };
const _sfc_main$1 = {
  __name: "NavbarView",
  props: {
    title: String
  },
  setup(__props, { expose }) {
    const props = __props;
    const Auth = useAuthStore();
    const logoutConfirmationModal = ref(false);
    const listMenu = {
      setting: ref(),
      transaksi: ref(),
      laporan: ref(),
      proses: ref(),
      utility: ref()
    };
    const openMenu = (e) => {
      var menu = listMenu[e]?.value;
      let title = menu.getElementsByTagName("a")[0];
      let svg = menu.getElementsByTagName("svg")[0];
      let child = menu.getElementsByTagName("ul")[0];
      title.classList.add("text-primary");
      title.classList.add("bg-slate-200");
      svg.classList.add("-rotate-180");
      child.classList.remove("scale-0");
      child.classList.add("scale-100");
    };
    const closeMenu = (e) => {
      setTimeout(() => {
        var menu = listMenu[e]?.value;
        let title = menu.getElementsByTagName("a")[0] ? menu.getElementsByTagName("a")[0] : "";
        let svg = menu.getElementsByTagName("svg")[0] ? menu.getElementsByTagName("svg")[0] : "";
        let child = menu.getElementsByTagName("ul")[0] ? menu.getElementsByTagName("ul")[0] : "";
        title.classList.remove("text-primary");
        title.classList.remove("bg-slate-200");
        svg.classList.remove("-rotate-180");
        child.classList.add("scale-0");
        child.classList.remove("scale-100");
      }, 500);
    };
    const onLogout = () => {
      Auth.logout();
      logoutConfirmationModal.value = false;
    };
    expose({ openMenu, closeMenu });
    return (_ctx, _cache) => {
      const _component_UserIcon = resolveComponent("UserIcon");
      const _component_DropdownToggle = resolveComponent("DropdownToggle");
      const _component_DropdownHeader = resolveComponent("DropdownHeader");
      const _component_DropdownDivider = resolveComponent("DropdownDivider");
      const _component_InfoIcon = resolveComponent("InfoIcon");
      const _component_DropdownItem = resolveComponent("DropdownItem");
      const _component_UsersIcon = resolveComponent("UsersIcon");
      const _component_HelpCircleIcon = resolveComponent("HelpCircleIcon");
      const _component_LogOutIcon = resolveComponent("LogOutIcon");
      const _component_DropdownContent = resolveComponent("DropdownContent");
      const _component_DropdownMenu = resolveComponent("DropdownMenu");
      const _component_Dropdown = resolveComponent("Dropdown");
      const _component_ChevronDownIcon = resolveComponent("ChevronDownIcon");
      const _component_ModalBody = resolveComponent("ModalBody");
      const _component_Modal = resolveComponent("Modal");
      return openBlock(), createElementBlock(Fragment, null, [
        createBaseVNode("nav", _hoisted_1, [
          createBaseVNode("div", _hoisted_2, [
            createBaseVNode("a", _hoisted_3, [
              createBaseVNode("img", {
                src: unref(LOGO),
                alt: "logo",
                class: "h-4 mr-3 sm:h-7"
              }, null, 8, _hoisted_4),
              _hoisted_5
            ]),
            createBaseVNode("div", _hoisted_6, [
              createVNode(_component_Dropdown, { class: "intro-x w-8 h-8" }, {
                default: withCtx(() => [
                  createVNode(_component_DropdownToggle, {
                    tag: "div",
                    role: "button",
                    "aria-label": "user",
                    class: "w-7 h-7 bg-[#00913E] hover:bg-primary transition duration-500 ease-in-out p-auto rounded-full overflow-hidden shadow-lg image-fit zoom-in scale-110"
                  }, {
                    default: withCtx(() => [
                      createVNode(_component_UserIcon, { class: "w-5 h-5 object-fill stroke-1 border-1 border-dark stroke-white fill-white bg-[#00913E] hover:bg-primary transition duration-500 ease-in-out mt-1 mx-auto rounded-full" })
                    ]),
                    _: 1
                  }),
                  createVNode(_component_DropdownMenu, { class: "w-56" }, {
                    default: withCtx(() => [
                      createVNode(_component_DropdownContent, { class: "duration-700 absolute z-10 origin-top-right transform rounded-md border-2 bg-white p-4 shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none dark:border-primary dark:bg-dark dark:shadow-slate-500 translate-y-0" }, {
                        default: withCtx(() => [
                          createVNode(_component_DropdownHeader, {
                            tag: "div",
                            class: "!font-normal"
                          }, {
                            default: withCtx(() => [
                              _hoisted_7,
                              _hoisted_8
                            ]),
                            _: 1
                          }),
                          createVNode(_component_DropdownDivider, { class: "border-slate-200" }),
                          createVNode(_component_DropdownItem, { class: "hover:bg-slate-200 text-sm" }, {
                            default: withCtx(() => [
                              createVNode(_component_InfoIcon, { class: "w-4 h-4 mr-2" }),
                              createTextVNode(" Profil User & Lembaga ")
                            ]),
                            _: 1
                          }),
                          createVNode(unref(RouterLink), { to: "/semua-akun" }, {
                            default: withCtx(() => [
                              createVNode(_component_DropdownItem, { class: "hover:bg-slate-200 text-sm" }, {
                                default: withCtx(() => [
                                  createVNode(_component_UsersIcon, { class: "w-4 h-4 mr-2" }),
                                  createTextVNode("Pengaturan Semua Akun ")
                                ]),
                                _: 1
                              })
                            ]),
                            _: 1
                          }),
                          createVNode(_component_DropdownItem, { class: "hover:bg-slate-200 text-sm" }, {
                            default: withCtx(() => [
                              createVNode(_component_HelpCircleIcon, { class: "w-4 h-4 mr-2 inline-block" }),
                              createTextVNode(" Bantuan ")
                            ]),
                            _: 1
                          }),
                          createVNode(_component_DropdownDivider, { class: "border-slate-200" }),
                          createVNode(_component_DropdownItem, {
                            onClick: _cache[0] || (_cache[0] = ($event) => logoutConfirmationModal.value = true),
                            class: "hover:bg-slate-300 text-sm bg-danger justify-center text-white hover:text-danger"
                          }, {
                            default: withCtx(() => [
                              createVNode(_component_LogOutIcon, { class: "w-4 h-4 mr-2" }),
                              createTextVNode(" Logout ")
                            ]),
                            _: 1
                          })
                        ]),
                        _: 1
                      })
                    ]),
                    _: 1
                  })
                ]),
                _: 1
              })
            ]),
            createBaseVNode("div", _hoisted_9, [
              createBaseVNode("ul", _hoisted_10, [
                createBaseVNode("li", null, [
                  createVNode(unref(RouterLink), { to: "/" }, {
                    default: withCtx(() => [
                      createBaseVNode("a", {
                        href: "javascript:void(0);",
                        class: normalizeClass(["rounded text-sm hover:text-primary hover:bg-slate-200 p-2 -mt-3", props.title == "home" ? "bg-slate-200" : "bg-transparent"]),
                        "aria-current": "page"
                      }, "Home", 2)
                    ]),
                    _: 1
                  })
                ]),
                createBaseVNode("li", {
                  ref: listMenu.setting
                }, [
                  createBaseVNode("div", _hoisted_11, [
                    createBaseVNode("a", _hoisted_12, [
                      createTextVNode("Setting "),
                      createVNode(_component_ChevronDownIcon, { class: "ml-1 h-4 w-4 transform group-hover:-rotate-180 transition duration-150 ease-in-out stroke-[2.5px]" })
                    ]),
                    createBaseVNode("ul", _hoisted_13, [
                      createBaseVNode("li", _hoisted_14, [
                        createBaseVNode("a", _hoisted_15, [
                          createTextVNode("Pinjaman "),
                          createVNode(_component_ChevronDownIcon, { class: "sub-menu inline h-4 w-4 transition duration-150 ease-in-out stroke-[2.5px]" })
                        ]),
                        createBaseVNode("ul", _hoisted_16, [
                          createBaseVNode("li", _hoisted_17, [
                            createVNode(unref(RouterLink), { to: "/produk-pinjaman" }, {
                              default: withCtx(() => [
                                _hoisted_18
                              ]),
                              _: 1
                            })
                          ]),
                          createBaseVNode("li", _hoisted_19, [
                            createVNode(unref(RouterLink), { to: "/cara-hitung-pinjaman" }, {
                              default: withCtx(() => [
                                _hoisted_20
                              ]),
                              _: 1
                            })
                          ]),
                          _hoisted_21
                        ])
                      ]),
                      createBaseVNode("li", _hoisted_24, [
                        createBaseVNode("a", _hoisted_25, [
                          createTextVNode("SMB / Simpanan "),
                          createVNode(_component_ChevronDownIcon, { class: "sub-menu inline h-4 w-4 transition duration-150 ease-in-out stroke-[2.5px]" })
                        ]),
                        createBaseVNode("ul", _hoisted_26, [
                          createBaseVNode("li", _hoisted_27, [
                            createBaseVNode("a", _hoisted_28, [
                              createTextVNode("Produk Simpanan "),
                              createVNode(_component_ChevronDownIcon, { class: "sub-menu inline h-4 w-4 transition duration-150 ease-in-out stroke-[2.5px]" })
                            ]),
                            createBaseVNode("ul", _hoisted_29, [
                              createBaseVNode("li", _hoisted_30, [
                                createVNode(unref(RouterLink), { to: "/produk-simpata" }, {
                                  default: withCtx(() => [
                                    _hoisted_31
                                  ]),
                                  _: 1
                                })
                              ]),
                              createBaseVNode("li", _hoisted_32, [
                                createVNode(unref(RouterLink), { to: "/produk-simpanan-berjangka" }, {
                                  default: withCtx(() => [
                                    _hoisted_33
                                  ]),
                                  _: 1
                                })
                              ]),
                              _hoisted_34
                            ])
                          ]),
                          _hoisted_35,
                          _hoisted_36
                        ])
                      ]),
                      createBaseVNode("li", _hoisted_37, [
                        createVNode(unref(RouterLink), { to: "/kode-perkiraan" }, {
                          default: withCtx(() => [
                            _hoisted_38
                          ]),
                          _: 1
                        })
                      ]),
                      createBaseVNode("li", _hoisted_39, [
                        createBaseVNode("a", _hoisted_40, [
                          createTextVNode("Pengikatan "),
                          createVNode(_component_ChevronDownIcon, { class: "sub-menu inline h-4 w-4 transition duration-150 ease-in-out stroke-[2.5px]" })
                        ]),
                        createBaseVNode("ul", _hoisted_41, [
                          createBaseVNode("li", _hoisted_42, [
                            createVNode(unref(RouterLink), { to: "/barang-bergerak" }, {
                              default: withCtx(() => [
                                _hoisted_43
                              ]),
                              _: 1
                            })
                          ]),
                          createBaseVNode("li", _hoisted_44, [
                            createVNode(unref(RouterLink), { to: "/tanah-bangunan" }, {
                              default: withCtx(() => [
                                _hoisted_45
                              ]),
                              _: 1
                            })
                          ]),
                          createBaseVNode("li", _hoisted_46, [
                            createVNode(unref(RouterLink), { to: "/jaminan-simpanan" }, {
                              default: withCtx(() => [
                                _hoisted_47
                              ]),
                              _: 1
                            })
                          ]),
                          createBaseVNode("li", _hoisted_48, [
                            createVNode(unref(RouterLink), { to: "/jaminan-lain" }, {
                              default: withCtx(() => [
                                _hoisted_49
                              ]),
                              _: 1
                            })
                          ])
                        ])
                      ]),
                      createBaseVNode("li", _hoisted_50, [
                        createBaseVNode("a", _hoisted_51, [
                          createTextVNode("Lain - Lain "),
                          createVNode(_component_ChevronDownIcon, { class: "sub-menu inline h-4 w-4 transition duration-150 ease-in-out stroke-[2.5px]" })
                        ]),
                        createBaseVNode("ul", _hoisted_52, [
                          createBaseVNode("li", _hoisted_53, [
                            createVNode(unref(RouterLink), { to: "/daftar-kolektor" }, {
                              default: withCtx(() => [
                                _hoisted_54
                              ]),
                              _: 1
                            })
                          ]),
                          _hoisted_55
                        ])
                      ])
                    ])
                  ])
                ], 512),
                createBaseVNode("li", {
                  ref: listMenu.transaksi
                }, [
                  createBaseVNode("div", _hoisted_61, [
                    createBaseVNode("a", _hoisted_62, [
                      createTextVNode("Transaksi "),
                      createVNode(_component_ChevronDownIcon, { class: "ml-1 h-4 w-4 transform group-hover:-rotate-180 transition duration-150 ease-in-out stroke-[2.5px]" })
                    ]),
                    createBaseVNode("ul", _hoisted_63, [
                      createBaseVNode("li", _hoisted_64, [
                        createVNode(unref(RouterLink), { to: "/transaksi-kas-nonkas" }, {
                          default: withCtx(() => [
                            _hoisted_65
                          ]),
                          _: 1
                        })
                      ]),
                      createBaseVNode("li", _hoisted_66, [
                        createBaseVNode("a", _hoisted_67, [
                          createTextVNode("Pinjaman dan Pembiayaan "),
                          createVNode(_component_ChevronDownIcon, { class: "sub-menu inline h-4 w-4 transition duration-150 ease-in-out stroke-[2.5px]" })
                        ]),
                        createBaseVNode("ul", _hoisted_68, [
                          createBaseVNode("li", _hoisted_69, [
                            createVNode(unref(RouterLink), { to: "/daftar-pinjaman-pembiyaan" }, {
                              default: withCtx(() => [
                                _hoisted_70
                              ]),
                              _: 1
                            })
                          ]),
                          createBaseVNode("li", _hoisted_71, [
                            createVNode(unref(RouterLink), { to: "/history-pinjaman" }, {
                              default: withCtx(() => [
                                _hoisted_72
                              ]),
                              _: 1
                            })
                          ]),
                          createBaseVNode("li", _hoisted_73, [
                            createVNode(unref(RouterLink), { to: "/debius-pinjaman" }, {
                              default: withCtx(() => [
                                _hoisted_74
                              ]),
                              _: 1
                            })
                          ])
                        ])
                      ]),
                      createBaseVNode("li", _hoisted_75, [
                        createBaseVNode("a", _hoisted_76, [
                          createTextVNode("Keanggotaan "),
                          createVNode(_component_ChevronDownIcon, { class: "sub-menu inline h-4 w-4 transition duration-150 ease-in-out stroke-[2.5px]" })
                        ]),
                        createBaseVNode("ul", _hoisted_77, [
                          createBaseVNode("li", _hoisted_78, [
                            createVNode(unref(RouterLink), { to: "/daftar-anggota-koperasi" }, {
                              default: withCtx(() => [
                                _hoisted_79
                              ]),
                              _: 1
                            })
                          ]),
                          createBaseVNode("li", _hoisted_80, [
                            createVNode(unref(RouterLink), { to: "/history-anggota-koperasi" }, {
                              default: withCtx(() => [
                                _hoisted_81
                              ]),
                              _: 1
                            })
                          ])
                        ])
                      ]),
                      createBaseVNode("li", _hoisted_82, [
                        createBaseVNode("a", _hoisted_83, [
                          createTextVNode("Akuntansi "),
                          createVNode(_component_ChevronDownIcon, { class: "sub-menu inline h-4 w-4 transition duration-150 ease-in-out stroke-[2.5px]" })
                        ]),
                        createBaseVNode("ul", _hoisted_84, [
                          createBaseVNode("li", _hoisted_85, [
                            createVNode(unref(RouterLink), { to: "/jurnal-transaksi" }, {
                              default: withCtx(() => [
                                _hoisted_86
                              ]),
                              _: 1
                            })
                          ]),
                          createBaseVNode("li", _hoisted_87, [
                            createVNode(unref(RouterLink), { to: "/daftar-perkiraan-akuntansi" }, {
                              default: withCtx(() => [
                                _hoisted_88
                              ]),
                              _: 1
                            })
                          ]),
                          createBaseVNode("li", _hoisted_89, [
                            createVNode(unref(RouterLink), { to: "/daftar-inventaris" }, {
                              default: withCtx(() => [
                                _hoisted_90
                              ]),
                              _: 1
                            })
                          ]),
                          createBaseVNode("li", _hoisted_91, [
                            createVNode(unref(RouterLink), { to: "/history-inventaris" }, {
                              default: withCtx(() => [
                                _hoisted_92
                              ]),
                              _: 1
                            })
                          ])
                        ])
                      ]),
                      createBaseVNode("li", _hoisted_93, [
                        createVNode(unref(RouterLink), { to: "/pembayaran-kolektor" }, {
                          default: withCtx(() => [
                            _hoisted_94
                          ]),
                          _: 1
                        })
                      ]),
                      createBaseVNode("li", _hoisted_95, [
                        createBaseVNode("a", _hoisted_96, [
                          createTextVNode("Jaminan/ Agunan "),
                          createVNode(_component_ChevronDownIcon, { class: "sub-menu inline h-4 w-4 transition duration-150 ease-in-out stroke-[2.5px]" })
                        ]),
                        createBaseVNode("ul", _hoisted_97, [
                          createBaseVNode("li", _hoisted_98, [
                            createVNode(unref(RouterLink), { to: "/agunan-bpkb" }, {
                              default: withCtx(() => [
                                _hoisted_99
                              ]),
                              _: 1
                            })
                          ]),
                          createBaseVNode("li", _hoisted_100, [
                            createVNode(unref(RouterLink), { to: "/agunan-stpk" }, {
                              default: withCtx(() => [
                                _hoisted_101
                              ]),
                              _: 1
                            })
                          ])
                        ])
                      ])
                    ])
                  ])
                ], 512),
                createBaseVNode("li", {
                  ref: listMenu.laporan
                }, [
                  createBaseVNode("div", _hoisted_102, [
                    createBaseVNode("a", _hoisted_103, [
                      createTextVNode("Laporan "),
                      createVNode(_component_ChevronDownIcon, { class: "ml-1 h-4 w-4 transform group-hover:-rotate-180 transition duration-150 ease-in-out stroke-[2.5px]" })
                    ]),
                    createBaseVNode("ul", _hoisted_104, [
                      createBaseVNode("li", _hoisted_105, [
                        createBaseVNode("a", _hoisted_106, [
                          createTextVNode("Keanggotaan "),
                          createVNode(_component_ChevronDownIcon, { class: "sub-menu inline h-4 w-4 transition duration-150 ease-in-out stroke-[2.5px]" })
                        ]),
                        createBaseVNode("ul", _hoisted_107, [
                          createBaseVNode("li", _hoisted_108, [
                            createVNode(unref(RouterLink), { to: "/laporan-daftar-anggota" }, {
                              default: withCtx(() => [
                                _hoisted_109
                              ]),
                              _: 1
                            })
                          ]),
                          createBaseVNode("li", _hoisted_110, [
                            createVNode(unref(RouterLink), { to: "/mutasi-simpanan-pokok" }, {
                              default: withCtx(() => [
                                _hoisted_111
                              ]),
                              _: 1
                            })
                          ]),
                          createBaseVNode("li", _hoisted_112, [
                            createVNode(unref(RouterLink), { to: "/mutasi-simpanan-wajib" }, {
                              default: withCtx(() => [
                                _hoisted_113
                              ]),
                              _: 1
                            })
                          ]),
                          createBaseVNode("li", _hoisted_114, [
                            createVNode(unref(RouterLink), { to: "/mutasi-simpanan-swk" }, {
                              default: withCtx(() => [
                                _hoisted_115
                              ]),
                              _: 1
                            })
                          ]),
                          createBaseVNode("li", _hoisted_116, [
                            createVNode(unref(RouterLink), { to: "/mutasi-simpanan-lain" }, {
                              default: withCtx(() => [
                                _hoisted_117
                              ]),
                              _: 1
                            })
                          ]),
                          createBaseVNode("li", _hoisted_118, [
                            createVNode(unref(RouterLink), { to: "/mutasi-simpanan-shu" }, {
                              default: withCtx(() => [
                                _hoisted_119
                              ]),
                              _: 1
                            })
                          ]),
                          createBaseVNode("li", _hoisted_120, [
                            createVNode(unref(RouterLink), { to: "/rician-shu" }, {
                              default: withCtx(() => [
                                _hoisted_121
                              ]),
                              _: 1
                            })
                          ]),
                          createBaseVNode("li", _hoisted_122, [
                            createVNode(unref(RouterLink), { to: "/anggota-keluar" }, {
                              default: withCtx(() => [
                                _hoisted_123
                              ]),
                              _: 1
                            })
                          ]),
                          createBaseVNode("li", _hoisted_124, [
                            createVNode(unref(RouterLink), { to: "/terima-shu" }, {
                              default: withCtx(() => [
                                _hoisted_125
                              ]),
                              _: 1
                            })
                          ]),
                          createBaseVNode("li", _hoisted_126, [
                            createVNode(unref(RouterLink), { to: "/anggota-baru" }, {
                              default: withCtx(() => [
                                _hoisted_127
                              ]),
                              _: 1
                            })
                          ]),
                          createBaseVNode("li", _hoisted_128, [
                            createVNode(unref(RouterLink), { to: "/nominatif-simpanan-pokok" }, {
                              default: withCtx(() => [
                                _hoisted_129
                              ]),
                              _: 1
                            })
                          ]),
                          createBaseVNode("li", _hoisted_130, [
                            createVNode(unref(RouterLink), { to: "/nominatif-simpanan-wajib" }, {
                              default: withCtx(() => [
                                _hoisted_131
                              ]),
                              _: 1
                            })
                          ]),
                          createBaseVNode("li", _hoisted_132, [
                            createVNode(unref(RouterLink), { to: "/nominatif-simpanan-swk" }, {
                              default: withCtx(() => [
                                _hoisted_133
                              ]),
                              _: 1
                            })
                          ]),
                          createBaseVNode("li", _hoisted_134, [
                            createVNode(unref(RouterLink), { to: "/nominatif-simpanan-lain" }, {
                              default: withCtx(() => [
                                _hoisted_135
                              ]),
                              _: 1
                            })
                          ]),
                          createBaseVNode("li", _hoisted_136, [
                            createVNode(unref(RouterLink), { to: "/nominatif-simpanan-shu" }, {
                              default: withCtx(() => [
                                _hoisted_137
                              ]),
                              _: 1
                            })
                          ]),
                          createBaseVNode("li", _hoisted_138, [
                            createVNode(unref(RouterLink), { to: "/nominatif-simpanan-Anggota" }, {
                              default: withCtx(() => [
                                _hoisted_139
                              ]),
                              _: 1
                            })
                          ])
                        ])
                      ]),
                      createBaseVNode("li", _hoisted_140, [
                        createBaseVNode("a", _hoisted_141, [
                          createTextVNode("SMB "),
                          createVNode(_component_ChevronDownIcon, { class: "sub-menu inline h-4 w-4 transition duration-150 ease-in-out stroke-[2.5px]" })
                        ]),
                        createBaseVNode("ul", _hoisted_142, [
                          createBaseVNode("li", _hoisted_143, [
                            createVNode(unref(RouterLink), { to: "/pembukaan-rekening-baru-smb" }, {
                              default: withCtx(() => [
                                _hoisted_144
                              ]),
                              _: 1
                            })
                          ]),
                          createBaseVNode("li", _hoisted_145, [
                            createVNode(unref(RouterLink), { to: "/mutasi-smb" }, {
                              default: withCtx(() => [
                                _hoisted_146
                              ]),
                              _: 1
                            })
                          ]),
                          createBaseVNode("li", _hoisted_147, [
                            createVNode(unref(RouterLink), { to: "/nominatif-smb" }, {
                              default: withCtx(() => [
                                _hoisted_148
                              ]),
                              _: 1
                            })
                          ]),
                          createBaseVNode("li", _hoisted_149, [
                            createVNode(unref(RouterLink), { to: "/penutupan-rekening-smb" }, {
                              default: withCtx(() => [
                                _hoisted_150
                              ]),
                              _: 1
                            })
                          ]),
                          createBaseVNode("li", _hoisted_151, [
                            createVNode(unref(RouterLink), { to: "/rekap-buku-besar" }, {
                              default: withCtx(() => [
                                _hoisted_152
                              ]),
                              _: 1
                            })
                          ]),
                          createBaseVNode("li", _hoisted_153, [
                            createBaseVNode("a", _hoisted_154, [
                              createTextVNode("SMB Tiap Resort "),
                              createVNode(_component_ChevronDownIcon, { class: "sub-menu inline h-4 w-4 transition duration-150 ease-in-out stroke-[2.5px]" })
                            ]),
                            createBaseVNode("ul", _hoisted_155, [
                              createBaseVNode("li", _hoisted_156, [
                                createVNode(unref(RouterLink), { to: "/daftar-mutasi-pengambilan-simpanan" }, {
                                  default: withCtx(() => [
                                    _hoisted_157
                                  ]),
                                  _: 1
                                })
                              ]),
                              createBaseVNode("li", _hoisted_158, [
                                createVNode(unref(RouterLink), { to: "/laporan-smb-resort" }, {
                                  default: withCtx(() => [
                                    _hoisted_159
                                  ]),
                                  _: 1
                                })
                              ])
                            ])
                          ]),
                          createBaseVNode("li", _hoisted_160, [
                            createVNode(unref(RouterLink), { to: "/mutasi-saldo" }, {
                              default: withCtx(() => [
                                _hoisted_161
                              ]),
                              _: 1
                            })
                          ]),
                          createBaseVNode("li", _hoisted_162, [
                            createVNode(unref(RouterLink), { to: "/pengambilan-smb" }, {
                              default: withCtx(() => [
                                _hoisted_163
                              ]),
                              _: 1
                            })
                          ])
                        ])
                      ]),
                      createBaseVNode("li", _hoisted_164, [
                        createBaseVNode("a", _hoisted_165, [
                          createTextVNode("Pinjaman "),
                          createVNode(_component_ChevronDownIcon, { class: "sub-menu inline h-4 w-4 transition duration-150 ease-in-out stroke-[2.5px]" })
                        ]),
                        createBaseVNode("ul", _hoisted_166, [
                          createBaseVNode("li", _hoisted_167, [
                            createVNode(unref(RouterLink), { to: "/laporan-realisasi-pinjaman" }, {
                              default: withCtx(() => [
                                _hoisted_168
                              ]),
                              _: 1
                            })
                          ]),
                          createBaseVNode("li", _hoisted_169, [
                            createVNode(unref(RouterLink), { to: "/laporan-penerimaan-angsuran" }, {
                              default: withCtx(() => [
                                _hoisted_170
                              ]),
                              _: 1
                            })
                          ]),
                          createBaseVNode("li", _hoisted_171, [
                            createVNode(unref(RouterLink), { to: "/laporan-nominatif-pinjaman" }, {
                              default: withCtx(() => [
                                _hoisted_172
                              ]),
                              _: 1
                            })
                          ]),
                          createBaseVNode("li", _hoisted_173, [
                            createVNode(unref(RouterLink), { to: "/laporan-pelunasan-pinjaman" }, {
                              default: withCtx(() => [
                                _hoisted_174
                              ]),
                              _: 1
                            })
                          ]),
                          createBaseVNode("li", _hoisted_175, [
                            createBaseVNode("a", _hoisted_176, [
                              createTextVNode("Tentang Agunan "),
                              createVNode(_component_ChevronDownIcon, { class: "sub-menu inline h-4 w-4 transition duration-150 ease-in-out stroke-[2.5px]" })
                            ]),
                            createBaseVNode("ul", _hoisted_177, [
                              createBaseVNode("li", _hoisted_178, [
                                createVNode(unref(RouterLink), { to: "/laporan-agunan-masuk" }, {
                                  default: withCtx(() => [
                                    _hoisted_179
                                  ]),
                                  _: 1
                                })
                              ]),
                              createBaseVNode("li", _hoisted_180, [
                                createVNode(unref(RouterLink), { to: "/laporan-agunan-keluar" }, {
                                  default: withCtx(() => [
                                    _hoisted_181
                                  ]),
                                  _: 1
                                })
                              ]),
                              createBaseVNode("li", _hoisted_182, [
                                createVNode(unref(RouterLink), { to: "/laporan-saldo-agunan" }, {
                                  default: withCtx(() => [
                                    _hoisted_183
                                  ]),
                                  _: 1
                                })
                              ]),
                              createBaseVNode("li", _hoisted_184, [
                                createVNode(unref(RouterLink), { to: "/laporan-jaminan-kosong" }, {
                                  default: withCtx(() => [
                                    _hoisted_185
                                  ]),
                                  _: 1
                                })
                              ]),
                              createBaseVNode("li", _hoisted_186, [
                                createVNode(unref(RouterLink), { to: "/laporan-jaminan-belum-diambil" }, {
                                  default: withCtx(() => [
                                    _hoisted_187
                                  ]),
                                  _: 1
                                })
                              ]),
                              createBaseVNode("li", _hoisted_188, [
                                createVNode(unref(RouterLink), { to: "/laporan-agunan-titipan-masuk" }, {
                                  default: withCtx(() => [
                                    _hoisted_189
                                  ]),
                                  _: 1
                                })
                              ]),
                              createBaseVNode("li", _hoisted_190, [
                                createVNode(unref(RouterLink), { to: "/laporan-agunan-titipan-keluar" }, {
                                  default: withCtx(() => [
                                    _hoisted_191
                                  ]),
                                  _: 1
                                })
                              ]),
                              createBaseVNode("li", _hoisted_192, [
                                createVNode(unref(RouterLink), { to: "/laporan-saldo-agunan-titipan" }, {
                                  default: withCtx(() => [
                                    _hoisted_193
                                  ]),
                                  _: 1
                                })
                              ]),
                              createBaseVNode("li", _hoisted_194, [
                                createVNode(unref(RouterLink), { to: "/laporan-rekap-agunan-harian" }, {
                                  default: withCtx(() => [
                                    _hoisted_195
                                  ]),
                                  _: 1
                                })
                              ])
                            ])
                          ]),
                          createBaseVNode("li", _hoisted_196, [
                            createVNode(unref(RouterLink), { to: "/laporan-tunggakan-angsuran" }, {
                              default: withCtx(() => [
                                _hoisted_197
                              ]),
                              _: 1
                            })
                          ]),
                          createBaseVNode("li", _hoisted_198, [
                            createVNode(unref(RouterLink), { to: "/laporan-angsuran-menurut-realisasi" }, {
                              default: withCtx(() => [
                                _hoisted_199
                              ]),
                              _: 1
                            })
                          ]),
                          createBaseVNode("li", _hoisted_200, [
                            createVNode(unref(RouterLink), { to: "/laporan-pinjaman-belum-cair" }, {
                              default: withCtx(() => [
                                _hoisted_201
                              ]),
                              _: 1
                            })
                          ]),
                          createBaseVNode("li", _hoisted_202, [
                            createBaseVNode("a", _hoisted_203, [
                              createTextVNode("Non Performing Loan (NPL) "),
                              createVNode(_component_ChevronDownIcon, { class: "sub-menu inline h-4 w-4 transition duration-150 ease-in-out stroke-[2.5px]" })
                            ]),
                            createBaseVNode("ul", _hoisted_204, [
                              createBaseVNode("li", _hoisted_205, [
                                createVNode(unref(RouterLink), { to: "/rekapitulasi-npl" }, {
                                  default: withCtx(() => [
                                    _hoisted_206
                                  ]),
                                  _: 1
                                })
                              ])
                            ])
                          ]),
                          createBaseVNode("li", _hoisted_207, [
                            createVNode(unref(RouterLink), { to: "/laporan-nasabah-turun-bunga" }, {
                              default: withCtx(() => [
                                _hoisted_208
                              ]),
                              _: 1
                            })
                          ]),
                          createBaseVNode("li", _hoisted_209, [
                            createVNode(unref(RouterLink), { to: "/laporan-pinjaman-debius" }, {
                              default: withCtx(() => [
                                _hoisted_210
                              ]),
                              _: 1
                            })
                          ]),
                          createBaseVNode("li", _hoisted_211, [
                            createVNode(unref(RouterLink), { to: "/laporan-penerimaan-angsuran-debius" }, {
                              default: withCtx(() => [
                                _hoisted_212
                              ]),
                              _: 1
                            })
                          ]),
                          createBaseVNode("li", _hoisted_213, [
                            createVNode(unref(RouterLink), { to: "/laporan-nominatif-pinjaman-debius" }, {
                              default: withCtx(() => [
                                _hoisted_214
                              ]),
                              _: 1
                            })
                          ]),
                          createBaseVNode("li", _hoisted_215, [
                            createVNode(unref(RouterLink), { to: "/laporan-pelunasan-pinjaman-debius" }, {
                              default: withCtx(() => [
                                _hoisted_216
                              ]),
                              _: 1
                            })
                          ]),
                          createBaseVNode("li", _hoisted_217, [
                            createVNode(unref(RouterLink), { to: "/laporan-nominatif-pinjaman-2" }, {
                              default: withCtx(() => [
                                _hoisted_218
                              ]),
                              _: 1
                            })
                          ]),
                          createBaseVNode("li", _hoisted_219, [
                            createVNode(unref(RouterLink), { to: "/laporan-nominatif-pinjaman-3" }, {
                              default: withCtx(() => [
                                _hoisted_220
                              ]),
                              _: 1
                            })
                          ]),
                          createBaseVNode("li", _hoisted_221, [
                            createVNode(unref(RouterLink), { to: "/laporan-kurang-lebih-jasa-lunas" }, {
                              default: withCtx(() => [
                                _hoisted_222
                              ]),
                              _: 1
                            })
                          ])
                        ])
                      ]),
                      createBaseVNode("li", _hoisted_223, [
                        createBaseVNode("a", _hoisted_224, [
                          createTextVNode("Kasir "),
                          createVNode(_component_ChevronDownIcon, { class: "sub-menu inline h-4 w-4 transition duration-150 ease-in-out stroke-[2.5px]" })
                        ]),
                        createBaseVNode("ul", _hoisted_225, [
                          createBaseVNode("li", _hoisted_226, [
                            createVNode(unref(RouterLink), { to: "/penerimaan-kas" }, {
                              default: withCtx(() => [
                                _hoisted_227
                              ]),
                              _: 1
                            })
                          ]),
                          createBaseVNode("li", _hoisted_228, [
                            createVNode(unref(RouterLink), { to: "/mutasi-non-kas" }, {
                              default: withCtx(() => [
                                _hoisted_229
                              ]),
                              _: 1
                            })
                          ]),
                          createBaseVNode("li", _hoisted_230, [
                            createVNode(unref(RouterLink), { to: "/rician-uang-kas" }, {
                              default: withCtx(() => [
                                _hoisted_231
                              ]),
                              _: 1
                            })
                          ])
                        ])
                      ]),
                      createBaseVNode("li", _hoisted_232, [
                        createBaseVNode("a", _hoisted_233, [
                          createTextVNode("Akuntansi "),
                          createVNode(_component_ChevronDownIcon, { class: "sub-menu inline h-4 w-4 transition duration-150 ease-in-out stroke-[2.5px]" })
                        ]),
                        createBaseVNode("ul", _hoisted_234, [
                          createBaseVNode("li", _hoisted_235, [
                            createVNode(unref(RouterLink), { to: "/laporan-neraca" }, {
                              default: withCtx(() => [
                                _hoisted_236
                              ]),
                              _: 1
                            })
                          ]),
                          createBaseVNode("li", _hoisted_237, [
                            createVNode(unref(RouterLink), { to: "/laporan-laba-rugi" }, {
                              default: withCtx(() => [
                                _hoisted_238
                              ]),
                              _: 1
                            })
                          ]),
                          createBaseVNode("li", _hoisted_239, [
                            createVNode(unref(RouterLink), { to: "/laporan-neraca-perbandingan" }, {
                              default: withCtx(() => [
                                _hoisted_240
                              ]),
                              _: 1
                            })
                          ]),
                          createBaseVNode("li", _hoisted_241, [
                            createVNode(unref(RouterLink), { to: "/laporan-laba-rugi-perbandingan" }, {
                              default: withCtx(() => [
                                _hoisted_242
                              ]),
                              _: 1
                            })
                          ]),
                          createBaseVNode("li", _hoisted_243, [
                            createVNode(unref(RouterLink), { to: "/laporan-neraca-harian" }, {
                              default: withCtx(() => [
                                _hoisted_244
                              ]),
                              _: 1
                            })
                          ]),
                          createBaseVNode("li", _hoisted_245, [
                            createVNode(unref(RouterLink), { to: "/laporan-laba-rugi-harian" }, {
                              default: withCtx(() => [
                                _hoisted_246
                              ]),
                              _: 1
                            })
                          ]),
                          createBaseVNode("li", _hoisted_247, [
                            createVNode(unref(RouterLink), { to: "/laporan-rician-transaksi" }, {
                              default: withCtx(() => [
                                _hoisted_248
                              ]),
                              _: 1
                            })
                          ]),
                          createBaseVNode("li", _hoisted_249, [
                            createVNode(unref(RouterLink), { to: "/laporan-rekap-buku-besar" }, {
                              default: withCtx(() => [
                                _hoisted_250
                              ]),
                              _: 1
                            })
                          ]),
                          createBaseVNode("li", _hoisted_251, [
                            createVNode(unref(RouterLink), { to: "/daftar-inventaris" }, {
                              default: withCtx(() => [
                                _hoisted_252
                              ]),
                              _: 1
                            })
                          ]),
                          createBaseVNode("li", _hoisted_253, [
                            createVNode(unref(RouterLink), { to: "/rician-aktiva" }, {
                              default: withCtx(() => [
                                _hoisted_254
                              ]),
                              _: 1
                            })
                          ]),
                          createBaseVNode("li", _hoisted_255, [
                            createVNode(unref(RouterLink), { to: "/rician-pasiva" }, {
                              default: withCtx(() => [
                                _hoisted_256
                              ]),
                              _: 1
                            })
                          ]),
                          createBaseVNode("li", _hoisted_257, [
                            createVNode(unref(RouterLink), { to: "/rician-pendapatan" }, {
                              default: withCtx(() => [
                                _hoisted_258
                              ]),
                              _: 1
                            })
                          ]),
                          createBaseVNode("li", _hoisted_259, [
                            createVNode(unref(RouterLink), { to: "/rician-biaya" }, {
                              default: withCtx(() => [
                                _hoisted_260
                              ]),
                              _: 1
                            })
                          ]),
                          createBaseVNode("li", _hoisted_261, [
                            createVNode(unref(RouterLink), { to: "/cetak-jurnal-transaksi" }, {
                              default: withCtx(() => [
                                _hoisted_262
                              ]),
                              _: 1
                            })
                          ]),
                          createBaseVNode("li", _hoisted_263, [
                            createVNode(unref(RouterLink), { to: "/cetak-neraca-laba-rugi" }, {
                              default: withCtx(() => [
                                _hoisted_264
                              ]),
                              _: 1
                            })
                          ]),
                          createBaseVNode("li", _hoisted_265, [
                            createVNode(unref(RouterLink), { to: "/laporan-rekap-transaksi" }, {
                              default: withCtx(() => [
                                _hoisted_266
                              ]),
                              _: 1
                            })
                          ])
                        ])
                      ]),
                      createBaseVNode("li", _hoisted_267, [
                        createBaseVNode("a", _hoisted_268, [
                          createTextVNode("Kolektor "),
                          createVNode(_component_ChevronDownIcon, { class: "sub-menu inline h-4 w-4 transition duration-150 ease-in-out stroke-[2.5px]" })
                        ]),
                        createBaseVNode("ul", _hoisted_269, [
                          createBaseVNode("li", _hoisted_270, [
                            createVNode(unref(RouterLink), { to: "/daftar-tagihan-instansi" }, {
                              default: withCtx(() => [
                                _hoisted_271
                              ]),
                              _: 1
                            })
                          ]),
                          createBaseVNode("li", _hoisted_272, [
                            createVNode(unref(RouterLink), { to: "/laporan-rekap-transaksi" }, {
                              default: withCtx(() => [
                                _hoisted_273
                              ]),
                              _: 1
                            })
                          ]),
                          createBaseVNode("li", _hoisted_274, [
                            createVNode(unref(RouterLink), { to: "/laporan-daftar-transaksi" }, {
                              default: withCtx(() => [
                                _hoisted_275
                              ]),
                              _: 1
                            })
                          ])
                        ])
                      ]),
                      createBaseVNode("li", _hoisted_276, [
                        createBaseVNode("a", _hoisted_277, [
                          createTextVNode("SIMPATA "),
                          createVNode(_component_ChevronDownIcon, { class: "sub-menu inline h-4 w-4 transition duration-150 ease-in-out stroke-[2.5px]" })
                        ]),
                        createBaseVNode("ul", _hoisted_278, [
                          createBaseVNode("li", _hoisted_279, [
                            createVNode(unref(RouterLink), { to: "/pembukaan-rekening-baru-simpata" }, {
                              default: withCtx(() => [
                                _hoisted_280
                              ]),
                              _: 1
                            })
                          ]),
                          createBaseVNode("li", _hoisted_281, [
                            createVNode(unref(RouterLink), { to: "/mutasi-simpata" }, {
                              default: withCtx(() => [
                                _hoisted_282
                              ]),
                              _: 1
                            })
                          ]),
                          createBaseVNode("li", _hoisted_283, [
                            createVNode(unref(RouterLink), { to: "/nominatif-simpata" }, {
                              default: withCtx(() => [
                                _hoisted_284
                              ]),
                              _: 1
                            })
                          ]),
                          createBaseVNode("li", _hoisted_285, [
                            createVNode(unref(RouterLink), { to: "/penutupan-rekening-simpata" }, {
                              default: withCtx(() => [
                                _hoisted_286
                              ]),
                              _: 1
                            })
                          ]),
                          createBaseVNode("li", _hoisted_287, [
                            createVNode(unref(RouterLink), { to: "/simpata-keluar" }, {
                              default: withCtx(() => [
                                _hoisted_288
                              ]),
                              _: 1
                            })
                          ]),
                          createBaseVNode("li", _hoisted_289, [
                            createVNode(unref(RouterLink), { to: "/rbb-simpata" }, {
                              default: withCtx(() => [
                                _hoisted_290
                              ]),
                              _: 1
                            })
                          ]),
                          createBaseVNode("li", _hoisted_291, [
                            createVNode(unref(RouterLink), { to: "/pengambilan-simpata" }, {
                              default: withCtx(() => [
                                _hoisted_292
                              ]),
                              _: 1
                            })
                          ])
                        ])
                      ]),
                      createBaseVNode("li", _hoisted_293, [
                        createBaseVNode("a", _hoisted_294, [
                          createTextVNode("SMA "),
                          createVNode(_component_ChevronDownIcon, { class: "sub-menu inline h-4 w-4 transition duration-150 ease-in-out stroke-[2.5px]" })
                        ]),
                        createBaseVNode("ul", _hoisted_295, [
                          createBaseVNode("li", _hoisted_296, [
                            createVNode(unref(RouterLink), { to: "/pembukaan-rekening-baru-sma" }, {
                              default: withCtx(() => [
                                _hoisted_297
                              ]),
                              _: 1
                            })
                          ]),
                          createBaseVNode("li", _hoisted_298, [
                            createVNode(unref(RouterLink), { to: "/mutasi-sma" }, {
                              default: withCtx(() => [
                                _hoisted_299
                              ]),
                              _: 1
                            })
                          ]),
                          createBaseVNode("li", _hoisted_300, [
                            createVNode(unref(RouterLink), { to: "/nominatif-sma" }, {
                              default: withCtx(() => [
                                _hoisted_301
                              ]),
                              _: 1
                            })
                          ]),
                          createBaseVNode("li", _hoisted_302, [
                            createVNode(unref(RouterLink), { to: "/penutupan-rekening-sma" }, {
                              default: withCtx(() => [
                                _hoisted_303
                              ]),
                              _: 1
                            })
                          ]),
                          createBaseVNode("li", _hoisted_304, [
                            createVNode(unref(RouterLink), { to: "/sma-keluar" }, {
                              default: withCtx(() => [
                                _hoisted_305
                              ]),
                              _: 1
                            })
                          ]),
                          createBaseVNode("li", _hoisted_306, [
                            createVNode(unref(RouterLink), { to: "/rbb-sma" }, {
                              default: withCtx(() => [
                                _hoisted_307
                              ]),
                              _: 1
                            })
                          ]),
                          createBaseVNode("li", _hoisted_308, [
                            createVNode(unref(RouterLink), { to: "/pengambilan-sma" }, {
                              default: withCtx(() => [
                                _hoisted_309
                              ]),
                              _: 1
                            })
                          ])
                        ])
                      ])
                    ])
                  ])
                ], 512),
                createBaseVNode("li", {
                  ref: listMenu.proses
                }, [
                  createBaseVNode("div", _hoisted_310, [
                    createBaseVNode("a", _hoisted_311, [
                      createTextVNode("Proses "),
                      createVNode(_component_ChevronDownIcon, { class: "ml-1 h-4 w-4 transform group-hover:-rotate-180 transition duration-150 ease-in-out stroke-[2.5px]" })
                    ]),
                    createBaseVNode("ul", _hoisted_312, [
                      createBaseVNode("li", _hoisted_313, [
                        createVNode(unref(RouterLink), { to: "/proses-harian" }, {
                          default: withCtx(() => [
                            _hoisted_314
                          ]),
                          _: 1
                        })
                      ]),
                      createBaseVNode("li", _hoisted_315, [
                        createVNode(unref(RouterLink), { to: "/proses-hitung-perbagian" }, {
                          default: withCtx(() => [
                            _hoisted_316
                          ]),
                          _: 1
                        })
                      ]),
                      createBaseVNode("li", _hoisted_317, [
                        createVNode(unref(RouterLink), { to: "/proses-perubahan-ketentuan" }, {
                          default: withCtx(() => [
                            _hoisted_318
                          ]),
                          _: 1
                        })
                      ]),
                      createBaseVNode("li", _hoisted_319, [
                        createVNode(unref(RouterLink), { to: "/proses-hitung-ulang-saldo-smb-simpata-sma" }, {
                          default: withCtx(() => [
                            _hoisted_320
                          ]),
                          _: 1
                        })
                      ]),
                      createBaseVNode("li", _hoisted_321, [
                        createVNode(unref(RouterLink), { to: "/proses-hitung-ulang-simpanan-anggota" }, {
                          default: withCtx(() => [
                            _hoisted_322
                          ]),
                          _: 1
                        })
                      ]),
                      createBaseVNode("li", _hoisted_323, [
                        createVNode(unref(RouterLink), { to: "/proses-hitung-ulang-saldo-pinjaman" }, {
                          default: withCtx(() => [
                            _hoisted_324
                          ]),
                          _: 1
                        })
                      ]),
                      createBaseVNode("li", _hoisted_325, [
                        createVNode(unref(RouterLink), { to: "/proses-hitung-ulang-saldo-inventaris" }, {
                          default: withCtx(() => [
                            _hoisted_326
                          ]),
                          _: 1
                        })
                      ]),
                      _hoisted_327,
                      createBaseVNode("li", _hoisted_328, [
                        createVNode(unref(RouterLink), { to: "/acc-pengeluaran" }, {
                          default: withCtx(() => [
                            _hoisted_329
                          ]),
                          _: 1
                        })
                      ]),
                      _hoisted_330,
                      createBaseVNode("li", _hoisted_331, [
                        createVNode(unref(RouterLink), { to: "/verifikasi-proses-harian" }, {
                          default: withCtx(() => [
                            _hoisted_332
                          ]),
                          _: 1
                        })
                      ]),
                      _hoisted_333,
                      createBaseVNode("li", _hoisted_334, [
                        createVNode(unref(RouterLink), { to: "/proses-tutup-buku" }, {
                          default: withCtx(() => [
                            _hoisted_335
                          ]),
                          _: 1
                        })
                      ]),
                      createBaseVNode("li", _hoisted_336, [
                        createVNode(unref(RouterLink), { to: "/batal-proses-tutup-buku" }, {
                          default: withCtx(() => [
                            _hoisted_337
                          ]),
                          _: 1
                        })
                      ]),
                      _hoisted_338,
                      createBaseVNode("li", _hoisted_339, [
                        createVNode(unref(RouterLink), { to: "/proses-perhitungan-shu" }, {
                          default: withCtx(() => [
                            _hoisted_340
                          ]),
                          _: 1
                        })
                      ])
                    ])
                  ])
                ], 512),
                createBaseVNode("li", {
                  ref: listMenu.utility
                }, [
                  createBaseVNode("div", _hoisted_341, [
                    createBaseVNode("a", _hoisted_342, [
                      createTextVNode("Utility "),
                      createVNode(_component_ChevronDownIcon, { class: "ml-1 h-4 w-4 transform group-hover:-rotate-180 transition duration-150 ease-in-out stroke-[2.5px]" })
                    ]),
                    createBaseVNode("ul", _hoisted_343, [
                      createBaseVNode("li", _hoisted_344, [
                        createVNode(unref(RouterLink), { to: "/pembatasan-tanggal" }, {
                          default: withCtx(() => [
                            _hoisted_345
                          ]),
                          _: 1
                        })
                      ]),
                      createBaseVNode("li", _hoisted_346, [
                        createBaseVNode("a", _hoisted_347, [
                          createTextVNode("Setting Laporan "),
                          createVNode(_component_ChevronDownIcon, { class: "sub-menu inline h-4 w-4 transition duration-150 ease-in-out stroke-[2.5px]" })
                        ]),
                        createBaseVNode("ul", _hoisted_348, [
                          createBaseVNode("li", _hoisted_349, [
                            createVNode(unref(RouterLink), { to: "/setting-laporan" }, {
                              default: withCtx(() => [
                                _hoisted_350
                              ]),
                              _: 1
                            })
                          ]),
                          createBaseVNode("li", _hoisted_351, [
                            createVNode(unref(RouterLink), { to: "/setting-posisi-laporan" }, {
                              default: withCtx(() => [
                                _hoisted_352
                              ]),
                              _: 1
                            })
                          ])
                        ])
                      ]),
                      createBaseVNode("li", _hoisted_353, [
                        createVNode(unref(RouterLink), { to: "/sms-gateway" }, {
                          default: withCtx(() => [
                            _hoisted_354
                          ]),
                          _: 1
                        })
                      ]),
                      createBaseVNode("li", _hoisted_355, [
                        createVNode(unref(RouterLink), { to: "/cek-transaksi" }, {
                          default: withCtx(() => [
                            _hoisted_356
                          ]),
                          _: 1
                        })
                      ]),
                      createBaseVNode("li", _hoisted_357, [
                        createBaseVNode("a", _hoisted_358, [
                          createTextVNode("Perbaikan "),
                          createVNode(_component_ChevronDownIcon, { class: "sub-menu inline h-4 w-4 transition duration-150 ease-in-out stroke-[2.5px]" })
                        ]),
                        createBaseVNode("ul", _hoisted_359, [
                          createBaseVNode("li", _hoisted_360, [
                            createVNode(unref(RouterLink), { to: "/transaksi-simpanan" }, {
                              default: withCtx(() => [
                                _hoisted_361
                              ]),
                              _: 1
                            })
                          ]),
                          createBaseVNode("li", _hoisted_362, [
                            createVNode(unref(RouterLink), { to: "/mutasi-anggota" }, {
                              default: withCtx(() => [
                                _hoisted_363
                              ]),
                              _: 1
                            })
                          ]),
                          createBaseVNode("li", _hoisted_364, [
                            createVNode(unref(RouterLink), { to: "/mutasi-pinjaman" }, {
                              default: withCtx(() => [
                                _hoisted_365
                              ]),
                              _: 1
                            })
                          ])
                        ])
                      ]),
                      createBaseVNode("li", _hoisted_366, [
                        createBaseVNode("a", _hoisted_367, [
                          createTextVNode("Pengaturan Lainya "),
                          createVNode(_component_ChevronDownIcon, { class: "sub-menu inline h-4 w-4 transition duration-150 ease-in-out stroke-[2.5px]" })
                        ]),
                        createBaseVNode("ul", _hoisted_368, [
                          createBaseVNode("li", _hoisted_369, [
                            createVNode(unref(RouterLink), { to: "/setting-laporan" }, {
                              default: withCtx(() => [
                                _hoisted_370
                              ]),
                              _: 1
                            })
                          ]),
                          createBaseVNode("li", _hoisted_371, [
                            createVNode(unref(RouterLink), { to: "/setting-posisi-laporan" }, {
                              default: withCtx(() => [
                                _hoisted_372
                              ]),
                              _: 1
                            })
                          ])
                        ])
                      ]),
                      createBaseVNode("li", _hoisted_373, [
                        createVNode(unref(RouterLink), { to: "/setting-default-printer" }, {
                          default: withCtx(() => [
                            _hoisted_374
                          ]),
                          _: 1
                        })
                      ]),
                      createBaseVNode("li", _hoisted_375, [
                        createVNode(unref(RouterLink), { to: "/perbaikan-data" }, {
                          default: withCtx(() => [
                            _hoisted_376
                          ]),
                          _: 1
                        })
                      ]),
                      _hoisted_377,
                      createBaseVNode("li", _hoisted_378, [
                        createVNode(unref(RouterLink), { to: "/backup-database" }, {
                          default: withCtx(() => [
                            _hoisted_379
                          ]),
                          _: 1
                        })
                      ]),
                      createBaseVNode("li", _hoisted_380, [
                        createVNode(unref(RouterLink), { to: "/restore-database" }, {
                          default: withCtx(() => [
                            _hoisted_381
                          ]),
                          _: 1
                        })
                      ]),
                      _hoisted_382,
                      createBaseVNode("li", _hoisted_383, [
                        createVNode(unref(RouterLink), { to: "/migrasi-data" }, {
                          default: withCtx(() => [
                            _hoisted_384
                          ]),
                          _: 1
                        })
                      ]),
                      createBaseVNode("li", _hoisted_385, [
                        createVNode(unref(RouterLink), { to: "/migrasi-inventaris" }, {
                          default: withCtx(() => [
                            _hoisted_386
                          ]),
                          _: 1
                        })
                      ])
                    ])
                  ])
                ], 512),
                createBaseVNode("li", null, [
                  createBaseVNode("div", _hoisted_387, [
                    createBaseVNode("a", _hoisted_388, [
                      createTextVNode("About "),
                      createVNode(_component_ChevronDownIcon, { class: "ml-1 h-4 w-4 transform group-hover:-rotate-180 transition duration-150 ease-in-out stroke-[2.5px]" })
                    ]),
                    createBaseVNode("ul", _hoisted_389, [
                      createBaseVNode("li", _hoisted_390, [
                        createVNode(unref(RouterLink), { to: "/tentang-aplikasi" }, {
                          default: withCtx(() => [
                            _hoisted_391
                          ]),
                          _: 1
                        })
                      ]),
                      createBaseVNode("li", _hoisted_392, [
                        createVNode(unref(RouterLink), { to: "/registrasi-aplikasi" }, {
                          default: withCtx(() => [
                            _hoisted_393
                          ]),
                          _: 1
                        })
                      ])
                    ])
                  ])
                ])
              ])
            ])
          ])
        ]),
        createVNode(_component_Modal, {
          show: logoutConfirmationModal.value,
          onHidden: _cache[2] || (_cache[2] = ($event) => logoutConfirmationModal.value = false)
        }, {
          default: withCtx(() => [
            createVNode(_component_ModalBody, { class: "p-0" }, {
              default: withCtx(() => [
                createBaseVNode("div", _hoisted_394, [
                  createVNode(_component_LogOutIcon, { class: "w-16 h-16 text-danger mx-auto mt-3" }),
                  _hoisted_395
                ]),
                createBaseVNode("div", _hoisted_396, [
                  createBaseVNode("button", {
                    type: "button",
                    onClick: _cache[1] || (_cache[1] = ($event) => logoutConfirmationModal.value = false),
                    class: "btn btn-outline-secondary w-24 mr-1"
                  }, " Cancel "),
                  createBaseVNode("button", {
                    onClick: onLogout,
                    type: "button",
                    class: "btn btn-danger w-24"
                  }, "Keluar")
                ])
              ]),
              _: 1
            })
          ]),
          _: 1
        }, 8, ["show"])
      ], 64);
    };
  }
};
const NavbarView = /* @__PURE__ */ _export_sfc(_sfc_main$1, [["__scopeId", "data-v-c8e38b5c"]]);
const _sfc_main = {
  __name: "App",
  setup(__props) {
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock(Fragment, null, [
        _ctx.$route.name !== "home" && _ctx.$route.name !== "auth" ? (openBlock(), createBlock(NavbarView, { key: 0 })) : createCommentVNode("", true),
        createVNode(unref(RouterView))
      ], 64);
    };
  }
};
var defaultAttributes = {
  xmlns: "http://www.w3.org/2000/svg",
  width: 24,
  height: 24,
  viewBox: "0 0 24 24",
  fill: "none",
  stroke: "currentColor",
  "stroke-width": 2,
  "stroke-linecap": "round",
  "stroke-linejoin": "round"
};
const toKebabCase = (string2) => string2.replace(/([a-z0-9])([A-Z])/g, "$1-$2").toLowerCase();
const createLucideIcon = (iconName, iconNode) => ({ size: size2, color: color2, ...props }, { attrs, slots }) => {
  return h(
    "svg",
    {
      ...defaultAttributes,
      width: size2 || defaultAttributes.width,
      height: size2 || defaultAttributes.height,
      stroke: color2 || defaultAttributes.stroke,
      ...attrs,
      class: ["lucide", `lucide-${toKebabCase(iconName)}`, attrs?.class || ""],
      ...props
    },
    [
      ...iconNode.map((child) => h(...child)),
      ...slots.default ? [slots.default()] : []
    ]
  );
};
const Accessibility = createLucideIcon("AccessibilityIcon", [
  ["circle", { cx: "16", cy: "4", r: "1", key: "1grugj" }],
  ["path", { d: "m18 19 1-7-5.87.94", key: "16gztd" }],
  ["path", { d: "m5 8 3-3 5.5 3-2.21 3.1", key: "133gd0" }],
  [
    "path",
    {
      d: "M4.24 14.48c-.19.58-.27 1.2-.23 1.84a5 5 0 0 0 5.31 4.67c.65-.04 1.25-.2 1.8-.46",
      key: "12oo9p"
    }
  ],
  [
    "path",
    {
      d: "M13.76 17.52c.19-.58.27-1.2.23-1.84a5 5 0 0 0-5.31-4.67c-.65.04-1.25.2-1.8.46",
      key: "15si8q"
    }
  ]
]);
const Activity = createLucideIcon("ActivityIcon", [
  ["polyline", { points: "22 12 18 12 15 21 9 3 6 12 2 12", key: "xez52g" }]
]);
const AirVent = createLucideIcon("AirVentIcon", [
  [
    "path",
    {
      d: "M6 12H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v5a2 2 0 0 1-2 2h-2",
      key: "larmp2"
    }
  ],
  ["path", { d: "M6 8h12", key: "6g4wlu" }],
  [
    "path",
    {
      d: "M18.3 17.7a2.5 2.5 0 0 1-3.16 3.83 2.53 2.53 0 0 1-1.14-2V12",
      key: "1bo8pg"
    }
  ],
  ["path", { d: "M6.6 15.6A2 2 0 1 0 10 17v-5", key: "t9h90c" }]
]);
const Airplay = createLucideIcon("AirplayIcon", [
  [
    "path",
    {
      d: "M5 17H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-1",
      key: "ns4c3b"
    }
  ],
  ["polygon", { points: "12 15 17 21 7 21 12 15", key: "1sy95i" }]
]);
const AlarmCheck = createLucideIcon("AlarmCheckIcon", [
  ["path", { d: "M12 21a8 8 0 1 0 0-16 8 8 0 0 0 0 16z", key: "1dr9l2" }],
  ["path", { d: "M5 3 2 6", key: "18tl5t" }],
  ["path", { d: "m22 6-3-3", key: "1opdir" }],
  ["path", { d: "m6 19-2 2", key: "1ek6nb" }],
  ["path", { d: "m18 19 2 2", key: "lw9i" }],
  ["path", { d: "m9 13 2 2 4-4", key: "6343dt" }]
]);
const AlarmClockOff = createLucideIcon("AlarmClockOffIcon", [
  ["path", { d: "M6.87 6.87a8 8 0 1 0 11.26 11.26", key: "3on8tj" }],
  [
    "path",
    {
      d: "M19.9 14.25A7.44 7.44 0 0 0 20 13a8 8 0 0 0-8-8 7.44 7.44 0 0 0-1.25.1",
      key: "nxzvge"
    }
  ],
  ["path", { d: "m22 6-3-3", key: "1opdir" }],
  ["path", { d: "m6 19-2 2", key: "1ek6nb" }],
  ["path", { d: "m2 2 20 20", key: "1ooewy" }],
  ["path", { d: "M4 4 2 6", key: "1ycko6" }]
]);
const AlarmClock = createLucideIcon("AlarmClockIcon", [
  ["circle", { cx: "12", cy: "13", r: "8", key: "3y4lt7" }],
  ["path", { d: "M12 9v4l2 2", key: "1c63tq" }],
  ["path", { d: "M5 3 2 6", key: "18tl5t" }],
  ["path", { d: "m22 6-3-3", key: "1opdir" }],
  ["path", { d: "m6 19-2 2", key: "1ek6nb" }],
  ["path", { d: "m18 19 2 2", key: "lw9i" }]
]);
const AlarmMinus = createLucideIcon("AlarmMinusIcon", [
  ["path", { d: "M12 21a8 8 0 1 0 0-16 8 8 0 0 0 0 16z", key: "1dr9l2" }],
  ["path", { d: "M5 3 2 6", key: "18tl5t" }],
  ["path", { d: "m22 6-3-3", key: "1opdir" }],
  ["path", { d: "m6 19-2 2", key: "1ek6nb" }],
  ["path", { d: "m18 19 2 2", key: "lw9i" }],
  ["path", { d: "M9 13h6", key: "1uhe8q" }]
]);
const AlarmPlus = createLucideIcon("AlarmPlusIcon", [
  ["path", { d: "M12 21a8 8 0 1 0 0-16 8 8 0 0 0 0 16z", key: "1dr9l2" }],
  ["path", { d: "M5 3 2 6", key: "18tl5t" }],
  ["path", { d: "m22 6-3-3", key: "1opdir" }],
  ["path", { d: "m6 19-2 2", key: "1ek6nb" }],
  ["path", { d: "m18 19 2 2", key: "lw9i" }],
  ["path", { d: "M12 10v6", key: "1bos4e" }],
  ["path", { d: "M9 13h6", key: "1uhe8q" }]
]);
const Album = createLucideIcon("AlbumIcon", [
  [
    "rect",
    {
      x: "3",
      y: "3",
      width: "18",
      height: "18",
      rx: "2",
      ry: "2",
      key: "maln0c"
    }
  ],
  ["polyline", { points: "11 3 11 11 14 8 17 11 17 3", key: "1wcwz3" }]
]);
const AlertCircle = createLucideIcon("AlertCircleIcon", [
  ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
  ["line", { x1: "12", y1: "8", x2: "12", y2: "12", key: "1grbh0" }],
  ["line", { x1: "12", y1: "16", x2: "12.01", y2: "16", key: "1w440g" }]
]);
const AlertOctagon = createLucideIcon("AlertOctagonIcon", [
  [
    "polygon",
    {
      points: "7.86 2 16.14 2 22 7.86 22 16.14 16.14 22 7.86 22 2 16.14 2 7.86 7.86 2",
      key: "h1p8hx"
    }
  ],
  ["line", { x1: "12", y1: "8", x2: "12", y2: "12", key: "1grbh0" }],
  ["line", { x1: "12", y1: "16", x2: "12.01", y2: "16", key: "1w440g" }]
]);
const AlertTriangle = createLucideIcon("AlertTriangleIcon", [
  [
    "path",
    {
      d: "m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z",
      key: "c3ski4"
    }
  ],
  ["line", { x1: "12", y1: "9", x2: "12", y2: "13", key: "mb7vjk" }],
  ["line", { x1: "12", y1: "17", x2: "12.01", y2: "17", key: "kdstpg" }]
]);
const AlignCenterHorizontal = createLucideIcon("AlignCenterHorizontalIcon", [
  ["path", { d: "M2 12h20", key: "9i4pu4" }],
  ["path", { d: "M10 16v4a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2v-4", key: "11f1s0" }],
  ["path", { d: "M10 8V4a2 2 0 0 0-2-2H6a2 2 0 0 0-2 2v4", key: "t14dx9" }],
  ["path", { d: "M20 16v1a2 2 0 0 1-2 2h-2a2 2 0 0 1-2-2v-1", key: "1w07xs" }],
  ["path", { d: "M14 8V7c0-1.1.9-2 2-2h2a2 2 0 0 1 2 2v1", key: "1apec2" }]
]);
const AlignCenterVertical = createLucideIcon("AlignCenterVerticalIcon", [
  ["path", { d: "M12 2v20", key: "t6zp3m" }],
  ["path", { d: "M8 10H4a2 2 0 0 1-2-2V6c0-1.1.9-2 2-2h4", key: "14d6g8" }],
  ["path", { d: "M16 10h4a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2h-4", key: "1e2lrw" }],
  ["path", { d: "M8 20H7a2 2 0 0 1-2-2v-2c0-1.1.9-2 2-2h1", key: "1fkdwx" }],
  ["path", { d: "M16 14h1a2 2 0 0 1 2 2v2a2 2 0 0 1-2 2h-1", key: "1euafb" }]
]);
const AlignCenter = createLucideIcon("AlignCenterIcon", [
  ["line", { x1: "21", y1: "6", x2: "3", y2: "6", key: "1e448z" }],
  ["line", { x1: "17", y1: "12", x2: "7", y2: "12", key: "driibe" }],
  ["line", { x1: "19", y1: "18", x2: "5", y2: "18", key: "1i3xdx" }]
]);
const AlignEndHorizontal = createLucideIcon("AlignEndHorizontalIcon", [
  [
    "rect",
    { x: "4", y: "2", width: "6", height: "16", rx: "2", key: "xp5u6c" }
  ],
  [
    "rect",
    { x: "14", y: "9", width: "6", height: "9", rx: "2", key: "1e039c" }
  ],
  ["path", { d: "M22 22H2", key: "19qnx5" }]
]);
const AlignEndVertical = createLucideIcon("AlignEndVerticalIcon", [
  [
    "rect",
    { x: "2", y: "4", width: "16", height: "6", rx: "2", key: "1j7b8s" }
  ],
  [
    "rect",
    { x: "9", y: "14", width: "9", height: "6", rx: "2", key: "b2t4yo" }
  ],
  ["path", { d: "M22 22V2", key: "12ipfv" }]
]);
const AlignHorizontalDistributeCenter = createLucideIcon(
  "AlignHorizontalDistributeCenterIcon",
  [
    [
      "rect",
      { x: "4", y: "5", width: "6", height: "14", rx: "2", key: "ric6yp" }
    ],
    [
      "rect",
      { x: "14", y: "7", width: "6", height: "10", rx: "2", key: "1mr5t1" }
    ],
    ["path", { d: "M17 22v-5", key: "4b6g73" }],
    ["path", { d: "M17 7V2", key: "hnrr36" }],
    ["path", { d: "M7 22v-3", key: "1r4jpn" }],
    ["path", { d: "M7 5V2", key: "liy1u9" }]
  ]
);
const AlignHorizontalDistributeEnd = createLucideIcon(
  "AlignHorizontalDistributeEndIcon",
  [
    [
      "rect",
      { x: "4", y: "5", width: "6", height: "14", rx: "2", key: "ric6yp" }
    ],
    [
      "rect",
      { x: "14", y: "7", width: "6", height: "10", rx: "2", key: "1mr5t1" }
    ],
    ["path", { d: "M10 2v20", key: "uyc634" }],
    ["path", { d: "M20 2v20", key: "1tx262" }]
  ]
);
const AlignHorizontalDistributeStart = createLucideIcon(
  "AlignHorizontalDistributeStartIcon",
  [
    [
      "rect",
      { x: "4", y: "5", width: "6", height: "14", rx: "2", key: "ric6yp" }
    ],
    [
      "rect",
      { x: "14", y: "7", width: "6", height: "10", rx: "2", key: "1mr5t1" }
    ],
    ["path", { d: "M4 2v20", key: "gtpd5x" }],
    ["path", { d: "M14 2v20", key: "tg6bpw" }]
  ]
);
const AlignHorizontalJustifyCenter = createLucideIcon(
  "AlignHorizontalJustifyCenterIcon",
  [
    [
      "rect",
      { x: "2", y: "5", width: "6", height: "14", rx: "2", key: "15angl" }
    ],
    [
      "rect",
      { x: "16", y: "7", width: "6", height: "10", rx: "2", key: "1di99g" }
    ],
    ["path", { d: "M12 2v20", key: "t6zp3m" }]
  ]
);
const AlignHorizontalJustifyEnd = createLucideIcon(
  "AlignHorizontalJustifyEndIcon",
  [
    [
      "rect",
      { x: "2", y: "5", width: "6", height: "14", rx: "2", key: "15angl" }
    ],
    [
      "rect",
      { x: "12", y: "7", width: "6", height: "10", rx: "2", key: "150rwc" }
    ],
    ["path", { d: "M22 2v20", key: "40qfg1" }]
  ]
);
const AlignHorizontalJustifyStart = createLucideIcon(
  "AlignHorizontalJustifyStartIcon",
  [
    [
      "rect",
      { x: "6", y: "5", width: "6", height: "14", rx: "2", key: "1mezge" }
    ],
    [
      "rect",
      { x: "16", y: "7", width: "6", height: "10", rx: "2", key: "1di99g" }
    ],
    ["path", { d: "M2 2v20", key: "1ivd8o" }]
  ]
);
const AlignHorizontalSpaceAround = createLucideIcon(
  "AlignHorizontalSpaceAroundIcon",
  [
    [
      "rect",
      { x: "9", y: "7", width: "6", height: "10", rx: "2", key: "7k3bt6" }
    ],
    ["path", { d: "M4 22V2", key: "tsjzd3" }],
    ["path", { d: "M20 22V2", key: "1bnhr8" }]
  ]
);
const AlignHorizontalSpaceBetween = createLucideIcon(
  "AlignHorizontalSpaceBetweenIcon",
  [
    [
      "rect",
      { x: "3", y: "5", width: "6", height: "14", rx: "2", key: "iybqme" }
    ],
    [
      "rect",
      { x: "15", y: "7", width: "6", height: "10", rx: "2", key: "11q98m" }
    ],
    ["path", { d: "M3 2v20", key: "1d2pfg" }],
    ["path", { d: "M21 2v20", key: "p059bm" }]
  ]
);
const AlignJustify = createLucideIcon("AlignJustifyIcon", [
  ["line", { x1: "3", y1: "6", x2: "21", y2: "6", key: "1tp2lp" }],
  ["line", { x1: "3", y1: "12", x2: "21", y2: "12", key: "1aui40" }],
  ["line", { x1: "3", y1: "18", x2: "21", y2: "18", key: "1sxo76" }]
]);
const AlignLeft = createLucideIcon("AlignLeftIcon", [
  ["line", { x1: "21", y1: "6", x2: "3", y2: "6", key: "1e448z" }],
  ["line", { x1: "15", y1: "12", x2: "3", y2: "12", key: "80e4vw" }],
  ["line", { x1: "17", y1: "18", x2: "3", y2: "18", key: "1771gn" }]
]);
const AlignRight = createLucideIcon("AlignRightIcon", [
  ["line", { x1: "21", y1: "6", x2: "3", y2: "6", key: "1e448z" }],
  ["line", { x1: "21", y1: "12", x2: "9", y2: "12", key: "1stwgr" }],
  ["line", { x1: "21", y1: "18", x2: "7", y2: "18", key: "1hion3" }]
]);
const AlignStartHorizontal = createLucideIcon("AlignStartHorizontalIcon", [
  [
    "rect",
    { x: "4", y: "6", width: "6", height: "16", rx: "2", key: "1l8oni" }
  ],
  [
    "rect",
    { x: "14", y: "6", width: "6", height: "9", rx: "2", key: "16r6cq" }
  ],
  ["path", { d: "M22 2H2", key: "fhrpnj" }]
]);
const AlignStartVertical = createLucideIcon("AlignStartVerticalIcon", [
  [
    "rect",
    { x: "6", y: "14", width: "9", height: "6", rx: "2", key: "pvftf3" }
  ],
  [
    "rect",
    { x: "6", y: "4", width: "16", height: "6", rx: "2", key: "1aj6m8" }
  ],
  ["path", { d: "M2 2v20", key: "1ivd8o" }]
]);
const AlignVerticalDistributeCenter = createLucideIcon(
  "AlignVerticalDistributeCenterIcon",
  [
    [
      "rect",
      { x: "5", y: "14", width: "14", height: "6", rx: "2", key: "1qrzuf" }
    ],
    [
      "rect",
      { x: "7", y: "4", width: "10", height: "6", rx: "2", key: "we8e9z" }
    ],
    ["path", { d: "M22 7h-5", key: "o2endc" }],
    ["path", { d: "M7 7H1", key: "105l6j" }],
    ["path", { d: "M22 17h-3", key: "1lwga1" }],
    ["path", { d: "M5 17H2", key: "1gx9xc" }]
  ]
);
const AlignVerticalDistributeEnd = createLucideIcon(
  "AlignVerticalDistributeEndIcon",
  [
    [
      "rect",
      { x: "5", y: "14", width: "14", height: "6", rx: "2", key: "1qrzuf" }
    ],
    [
      "rect",
      { x: "7", y: "4", width: "10", height: "6", rx: "2", key: "we8e9z" }
    ],
    ["path", { d: "M2 20h20", key: "owomy5" }],
    ["path", { d: "M2 10h20", key: "1ir3d8" }]
  ]
);
const AlignVerticalDistributeStart = createLucideIcon(
  "AlignVerticalDistributeStartIcon",
  [
    [
      "rect",
      { x: "5", y: "14", width: "14", height: "6", rx: "2", key: "1qrzuf" }
    ],
    [
      "rect",
      { x: "7", y: "4", width: "10", height: "6", rx: "2", key: "we8e9z" }
    ],
    ["path", { d: "M2 14h20", key: "myj16y" }],
    ["path", { d: "M2 4h20", key: "mda7wb" }]
  ]
);
const AlignVerticalJustifyCenter = createLucideIcon(
  "AlignVerticalJustifyCenterIcon",
  [
    [
      "rect",
      { x: "5", y: "16", width: "14", height: "6", rx: "2", key: "1xmr5l" }
    ],
    [
      "rect",
      { x: "7", y: "2", width: "10", height: "6", rx: "2", key: "1dm79a" }
    ],
    ["path", { d: "M2 12h20", key: "9i4pu4" }]
  ]
);
const AlignVerticalJustifyEnd = createLucideIcon(
  "AlignVerticalJustifyEndIcon",
  [
    [
      "rect",
      { x: "5", y: "12", width: "14", height: "6", rx: "2", key: "12nflp" }
    ],
    [
      "rect",
      { x: "7", y: "2", width: "10", height: "6", rx: "2", key: "1dm79a" }
    ],
    ["path", { d: "M2 22h20", key: "272qi7" }]
  ]
);
const AlignVerticalJustifyStart = createLucideIcon(
  "AlignVerticalJustifyStartIcon",
  [
    [
      "rect",
      { x: "5", y: "16", width: "14", height: "6", rx: "2", key: "1xmr5l" }
    ],
    [
      "rect",
      { x: "7", y: "6", width: "10", height: "6", rx: "2", key: "q2ofyd" }
    ],
    ["path", { d: "M2 2h20", key: "1ennik" }]
  ]
);
const AlignVerticalSpaceAround = createLucideIcon(
  "AlignVerticalSpaceAroundIcon",
  [
    [
      "rect",
      { x: "7", y: "9", width: "10", height: "6", rx: "2", key: "1iy9tl" }
    ],
    ["path", { d: "M22 20H2", key: "1p1f7z" }],
    ["path", { d: "M22 4H2", key: "1b7qnq" }]
  ]
);
const AlignVerticalSpaceBetween = createLucideIcon(
  "AlignVerticalSpaceBetweenIcon",
  [
    [
      "rect",
      { x: "5", y: "15", width: "14", height: "6", rx: "2", key: "hytrht" }
    ],
    [
      "rect",
      { x: "7", y: "3", width: "10", height: "6", rx: "2", key: "y09b40" }
    ],
    ["path", { d: "M2 21h20", key: "1nyx9w" }],
    ["path", { d: "M2 3h20", key: "91anmk" }]
  ]
);
const Anchor = createLucideIcon("AnchorIcon", [
  ["circle", { cx: "12", cy: "5", r: "3", key: "rqqgnr" }],
  ["line", { x1: "12", y1: "22", x2: "12", y2: "8", key: "111jcv" }],
  ["path", { d: "M5 12H2a10 10 0 0 0 20 0h-3", key: "1hv3nh" }]
]);
const Angry = createLucideIcon("AngryIcon", [
  ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
  ["path", { d: "M16 16s-1.5-2-4-2-4 2-4 2", key: "epbg0q" }],
  ["path", { d: "M7.5 8 10 9", key: "olxxln" }],
  ["path", { d: "m14 9 2.5-1", key: "1j6cij" }],
  ["path", { d: "M9 10h0", key: "1vxvly" }],
  ["path", { d: "M15 10h0", key: "1j6oav" }]
]);
const Annoyed = createLucideIcon("AnnoyedIcon", [
  ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
  ["path", { d: "M8 15h8", key: "45n4r" }],
  ["path", { d: "M8 9h2", key: "1g203m" }],
  ["path", { d: "M14 9h2", key: "116p9w" }]
]);
const Aperture = createLucideIcon("ApertureIcon", [
  ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
  ["line", { x1: "14.31", y1: "8", x2: "20.05", y2: "17.94", key: "1oqej7" }],
  ["line", { x1: "9.69", y1: "8", x2: "21.17", y2: "8", key: "1cv19a" }],
  ["line", { x1: "7.38", y1: "12", x2: "13.12", y2: "2.06", key: "1vh5oz" }],
  ["line", { x1: "9.69", y1: "16", x2: "3.95", y2: "6.06", key: "saeeuz" }],
  ["line", { x1: "14.31", y1: "16", x2: "2.83", y2: "16", key: "pq85rp" }],
  ["line", { x1: "16.62", y1: "12", x2: "10.88", y2: "21.94", key: "wactqi" }]
]);
const Apple = createLucideIcon("AppleIcon", [
  [
    "path",
    {
      d: "M12 20.94c1.5 0 2.75 1.06 4 1.06 3 0 6-8 6-12.22A4.91 4.91 0 0 0 17 5c-2.22 0-4 1.44-5 2-1-.56-2.78-2-5-2a4.9 4.9 0 0 0-5 4.78C2 14 5 22 8 22c1.25 0 2.5-1.06 4-1.06Z",
      key: "3s7exb"
    }
  ],
  ["path", { d: "M10 2c1 .5 2 2 2 5", key: "fcco2y" }]
]);
const ArchiveRestore = createLucideIcon("ArchiveRestoreIcon", [
  [
    "rect",
    { x: "2", y: "4", width: "20", height: "5", rx: "2", key: "1h2p0l" }
  ],
  ["path", { d: "M12 13v7", key: "1arz7h" }],
  ["path", { d: "m9 16 3-3 3 3", key: "1idcnm" }],
  ["path", { d: "M4 9v9a2 2 0 0 0 2 2h2", key: "qxnby6" }],
  ["path", { d: "M20 9v9a2 2 0 0 1-2 2h-2", key: "gz3jmx" }]
]);
const Archive = createLucideIcon("ArchiveIcon", [
  [
    "rect",
    { x: "2", y: "4", width: "20", height: "5", rx: "2", key: "1h2p0l" }
  ],
  ["path", { d: "M4 9v9a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9", key: "shkvi4" }],
  ["path", { d: "M10 13h4", key: "ytezjc" }]
]);
const Armchair = createLucideIcon("ArmchairIcon", [
  ["path", { d: "M19 9V6a2 2 0 0 0-2-2H7a2 2 0 0 0-2 2v3", key: "irtipd" }],
  [
    "path",
    {
      d: "M3 11v5a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-5a2 2 0 0 0-4 0v2H7v-2a2 2 0 0 0-4 0Z",
      key: "1ed1m0"
    }
  ],
  ["path", { d: "M5 18v2", key: "ppbyun" }],
  ["path", { d: "M19 18v2", key: "gy7782" }]
]);
const ArrowBigDown = createLucideIcon("ArrowBigDownIcon", [
  ["path", { d: "M9 3h6v11h4l-7 7-7-7h4z", key: "6dczpq" }]
]);
const ArrowBigLeft = createLucideIcon("ArrowBigLeftIcon", [
  ["path", { d: "m3 12 7-7v4h11v6H10v4z", key: "1e8ocp" }]
]);
const ArrowBigRight = createLucideIcon("ArrowBigRightIcon", [
  ["path", { d: "m21 12-7-7v4H3v6h11v4z", key: "58zwfy" }]
]);
const ArrowBigUp = createLucideIcon("ArrowBigUpIcon", [
  ["path", { d: "M9 21V10H5l7-7 7 7h-4v11z", key: "8tfmm3" }]
]);
const ArrowDownCircle = createLucideIcon("ArrowDownCircleIcon", [
  ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
  ["polyline", { points: "8 12 12 16 16 12", key: "14qdon" }],
  ["line", { x1: "12", y1: "8", x2: "12", y2: "16", key: "55jlg" }]
]);
const ArrowDownLeft = createLucideIcon("ArrowDownLeftIcon", [
  ["line", { x1: "17", y1: "7", x2: "7", y2: "17", key: "1cuvd1" }],
  ["polyline", { points: "17 17 7 17 7 7", key: "aq42rd" }]
]);
const ArrowDownRight = createLucideIcon("ArrowDownRightIcon", [
  ["line", { x1: "7", y1: "7", x2: "17", y2: "17", key: "dtegzv" }],
  ["polyline", { points: "17 7 17 17 7 17", key: "1gmiis" }]
]);
const ArrowDown = createLucideIcon("ArrowDownIcon", [
  ["line", { x1: "12", y1: "5", x2: "12", y2: "19", key: "myz83a" }],
  ["polyline", { points: "19 12 12 19 5 12", key: "17kmxi" }]
]);
const ArrowLeftCircle = createLucideIcon("ArrowLeftCircleIcon", [
  ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
  ["polyline", { points: "12 8 8 12 12 16", key: "bz1698" }],
  ["line", { x1: "16", y1: "12", x2: "8", y2: "12", key: "i2qu8k" }]
]);
const ArrowLeftRight = createLucideIcon("ArrowLeftRightIcon", [
  ["polyline", { points: "17 11 21 7 17 3", key: "l3l6r3" }],
  ["line", { x1: "21", y1: "7", x2: "9", y2: "7", key: "17x2jj" }],
  ["polyline", { points: "7 21 3 17 7 13", key: "lfumnw" }],
  ["line", { x1: "15", y1: "17", x2: "3", y2: "17", key: "gusd5o" }]
]);
const ArrowLeft = createLucideIcon("ArrowLeftIcon", [
  ["line", { x1: "19", y1: "12", x2: "5", y2: "12", key: "17g05t" }],
  ["polyline", { points: "12 19 5 12 12 5", key: "1ksm0z" }]
]);
const ArrowRightCircle = createLucideIcon("ArrowRightCircleIcon", [
  ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
  ["polyline", { points: "12 16 16 12 12 8", key: "1byh5s" }],
  ["line", { x1: "8", y1: "12", x2: "16", y2: "12", key: "1myapg" }]
]);
const ArrowRight = createLucideIcon("ArrowRightIcon", [
  ["line", { x1: "5", y1: "12", x2: "19", y2: "12", key: "1smlys" }],
  ["polyline", { points: "12 5 19 12 12 19", key: "sfr3i6" }]
]);
const ArrowUpCircle = createLucideIcon("ArrowUpCircleIcon", [
  ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
  ["polyline", { points: "16 12 12 8 8 12", key: "1gpmhk" }],
  ["line", { x1: "12", y1: "16", x2: "12", y2: "8", key: "r2mfdg" }]
]);
const ArrowUpDown = createLucideIcon("ArrowUpDownIcon", [
  ["polyline", { points: "11 17 7 21 3 17", key: "dv0ycv" }],
  ["line", { x1: "7", y1: "21", x2: "7", y2: "9", key: "1cxv4h" }],
  ["polyline", { points: "21 7 17 3 13 7", key: "1su31j" }],
  ["line", { x1: "17", y1: "15", x2: "17", y2: "3", key: "r3527w" }]
]);
const ArrowUpLeft = createLucideIcon("ArrowUpLeftIcon", [
  ["line", { x1: "17", y1: "17", x2: "7", y2: "7", key: "814yaz" }],
  ["polyline", { points: "7 17 7 7 17 7", key: "1jae2c" }]
]);
const ArrowUpRight = createLucideIcon("ArrowUpRightIcon", [
  ["line", { x1: "7", y1: "17", x2: "17", y2: "7", key: "16hgw2" }],
  ["polyline", { points: "7 7 17 7 17 17", key: "blehsp" }]
]);
const ArrowUp = createLucideIcon("ArrowUpIcon", [
  ["line", { x1: "12", y1: "19", x2: "12", y2: "5", key: "yrd7g6" }],
  ["polyline", { points: "5 12 12 5 19 12", key: "1y7d7k" }]
]);
const Asterisk = createLucideIcon("AsteriskIcon", [
  ["path", { d: "M12 6v12", key: "1vza4d" }],
  ["path", { d: "M17.196 9 6.804 15", key: "1ah31z" }],
  ["path", { d: "m6.804 9 10.392 6", key: "1b6pxd" }]
]);
const AtSign = createLucideIcon("AtSignIcon", [
  ["circle", { cx: "12", cy: "12", r: "4", key: "4exip2" }],
  [
    "path",
    { d: "M16 8v5a3 3 0 0 0 6 0v-1a10 10 0 1 0-3.92 7.94", key: "1m6qx5" }
  ]
]);
const Award = createLucideIcon("AwardIcon", [
  ["circle", { cx: "12", cy: "8", r: "6", key: "1vp47v" }],
  ["path", { d: "M15.477 12.89 17 22l-5-3-5 3 1.523-9.11", key: "em7aur" }]
]);
const Axe = createLucideIcon("AxeIcon", [
  [
    "path",
    {
      d: "m14 12-8.501 8.501a2.12 2.12 0 0 1-2.998 0h-.002a2.12 2.12 0 0 1 0-2.998L11 9.002",
      key: "ha6v2k"
    }
  ],
  [
    "path",
    {
      d: "m9 7 4-4 6 6h3l-.13.648a7.648 7.648 0 0 1-5.081 5.756L15 16v-3z",
      key: "1mosh2"
    }
  ]
]);
const Axis3d = createLucideIcon("Axis3dIcon", [
  ["path", { d: "M4 4v16h16", key: "1s015l" }],
  ["path", { d: "m4 20 7-7", key: "17qe9y" }]
]);
const Baby = createLucideIcon("BabyIcon", [
  ["path", { d: "M9 12h0.01", key: "u5n1lm" }],
  ["path", { d: "M15 12h0.01", key: "10zk70" }],
  ["path", { d: "M10 16c.5.3 1.2.5 2 .5s1.5-.2 2-.5", key: "1u7htd" }],
  [
    "path",
    {
      d: "M19 6.3a9 9 0 0 1 1.8 3.9 2 2 0 0 1 0 3.6 9 9 0 0 1-17.6 0 2 2 0 0 1 0-3.6A9 9 0 0 1 12 3c2 0 3.5 1.1 3.5 2.5s-.9 2.5-2 2.5c-.8 0-1.5-.4-1.5-1",
      key: "5yv0yz"
    }
  ]
]);
const Backpack = createLucideIcon("BackpackIcon", [
  [
    "path",
    {
      d: "M4 20V10a4 4 0 0 1 4-4h8a4 4 0 0 1 4 4v10a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2Z",
      key: "tunmdx"
    }
  ],
  ["path", { d: "M9 6V4a2 2 0 0 1 2-2h2a2 2 0 0 1 2 2v2", key: "donm21" }],
  ["path", { d: "M8 21v-5a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v5", key: "xk3gvk" }],
  ["path", { d: "M8 10h8", key: "c7uz4u" }],
  ["path", { d: "M8 18h8", key: "1no2b1" }]
]);
const BaggageClaim = createLucideIcon("BaggageClaimIcon", [
  ["path", { d: "M22 18H6a2 2 0 0 1-2-2V7a2 2 0 0 0-2-2", key: "4irg2o" }],
  ["path", { d: "M17 14V4a2 2 0 0 0-2-2h-1a2 2 0 0 0-2 2v10", key: "14fcyx" }],
  [
    "rect",
    { x: "8", y: "6", width: "13", height: "8", rx: "1", key: "1sfr2f" }
  ],
  ["circle", { cx: "18", cy: "20", r: "2", key: "t9985n" }],
  ["circle", { cx: "9", cy: "20", r: "2", key: "e5v82j" }]
]);
const Banana = createLucideIcon("BananaIcon", [
  ["path", { d: "M4 13c3.5-2 8-2 10 2a5.5 5.5 0 0 1 8 5", key: "1cscit" }],
  [
    "path",
    {
      d: "M5.15 17.89c5.52-1.52 8.65-6.89 7-12C11.55 4 11.5 2 13 2c3.22 0 5 5.5 5 8 0 6.5-4.2 12-10.49 12C5.11 22 2 22 2 20c0-1.5 1.14-1.55 3.15-2.11Z",
      key: "1y1nbv"
    }
  ]
]);
const Banknote = createLucideIcon("BanknoteIcon", [
  [
    "rect",
    { x: "2", y: "6", width: "20", height: "12", rx: "2", key: "1wpnh2" }
  ],
  ["circle", { cx: "12", cy: "12", r: "2", key: "1c9p78" }],
  ["path", { d: "M6 12h.01M18 12h.01", key: "113zkx" }]
]);
const BarChart2 = createLucideIcon("BarChart2Icon", [
  ["line", { x1: "18", y1: "20", x2: "18", y2: "10", key: "1e8c49" }],
  ["line", { x1: "12", y1: "20", x2: "12", y2: "4", key: "65j799" }],
  ["line", { x1: "6", y1: "20", x2: "6", y2: "14", key: "4svqks" }]
]);
const BarChart3 = createLucideIcon("BarChart3Icon", [
  ["path", { d: "M3 3v18h18", key: "1s2lah" }],
  ["path", { d: "M18 17V9", key: "2bz60n" }],
  ["path", { d: "M13 17V5", key: "1frdt8" }],
  ["path", { d: "M8 17v-3", key: "17ska0" }]
]);
const BarChart4 = createLucideIcon("BarChart4Icon", [
  ["path", { d: "M3 3v18h18", key: "1s2lah" }],
  ["path", { d: "M13 17V9", key: "1fwyjl" }],
  ["path", { d: "M18 17V5", key: "sfb6ij" }],
  ["path", { d: "M8 17v-3", key: "17ska0" }]
]);
const BarChartHorizontal = createLucideIcon("BarChartHorizontalIcon", [
  ["path", { d: "M3 3v18h18", key: "1s2lah" }],
  ["path", { d: "M7 16h8", key: "srdodz" }],
  ["path", { d: "M7 11h12", key: "127s9w" }],
  ["path", { d: "M7 6h3", key: "w9rmul" }]
]);
const BarChart = createLucideIcon("BarChartIcon", [
  ["line", { x1: "12", y1: "20", x2: "12", y2: "10", key: "1wi7jb" }],
  ["line", { x1: "18", y1: "20", x2: "18", y2: "4", key: "1mwru6" }],
  ["line", { x1: "6", y1: "20", x2: "6", y2: "16", key: "zj13da" }]
]);
const Baseline = createLucideIcon("BaselineIcon", [
  ["path", { d: "M4 20h16", key: "14thso" }],
  ["path", { d: "m6 16 6-12 6 12", key: "1b4byz" }],
  ["path", { d: "M8 12h8", key: "1wcyev" }]
]);
const Bath = createLucideIcon("BathIcon", [
  [
    "path",
    {
      d: "M9 6 6.5 3.5a1.5 1.5 0 0 0-1-.5C4.683 3 4 3.683 4 4.5V17a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-5",
      key: "1r8yf5"
    }
  ],
  ["line", { x1: "10", y1: "5", x2: "8", y2: "7", key: "d858pc" }],
  ["line", { x1: "2", y1: "12", x2: "22", y2: "12", key: "zvmn4p" }],
  ["line", { x1: "7", y1: "19", x2: "7", y2: "21", key: "cpl2n4" }],
  ["line", { x1: "17", y1: "19", x2: "17", y2: "21", key: "ywtigw" }]
]);
const BatteryCharging = createLucideIcon("BatteryChargingIcon", [
  ["path", { d: "M15 7h1a2 2 0 0 1 2 2v6a2 2 0 0 1-2 2h-2", key: "1sdynx" }],
  ["path", { d: "M6 7H4a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2h1", key: "1gkd3k" }],
  ["path", { d: "m11 7-3 5h4l-3 5", key: "b4a64w" }],
  ["line", { x1: "22", x2: "22", y1: "11", y2: "13", key: "4dh1rd" }]
]);
const BatteryFull = createLucideIcon("BatteryFullIcon", [
  [
    "rect",
    {
      x: "2",
      y: "7",
      width: "16",
      height: "10",
      rx: "2",
      ry: "2",
      key: "5j9scf"
    }
  ],
  ["line", { x1: "22", x2: "22", y1: "11", y2: "13", key: "4dh1rd" }],
  ["line", { x1: "6", x2: "6", y1: "11", y2: "13", key: "1wd6dw" }],
  ["line", { x1: "10", x2: "10", y1: "11", y2: "13", key: "haxvl5" }],
  ["line", { x1: "14", x2: "14", y1: "11", y2: "13", key: "c6fn6x" }]
]);
const BatteryLow = createLucideIcon("BatteryLowIcon", [
  [
    "rect",
    {
      x: "2",
      y: "7",
      width: "16",
      height: "10",
      rx: "2",
      ry: "2",
      key: "5j9scf"
    }
  ],
  ["line", { x1: "22", x2: "22", y1: "11", y2: "13", key: "4dh1rd" }],
  ["line", { x1: "6", x2: "6", y1: "11", y2: "13", key: "1wd6dw" }]
]);
const BatteryMedium = createLucideIcon("BatteryMediumIcon", [
  [
    "rect",
    {
      x: "2",
      y: "7",
      width: "16",
      height: "10",
      rx: "2",
      ry: "2",
      key: "5j9scf"
    }
  ],
  ["line", { x1: "22", x2: "22", y1: "11", y2: "13", key: "4dh1rd" }],
  ["line", { x1: "6", x2: "6", y1: "11", y2: "13", key: "1wd6dw" }],
  ["line", { x1: "10", x2: "10", y1: "11", y2: "13", key: "haxvl5" }]
]);
const BatteryWarning = createLucideIcon("BatteryWarningIcon", [
  ["path", { d: "M14 7h2a2 2 0 0 1 2 2v6c0 1 -1 2 -2 2h-2", key: "7x2rx5" }],
  ["path", { d: "M6 7h-2a2 2 0 0 0-2 2v6c0 1 1 2 2 2h2", key: "1r83cn" }],
  ["line", { x1: "22", x2: "22", y1: "11", y2: "13", key: "4dh1rd" }],
  ["line", { x1: "10", x2: "10", y1: "7", y2: "13", key: "1uzyus" }],
  ["line", { x1: "10", x2: "10", y1: "17", y2: "17.01", key: "1y8k4g" }]
]);
const Battery = createLucideIcon("BatteryIcon", [
  [
    "rect",
    {
      x: "2",
      y: "7",
      width: "16",
      height: "10",
      rx: "2",
      ry: "2",
      key: "5j9scf"
    }
  ],
  ["line", { x1: "22", x2: "22", y1: "11", y2: "13", key: "4dh1rd" }]
]);
const Beaker = createLucideIcon("BeakerIcon", [
  ["path", { d: "M4.5 3h15", key: "c7n0jr" }],
  ["path", { d: "M6 3v16a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V3", key: "m1uhx7" }],
  ["path", { d: "M6 14h12", key: "4cwo0f" }]
]);
const BeanOff = createLucideIcon("BeanOffIcon", [
  [
    "path",
    {
      d: "M9 9c-.64.64-1.521.954-2.402 1.165A6 6 0 0 0 8 22a13.96 13.96 0 0 0 9.9-4.1",
      key: "bq3udt"
    }
  ],
  [
    "path",
    {
      d: "M10.75 5.093A6 6 0 0 1 22 8c0 2.411-.61 4.68-1.683 6.66",
      key: "17ccse"
    }
  ],
  [
    "path",
    {
      d: "M5.341 10.62a4 4 0 0 0 6.487 1.208M10.62 5.341a4.015 4.015 0 0 1 2.039 2.04",
      key: "18zqgq"
    }
  ],
  ["line", { x1: "2", y1: "2", x2: "22", y2: "22", key: "1w4vcy" }]
]);
const Bean = createLucideIcon("BeanIcon", [
  [
    "path",
    {
      d: "M10.165 6.598C9.954 7.478 9.64 8.36 9 9c-.64.64-1.521.954-2.402 1.165A6 6 0 0 0 8 22c7.732 0 14-6.268 14-14a6 6 0 0 0-11.835-1.402Z",
      key: "1tvzk7"
    }
  ],
  ["path", { d: "M5.341 10.62a4 4 0 1 0 5.279-5.28", key: "2cyri2" }]
]);
const BedDouble = createLucideIcon("BedDoubleIcon", [
  ["path", { d: "M2 20v-8a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v8", key: "1k78r4" }],
  ["path", { d: "M4 10V6a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v4", key: "fb3tl2" }],
  ["path", { d: "M12 4v6", key: "1dcgq2" }],
  ["path", { d: "M2 18h20", key: "ajqnye" }]
]);
const BedSingle = createLucideIcon("BedSingleIcon", [
  ["path", { d: "M3 20v-8a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v8", key: "1wm6mi" }],
  ["path", { d: "M5 10V6a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v4", key: "4k93s5" }],
  ["path", { d: "M3 18h18", key: "1h113x" }]
]);
const Bed = createLucideIcon("BedIcon", [
  ["path", { d: "M2 4v16", key: "vw9hq8" }],
  ["path", { d: "M2 8h18a2 2 0 0 1 2 2v10", key: "1dgv2r" }],
  ["path", { d: "M2 17h20", key: "18nfp3" }],
  ["path", { d: "M6 8v9", key: "1yriud" }]
]);
const Beef = createLucideIcon("BeefIcon", [
  ["circle", { cx: "12.5", cy: "8.5", r: "2.5", key: "9738u8" }],
  [
    "path",
    {
      d: "M12.5 2a6.5 6.5 0 0 0-6.22 4.6c-1.1 3.13-.78 3.9-3.18 6.08A3 3 0 0 0 5 18c4 0 8.4-1.8 11.4-4.3A6.5 6.5 0 0 0 12.5 2Z",
      key: "o0f6za"
    }
  ],
  [
    "path",
    {
      d: "m18.5 6 2.19 4.5a6.48 6.48 0 0 1 .31 2 6.49 6.49 0 0 1-2.6 5.2C15.4 20.2 11 22 7 22a3 3 0 0 1-2.68-1.66L2.4 16.5",
      key: "k7p6i0"
    }
  ]
]);
const Beer = createLucideIcon("BeerIcon", [
  ["path", { d: "M17 11h1a3 3 0 0 1 0 6h-1", key: "1yp76v" }],
  ["path", { d: "M9 12v6", key: "1u1cab" }],
  ["path", { d: "M13 12v6", key: "1sugkk" }],
  [
    "path",
    {
      d: "M14 7.5c-1 0-1.44.5-3 .5s-2-.5-3-.5-1.72.5-2.5.5a2.5 2.5 0 0 1 0-5c.78 0 1.57.5 2.5.5S9.44 2 11 2s2 1.5 3 1.5 1.72-.5 2.5-.5a2.5 2.5 0 0 1 0 5c-.78 0-1.5-.5-2.5-.5Z",
      key: "1510fo"
    }
  ],
  ["path", { d: "M5 8v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V8", key: "19jb7n" }]
]);
const BellMinus = createLucideIcon("BellMinusIcon", [
  ["path", { d: "M13.73 21a2 2 0 0 1-3.46 0", key: "6o5tke" }],
  ["path", { d: "M21 5h-6", key: "14nobq" }],
  [
    "path",
    {
      d: "M18.021 9C18.29 15.193 21 17 21 17H3s3-2 3-9a6 6 0 0 1 7-5.916",
      key: "1wldvb"
    }
  ]
]);
const BellOff = createLucideIcon("BellOffIcon", [
  ["path", { d: "M13.73 21a2 2 0 0 1-3.46 0", key: "6o5tke" }],
  ["path", { d: "M18.63 13A17.888 17.888 0 0 1 18 8", key: "d5seqe" }],
  [
    "path",
    { d: "M6.26 6.26A5.86 5.86 0 0 0 6 8c0 7-3 9-3 9h14", key: "cae0gx" }
  ],
  ["path", { d: "M18 8a6 6 0 0 0-9.33-5", key: "4mngwl" }],
  ["path", { d: "m2 2 20 20", key: "1ooewy" }]
]);
const BellPlus = createLucideIcon("BellPlusIcon", [
  [
    "path",
    {
      d: "M18.387 12C19.198 15.799 21 17 21 17H3s3-2 3-9a6 6 0 0 1 7-5.916",
      key: "1dhkt2"
    }
  ],
  ["path", { d: "M13.73 21a2 2 0 0 1-3.46 0", key: "6o5tke" }],
  ["path", { d: "M18 2v6", key: "163kbd" }],
  ["path", { d: "M21 5h-6", key: "14nobq" }]
]);
const BellRing = createLucideIcon("BellRingIcon", [
  ["path", { d: "M18 8A6 6 0 0 0 6 8c0 7-3 9-3 9h18s-3-2-3-9", key: "oql5b8" }],
  ["path", { d: "M13.73 21a2 2 0 0 1-3.46 0", key: "6o5tke" }],
  ["path", { d: "M2 8c0-2.2.7-4.3 2-6", key: "1c7u9x" }],
  ["path", { d: "M22 8a10 10 0 0 0-2-6", key: "1vnyda" }]
]);
const Bell = createLucideIcon("BellIcon", [
  ["path", { d: "M18 8A6 6 0 0 0 6 8c0 7-3 9-3 9h18s-3-2-3-9", key: "oql5b8" }],
  ["path", { d: "M13.73 21a2 2 0 0 1-3.46 0", key: "6o5tke" }]
]);
const Bike = createLucideIcon("BikeIcon", [
  ["circle", { cx: "5.5", cy: "17.5", r: "3.5", key: "1noe27" }],
  ["circle", { cx: "18.5", cy: "17.5", r: "3.5", key: "15x4ox" }],
  [
    "path",
    {
      d: "M15 6a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm-3 11.5V14l-3-3 4-3 2 3h2",
      key: "1932na"
    }
  ]
]);
const Binary = createLucideIcon("BinaryIcon", [
  ["path", { d: "M6 20h4", key: "1i6q5t" }],
  ["path", { d: "M14 10h4", key: "ru81e7" }],
  ["path", { d: "M6 14h2v6", key: "16z9wg" }],
  ["path", { d: "M14 4h2v6", key: "1idq9u" }],
  ["rect", { x: "6", y: "4", width: "4", height: "6", key: "btwfzx" }],
  ["rect", { x: "14", y: "14", width: "4", height: "6", key: "1cym0j" }]
]);
const Bird = createLucideIcon("BirdIcon", [
  ["path", { d: "M16 7h.01", key: "1kdx03" }],
  [
    "path",
    { d: "M3.4 18H12a8 8 0 0 0 8-8V7a4 4 0 0 0-7.28-2.3L2 20", key: "oj1oa8" }
  ],
  ["path", { d: "m20 7 2 .5-2 .5", key: "12nv4d" }],
  ["path", { d: "M10 18v3", key: "1yea0a" }],
  ["path", { d: "M14 17.75V21", key: "1pymcb" }],
  ["path", { d: "M7 18a6 6 0 0 0 3.84-10.61", key: "1npnn0" }]
]);
const Bitcoin = createLucideIcon("BitcoinIcon", [
  [
    "path",
    {
      d: "M11.767 19.089c4.924.868 6.14-6.025 1.216-6.894m-1.216 6.894L5.86 18.047m5.908 1.042-.347 1.97m1.563-8.864c4.924.869 6.14-6.025 1.215-6.893m-1.215 6.893-3.94-.694m5.155-6.2L8.29 4.26m5.908 1.042.348-1.97M7.48 20.364l3.126-17.727",
      key: "yr8idg"
    }
  ]
]);
const Blinds = createLucideIcon("BlindsIcon", [
  ["path", { d: "M3 3h18", key: "o7r712" }],
  ["path", { d: "M20 7H8", key: "gd2fo2" }],
  ["path", { d: "M20 11H8", key: "1ynp89" }],
  ["path", { d: "M10 19h10", key: "19hjk5" }],
  ["path", { d: "M8 15h12", key: "1yqzne" }],
  ["path", { d: "M4 3v14", key: "fggqzn" }],
  ["circle", { cx: "4", cy: "19", r: "2", key: "p3m9r0" }]
]);
const BluetoothConnected = createLucideIcon("BluetoothConnectedIcon", [
  ["path", { d: "m7 7 10 10-5 5V2l5 5L7 17", key: "1q5490" }],
  ["line", { x1: "18", y1: "12", y2: "12", x2: "21", key: "17rheb" }],
  ["line", { x1: "3", y1: "12", y2: "12", x2: "6", key: "1l5nc6" }]
]);
const BluetoothOff = createLucideIcon("BluetoothOffIcon", [
  ["path", { d: "m17 17-5 5V12l-5 5", key: "v5aci6" }],
  ["path", { d: "m2 2 20 20", key: "1ooewy" }],
  ["path", { d: "M14.5 9.5 17 7l-5-5v4.5", key: "1kddfz" }]
]);
const BluetoothSearching = createLucideIcon("BluetoothSearchingIcon", [
  ["path", { d: "m7 7 10 10-5 5V2l5 5L7 17", key: "1q5490" }],
  ["path", { d: "M20.83 14.83a4 4 0 0 0 0-5.66", key: "k8tn1j" }],
  ["path", { d: "M18 12h.01", key: "yjnet6" }]
]);
const Bluetooth = createLucideIcon("BluetoothIcon", [
  ["path", { d: "m7 7 10 10-5 5V2l5 5L7 17", key: "1q5490" }]
]);
const Bold = createLucideIcon("BoldIcon", [
  ["path", { d: "M6 4h8a4 4 0 0 1 4 4 4 4 0 0 1-4 4H6z", key: "shhoi5" }],
  ["path", { d: "M6 12h9a4 4 0 0 1 4 4 4 4 0 0 1-4 4H6z", key: "jaah4r" }]
]);
const Bomb = createLucideIcon("BombIcon", [
  ["circle", { cx: "11", cy: "13", r: "9", key: "hd149" }],
  [
    "path",
    {
      d: "m19.5 9.5 1.8-1.8a2.4 2.4 0 0 0 0-3.4l-1.6-1.6a2.41 2.41 0 0 0-3.4 0l-1.8 1.8",
      key: "9owvxi"
    }
  ],
  ["path", { d: "m22 2-1.5 1.5", key: "ay92ug" }]
]);
const Bone = createLucideIcon("BoneIcon", [
  [
    "path",
    {
      d: "M18.6 9.82c-.52-.21-1.15-.25-1.54.15l-7.07 7.06c-.39.39-.36 1.03-.15 1.54.12.3.16.6.16.93a2.5 2.5 0 0 1-5 0c0-.26-.24-.5-.5-.5a2.5 2.5 0 1 1 .96-4.82c.5.21 1.14.25 1.53-.15l7.07-7.06c.39-.39.36-1.03.15-1.54-.12-.3-.21-.6-.21-.93a2.5 2.5 0 0 1 5 0c.01.26.24.49.5.5a2.5 2.5 0 1 1-.9 4.82Z",
      key: "134x1i"
    }
  ]
]);
const BookOpenCheck = createLucideIcon("BookOpenCheckIcon", [
  [
    "path",
    { d: "M8 3H2v15h7c1.7 0 3 1.3 3 3V7c0-2.2-1.8-4-4-4Z", key: "1i8u0n" }
  ],
  ["path", { d: "m16 12 2 2 4-4", key: "mdajum" }],
  [
    "path",
    {
      d: "M22 6V3h-6c-2.2 0-4 1.8-4 4v14c0-1.7 1.3-3 3-3h7v-2.3",
      key: "jb5l51"
    }
  ]
]);
const BookOpen = createLucideIcon("BookOpenIcon", [
  ["path", { d: "M2 3h6a4 4 0 0 1 4 4v14a3 3 0 0 0-3-3H2z", key: "vv98re" }],
  ["path", { d: "M22 3h-6a4 4 0 0 0-4 4v14a3 3 0 0 1 3-3h7z", key: "1cyq3y" }]
]);
const Book = createLucideIcon("BookIcon", [
  ["path", { d: "M4 19.5A2.5 2.5 0 0 1 6.5 17H20", key: "126fyg" }],
  [
    "path",
    {
      d: "M6.5 2H20v20H6.5A2.5 2.5 0 0 1 4 19.5v-15A2.5 2.5 0 0 1 6.5 2z",
      key: "1msh16"
    }
  ]
]);
const BookmarkMinus = createLucideIcon("BookmarkMinusIcon", [
  [
    "path",
    { d: "m19 21-7-4-7 4V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v16z", key: "1fy3hk" }
  ],
  ["line", { x1: "15", x2: "9", y1: "10", y2: "10", key: "1gty7f" }]
]);
const BookmarkPlus = createLucideIcon("BookmarkPlusIcon", [
  [
    "path",
    { d: "m19 21-7-4-7 4V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v16z", key: "1fy3hk" }
  ],
  ["line", { x1: "12", x2: "12", y1: "7", y2: "13", key: "1cppfj" }],
  ["line", { x1: "15", x2: "9", y1: "10", y2: "10", key: "1gty7f" }]
]);
const Bookmark = createLucideIcon("BookmarkIcon", [
  [
    "path",
    { d: "m19 21-7-4-7 4V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v16z", key: "1fy3hk" }
  ]
]);
const Bot = createLucideIcon("BotIcon", [
  [
    "rect",
    { x: "3", y: "11", width: "18", height: "10", rx: "2", key: "qbqwso" }
  ],
  ["circle", { cx: "12", cy: "5", r: "2", key: "f1ur92" }],
  ["path", { d: "M12 7v4", key: "xawao1" }],
  ["line", { x1: "8", y1: "16", x2: "8", y2: "16", key: "717jkb" }],
  ["line", { x1: "16", y1: "16", x2: "16", y2: "16", key: "19gr12" }]
]);
const BoxSelect = createLucideIcon("BoxSelectIcon", [
  ["path", { d: "M5 3a2 2 0 0 0-2 2", key: "y57alp" }],
  ["path", { d: "M19 3a2 2 0 0 1 2 2", key: "18rm91" }],
  ["path", { d: "M21 19a2 2 0 0 1-2 2", key: "1j7049" }],
  ["path", { d: "M5 21a2 2 0 0 1-2-2", key: "sbafld" }],
  ["path", { d: "M9 3h1", key: "1yesri" }],
  ["path", { d: "M9 21h1", key: "15o7lz" }],
  ["path", { d: "M14 3h1", key: "1ec4yj" }],
  ["path", { d: "M14 21h1", key: "v9vybs" }],
  ["path", { d: "M3 9v1", key: "1r0deq" }],
  ["path", { d: "M21 9v1", key: "mxsmne" }],
  ["path", { d: "M3 14v1", key: "vnatye" }],
  ["path", { d: "M21 14v1", key: "169vum" }]
]);
const Box = createLucideIcon("BoxIcon", [
  [
    "path",
    {
      d: "M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z",
      key: "yt0hxn"
    }
  ],
  ["polyline", { points: "3.29 7 12 12 20.71 7", key: "ousv84" }],
  ["line", { x1: "12", y1: "22", x2: "12", y2: "12", key: "gdv6h4" }]
]);
const Boxes = createLucideIcon("BoxesIcon", [
  [
    "path",
    {
      d: "M2.97 12.92A2 2 0 0 0 2 14.63v3.24a2 2 0 0 0 .97 1.71l3 1.8a2 2 0 0 0 2.06 0L12 19v-5.5l-5-3-4.03 2.42Z",
      key: "lc1i9w"
    }
  ],
  ["path", { d: "m7 16.5-4.74-2.85", key: "1o9zyk" }],
  ["path", { d: "m7 16.5 5-3", key: "va8pkn" }],
  ["path", { d: "M7 16.5v5.17", key: "jnp8gn" }],
  [
    "path",
    {
      d: "M12 13.5V19l3.97 2.38a2 2 0 0 0 2.06 0l3-1.8a2 2 0 0 0 .97-1.71v-3.24a2 2 0 0 0-.97-1.71L17 10.5l-5 3Z",
      key: "8zsnat"
    }
  ],
  ["path", { d: "m17 16.5-5-3", key: "8arw3v" }],
  ["path", { d: "m17 16.5 4.74-2.85", key: "8rfmw" }],
  ["path", { d: "M17 16.5v5.17", key: "k6z78m" }],
  [
    "path",
    {
      d: "M7.97 4.42A2 2 0 0 0 7 6.13v4.37l5 3 5-3V6.13a2 2 0 0 0-.97-1.71l-3-1.8a2 2 0 0 0-2.06 0l-3 1.8Z",
      key: "1xygjf"
    }
  ],
  ["path", { d: "M12 8 7.26 5.15", key: "1vbdud" }],
  ["path", { d: "m12 8 4.74-2.85", key: "3rx089" }],
  ["path", { d: "M12 13.5V8", key: "1io7kd" }]
]);
const BrainCircuit = createLucideIcon("BrainCircuitIcon", [
  [
    "path",
    {
      d: "M12 4.5a2.5 2.5 0 0 0-4.96-.46 2.5 2.5 0 0 0-1.98 3 2.5 2.5 0 0 0-1.32 4.24 3 3 0 0 0 .34 5.58 2.5 2.5 0 0 0 2.96 3.08 2.5 2.5 0 0 0 4.91.05L12 20V4.5Z",
      key: "ixwj2a"
    }
  ],
  ["path", { d: "M16 8V5c0-1.1.9-2 2-2", key: "13dx7u" }],
  ["path", { d: "M12 13h4", key: "1ku699" }],
  ["path", { d: "M12 18h6a2 2 0 0 1 2 2v1", key: "105ag5" }],
  ["path", { d: "M12 8h8", key: "1lhi5i" }],
  ["path", { d: "M20.5 8a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Z", key: "1s25gz" }],
  ["path", { d: "M16.5 13a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Z", key: "127460" }],
  ["path", { d: "M20.5 21a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Z", key: "fys062" }],
  ["path", { d: "M18.5 3a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Z", key: "1vib61" }]
]);
const BrainCog = createLucideIcon("BrainCogIcon", [
  [
    "path",
    {
      d: "M12 4.5a2.5 2.5 0 0 0-4.96-.46 2.5 2.5 0 0 0-1.98 3 2.5 2.5 0 0 0-1.32 4.24 3 3 0 0 0 .34 5.58 2.5 2.5 0 0 0 2.96 3.08A2.5 2.5 0 0 0 9.5 22c1.21 0 2.5-.74 2.5-2.5m0-15a2.5 2.5 0 0 1 4.96-.46 2.5 2.5 0 0 1 1.98 3 2.5 2.5 0 0 1 1.32 4.24 3 3 0 0 1-.34 5.58 2.5 2.5 0 0 1-2.96 3.08A2.5 2.5 0 0 1 14.5 22c-1.21 0-2.5-.74-2.5-2.5m0-15V5m0 14.5V19",
      key: "1s39q3"
    }
  ],
  ["circle", { cx: "12", cy: "12", r: "2", key: "1c9p78" }],
  ["path", { d: "M12 9v1", key: "pby5my" }],
  ["path", { d: "M12 14v1", key: "eiwm5y" }],
  ["path", { d: "m14.6 10.5-.87.5", key: "pm6qkn" }],
  ["path", { d: "m10.27 13-.87.5", key: "1h0pla" }],
  ["path", { d: "m14.6 13.5-.87-.5", key: "1pggcy" }],
  ["path", { d: "m10.27 11-.87-.5", key: "1d8xkg" }]
]);
const Brain = createLucideIcon("BrainIcon", [
  [
    "path",
    {
      d: "M9.5 2A2.5 2.5 0 0 1 12 4.5v15a2.5 2.5 0 0 1-4.96.44 2.5 2.5 0 0 1-2.96-3.08 3 3 0 0 1-.34-5.58 2.5 2.5 0 0 1 1.32-4.24 2.5 2.5 0 0 1 1.98-3A2.5 2.5 0 0 1 9.5 2Z",
      key: "1mhkh5"
    }
  ],
  [
    "path",
    {
      d: "M14.5 2A2.5 2.5 0 0 0 12 4.5v15a2.5 2.5 0 0 0 4.96.44 2.5 2.5 0 0 0 2.96-3.08 3 3 0 0 0 .34-5.58 2.5 2.5 0 0 0-1.32-4.24 2.5 2.5 0 0 0-1.98-3A2.5 2.5 0 0 0 14.5 2Z",
      key: "1d6s00"
    }
  ]
]);
const Briefcase = createLucideIcon("BriefcaseIcon", [
  [
    "rect",
    {
      x: "2",
      y: "7",
      width: "20",
      height: "14",
      rx: "2",
      ry: "2",
      key: "1fj28a"
    }
  ],
  ["path", { d: "M16 21V5a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v16", key: "zwj3tp" }]
]);
const Brush = createLucideIcon("BrushIcon", [
  [
    "path",
    {
      d: "m9.06 11.9 8.07-8.06a2.85 2.85 0 1 1 4.03 4.03l-8.06 8.08",
      key: "1styjt"
    }
  ],
  [
    "path",
    {
      d: "M7.07 14.94c-1.66 0-3 1.35-3 3.02 0 1.33-2.5 1.52-2 2.02 1.08 1.1 2.49 2.02 4 2.02 2.2 0 4-1.8 4-4.04a3.01 3.01 0 0 0-3-3.02z",
      key: "z0l1mu"
    }
  ]
]);
const Bug = createLucideIcon("BugIcon", [
  [
    "rect",
    { width: "8", height: "14", x: "8", y: "6", rx: "4", key: "hq8nra" }
  ],
  ["path", { d: "m19 7-3 2", key: "fmg8ec" }],
  ["path", { d: "m5 7 3 2", key: "dkxqes" }],
  ["path", { d: "m19 19-3-2", key: "1hbhi4" }],
  ["path", { d: "m5 19 3-2", key: "dvt2ee" }],
  ["path", { d: "M20 13h-4", key: "1agfp2" }],
  ["path", { d: "M4 13h4", key: "1bwh8b" }],
  ["path", { d: "m10 4 1 2", key: "1pot59" }],
  ["path", { d: "m14 4-1 2", key: "m8sn0o" }]
]);
const Building2 = createLucideIcon("Building2Icon", [
  [
    "path",
    {
      d: "M6 22V4c0-.27 0-.55.07-.82a1.477 1.477 0 0 1 1.1-1.11C7.46 2 8.73 2 9 2h7c.27 0 .55 0 .82.07a1.477 1.477 0 0 1 1.11 1.1c.07.28.07.56.07.83v18H6Z",
      key: "1b1x9d"
    }
  ],
  [
    "path",
    {
      d: "M2 14v6c0 1.1.9 2 2 2h2V12H4c-.27 0-.55 0-.82.07-.27.07-.52.2-.72.4-.19.19-.32.44-.39.71A3.4 3.4 0 0 0 2 14Z",
      key: "12g3jd"
    }
  ],
  [
    "path",
    {
      d: "M20.82 9.07A3.4 3.4 0 0 0 20 9h-2v13h2a2 2 0 0 0 2-2v-9c0-.28 0-.55-.07-.82-.07-.27-.2-.52-.4-.72-.19-.19-.44-.32-.71-.39Z",
      key: "o1w3ll"
    }
  ],
  ["path", { d: "M10 6h4", key: "1itunk" }],
  ["path", { d: "M10 10h4", key: "tcdvrf" }],
  ["path", { d: "M10 14h4", key: "kelpxr" }],
  ["path", { d: "M10 18h4", key: "1ulq68" }]
]);
const Building = createLucideIcon("BuildingIcon", [
  [
    "rect",
    {
      x: "4",
      y: "2",
      width: "16",
      height: "20",
      rx: "2",
      ry: "2",
      key: "152kg8"
    }
  ],
  ["path", { d: "M9 22v-4h6v4", key: "r93iot" }],
  ["path", { d: "M8 6h.01", key: "1dz90k" }],
  ["path", { d: "M16 6h.01", key: "1x0f13" }],
  ["path", { d: "M12 6h.01", key: "1vi96p" }],
  ["path", { d: "M12 10h.01", key: "1nrarc" }],
  ["path", { d: "M12 14h.01", key: "1etili" }],
  ["path", { d: "M16 10h.01", key: "1m94wz" }],
  ["path", { d: "M16 14h.01", key: "1gbofw" }],
  ["path", { d: "M8 10h.01", key: "19clt8" }],
  ["path", { d: "M8 14h.01", key: "6423bh" }]
]);
const Bus = createLucideIcon("BusIcon", [
  [
    "path",
    {
      d: "M19 17h2l.64-2.54c.24-.959.24-1.962 0-2.92l-1.07-4.27A3 3 0 0 0 17.66 5H4a2 2 0 0 0-2 2v10h2",
      key: "wfsdqh"
    }
  ],
  ["path", { d: "M14 17H9", key: "o2noo5" }],
  ["circle", { cx: "6.5", cy: "17.5", r: "2.5", key: "gc8oob" }],
  ["circle", { cx: "16.5", cy: "17.5", r: "2.5", key: "4btu0q" }]
]);
const Cake = createLucideIcon("CakeIcon", [
  ["path", { d: "M20 21v-8a2 2 0 0 0-2-2H6a2 2 0 0 0-2 2v8", key: "1w3rig" }],
  [
    "path",
    {
      d: "M4 16s.5-1 2-1 2.5 2 4 2 2.5-2 4-2 2.5 2 4 2 2-1 2-1",
      key: "n2jgmb"
    }
  ],
  ["path", { d: "M2 21h20", key: "1nyx9w" }],
  ["path", { d: "M7 8v2", key: "kqglng" }],
  ["path", { d: "M12 8v2", key: "1woqiv" }],
  ["path", { d: "M17 8v2", key: "teptal" }],
  ["path", { d: "M7 4h.01", key: "1bh4kh" }],
  ["path", { d: "M12 4h.01", key: "1ujb9j" }],
  ["path", { d: "M17 4h.01", key: "1upcoc" }]
]);
const Calculator = createLucideIcon("CalculatorIcon", [
  [
    "rect",
    { x: "4", y: "2", width: "16", height: "20", rx: "2", key: "1uxh74" }
  ],
  ["line", { x1: "8", x2: "16", y1: "6", y2: "6", key: "x4nwl0" }],
  ["line", { x1: "16", x2: "16", y1: "14", y2: "18", key: "wjye3r" }],
  ["path", { d: "M16 10h.01", key: "1m94wz" }],
  ["path", { d: "M12 10h.01", key: "1nrarc" }],
  ["path", { d: "M8 10h.01", key: "19clt8" }],
  ["path", { d: "M12 14h.01", key: "1etili" }],
  ["path", { d: "M8 14h.01", key: "6423bh" }],
  ["path", { d: "M12 18h.01", key: "mhygvu" }],
  ["path", { d: "M8 18h.01", key: "lrp35t" }]
]);
const CalendarCheck2 = createLucideIcon("CalendarCheck2Icon", [
  [
    "path",
    {
      d: "M21 14V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h8",
      key: "bce9hv"
    }
  ],
  ["line", { x1: "16", y1: "2", x2: "16", y2: "6", key: "18saeg" }],
  ["line", { x1: "8", y1: "2", x2: "8", y2: "6", key: "1u51jw" }],
  ["line", { x1: "3", y1: "10", x2: "21", y2: "10", key: "6sq0yj" }],
  ["path", { d: "m16 20 2 2 4-4", key: "13tcca" }]
]);
const CalendarCheck = createLucideIcon("CalendarCheckIcon", [
  [
    "rect",
    {
      x: "3",
      y: "4",
      width: "18",
      height: "18",
      rx: "2",
      ry: "2",
      key: "1dtxiw"
    }
  ],
  ["line", { x1: "16", y1: "2", x2: "16", y2: "6", key: "18saeg" }],
  ["line", { x1: "8", y1: "2", x2: "8", y2: "6", key: "1u51jw" }],
  ["line", { x1: "3", y1: "10", x2: "21", y2: "10", key: "6sq0yj" }],
  ["path", { d: "m9 16 2 2 4-4", key: "19s6y9" }]
]);
const CalendarClock = createLucideIcon("CalendarClockIcon", [
  [
    "path",
    {
      d: "M21 7.5V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h3.5",
      key: "1osxxc"
    }
  ],
  ["path", { d: "M16 2v4", key: "4m81vk" }],
  ["path", { d: "M8 2v4", key: "1cmpym" }],
  ["path", { d: "M3 10h5", key: "r794hk" }],
  ["path", { d: "M17.5 17.5 16 16.25V14", key: "re2vv1" }],
  ["path", { d: "M22 16a6 6 0 1 1-12 0 6 6 0 0 1 12 0Z", key: "ame013" }]
]);
const CalendarDays = createLucideIcon("CalendarDaysIcon", [
  [
    "rect",
    {
      x: "3",
      y: "4",
      width: "18",
      height: "18",
      rx: "2",
      ry: "2",
      key: "1dtxiw"
    }
  ],
  ["line", { x1: "16", y1: "2", x2: "16", y2: "6", key: "18saeg" }],
  ["line", { x1: "8", y1: "2", x2: "8", y2: "6", key: "1u51jw" }],
  ["line", { x1: "3", y1: "10", x2: "21", y2: "10", key: "6sq0yj" }],
  ["path", { d: "M8 14h.01", key: "6423bh" }],
  ["path", { d: "M12 14h.01", key: "1etili" }],
  ["path", { d: "M16 14h.01", key: "1gbofw" }],
  ["path", { d: "M8 18h.01", key: "lrp35t" }],
  ["path", { d: "M12 18h.01", key: "mhygvu" }],
  ["path", { d: "M16 18h.01", key: "kzsmim" }]
]);
const CalendarHeart = createLucideIcon("CalendarHeartIcon", [
  [
    "path",
    {
      d: "M21 10V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14c0 1.1.9 2 2 2h7",
      key: "1sfrvf"
    }
  ],
  ["path", { d: "M16 2v4", key: "4m81vk" }],
  ["path", { d: "M8 2v4", key: "1cmpym" }],
  ["path", { d: "M3 10h18", key: "8toen8" }],
  [
    "path",
    {
      d: "M21.29 14.7a2.43 2.43 0 0 0-2.65-.52c-.3.12-.57.3-.8.53l-.34.34-.35-.34a2.43 2.43 0 0 0-2.65-.53c-.3.12-.56.3-.79.53-.95.94-1 2.53.2 3.74L17.5 22l3.6-3.55c1.2-1.21 1.14-2.8.19-3.74Z",
      key: "1t7hil"
    }
  ]
]);
const CalendarMinus = createLucideIcon("CalendarMinusIcon", [
  [
    "path",
    {
      d: "M21 13V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h8",
      key: "3spt84"
    }
  ],
  ["line", { x1: "16", y1: "2", x2: "16", y2: "6", key: "18saeg" }],
  ["line", { x1: "8", y1: "2", x2: "8", y2: "6", key: "1u51jw" }],
  ["line", { x1: "3", y1: "10", x2: "21", y2: "10", key: "6sq0yj" }],
  ["line", { x1: "16", y1: "19", x2: "22", y2: "19", key: "qkgpxo" }]
]);
const CalendarOff = createLucideIcon("CalendarOffIcon", [
  [
    "path",
    {
      d: "M4.18 4.18A2 2 0 0 0 3 6v14a2 2 0 0 0 2 2h14a2 2 0 0 0 1.82-1.18",
      key: "1feomx"
    }
  ],
  ["path", { d: "M21 15.5V6a2 2 0 0 0-2-2H9.5", key: "yhw86o" }],
  ["path", { d: "M16 2v4", key: "4m81vk" }],
  ["path", { d: "M3 10h7", key: "1wap6i" }],
  ["path", { d: "M21 10h-5.5", key: "quycpq" }],
  ["line", { x1: "2", y1: "2", x2: "22", y2: "22", key: "1w4vcy" }]
]);
const CalendarPlus = createLucideIcon("CalendarPlusIcon", [
  [
    "path",
    {
      d: "M21 13V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h8",
      key: "3spt84"
    }
  ],
  ["line", { x1: "16", y1: "2", x2: "16", y2: "6", key: "18saeg" }],
  ["line", { x1: "8", y1: "2", x2: "8", y2: "6", key: "1u51jw" }],
  ["line", { x1: "3", y1: "10", x2: "21", y2: "10", key: "6sq0yj" }],
  ["line", { x1: "19", y1: "16", x2: "19", y2: "22", key: "537lsc" }],
  ["line", { x1: "16", y1: "19", x2: "22", y2: "19", key: "qkgpxo" }]
]);
const CalendarRange = createLucideIcon("CalendarRangeIcon", [
  [
    "rect",
    {
      x: "3",
      y: "4",
      width: "18",
      height: "18",
      rx: "2",
      ry: "2",
      key: "1dtxiw"
    }
  ],
  ["line", { x1: "16", y1: "2", x2: "16", y2: "6", key: "18saeg" }],
  ["line", { x1: "8", y1: "2", x2: "8", y2: "6", key: "1u51jw" }],
  ["line", { x1: "3", y1: "10", x2: "21", y2: "10", key: "6sq0yj" }],
  ["path", { d: "M17 14h-6", key: "bkmgh3" }],
  ["path", { d: "M13 18H7", key: "bb0bb7" }],
  ["path", { d: "M7 14h.01", key: "1qa3f1" }],
  ["path", { d: "M17 18h.01", key: "1bdyru" }]
]);
const CalendarSearch = createLucideIcon("CalendarSearchIcon", [
  [
    "path",
    {
      d: "M21 12V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14c0 1.1.9 2 2 2h7.5",
      key: "18ncp8"
    }
  ],
  ["path", { d: "M16 2v4", key: "4m81vk" }],
  ["path", { d: "M8 2v4", key: "1cmpym" }],
  ["path", { d: "M3 10h18", key: "8toen8" }],
  ["path", { d: "M18 21a3 3 0 1 0 0-6 3 3 0 0 0 0 6v0Z", key: "mgbru4" }],
  ["path", { d: "m22 22-1.5-1.5", key: "1x83k4" }]
]);
const CalendarX2 = createLucideIcon("CalendarX2Icon", [
  [
    "path",
    {
      d: "M21 13V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h8",
      key: "3spt84"
    }
  ],
  ["line", { x1: "16", y1: "2", x2: "16", y2: "6", key: "18saeg" }],
  ["line", { x1: "8", y1: "2", x2: "8", y2: "6", key: "1u51jw" }],
  ["line", { x1: "3", y1: "10", x2: "21", y2: "10", key: "6sq0yj" }],
  ["line", { x1: "17", y1: "17", x2: "22", y2: "22", key: "tvgkbv" }],
  ["line", { x1: "17", y1: "22", x2: "22", y2: "17", key: "1l23f3" }]
]);
const CalendarX = createLucideIcon("CalendarXIcon", [
  [
    "rect",
    {
      x: "3",
      y: "4",
      width: "18",
      height: "18",
      rx: "2",
      ry: "2",
      key: "1dtxiw"
    }
  ],
  ["line", { x1: "16", y1: "2", x2: "16", y2: "6", key: "18saeg" }],
  ["line", { x1: "8", y1: "2", x2: "8", y2: "6", key: "1u51jw" }],
  ["line", { x1: "3", y1: "10", x2: "21", y2: "10", key: "6sq0yj" }],
  ["line", { x1: "10", y1: "14", x2: "14", y2: "18", key: "fs6roj" }],
  ["line", { x1: "14", y1: "14", x2: "10", y2: "18", key: "1kdrv6" }]
]);
const Calendar = createLucideIcon("CalendarIcon", [
  [
    "rect",
    {
      x: "3",
      y: "4",
      width: "18",
      height: "18",
      rx: "2",
      ry: "2",
      key: "1dtxiw"
    }
  ],
  ["line", { x1: "16", y1: "2", x2: "16", y2: "6", key: "18saeg" }],
  ["line", { x1: "8", y1: "2", x2: "8", y2: "6", key: "1u51jw" }],
  ["line", { x1: "3", y1: "10", x2: "21", y2: "10", key: "6sq0yj" }]
]);
const CameraOff = createLucideIcon("CameraOffIcon", [
  ["line", { x1: "2", y1: "2", x2: "22", y2: "22", key: "1w4vcy" }],
  ["path", { d: "M7 7H4a2 2 0 0 0-2 2v9a2 2 0 0 0 2 2h16", key: "qmtpty" }],
  ["path", { d: "M9.5 4h5L17 7h3a2 2 0 0 1 2 2v7.5", key: "1ufyfc" }],
  ["path", { d: "M14.121 15.121A3 3 0 1 1 9.88 10.88", key: "11zox6" }]
]);
const Camera = createLucideIcon("CameraIcon", [
  [
    "path",
    {
      d: "M14.5 4h-5L7 7H4a2 2 0 0 0-2 2v9a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V9a2 2 0 0 0-2-2h-3l-2.5-3z",
      key: "1tc9qg"
    }
  ],
  ["circle", { cx: "12", cy: "13", r: "3", key: "1vg3eu" }]
]);
const CandyOff = createLucideIcon("CandyOffIcon", [
  ["path", { d: "m8.5 8.5-1 1a4.95 4.95 0 0 0 7 7l1-1", key: "1ff4ui" }],
  [
    "path",
    {
      d: "M11.843 6.187A4.947 4.947 0 0 1 16.5 7.5a4.947 4.947 0 0 1 1.313 4.657",
      key: "1sbrv4"
    }
  ],
  ["path", { d: "M14 16.5V14", key: "1maf8j" }],
  ["path", { d: "M14 6.5v1.843", key: "1a6u6t" }],
  ["path", { d: "M10 10v7.5", key: "80pj65" }],
  [
    "path",
    {
      d: "m16 7 1-5 1.367.683A3 3 0 0 0 19.708 3H21v1.292a3 3 0 0 0 .317 1.341L22 7l-5 1",
      key: "11a9mt"
    }
  ],
  [
    "path",
    {
      d: "m8 17-1 5-1.367-.683A3 3 0 0 0 4.292 21H3v-1.292a3 3 0 0 0-.317-1.341L2 17l5-1",
      key: "3mjmon"
    }
  ],
  ["line", { x1: "2", y1: "2", x2: "22", y2: "22", key: "1w4vcy" }]
]);
const Candy = createLucideIcon("CandyIcon", [
  [
    "path",
    {
      d: "m9.5 7.5-2 2a4.95 4.95 0 1 0 7 7l2-2a4.95 4.95 0 1 0-7-7Z",
      key: "ue6khb"
    }
  ],
  ["path", { d: "M14 6.5v10", key: "5xnk7c" }],
  ["path", { d: "M10 7.5v10", key: "1uew51" }],
  [
    "path",
    {
      d: "m16 7 1-5 1.37.68A3 3 0 0 0 19.7 3H21v1.3c0 .46.1.92.32 1.33L22 7l-5 1",
      key: "b9cp6k"
    }
  ],
  [
    "path",
    {
      d: "m8 17-1 5-1.37-.68A3 3 0 0 0 4.3 21H3v-1.3a3 3 0 0 0-.32-1.33L2 17l5-1",
      key: "5lney8"
    }
  ]
]);
const Car = createLucideIcon("CarIcon", [
  [
    "path",
    {
      d: "M14 16H9m10 0h3v-3.15a1 1 0 0 0-.84-.99L16 11l-2.7-3.6a1 1 0 0 0-.8-.4H5.24a2 2 0 0 0-1.8 1.1l-.8 1.63A6 6 0 0 0 2 12.42V16h2",
      key: "l5np60"
    }
  ],
  ["circle", { cx: "6.5", cy: "16.5", r: "2.5", key: "ae40ju" }],
  ["circle", { cx: "16.5", cy: "16.5", r: "2.5", key: "1smtlt" }]
]);
const Carrot = createLucideIcon("CarrotIcon", [
  [
    "path",
    {
      d: "M2.27 21.7s9.87-3.5 12.73-6.36a4.5 4.5 0 0 0-6.36-6.37C5.77 11.84 2.27 21.7 2.27 21.7zM8.64 14l-2.05-2.04M15.34 15l-2.46-2.46",
      key: "rfqxbe"
    }
  ],
  [
    "path",
    {
      d: "M22 9s-1.33-2-3.5-2C16.86 7 15 9 15 9s1.33 2 3.5 2S22 9 22 9z",
      key: "6b25w4"
    }
  ],
  [
    "path",
    {
      d: "M15 2s-2 1.33-2 3.5S15 9 15 9s2-1.84 2-3.5C17 3.33 15 2 15 2z",
      key: "fn65lo"
    }
  ]
]);
const Cast = createLucideIcon("CastIcon", [
  [
    "path",
    {
      d: "M2 8V6a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2h-6",
      key: "3zrzxg"
    }
  ],
  ["path", { d: "M2 12a9 9 0 0 1 8 8", key: "g6cvee" }],
  ["path", { d: "M2 16a5 5 0 0 1 4 4", key: "1y1dii" }],
  ["line", { x1: "2", y1: "20", x2: "2.01", y2: "20", key: "1cypae" }]
]);
const Cat = createLucideIcon("CatIcon", [
  [
    "path",
    {
      d: "M12 5c.67 0 1.35.09 2 .26 1.78-2 5.03-2.84 6.42-2.26 1.4.58-.42 7-.42 7 .57 1.07 1 2.24 1 3.44C21 17.9 16.97 21 12 21s-9-3-9-7.56c0-1.25.5-2.4 1-3.44 0 0-1.89-6.42-.5-7 1.39-.58 4.72.23 6.5 2.23A9.04 9.04 0 0 1 12 5Z",
      key: "x6xyqk"
    }
  ],
  ["path", { d: "M8 14v.5", key: "1nzgdb" }],
  ["path", { d: "M16 14v.5", key: "1lajdz" }],
  ["path", { d: "M11.25 16.25h1.5L12 17l-.75-.75Z", key: "12kq1m" }]
]);
const CheckCheck = createLucideIcon("CheckCheckIcon", [
  ["path", { d: "M18 6 7 17l-5-5", key: "116fxf" }],
  ["path", { d: "m22 10-7.5 7.5L13 16", key: "ke71qq" }]
]);
const CheckCircle2 = createLucideIcon("CheckCircle2Icon", [
  [
    "path",
    {
      d: "M12 22c5.523 0 10-4.477 10-10S17.523 2 12 2 2 6.477 2 12s4.477 10 10 10z",
      key: "14v8dr"
    }
  ],
  ["path", { d: "m9 12 2 2 4-4", key: "dzmm74" }]
]);
const CheckCircle = createLucideIcon("CheckCircleIcon", [
  ["path", { d: "M22 11.08V12a10 10 0 1 1-5.93-9.14", key: "g774vq" }],
  ["polyline", { points: "22 4 12 14.01 9 11.01", key: "6xbx8j" }]
]);
const CheckSquare = createLucideIcon("CheckSquareIcon", [
  ["polyline", { points: "9 11 12 14 22 4", key: "19ybtz" }],
  [
    "path",
    {
      d: "M21 12v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11",
      key: "1jnkn4"
    }
  ]
]);
const Check = createLucideIcon("CheckIcon", [
  ["polyline", { points: "20 6 9 17 4 12", key: "10jjfj" }]
]);
const ChefHat = createLucideIcon("ChefHatIcon", [
  [
    "path",
    {
      d: "M6 13.87A4 4 0 0 1 7.41 6a5.11 5.11 0 0 1 1.05-1.54 5 5 0 0 1 7.08 0A5.11 5.11 0 0 1 16.59 6 4 4 0 0 1 18 13.87V21H6Z",
      key: "z3ra2g"
    }
  ],
  ["line", { x1: "6", y1: "17", x2: "18", y2: "17", key: "130uxj" }]
]);
const Cherry = createLucideIcon("CherryIcon", [
  [
    "path",
    {
      d: "M2 17a5 5 0 0 0 10 0c0-2.76-2.5-5-5-3-2.5-2-5 .24-5 3Z",
      key: "cvxqlc"
    }
  ],
  [
    "path",
    {
      d: "M12 17a5 5 0 0 0 10 0c0-2.76-2.5-5-5-3-2.5-2-5 .24-5 3Z",
      key: "1ostrc"
    }
  ],
  [
    "path",
    {
      d: "M7 14c3.22-2.91 4.29-8.75 5-12 1.66 2.38 4.94 9 5 12",
      key: "hqx58h"
    }
  ],
  [
    "path",
    { d: "M22 9c-4.29 0-7.14-2.33-10-7 5.71 0 10 4.67 10 7Z", key: "eykp1o" }
  ]
]);
const ChevronDown = createLucideIcon("ChevronDownIcon", [
  ["polyline", { points: "6 9 12 15 18 9", key: "1do0m2" }]
]);
const ChevronFirst = createLucideIcon("ChevronFirstIcon", [
  ["polyline", { points: "17 18 11 12 17 6", key: "11nco2" }],
  ["path", { d: "M7 6v12", key: "1p53r6" }]
]);
const ChevronLast = createLucideIcon("ChevronLastIcon", [
  ["polyline", { points: "7 18 13 12 7 6", key: "1minw5" }],
  ["path", { d: "M17 6v12", key: "1o0aio" }]
]);
const ChevronLeft = createLucideIcon("ChevronLeftIcon", [
  ["polyline", { points: "15 18 9 12 15 6", key: "kvxz59" }]
]);
const ChevronRight = createLucideIcon("ChevronRightIcon", [
  ["polyline", { points: "9 18 15 12 9 6", key: "1rtp27" }]
]);
const ChevronUp = createLucideIcon("ChevronUpIcon", [
  ["polyline", { points: "18 15 12 9 6 15", key: "1uugdp" }]
]);
const ChevronsDownUp = createLucideIcon("ChevronsDownUpIcon", [
  ["path", { d: "m7 20 5-5 5 5", key: "13a0gw" }],
  ["path", { d: "m7 4 5 5 5-5", key: "1kwcof" }]
]);
const ChevronsDown = createLucideIcon("ChevronsDownIcon", [
  ["polyline", { points: "7 13 12 18 17 13", key: "am1j83" }],
  ["polyline", { points: "7 6 12 11 17 6", key: "pjsmwq" }]
]);
const ChevronsLeftRight = createLucideIcon("ChevronsLeftRightIcon", [
  ["path", { d: "m9 7-5 5 5 5", key: "j5w590" }],
  ["path", { d: "m15 7 5 5-5 5", key: "1bl6da" }]
]);
const ChevronsLeft = createLucideIcon("ChevronsLeftIcon", [
  ["polyline", { points: "11 17 6 12 11 7", key: "1ueymj" }],
  ["polyline", { points: "18 17 13 12 18 7", key: "18fy0m" }]
]);
const ChevronsRightLeft = createLucideIcon("ChevronsRightLeftIcon", [
  ["path", { d: "m20 17-5-5 5-5", key: "30x0n2" }],
  ["path", { d: "m4 17 5-5-5-5", key: "16spf4" }]
]);
const ChevronsRight = createLucideIcon("ChevronsRightIcon", [
  ["polyline", { points: "13 17 18 12 13 7", key: "oq0h83" }],
  ["polyline", { points: "6 17 11 12 6 7", key: "3k300q" }]
]);
const ChevronsUpDown = createLucideIcon("ChevronsUpDownIcon", [
  ["path", { d: "m7 15 5 5 5-5", key: "1hf1tw" }],
  ["path", { d: "m7 9 5-5 5 5", key: "sgt6xg" }]
]);
const ChevronsUp = createLucideIcon("ChevronsUpIcon", [
  ["polyline", { points: "17 11 12 6 7 11", key: "1u9xa9" }],
  ["polyline", { points: "17 18 12 13 7 18", key: "1fl4au" }]
]);
const Chrome = createLucideIcon("ChromeIcon", [
  ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
  ["circle", { cx: "12", cy: "12", r: "4", key: "4exip2" }],
  ["line", { x1: "21.17", y1: "8", x2: "12", y2: "8", key: "1a1nqa" }],
  ["line", { x1: "3.95", y1: "6.06", x2: "8.54", y2: "14", key: "irv2k6" }],
  ["line", { x1: "10.88", y1: "21.94", x2: "15.46", y2: "14", key: "fokf7t" }]
]);
const CigaretteOff = createLucideIcon("CigaretteOffIcon", [
  ["line", { x1: "2", y1: "2", x2: "22", y2: "22", key: "1w4vcy" }],
  ["path", { d: "M12 12H2v4h14", key: "91gsaq" }],
  ["path", { d: "M22 12v4", key: "142cbu" }],
  ["path", { d: "M18 12h-.5", key: "12ymji" }],
  ["path", { d: "M7 12v4", key: "jqww69" }],
  ["path", { d: "M18 8c0-2.5-2-2.5-2-5", key: "1il607" }],
  ["path", { d: "M22 8c0-2.5-2-2.5-2-5", key: "1gah44" }]
]);
const Cigarette = createLucideIcon("CigaretteIcon", [
  ["path", { d: "M18 12H2v4h16", key: "2rt1hm" }],
  ["path", { d: "M22 12v4", key: "142cbu" }],
  ["path", { d: "M7 12v4", key: "jqww69" }],
  ["path", { d: "M18 8c0-2.5-2-2.5-2-5", key: "1il607" }],
  ["path", { d: "M22 8c0-2.5-2-2.5-2-5", key: "1gah44" }]
]);
const CircleDot = createLucideIcon("CircleDotIcon", [
  ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
  ["circle", { cx: "12", cy: "12", r: "1", key: "41hilf" }]
]);
const CircleEllipsis = createLucideIcon("CircleEllipsisIcon", [
  ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
  ["path", { d: "M17 12h.01", key: "1m0b6t" }],
  ["path", { d: "M12 12h.01", key: "1mp3jc" }],
  ["path", { d: "M7 12h.01", key: "eqddd0" }]
]);
const CircleSlashed = createLucideIcon("CircleSlashedIcon", [
  ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
  ["path", { d: "M22 2 2 22", key: "y4kqgn" }]
]);
const Circle = createLucideIcon("CircleIcon", [
  ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }]
]);
const Citrus = createLucideIcon("CitrusIcon", [
  [
    "path",
    {
      d: "M5.51 18.49a12 12 0 0 0 16.12.78c.49-.41.49-1.15.03-1.6L6.34 2.33a1.08 1.08 0 0 0-1.6.03A12 12 0 0 0 5.5 18.5Z",
      key: "cpj97m"
    }
  ],
  [
    "path",
    {
      d: "M8.34 15.66a8 8 0 0 0 10.4.78c.54-.4.54-1.16.06-1.64L9.2 5.2c-.48-.48-1.25-.48-1.64.06a8 8 0 0 0 .78 10.4Z",
      key: "vhgi9a"
    }
  ],
  ["path", { d: "m14 10-5.5 5.5", key: "92pfem" }],
  ["path", { d: "M14 10v8", key: "3sxk0t" }],
  ["path", { d: "M14 10H6", key: "1aai03" }]
]);
const Clapperboard = createLucideIcon("ClapperboardIcon", [
  [
    "path",
    { d: "M4 11v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8H4Z", key: "1hxvyx" }
  ],
  [
    "path",
    {
      d: "m4 11-.88-2.87a2 2 0 0 1 1.33-2.5l11.48-3.5a2 2 0 0 1 2.5 1.32l.87 2.87L4 11.01Z",
      key: "1vz1k2"
    }
  ],
  ["path", { d: "m6.6 4.99 3.38 4.2", key: "192ida" }],
  ["path", { d: "m11.86 3.38 3.38 4.2", key: "hhucvz" }]
]);
const ClipboardCheck = createLucideIcon("ClipboardCheckIcon", [
  [
    "rect",
    {
      x: "8",
      y: "2",
      width: "8",
      height: "4",
      rx: "1",
      ry: "1",
      key: "wz2j3u"
    }
  ],
  [
    "path",
    {
      d: "M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2",
      key: "116196"
    }
  ],
  ["path", { d: "m9 14 2 2 4-4", key: "df797q" }]
]);
const ClipboardCopy = createLucideIcon("ClipboardCopyIcon", [
  [
    "rect",
    {
      x: "8",
      y: "2",
      width: "8",
      height: "4",
      rx: "1",
      ry: "1",
      key: "wz2j3u"
    }
  ],
  [
    "path",
    {
      d: "M8 4H6a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-2",
      key: "4jdomd"
    }
  ],
  ["path", { d: "M16 4h2a2 2 0 0 1 2 2v4", key: "3hqy98" }],
  ["path", { d: "M21 14H11", key: "1bme5i" }],
  ["path", { d: "m15 10-4 4 4 4", key: "5dvupr" }]
]);
const ClipboardEdit = createLucideIcon("ClipboardEditIcon", [
  [
    "rect",
    {
      x: "8",
      y: "2",
      width: "8",
      height: "4",
      rx: "1",
      ry: "1",
      key: "wz2j3u"
    }
  ],
  [
    "path",
    {
      d: "M10.42 12.61a2.1 2.1 0 1 1 2.97 2.97L7.95 21 4 22l.99-3.95 5.43-5.44Z",
      key: "1rgxu8"
    }
  ],
  ["path", { d: "M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-5.5", key: "cereej" }],
  ["path", { d: "M4 13.5V6a2 2 0 0 1 2-2h2", key: "5ua5vh" }]
]);
const ClipboardList = createLucideIcon("ClipboardListIcon", [
  [
    "rect",
    {
      x: "8",
      y: "2",
      width: "8",
      height: "4",
      rx: "1",
      ry: "1",
      key: "wz2j3u"
    }
  ],
  [
    "path",
    {
      d: "M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2",
      key: "116196"
    }
  ],
  ["path", { d: "M12 11h4", key: "1jrz19" }],
  ["path", { d: "M12 16h4", key: "n85exb" }],
  ["path", { d: "M8 11h.01", key: "1dfujw" }],
  ["path", { d: "M8 16h.01", key: "18s6g9" }]
]);
const ClipboardSignature = createLucideIcon("ClipboardSignatureIcon", [
  [
    "rect",
    {
      x: "8",
      y: "2",
      width: "8",
      height: "4",
      rx: "1",
      ry: "1",
      key: "wz2j3u"
    }
  ],
  [
    "path",
    {
      d: "M8 4H6a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-.5",
      key: "1but9f"
    }
  ],
  ["path", { d: "M16 4h2a2 2 0 0 1 1.73 1", key: "1p8n7l" }],
  [
    "path",
    {
      d: "M18.42 9.61a2.1 2.1 0 1 1 2.97 2.97L16.95 17 13 18l.99-3.95 4.43-4.44Z",
      key: "johvi5"
    }
  ],
  ["path", { d: "M8 18h1", key: "13wk12" }]
]);
const ClipboardType = createLucideIcon("ClipboardTypeIcon", [
  [
    "rect",
    {
      x: "8",
      y: "2",
      width: "8",
      height: "4",
      rx: "1",
      ry: "1",
      key: "wz2j3u"
    }
  ],
  [
    "path",
    {
      d: "M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2",
      key: "116196"
    }
  ],
  ["path", { d: "M9 12v-1h6v1", key: "iehl6m" }],
  ["path", { d: "M11 17h2", key: "12w5me" }],
  ["path", { d: "M12 11v6", key: "1bwqyc" }]
]);
const ClipboardX = createLucideIcon("ClipboardXIcon", [
  [
    "rect",
    {
      x: "8",
      y: "2",
      width: "8",
      height: "4",
      rx: "1",
      ry: "1",
      key: "wz2j3u"
    }
  ],
  [
    "path",
    {
      d: "M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2",
      key: "116196"
    }
  ],
  ["path", { d: "m15 11-6 6", key: "1toa9n" }],
  ["path", { d: "m9 11 6 6", key: "wlibny" }]
]);
const Clipboard2 = createLucideIcon("ClipboardIcon", [
  [
    "rect",
    {
      x: "8",
      y: "2",
      width: "8",
      height: "4",
      rx: "1",
      ry: "1",
      key: "wz2j3u"
    }
  ],
  [
    "path",
    {
      d: "M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2",
      key: "116196"
    }
  ]
]);
const Clock1 = createLucideIcon("Clock1Icon", [
  ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
  ["polyline", { points: "12 6 12 12 14.5 8", key: "12zbmj" }]
]);
const Clock10 = createLucideIcon("Clock10Icon", [
  ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
  ["polyline", { points: "12 6 12 12 8 10", key: "atfzqc" }]
]);
const Clock11 = createLucideIcon("Clock11Icon", [
  ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
  ["polyline", { points: "12 6 12 12 9.5 8", key: "l5bg6f" }]
]);
const Clock12 = createLucideIcon("Clock12Icon", [
  ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
  ["polyline", { points: "12 6 12 12", key: "1fub01" }]
]);
const Clock2 = createLucideIcon("Clock2Icon", [
  ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
  ["polyline", { points: "12 6 12 12 16 10", key: "1g230d" }]
]);
const Clock3 = createLucideIcon("Clock3Icon", [
  ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
  ["polyline", { points: "12 6 12 12 16.5 12", key: "1aq6pp" }]
]);
const Clock4 = createLucideIcon("Clock4Icon", [
  ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
  ["polyline", { points: "12 6 12 12 16 14", key: "68esgv" }]
]);
const Clock5 = createLucideIcon("Clock5Icon", [
  ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
  ["polyline", { points: "12 6 12 12 14.5 16", key: "1pcbox" }]
]);
const Clock6 = createLucideIcon("Clock6Icon", [
  ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
  ["polyline", { points: "12 6 12 12 12 16.5", key: "hb2qv6" }]
]);
const Clock7 = createLucideIcon("Clock7Icon", [
  ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
  ["polyline", { points: "12 6 12 12 9.5 16", key: "ka3394" }]
]);
const Clock8 = createLucideIcon("Clock8Icon", [
  ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
  ["polyline", { points: "12 6 12 12 8 14", key: "tmc9b4" }]
]);
const Clock9 = createLucideIcon("Clock9Icon", [
  ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
  ["polyline", { points: "12 6 12 12 7.5 12", key: "1k60p0" }]
]);
const Clock = createLucideIcon("ClockIcon", [
  ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
  ["polyline", { points: "12 6 12 12 16 14", key: "68esgv" }]
]);
const CloudCog = createLucideIcon("CloudCogIcon", [
  [
    "path",
    { d: "M20 16.2A4.5 4.5 0 0 0 17.5 8h-1.8A7 7 0 1 0 4 14.9", key: "19hoja" }
  ],
  ["circle", { cx: "12", cy: "17", r: "3", key: "1spfwm" }],
  ["path", { d: "M12 13v1", key: "176q98" }],
  ["path", { d: "M12 20v1", key: "1wcdkc" }],
  ["path", { d: "M16 17h-1", key: "y560le" }],
  ["path", { d: "M9 17H8", key: "1lfe9z" }],
  ["path", { d: "m15 14-.88.88", key: "12ytk1" }],
  ["path", { d: "M9.88 19.12 9 20", key: "1kmb4r" }],
  ["path", { d: "m15 20-.88-.88", key: "1ipjcf" }],
  ["path", { d: "M9.88 14.88 9 14", key: "c4uok7" }]
]);
const CloudDrizzle = createLucideIcon("CloudDrizzleIcon", [
  [
    "path",
    {
      d: "M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242",
      key: "1pljnt"
    }
  ],
  ["path", { d: "M8 19v1", key: "1dk2by" }],
  ["path", { d: "M8 14v1", key: "84yxot" }],
  ["path", { d: "M16 19v1", key: "v220m7" }],
  ["path", { d: "M16 14v1", key: "g12gj6" }],
  ["path", { d: "M12 21v1", key: "q8vafk" }],
  ["path", { d: "M12 16v1", key: "1mx6rx" }]
]);
const CloudFog = createLucideIcon("CloudFogIcon", [
  [
    "path",
    {
      d: "M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242",
      key: "1pljnt"
    }
  ],
  ["path", { d: "M16 17H7", key: "pygtm1" }],
  ["path", { d: "M17 21H9", key: "1u2q02" }]
]);
const CloudHail = createLucideIcon("CloudHailIcon", [
  [
    "path",
    {
      d: "M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242",
      key: "1pljnt"
    }
  ],
  ["path", { d: "M16 14v2", key: "a1is7l" }],
  ["path", { d: "M8 14v2", key: "1e9m6t" }],
  ["path", { d: "M16 20h.01", key: "xwek51" }],
  ["path", { d: "M8 20h.01", key: "1vjney" }],
  ["path", { d: "M12 16v2", key: "z66u1j" }],
  ["path", { d: "M12 22h.01", key: "1urd7a" }]
]);
const CloudLightning = createLucideIcon("CloudLightningIcon", [
  [
    "path",
    {
      d: "M6 16.326A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 .5 8.973",
      key: "1cez44"
    }
  ],
  ["path", { d: "m13 12-3 5h4l-3 5", key: "1t22er" }]
]);
const CloudMoonRain = createLucideIcon("CloudMoonRainIcon", [
  [
    "path",
    {
      d: "M10.083 9A6.002 6.002 0 0 1 16 4a4.243 4.243 0 0 0 6 6c0 2.22-1.206 4.16-3 5.197",
      key: "u82z8m"
    }
  ],
  ["path", { d: "M3 20a5 5 0 1 1 8.9-4H13a3 3 0 0 1 2 5.24", key: "1qmrp3" }],
  ["path", { d: "M11 20v2", key: "174qtz" }],
  ["path", { d: "M7 19v2", key: "12npes" }]
]);
const CloudMoon = createLucideIcon("CloudMoonIcon", [
  ["path", { d: "M13 22H7a5 5 0 1 1 4.9-6H13a3 3 0 0 1 0 6Z", key: "s09mg5" }],
  [
    "path",
    {
      d: "M10.083 9A6.002 6.002 0 0 1 16 4a4.243 4.243 0 0 0 6 6c0 2.22-1.206 4.16-3 5.197",
      key: "u82z8m"
    }
  ]
]);
const CloudOff = createLucideIcon("CloudOffIcon", [
  ["path", { d: "m2 2 20 20", key: "1ooewy" }],
  [
    "path",
    {
      d: "M5.782 5.782A7 7 0 0 0 9 19h8.5a4.5 4.5 0 0 0 1.307-.193",
      key: "yfwify"
    }
  ],
  [
    "path",
    {
      d: "M21.532 16.5A4.5 4.5 0 0 0 17.5 10h-1.79A7.008 7.008 0 0 0 10 5.07",
      key: "jlfiyv"
    }
  ]
]);
const CloudRainWind = createLucideIcon("CloudRainWindIcon", [
  [
    "path",
    {
      d: "M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242",
      key: "1pljnt"
    }
  ],
  ["path", { d: "m9.2 22 3-7", key: "sb5f6j" }],
  ["path", { d: "m9 13-3 7", key: "500co5" }],
  ["path", { d: "m17 13-3 7", key: "8t2fiy" }]
]);
const CloudRain = createLucideIcon("CloudRainIcon", [
  [
    "path",
    {
      d: "M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242",
      key: "1pljnt"
    }
  ],
  ["path", { d: "M16 14v6", key: "1j4efv" }],
  ["path", { d: "M8 14v6", key: "17c4r9" }],
  ["path", { d: "M12 16v6", key: "c8a4gj" }]
]);
const CloudSnow = createLucideIcon("CloudSnowIcon", [
  [
    "path",
    {
      d: "M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242",
      key: "1pljnt"
    }
  ],
  ["path", { d: "M8 15h.01", key: "a7atzg" }],
  ["path", { d: "M8 19h.01", key: "puxtts" }],
  ["path", { d: "M12 17h.01", key: "p32p05" }],
  ["path", { d: "M12 21h.01", key: "h35vbk" }],
  ["path", { d: "M16 15h.01", key: "rnfrdf" }],
  ["path", { d: "M16 19h.01", key: "1vcnzz" }]
]);
const CloudSunRain = createLucideIcon("CloudSunRainIcon", [
  ["path", { d: "M12 2v2", key: "tus03m" }],
  ["path", { d: "m4.93 4.93 1.41 1.41", key: "149t6j" }],
  ["path", { d: "M20 12h2", key: "1q8mjw" }],
  ["path", { d: "m19.07 4.93-1.41 1.41", key: "1shlcs" }],
  ["path", { d: "M15.947 12.65a4 4 0 0 0-5.925-4.128", key: "dpwdj0" }],
  ["path", { d: "M3 20a5 5 0 1 1 8.9-4H13a3 3 0 0 1 2 5.24", key: "1qmrp3" }],
  ["path", { d: "M11 20v2", key: "174qtz" }],
  ["path", { d: "M7 19v2", key: "12npes" }]
]);
const CloudSun = createLucideIcon("CloudSunIcon", [
  ["path", { d: "M12 2v2", key: "tus03m" }],
  ["path", { d: "m4.93 4.93 1.41 1.41", key: "149t6j" }],
  ["path", { d: "M20 12h2", key: "1q8mjw" }],
  ["path", { d: "m19.07 4.93-1.41 1.41", key: "1shlcs" }],
  ["path", { d: "M15.947 12.65a4 4 0 0 0-5.925-4.128", key: "dpwdj0" }],
  ["path", { d: "M13 22H7a5 5 0 1 1 4.9-6H13a3 3 0 0 1 0 6Z", key: "s09mg5" }]
]);
const Cloud = createLucideIcon("CloudIcon", [
  [
    "path",
    { d: "M17.5 19H9a7 7 0 1 1 6.71-9h1.79a4.5 4.5 0 1 1 0 9Z", key: "p7xjir" }
  ]
]);
const Cloudy = createLucideIcon("CloudyIcon", [
  [
    "path",
    { d: "M17.5 21H9a7 7 0 1 1 6.71-9h1.79a4.5 4.5 0 1 1 0 9Z", key: "gqqjvc" }
  ],
  [
    "path",
    {
      d: "M22 10a3 3 0 0 0-3-3h-2.207a5.502 5.502 0 0 0-10.702.5",
      key: "1p2s76"
    }
  ]
]);
const Clover = createLucideIcon("CloverIcon", [
  [
    "path",
    {
      d: "M16.2 3.8a2.7 2.7 0 0 0-3.81 0l-.4.38-.4-.4a2.7 2.7 0 0 0-3.82 0C6.73 4.85 6.67 6.64 8 8l4 4 4-4c1.33-1.36 1.27-3.15.2-4.2z",
      key: "1gxwox"
    }
  ],
  [
    "path",
    {
      d: "M8 8c-1.36-1.33-3.15-1.27-4.2-.2a2.7 2.7 0 0 0 0 3.81l.38.4-.4.4a2.7 2.7 0 0 0 0 3.82C4.85 17.27 6.64 17.33 8 16",
      key: "il7z7z"
    }
  ],
  [
    "path",
    {
      d: "M16 16c1.36 1.33 3.15 1.27 4.2.2a2.7 2.7 0 0 0 0-3.81l-.38-.4.4-.4a2.7 2.7 0 0 0 0-3.82C19.15 6.73 17.36 6.67 16 8",
      key: "15bpx2"
    }
  ],
  [
    "path",
    {
      d: "M7.8 20.2a2.7 2.7 0 0 0 3.81 0l.4-.38.4.4a2.7 2.7 0 0 0 3.82 0c1.06-1.06 1.12-2.85-.21-4.21l-4-4-4 4c-1.33 1.36-1.27 3.15-.2 4.2z",
      key: "v9mug8"
    }
  ],
  ["path", { d: "m7 17-5 5", key: "1py3mz" }]
]);
const Code2 = createLucideIcon("Code2Icon", [
  ["path", { d: "m18 16 4-4-4-4", key: "1inbqp" }],
  ["path", { d: "m6 8-4 4 4 4", key: "15zrgr" }],
  ["path", { d: "m14.5 4-5 16", key: "e7oirm" }]
]);
const Code = createLucideIcon("CodeIcon", [
  ["polyline", { points: "16 18 22 12 16 6", key: "z7tu5w" }],
  ["polyline", { points: "8 6 2 12 8 18", key: "1eg1df" }]
]);
const Codepen = createLucideIcon("CodepenIcon", [
  [
    "polygon",
    { points: "12 2 22 8.5 22 15.5 12 22 2 15.5 2 8.5 12 2", key: "srzb37" }
  ],
  ["line", { x1: "12", y1: "22", x2: "12", y2: "15.5", key: "zsefro" }],
  ["polyline", { points: "22 8.5 12 15.5 2 8.5", key: "ajlxae" }],
  ["polyline", { points: "2 15.5 12 8.5 22 15.5", key: "susrui" }],
  ["line", { x1: "12", y1: "2", x2: "12", y2: "8.5", key: "zll5ve" }]
]);
const Codesandbox = createLucideIcon("CodesandboxIcon", [
  [
    "path",
    {
      d: "M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z",
      key: "yt0hxn"
    }
  ],
  ["polyline", { points: "7.5 4.21 12 6.81 16.5 4.21", key: "fabo96" }],
  ["polyline", { points: "7.5 19.79 7.5 14.6 3 12", key: "z377f1" }],
  ["polyline", { points: "21 12 16.5 14.6 16.5 19.79", key: "9nrev1" }],
  ["polyline", { points: "3.27 6.96 12 12.01 20.73 6.96", key: "1180pa" }],
  ["line", { x1: "12", y1: "22.08", x2: "12", y2: "12", key: "10a5a7" }]
]);
const Coffee = createLucideIcon("CoffeeIcon", [
  ["path", { d: "M17 8h1a4 4 0 1 1 0 8h-1", key: "jx4kbh" }],
  ["path", { d: "M3 8h14v9a4 4 0 0 1-4 4H7a4 4 0 0 1-4-4Z", key: "1bxrl0" }],
  ["line", { x1: "6", y1: "2", x2: "6", y2: "4", key: "1p57d3" }],
  ["line", { x1: "10", y1: "2", x2: "10", y2: "4", key: "xb2gh9" }],
  ["line", { x1: "14", y1: "2", x2: "14", y2: "4", key: "gpi44t" }]
]);
const Cog = createLucideIcon("CogIcon", [
  ["path", { d: "M12 20a8 8 0 1 0 0-16 8 8 0 0 0 0 16Z", key: "sobvz5" }],
  ["path", { d: "M12 14a2 2 0 1 0 0-4 2 2 0 0 0 0 4Z", key: "11i496" }],
  ["path", { d: "M12 2v2", key: "tus03m" }],
  ["path", { d: "M12 22v-2", key: "1osdcq" }],
  ["path", { d: "m17 20.66-1-1.73", key: "eq3orb" }],
  ["path", { d: "M11 10.27 7 3.34", key: "16pf9h" }],
  ["path", { d: "m20.66 17-1.73-1", key: "sg0v6f" }],
  ["path", { d: "m3.34 7 1.73 1", key: "1ulond" }],
  ["path", { d: "M14 12h8", key: "4f43i9" }],
  ["path", { d: "M2 12h2", key: "1t8f8n" }],
  ["path", { d: "m20.66 7-1.73 1", key: "1ow05n" }],
  ["path", { d: "m3.34 17 1.73-1", key: "nuk764" }],
  ["path", { d: "m17 3.34-1 1.73", key: "2wel8s" }],
  ["path", { d: "m11 13.73-4 6.93", key: "794ttg" }]
]);
const Coins = createLucideIcon("CoinsIcon", [
  ["circle", { cx: "8", cy: "8", r: "6", key: "3yglwk" }],
  ["path", { d: "M18.09 10.37A6 6 0 1 1 10.34 18", key: "t5s6rm" }],
  ["path", { d: "M7 6h1v4", key: "1obek4" }],
  ["path", { d: "m16.71 13.88.7.71-2.82 2.82", key: "1rbuyh" }]
]);
const Columns = createLucideIcon("ColumnsIcon", [
  [
    "rect",
    {
      x: "3",
      y: "3",
      width: "18",
      height: "18",
      rx: "2",
      ry: "2",
      key: "maln0c"
    }
  ],
  ["line", { x1: "12", y1: "3", x2: "12", y2: "21", key: "essbwb" }]
]);
const Command = createLucideIcon("CommandIcon", [
  [
    "path",
    {
      d: "M18 3a3 3 0 0 0-3 3v12a3 3 0 0 0 3 3 3 3 0 0 0 3-3 3 3 0 0 0-3-3H6a3 3 0 0 0-3 3 3 3 0 0 0 3 3 3 3 0 0 0 3-3V6a3 3 0 0 0-3-3 3 3 0 0 0-3 3 3 3 0 0 0 3 3h12a3 3 0 0 0 3-3 3 3 0 0 0-3-3z",
      key: "uqkaba"
    }
  ]
]);
const Compass = createLucideIcon("CompassIcon", [
  ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
  [
    "polygon",
    {
      points: "16.24 7.76 14.12 14.12 7.76 16.24 9.88 9.88 16.24 7.76",
      key: "m9r19z"
    }
  ]
]);
const Component = createLucideIcon("ComponentIcon", [
  ["path", { d: "M5.5 8.5 9 12l-3.5 3.5L2 12l3.5-3.5Z", key: "1kciei" }],
  ["path", { d: "m12 2 3.5 3.5L12 9 8.5 5.5 12 2Z", key: "1ome0g" }],
  ["path", { d: "M18.5 8.5 22 12l-3.5 3.5L15 12l3.5-3.5Z", key: "vbupec" }],
  ["path", { d: "m12 15 3.5 3.5L12 22l-3.5-3.5L12 15Z", key: "16csic" }]
]);
const ConciergeBell = createLucideIcon("ConciergeBellIcon", [
  [
    "path",
    { d: "M2 18a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v2H2v-2Z", key: "1co3i8" }
  ],
  ["path", { d: "M20 16a8 8 0 1 0-16 0", key: "1pa543" }],
  ["path", { d: "M12 4v4", key: "1bq03y" }],
  ["path", { d: "M10 4h4", key: "1xpv9s" }]
]);
const Construction = createLucideIcon("ConstructionIcon", [
  [
    "path",
    {
      d: "M21 6H3a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h18a1 1 0 0 0 1-1V7a1 1 0 0 0-1-1Z",
      key: "125jpv"
    }
  ],
  ["path", { d: "M17 14v7", key: "7m2elx" }],
  ["path", { d: "M7 14v7", key: "1cm7wv" }],
  ["path", { d: "M17 3v3", key: "1v4jwn" }],
  ["path", { d: "M7 3v3", key: "7o6guu" }],
  ["path", { d: "M2.5 6.5 10 14", key: "1rk4v9" }],
  ["path", { d: "m8 6 8 8", key: "hl96qh" }],
  ["path", { d: "m14 6 7.5 7.5", key: "vloqxw" }]
]);
const Contact = createLucideIcon("ContactIcon", [
  ["path", { d: "M17 18a2 2 0 0 0-2-2H9a2 2 0 0 0-2 2", key: "1mghuy" }],
  [
    "rect",
    { x: "3", y: "4", width: "18", height: "18", rx: "2", key: "12vinp" }
  ],
  ["circle", { cx: "12", cy: "10", r: "2", key: "1yojzk" }],
  ["line", { x1: "8", y1: "2", x2: "8", y2: "4", key: "1r8a5u" }],
  ["line", { x1: "16", y1: "2", x2: "16", y2: "4", key: "tp0trh" }]
]);
const Contrast = createLucideIcon("ContrastIcon", [
  ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
  ["path", { d: "M12 18a6 6 0 0 0 0-12v12z", key: "j4l70d" }]
]);
const Cookie = createLucideIcon("CookieIcon", [
  [
    "path",
    { d: "M12 2a10 10 0 1 0 10 10 4 4 0 0 1-5-5 4 4 0 0 1-5-5", key: "laymnq" }
  ],
  ["path", { d: "M8.5 8.5v.01", key: "ue8clq" }],
  ["path", { d: "M16 15.5v.01", key: "14dtrp" }],
  ["path", { d: "M12 12v.01", key: "u5ubse" }],
  ["path", { d: "M11 17v.01", key: "1hyl5a" }],
  ["path", { d: "M7 14v.01", key: "uct60s" }]
]);
const Copy = createLucideIcon("CopyIcon", [
  [
    "rect",
    {
      x: "9",
      y: "9",
      width: "13",
      height: "13",
      rx: "2",
      ry: "2",
      key: "1ma1o8"
    }
  ],
  [
    "path",
    {
      d: "M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1",
      key: "pklvoz"
    }
  ]
]);
const Copyleft = createLucideIcon("CopyleftIcon", [
  ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
  ["path", { d: "M9 9.35a4 4 0 1 1 0 5.3", key: "p8fkhi" }]
]);
const Copyright = createLucideIcon("CopyrightIcon", [
  ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
  ["path", { d: "M15 9.354a4 4 0 1 0 0 5.292", key: "8xfhbo" }]
]);
const CornerDownLeft = createLucideIcon("CornerDownLeftIcon", [
  ["polyline", { points: "9 10 4 15 9 20", key: "r3jprv" }],
  ["path", { d: "M20 4v7a4 4 0 0 1-4 4H4", key: "6o5b7l" }]
]);
const CornerDownRight = createLucideIcon("CornerDownRightIcon", [
  ["polyline", { points: "15 10 20 15 15 20", key: "1q7qjw" }],
  ["path", { d: "M4 4v7a4 4 0 0 0 4 4h12", key: "z08zvw" }]
]);
const CornerLeftDown = createLucideIcon("CornerLeftDownIcon", [
  ["polyline", { points: "14 15 9 20 4 15", key: "nkc4i" }],
  ["path", { d: "M20 4h-7a4 4 0 0 0-4 4v12", key: "nbpdq2" }]
]);
const CornerLeftUp = createLucideIcon("CornerLeftUpIcon", [
  ["polyline", { points: "14 9 9 4 4 9", key: "m9oyvo" }],
  ["path", { d: "M20 20h-7a4 4 0 0 1-4-4V4", key: "1blwi3" }]
]);
const CornerRightDown = createLucideIcon("CornerRightDownIcon", [
  ["polyline", { points: "10 15 15 20 20 15", key: "axus6l" }],
  ["path", { d: "M4 4h7a4 4 0 0 1 4 4v12", key: "wcbgct" }]
]);
const CornerRightUp = createLucideIcon("CornerRightUpIcon", [
  ["polyline", { points: "10 9 15 4 20 9", key: "1lr6px" }],
  ["path", { d: "M4 20h7a4 4 0 0 0 4-4V4", key: "1plgdj" }]
]);
const CornerUpLeft = createLucideIcon("CornerUpLeftIcon", [
  ["polyline", { points: "9 14 4 9 9 4", key: "881910" }],
  ["path", { d: "M20 20v-7a4 4 0 0 0-4-4H4", key: "1nkjon" }]
]);
const CornerUpRight = createLucideIcon("CornerUpRightIcon", [
  ["polyline", { points: "15 14 20 9 15 4", key: "1tbx3s" }],
  ["path", { d: "M4 20v-7a4 4 0 0 1 4-4h12", key: "1lu4f8" }]
]);
const Cpu = createLucideIcon("CpuIcon", [
  [
    "rect",
    {
      x: "4",
      y: "4",
      width: "16",
      height: "16",
      rx: "2",
      ry: "2",
      key: "19czt8"
    }
  ],
  ["rect", { x: "9", y: "9", width: "6", height: "6", key: "o3kz5p" }],
  ["line", { x1: "9", y1: "2", x2: "9", y2: "4", key: "1tcqwn" }],
  ["line", { x1: "15", y1: "2", x2: "15", y2: "4", key: "1yvlak" }],
  ["line", { x1: "9", y1: "21", x2: "9", y2: "22", key: "tuhu08" }],
  ["line", { x1: "15", y1: "20", x2: "15", y2: "22", key: "1o5cyu" }],
  ["line", { x1: "20", y1: "9", x2: "22", y2: "9", key: "b8rlm1" }],
  ["line", { x1: "20", y1: "14", x2: "22", y2: "14", key: "1mk8c1" }],
  ["line", { x1: "2", y1: "9", x2: "4", y2: "9", key: "bt7uvh" }],
  ["line", { x1: "2", y1: "14", x2: "4", y2: "14", key: "hp71sd" }]
]);
const CreativeCommons = createLucideIcon("CreativeCommonsIcon", [
  ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
  [
    "path",
    {
      d: "M10 9.3a2.8 2.8 0 0 0-3.5 1 3.1 3.1 0 0 0 0 3.4 2.7 2.7 0 0 0 3.5 1",
      key: "1ss3eq"
    }
  ],
  [
    "path",
    {
      d: "M17 9.3a2.8 2.8 0 0 0-3.5 1 3.1 3.1 0 0 0 0 3.4 2.7 2.7 0 0 0 3.5 1",
      key: "1od56t"
    }
  ]
]);
const CreditCard = createLucideIcon("CreditCardIcon", [
  [
    "rect",
    { x: "2", y: "5", width: "20", height: "14", rx: "2", key: "qneu4z" }
  ],
  ["line", { x1: "2", y1: "10", x2: "22", y2: "10", key: "1ytoly" }]
]);
const Croissant = createLucideIcon("CroissantIcon", [
  [
    "path",
    {
      d: "m4.6 13.11 5.79-3.21c1.89-1.05 4.79 1.78 3.71 3.71l-3.22 5.81C8.8 23.16.79 15.23 4.6 13.11Z",
      key: "1ozxlb"
    }
  ],
  [
    "path",
    {
      d: "m10.5 9.5-1-2.29C9.2 6.48 8.8 6 8 6H4.5C2.79 6 2 6.5 2 8.5a7.71 7.71 0 0 0 2 4.83",
      key: "ffuyb5"
    }
  ],
  ["path", { d: "M8 6c0-1.55.24-4-2-4-2 0-2.5 2.17-2.5 4", key: "osnpzi" }],
  [
    "path",
    {
      d: "m14.5 13.5 2.29 1c.73.3 1.21.7 1.21 1.5v3.5c0 1.71-.5 2.5-2.5 2.5a7.71 7.71 0 0 1-4.83-2",
      key: "1vubaw"
    }
  ],
  ["path", { d: "M18 16c1.55 0 4-.24 4 2 0 2-2.17 2.5-4 2.5", key: "wxr772" }]
]);
const Crop = createLucideIcon("CropIcon", [
  ["path", { d: "M6 2v14a2 2 0 0 0 2 2h14", key: "ron5a4" }],
  ["path", { d: "M18 22V8a2 2 0 0 0-2-2H2", key: "7s9ehn" }]
]);
const Cross = createLucideIcon("CrossIcon", [
  [
    "path",
    {
      d: "M11 2a2 2 0 0 0-2 2v5H4a2 2 0 0 0-2 2v2c0 1.1.9 2 2 2h5v5c0 1.1.9 2 2 2h2a2 2 0 0 0 2-2v-5h5a2 2 0 0 0 2-2v-2a2 2 0 0 0-2-2h-5V4a2 2 0 0 0-2-2h-2z",
      key: "1t5g7j"
    }
  ]
]);
const Crosshair = createLucideIcon("CrosshairIcon", [
  ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
  ["line", { x1: "22", y1: "12", x2: "18", y2: "12", key: "yivkn6" }],
  ["line", { x1: "6", y1: "12", x2: "2", y2: "12", key: "hlzxjj" }],
  ["line", { x1: "12", y1: "6", x2: "12", y2: "2", key: "1s1957" }],
  ["line", { x1: "12", y1: "22", x2: "12", y2: "18", key: "2x08zm" }]
]);
const Crown = createLucideIcon("CrownIcon", [
  ["path", { d: "m2 4 3 12h14l3-12-6 7-4-7-4 7-6-7zm3 16h14", key: "zkxr6b" }]
]);
const CupSoda = createLucideIcon("CupSodaIcon", [
  [
    "path",
    {
      d: "m6 8 1.75 12.28a2 2 0 0 0 2 1.72h4.54a2 2 0 0 0 2-1.72L18 8",
      key: "8166m8"
    }
  ],
  ["path", { d: "M5 8h14", key: "pcz4l3" }],
  [
    "path",
    { d: "M7 15a6.47 6.47 0 0 1 5 0 6.47 6.47 0 0 0 5 0", key: "yjz344" }
  ],
  ["path", { d: "m12 8 1-6h2", key: "3ybfa4" }]
]);
const CurlyBraces = createLucideIcon("CurlyBracesIcon", [
  [
    "path",
    {
      d: "M8 3H7a2 2 0 0 0-2 2v5a2 2 0 0 1-2 2 2 2 0 0 1 2 2v5c0 1.1.9 2 2 2h1",
      key: "ezmyqa"
    }
  ],
  [
    "path",
    {
      d: "M16 21h1a2 2 0 0 0 2-2v-5c0-1.1.9-2 2-2a2 2 0 0 1-2-2V5a2 2 0 0 0-2-2h-1",
      key: "e1hn23"
    }
  ]
]);
const Currency = createLucideIcon("CurrencyIcon", [
  ["circle", { cx: "12", cy: "12", r: "8", key: "46899m" }],
  ["line", { x1: "3", y1: "3", x2: "6", y2: "6", key: "zkqcdn" }],
  ["line", { x1: "21", y1: "3", x2: "18", y2: "6", key: "n7spic" }],
  ["line", { x1: "3", y1: "21", x2: "6", y2: "18", key: "7xq9ok" }],
  ["line", { x1: "21", y1: "21", x2: "18", y2: "18", key: "mzvtez" }]
]);
const DatabaseBackup = createLucideIcon("DatabaseBackupIcon", [
  ["ellipse", { cx: "12", cy: "5", rx: "9", ry: "3", key: "msslwz" }],
  ["path", { d: "M3 12c0 1.18 2.03 2.2 5 2.7", key: "ecdgp9" }],
  ["path", { d: "M21 5v4.5", key: "18xpbp" }],
  ["path", { d: "m12 16 1.27-1.35a4.75 4.75 0 1 1 .41 5.74", key: "1wi0wz" }],
  ["path", { d: "M12 12v4h4", key: "1bxaet" }],
  ["path", { d: "M3 5v14c0 1.43 2.97 2.63 7 2.93", key: "5qsoub" }]
]);
const Database = createLucideIcon("DatabaseIcon", [
  ["ellipse", { cx: "12", cy: "5", rx: "9", ry: "3", key: "msslwz" }],
  ["path", { d: "M21 12c0 1.66-4 3-9 3s-9-1.34-9-3", key: "pw5pse" }],
  ["path", { d: "M3 5v14c0 1.66 4 3 9 3s9-1.34 9-3V5", key: "7dtpbs" }]
]);
const Delete = createLucideIcon("DeleteIcon", [
  [
    "path",
    { d: "M20 5H9l-7 7 7 7h11a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2Z", key: "1oy587" }
  ],
  ["line", { x1: "18", y1: "9", x2: "12", y2: "15", key: "1328vg" }],
  ["line", { x1: "12", y1: "9", x2: "18", y2: "15", key: "6xbiik" }]
]);
const Diamond = createLucideIcon("DiamondIcon", [
  [
    "rect",
    {
      x: "12",
      y: "1",
      width: "15.56",
      height: "15.56",
      rx: "2.41",
      transform: "rotate(45 12 1)",
      key: "dtb0qj"
    }
  ]
]);
const Dice1 = createLucideIcon("Dice1Icon", [
  [
    "rect",
    {
      x: "3",
      y: "3",
      width: "18",
      height: "18",
      rx: "2",
      ry: "2",
      key: "maln0c"
    }
  ],
  ["path", { d: "M12 12h.01", key: "1mp3jc" }]
]);
const Dice2 = createLucideIcon("Dice2Icon", [
  [
    "rect",
    {
      x: "3",
      y: "3",
      width: "18",
      height: "18",
      rx: "2",
      ry: "2",
      key: "maln0c"
    }
  ],
  ["path", { d: "M15 9h.01", key: "x1ddxp" }],
  ["path", { d: "M9 15h.01", key: "fzyn71" }]
]);
const Dice3 = createLucideIcon("Dice3Icon", [
  [
    "rect",
    {
      x: "3",
      y: "3",
      width: "18",
      height: "18",
      rx: "2",
      ry: "2",
      key: "maln0c"
    }
  ],
  ["path", { d: "M16 8h.01", key: "cr5u4v" }],
  ["path", { d: "M12 12h.01", key: "1mp3jc" }],
  ["path", { d: "M8 16h.01", key: "18s6g9" }]
]);
const Dice4 = createLucideIcon("Dice4Icon", [
  [
    "rect",
    {
      x: "3",
      y: "3",
      width: "18",
      height: "18",
      rx: "2",
      ry: "2",
      key: "maln0c"
    }
  ],
  ["path", { d: "M16 8h.01", key: "cr5u4v" }],
  ["path", { d: "M8 8h.01", key: "1e4136" }],
  ["path", { d: "M8 16h.01", key: "18s6g9" }],
  ["path", { d: "M16 16h.01", key: "1f9h7w" }]
]);
const Dice5 = createLucideIcon("Dice5Icon", [
  [
    "rect",
    {
      x: "3",
      y: "3",
      width: "18",
      height: "18",
      rx: "2",
      ry: "2",
      key: "maln0c"
    }
  ],
  ["path", { d: "M16 8h.01", key: "cr5u4v" }],
  ["path", { d: "M8 8h.01", key: "1e4136" }],
  ["path", { d: "M8 16h.01", key: "18s6g9" }],
  ["path", { d: "M16 16h.01", key: "1f9h7w" }],
  ["path", { d: "M12 12h.01", key: "1mp3jc" }]
]);
const Dice6 = createLucideIcon("Dice6Icon", [
  [
    "rect",
    {
      x: "3",
      y: "3",
      width: "18",
      height: "18",
      rx: "2",
      ry: "2",
      key: "maln0c"
    }
  ],
  ["path", { d: "M16 8h.01", key: "cr5u4v" }],
  ["path", { d: "M16 12h.01", key: "1l6xoz" }],
  ["path", { d: "M16 16h.01", key: "1f9h7w" }],
  ["path", { d: "M8 8h.01", key: "1e4136" }],
  ["path", { d: "M8 12h.01", key: "czm47f" }],
  ["path", { d: "M8 16h.01", key: "18s6g9" }]
]);
const Dices = createLucideIcon("DicesIcon", [
  [
    "rect",
    {
      x: "2",
      y: "10",
      width: "12",
      height: "12",
      rx: "2",
      ry: "2",
      key: "73wp2n"
    }
  ],
  [
    "path",
    {
      d: "m17.92 14 3.5-3.5a2.24 2.24 0 0 0 0-3l-5-4.92a2.24 2.24 0 0 0-3 0L10 6",
      key: "1o487t"
    }
  ],
  ["path", { d: "M6 18h.01", key: "uhywen" }],
  ["path", { d: "M10 14h.01", key: "ssrbsk" }],
  ["path", { d: "M15 6h.01", key: "cblpky" }],
  ["path", { d: "M18 9h.01", key: "2061c0" }]
]);
const Diff = createLucideIcon("DiffIcon", [
  ["path", { d: "M12 3v14", key: "7cf3v8" }],
  ["path", { d: "M5 10h14", key: "elsbfy" }],
  ["path", { d: "M5 21h14", key: "11awu3" }]
]);
const Disc = createLucideIcon("DiscIcon", [
  ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
  ["circle", { cx: "12", cy: "12", r: "3", key: "1v7zrd" }]
]);
const DivideCircle = createLucideIcon("DivideCircleIcon", [
  ["line", { x1: "8", y1: "12", x2: "16", y2: "12", key: "1myapg" }],
  ["line", { x1: "12", y1: "16", x2: "12", y2: "16", key: "4v5xkb" }],
  ["line", { x1: "12", y1: "8", x2: "12", y2: "8", key: "1vrb7x" }],
  ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }]
]);
const DivideSquare = createLucideIcon("DivideSquareIcon", [
  [
    "rect",
    {
      x: "3",
      y: "3",
      width: "18",
      height: "18",
      rx: "2",
      ry: "2",
      key: "maln0c"
    }
  ],
  ["line", { x1: "8", y1: "12", x2: "16", y2: "12", key: "1myapg" }],
  ["line", { x1: "12", y1: "16", x2: "12", y2: "16", key: "4v5xkb" }],
  ["line", { x1: "12", y1: "8", x2: "12", y2: "8", key: "1vrb7x" }]
]);
const Divide = createLucideIcon("DivideIcon", [
  ["circle", { cx: "12", cy: "6", r: "1", key: "1bh7o1" }],
  ["line", { x1: "5", y1: "12", x2: "19", y2: "12", key: "1smlys" }],
  ["circle", { cx: "12", cy: "18", r: "1", key: "lqb9t5" }]
]);
const DnaOff = createLucideIcon("DnaOffIcon", [
  [
    "path",
    {
      d: "M15 2c-1.35 1.5-2.092 3-2.5 4.5M9 22c1.35-1.5 2.092-3 2.5-4.5",
      key: "sxiaad"
    }
  ],
  [
    "path",
    {
      d: "M2 15c3.333-3 6.667-3 10-3m10-3c-1.5 1.35-3 2.092-4.5 2.5",
      key: "yn4bs1"
    }
  ],
  ["path", { d: "m17 6-2.5-2.5", key: "5cdfhj" }],
  ["path", { d: "m14 8-1.5-1.5", key: "1ohn8i" }],
  ["path", { d: "m7 18 2.5 2.5", key: "16tu1a" }],
  ["path", { d: "m3.5 14.5.5.5", key: "hapbhd" }],
  ["path", { d: "m20 9 .5.5", key: "1n7z02" }],
  ["path", { d: "m6.5 12.5 1 1", key: "cs35ky" }],
  ["path", { d: "m16.5 10.5 1 1", key: "696xn5" }],
  ["path", { d: "m10 16 1.5 1.5", key: "11lckj" }],
  ["line", { x1: "2", y1: "2", x2: "22", y2: "22", key: "1w4vcy" }]
]);
const Dna = createLucideIcon("DnaIcon", [
  ["path", { d: "M2 15c6.667-6 13.333 0 20-6", key: "1pyr53" }],
  ["path", { d: "M9 22c1.798-1.998 2.518-3.995 2.807-5.993", key: "q3hbxp" }],
  ["path", { d: "M15 2c-1.798 1.998-2.518 3.995-2.807 5.993", key: "80uv8i" }],
  ["path", { d: "m17 6-2.5-2.5", key: "5cdfhj" }],
  ["path", { d: "m14 8-1-1", key: "15nbz5" }],
  ["path", { d: "m7 18 2.5 2.5", key: "16tu1a" }],
  ["path", { d: "m3.5 14.5.5.5", key: "hapbhd" }],
  ["path", { d: "m20 9 .5.5", key: "1n7z02" }],
  ["path", { d: "m6.5 12.5 1 1", key: "cs35ky" }],
  ["path", { d: "m16.5 10.5 1 1", key: "696xn5" }],
  ["path", { d: "m10 16 1.5 1.5", key: "11lckj" }]
]);
const Dog = createLucideIcon("DogIcon", [
  [
    "path",
    {
      d: "M10 5.172C10 3.782 8.423 2.679 6.5 3c-2.823.47-4.113 6.006-4 7 .08.703 1.725 1.722 3.656 1 1.261-.472 1.96-1.45 2.344-2.5",
      key: "19br0u"
    }
  ],
  [
    "path",
    {
      d: "M14.267 5.172c0-1.39 1.577-2.493 3.5-2.172 2.823.47 4.113 6.006 4 7-.08.703-1.725 1.722-3.656 1-1.261-.472-1.855-1.45-2.239-2.5",
      key: "11n1an"
    }
  ],
  ["path", { d: "M8 14v.5", key: "1nzgdb" }],
  ["path", { d: "M16 14v.5", key: "1lajdz" }],
  ["path", { d: "M11.25 16.25h1.5L12 17l-.75-.75Z", key: "12kq1m" }],
  [
    "path",
    {
      d: "M4.42 11.247A13.152 13.152 0 0 0 4 14.556C4 18.728 7.582 21 12 21s8-2.272 8-6.444c0-1.061-.162-2.2-.493-3.309m-9.243-6.082A8.801 8.801 0 0 1 12 5c.78 0 1.5.108 2.161.306",
      key: "wsu29d"
    }
  ]
]);
const DollarSign = createLucideIcon("DollarSignIcon", [
  ["line", { x1: "12", y1: "2", x2: "12", y2: "22", key: "1k6o5o" }],
  [
    "path",
    { d: "M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6", key: "1b0p4s" }
  ]
]);
const DownloadCloud = createLucideIcon("DownloadCloudIcon", [
  [
    "path",
    {
      d: "M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242",
      key: "1pljnt"
    }
  ],
  ["path", { d: "M12 12v9", key: "192myk" }],
  ["path", { d: "m8 17 4 4 4-4", key: "1ul180" }]
]);
const Download2 = createLucideIcon("DownloadIcon", [
  ["path", { d: "M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4", key: "ih7n3h" }],
  ["polyline", { points: "7 10 12 15 17 10", key: "2ggqvy" }],
  ["line", { x1: "12", y1: "15", x2: "12", y2: "3", key: "nqo27w" }]
]);
const Dribbble = createLucideIcon("DribbbleIcon", [
  ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
  ["path", { d: "M19.13 5.09C15.22 9.14 10 10.44 2.25 10.94", key: "hpej1" }],
  ["path", { d: "M21.75 12.84c-6.62-1.41-12.14 1-16.38 6.32", key: "1tr44o" }],
  ["path", { d: "M8.56 2.75c4.37 6 6 9.42 8 17.72", key: "kbh691" }]
]);
const Droplet = createLucideIcon("DropletIcon", [
  [
    "path",
    {
      d: "M12 22a7 7 0 0 0 7-7c0-2-1-3.9-3-5.5s-3.5-4-4-6.5c-.5 2.5-2 4.9-4 6.5C6 11.1 5 13 5 15a7 7 0 0 0 7 7z",
      key: "c7niix"
    }
  ]
]);
const Droplets = createLucideIcon("DropletsIcon", [
  [
    "path",
    {
      d: "M7 16.3c2.2 0 4-1.83 4-4.05 0-1.16-.57-2.26-1.71-3.19S7.29 6.75 7 5.3c-.29 1.45-1.14 2.84-2.29 3.76S3 11.1 3 12.25c0 2.22 1.8 4.05 4 4.05z",
      key: "1ptgy4"
    }
  ],
  [
    "path",
    {
      d: "M12.56 6.6A10.97 10.97 0 0 0 14 3.02c.5 2.5 2 4.9 4 6.5s3 3.5 3 5.5a6.98 6.98 0 0 1-11.91 4.97",
      key: "1sl1rz"
    }
  ]
]);
const Drumstick = createLucideIcon("DrumstickIcon", [
  [
    "path",
    {
      d: "M15.45 15.4c-2.13.65-4.3.32-5.7-1.1-2.29-2.27-1.76-6.5 1.17-9.42 2.93-2.93 7.15-3.46 9.43-1.18 1.41 1.41 1.74 3.57 1.1 5.71-1.4-.51-3.26-.02-4.64 1.36-1.38 1.38-1.87 3.23-1.36 4.63z",
      key: "1o96s0"
    }
  ],
  [
    "path",
    {
      d: "m11.25 15.6-2.16 2.16a2.5 2.5 0 1 1-4.56 1.73 2.49 2.49 0 0 1-1.41-4.24 2.5 2.5 0 0 1 3.14-.32l2.16-2.16",
      key: "14vv5h"
    }
  ]
]);
const Dumbbell = createLucideIcon("DumbbellIcon", [
  ["path", { d: "m6.5 6.5 11 11", key: "f7oqzb" }],
  ["path", { d: "m21 21-1-1", key: "cpc6if" }],
  ["path", { d: "m3 3 1 1", key: "d3rpuf" }],
  ["path", { d: "m18 22 4-4", key: "1e32o6" }],
  ["path", { d: "m2 6 4-4", key: "189tqz" }],
  ["path", { d: "m3 10 7-7", key: "1bxui2" }],
  ["path", { d: "m14 21 7-7", key: "16x78n" }]
]);
const EarOff = createLucideIcon("EarOffIcon", [
  [
    "path",
    { d: "M6 18.5a3.5 3.5 0 1 0 7 0c0-1.57.92-2.52 2.04-3.46", key: "1qngmn" }
  ],
  ["path", { d: "M6 8.5c0-.75.13-1.47.36-2.14", key: "b06bma" }],
  [
    "path",
    {
      d: "M8.8 3.15A6.5 6.5 0 0 1 19 8.5c0 1.63-.44 2.81-1.09 3.76",
      key: "g10hsz"
    }
  ],
  [
    "path",
    {
      d: "M12.5 6A2.5 2.5 0 0 1 15 8.5M10 13a2 2 0 0 0 1.82-1.18",
      key: "ygzou7"
    }
  ],
  ["line", { x1: "2", y1: "2", x2: "22", y2: "22", key: "1w4vcy" }]
]);
const Ear = createLucideIcon("EarIcon", [
  [
    "path",
    {
      d: "M6 8.5a6.5 6.5 0 1 1 13 0c0 6-6 6-6 10a3.5 3.5 0 1 1-7 0",
      key: "1dfaln"
    }
  ],
  ["path", { d: "M15 8.5a2.5 2.5 0 0 0-5 0v1a2 2 0 1 1 0 4", key: "1qnva7" }]
]);
const Edit2 = createLucideIcon("Edit2Icon", [
  [
    "path",
    {
      d: "M17 3a2.828 2.828 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5L17 3z",
      key: "2s2c1q"
    }
  ]
]);
const Edit3 = createLucideIcon("Edit3Icon", [
  ["path", { d: "M12 20h9", key: "t2du7b" }],
  [
    "path",
    {
      d: "M16.5 3.5a2.121 2.121 0 0 1 3 3L7 19l-4 1 1-4L16.5 3.5z",
      key: "18w55b"
    }
  ]
]);
const Edit4 = createLucideIcon("EditIcon", [
  [
    "path",
    {
      d: "M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7",
      key: "1qinfi"
    }
  ],
  [
    "path",
    {
      d: "M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z",
      key: "1cs3r3"
    }
  ]
]);
const EggFried = createLucideIcon("EggFriedIcon", [
  ["circle", { cx: "11.5", cy: "12.5", r: "3.5", key: "1cl1mi" }],
  [
    "path",
    {
      d: "M3 8c0-3.5 2.5-6 6.5-6 5 0 4.83 3 7.5 5s5 2 5 6c0 4.5-2.5 6.5-7 6.5-2.5 0-2.5 2.5-6 2.5s-7-2-7-5.5c0-3 1.5-3 1.5-5C3.5 10 3 9 3 8Z",
      key: "165ef9"
    }
  ]
]);
const EggOff = createLucideIcon("EggOffIcon", [
  [
    "path",
    {
      d: "M6.399 6.399C5.362 8.157 4.65 10.189 4.5 12c-.37 4.43 1.27 9.95 7.5 10 3.256-.026 5.259-1.547 6.375-3.625",
      key: "6et380"
    }
  ],
  [
    "path",
    {
      d: "M19.532 13.875A14.07 14.07 0 0 0 19.5 12c-.36-4.34-3.95-9.96-7.5-10-1.04.012-2.082.502-3.046 1.297",
      key: "gcdc3f"
    }
  ],
  ["line", { x1: "2", y1: "2", x2: "22", y2: "22", key: "1w4vcy" }]
]);
const Egg = createLucideIcon("EggIcon", [
  [
    "path",
    {
      d: "M12 22c6.23-.05 7.87-5.57 7.5-10-.36-4.34-3.95-9.96-7.5-10-3.55.04-7.14 5.66-7.5 10-.37 4.43 1.27 9.95 7.5 10z",
      key: "1c39pg"
    }
  ]
]);
const EqualNot = createLucideIcon("EqualNotIcon", [
  ["line", { x1: "5", y1: "9", x2: "19", y2: "9", key: "p612hi" }],
  ["line", { x1: "5", y1: "15", x2: "19", y2: "15", key: "e39u1i" }],
  ["line", { x1: "19", y1: "5", x2: "5", y2: "19", key: "t1677v" }]
]);
const Equal = createLucideIcon("EqualIcon", [
  ["line", { x1: "5", y1: "9", x2: "19", y2: "9", key: "p612hi" }],
  ["line", { x1: "5", y1: "15", x2: "19", y2: "15", key: "e39u1i" }]
]);
const Eraser = createLucideIcon("EraserIcon", [
  [
    "path",
    {
      d: "m7 21-4.3-4.3c-1-1-1-2.5 0-3.4l9.6-9.6c1-1 2.5-1 3.4 0l5.6 5.6c1 1 1 2.5 0 3.4L13 21",
      key: "182aya"
    }
  ],
  ["path", { d: "M22 21H7", key: "t4ddhn" }],
  ["path", { d: "m5 11 9 9", key: "1mo9qw" }]
]);
const Euro = createLucideIcon("EuroIcon", [
  ["path", { d: "M4 10h12", key: "1y6xl8" }],
  ["path", { d: "M4 14h9", key: "1loblj" }],
  [
    "path",
    {
      d: "M19 6a7.7 7.7 0 0 0-5.2-2A7.9 7.9 0 0 0 6 12c0 4.4 3.5 8 7.8 8 2 0 3.8-.8 5.2-2",
      key: "1j6lzo"
    }
  ]
]);
const Expand = createLucideIcon("ExpandIcon", [
  ["path", { d: "m21 21-6-6m6 6v-4.8m0 4.8h-4.8", key: "1c15vz" }],
  ["path", { d: "M3 16.2V21m0 0h4.8M3 21l6-6", key: "1fsnz2" }],
  ["path", { d: "M21 7.8V3m0 0h-4.8M21 3l-6 6", key: "hawz9i" }],
  ["path", { d: "M3 7.8V3m0 0h4.8M3 3l6 6", key: "u9ee12" }]
]);
const ExternalLink = createLucideIcon("ExternalLinkIcon", [
  [
    "path",
    {
      d: "M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6",
      key: "a6xqqp"
    }
  ],
  ["polyline", { points: "15 3 21 3 21 9", key: "mznyad" }],
  ["line", { x1: "10", y1: "14", x2: "21", y2: "3", key: "19d9un" }]
]);
const EyeOff = createLucideIcon("EyeOffIcon", [
  ["path", { d: "M9.88 9.88a3 3 0 1 0 4.24 4.24", key: "1jxqfv" }],
  [
    "path",
    {
      d: "M10.73 5.08A10.43 10.43 0 0 1 12 5c7 0 10 7 10 7a13.16 13.16 0 0 1-1.67 2.68",
      key: "9wicm4"
    }
  ],
  [
    "path",
    {
      d: "M6.61 6.61A13.526 13.526 0 0 0 2 12s3 7 10 7a9.74 9.74 0 0 0 5.39-1.61",
      key: "1jreej"
    }
  ],
  ["line", { x1: "2", y1: "2", x2: "22", y2: "22", key: "1w4vcy" }]
]);
const Eye = createLucideIcon("EyeIcon", [
  [
    "path",
    { d: "M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7Z", key: "rwhkz3" }
  ],
  ["circle", { cx: "12", cy: "12", r: "3", key: "1v7zrd" }]
]);
const Facebook = createLucideIcon("FacebookIcon", [
  [
    "path",
    {
      d: "M18 2h-3a5 5 0 0 0-5 5v3H7v4h3v8h4v-8h3l1-4h-4V7a1 1 0 0 1 1-1h3z",
      key: "1jg4f8"
    }
  ]
]);
const Factory = createLucideIcon("FactoryIcon", [
  [
    "path",
    {
      d: "M2 20a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V8l-7 5V8l-7 5V4a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2Z",
      key: "159hny"
    }
  ],
  ["path", { d: "M17 18h1", key: "uldtlt" }],
  ["path", { d: "M12 18h1", key: "s9uhes" }],
  ["path", { d: "M7 18h1", key: "1neino" }]
]);
const Fan = createLucideIcon("FanIcon", [
  [
    "path",
    {
      d: "M10.827 16.379a6.082 6.082 0 0 1-8.618-7.002l5.412 1.45a6.082 6.082 0 0 1 7.002-8.618l-1.45 5.412a6.082 6.082 0 0 1 8.618 7.002l-5.412-1.45a6.082 6.082 0 0 1-7.002 8.618l1.45-5.412Z",
      key: "484a7f"
    }
  ],
  ["path", { d: "M12 12v.01", key: "u5ubse" }]
]);
const FastForward = createLucideIcon("FastForwardIcon", [
  ["polygon", { points: "13 19 22 12 13 5 13 19", key: "587y9g" }],
  ["polygon", { points: "2 19 11 12 2 5 2 19", key: "3pweh0" }]
]);
const Feather = createLucideIcon("FeatherIcon", [
  [
    "path",
    { d: "M20.24 12.24a6 6 0 0 0-8.49-8.49L5 10.5V19h8.5z", key: "u4sw5n" }
  ],
  ["line", { x1: "16", y1: "8", x2: "2", y2: "22", key: "ay4g5i" }],
  ["line", { x1: "17.5", y1: "15", x2: "9", y2: "15", key: "c4zw0f" }]
]);
const Figma = createLucideIcon("FigmaIcon", [
  [
    "path",
    {
      d: "M5 5.5A3.5 3.5 0 0 1 8.5 2H12v7H8.5A3.5 3.5 0 0 1 5 5.5z",
      key: "1340ok"
    }
  ],
  ["path", { d: "M12 2h3.5a3.5 3.5 0 1 1 0 7H12V2z", key: "1hz3m3" }],
  [
    "path",
    { d: "M12 12.5a3.5 3.5 0 1 1 7 0 3.5 3.5 0 1 1-7 0z", key: "1oz8n2" }
  ],
  [
    "path",
    {
      d: "M5 19.5A3.5 3.5 0 0 1 8.5 16H12v3.5a3.5 3.5 0 1 1-7 0z",
      key: "1ff65i"
    }
  ],
  [
    "path",
    {
      d: "M5 12.5A3.5 3.5 0 0 1 8.5 9H12v7H8.5A3.5 3.5 0 0 1 5 12.5z",
      key: "pdip6e"
    }
  ]
]);
const FileArchive = createLucideIcon("FileArchiveIcon", [
  [
    "path",
    {
      d: "M4 22V4c0-.5.2-1 .6-1.4C5 2.2 5.5 2 6 2h8.5L20 7.5V20c0 .5-.2 1-.6 1.4-.4.4-.9.6-1.4.6h-2",
      key: "1u864v"
    }
  ],
  ["polyline", { points: "14 2 14 8 20 8", key: "1ew0cm" }],
  ["circle", { cx: "10", cy: "20", r: "2", key: "1xzdoj" }],
  ["path", { d: "M10 7V6", key: "dljcrl" }],
  ["path", { d: "M10 12v-1", key: "v7bkov" }],
  ["path", { d: "M10 18v-2", key: "1cjy8d" }]
]);
const FileAudio2 = createLucideIcon("FileAudio2Icon", [
  [
    "path",
    { d: "M4 22h14a2 2 0 0 0 2-2V7.5L14.5 2H6a2 2 0 0 0-2 2v2", key: "fkyf72" }
  ],
  ["polyline", { points: "14 2 14 8 20 8", key: "1ew0cm" }],
  ["path", { d: "M2 17v-3a4 4 0 0 1 8 0v3", key: "1ggdre" }],
  ["circle", { cx: "9", cy: "17", r: "1", key: "bc1fq4" }],
  ["circle", { cx: "3", cy: "17", r: "1", key: "vo6nti" }]
]);
const FileAudio = createLucideIcon("FileAudioIcon", [
  [
    "path",
    {
      d: "M17.5 22h.5c.5 0 1-.2 1.4-.6.4-.4.6-.9.6-1.4V7.5L14.5 2H6c-.5 0-1 .2-1.4.6C4.2 3 4 3.5 4 4v3",
      key: "1013sb"
    }
  ],
  ["polyline", { points: "14 2 14 8 20 8", key: "1ew0cm" }],
  ["path", { d: "M10 20v-1a2 2 0 1 1 4 0v1a2 2 0 1 1-4 0Z", key: "gqt63y" }],
  ["path", { d: "M6 20v-1a2 2 0 1 0-4 0v1a2 2 0 1 0 4 0Z", key: "cf7lqx" }],
  ["path", { d: "M2 19v-3a6 6 0 0 1 12 0v3", key: "1acxgf" }]
]);
const FileAxis3d = createLucideIcon("FileAxis3dIcon", [
  [
    "path",
    {
      d: "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z",
      key: "1nnpy2"
    }
  ],
  ["polyline", { points: "14 2 14 8 20 8", key: "1ew0cm" }],
  ["path", { d: "M8 10v8h8", key: "tlaukw" }],
  ["path", { d: "m8 18 4-4", key: "12zab0" }]
]);
const FileBadge2 = createLucideIcon("FileBadge2Icon", [
  [
    "path",
    {
      d: "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z",
      key: "1nnpy2"
    }
  ],
  ["path", { d: "M12 13a3 3 0 1 0 0-6 3 3 0 0 0 0 6Z", key: "13rien" }],
  ["path", { d: "m14 12.5 1 5.5-3-1-3 1 1-5.5", key: "14xlky" }]
]);
const FileBadge = createLucideIcon("FileBadgeIcon", [
  [
    "path",
    { d: "M4 7V4a2 2 0 0 1 2-2h8.5L20 7.5V20a2 2 0 0 1-2 2h-6", key: "qtddq0" }
  ],
  ["polyline", { points: "14 2 14 8 20 8", key: "1ew0cm" }],
  ["path", { d: "M5 17a3 3 0 1 0 0-6 3 3 0 0 0 0 6Z", key: "u0c8gj" }],
  ["path", { d: "M7 16.5 8 22l-3-1-3 1 1-5.5", key: "5gm2nr" }]
]);
const FileBarChart2 = createLucideIcon("FileBarChart2Icon", [
  [
    "path",
    {
      d: "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z",
      key: "1nnpy2"
    }
  ],
  ["polyline", { points: "14 2 14 8 20 8", key: "1ew0cm" }],
  ["path", { d: "M12 18v-6", key: "17g6i2" }],
  ["path", { d: "M8 18v-1", key: "zg0ygc" }],
  ["path", { d: "M16 18v-3", key: "j5jt4h" }]
]);
const FileBarChart = createLucideIcon("FileBarChartIcon", [
  [
    "path",
    {
      d: "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z",
      key: "1nnpy2"
    }
  ],
  ["polyline", { points: "14 2 14 8 20 8", key: "1ew0cm" }],
  ["path", { d: "M12 18v-4", key: "q1q25u" }],
  ["path", { d: "M8 18v-2", key: "qcmpov" }],
  ["path", { d: "M16 18v-6", key: "15y0np" }]
]);
const FileBox = createLucideIcon("FileBoxIcon", [
  [
    "path",
    {
      d: "M14.5 22H18a2 2 0 0 0 2-2V7.5L14.5 2H6a2 2 0 0 0-2 2v4",
      key: "h7jej2"
    }
  ],
  ["polyline", { points: "14 2 14 8 20 8", key: "1ew0cm" }],
  [
    "path",
    {
      d: "M2.97 13.12c-.6.36-.97 1.02-.97 1.74v3.28c0 .72.37 1.38.97 1.74l3 1.83c.63.39 1.43.39 2.06 0l3-1.83c.6-.36.97-1.02.97-1.74v-3.28c0-.72-.37-1.38-.97-1.74l-3-1.83a1.97 1.97 0 0 0-2.06 0l-3 1.83Z",
      key: "f4a3oc"
    }
  ],
  ["path", { d: "m7 17-4.74-2.85", key: "etm6su" }],
  ["path", { d: "m7 17 4.74-2.85", key: "5xuooz" }],
  ["path", { d: "M7 17v5", key: "1yj1jh" }]
]);
const FileCheck2 = createLucideIcon("FileCheck2Icon", [
  [
    "path",
    { d: "M4 22h14a2 2 0 0 0 2-2V7.5L14.5 2H6a2 2 0 0 0-2 2v4", key: "702lig" }
  ],
  ["polyline", { points: "14 2 14 8 20 8", key: "1ew0cm" }],
  ["path", { d: "m3 15 2 2 4-4", key: "1lhrkk" }]
]);
const FileCheck = createLucideIcon("FileCheckIcon", [
  [
    "path",
    {
      d: "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z",
      key: "1nnpy2"
    }
  ],
  ["polyline", { points: "14 2 14 8 20 8", key: "1ew0cm" }],
  ["path", { d: "m9 15 2 2 4-4", key: "1grp1n" }]
]);
const FileClock = createLucideIcon("FileClockIcon", [
  [
    "path",
    {
      d: "M16 22h2c.5 0 1-.2 1.4-.6.4-.4.6-.9.6-1.4V7.5L14.5 2H6c-.5 0-1 .2-1.4.6C4.2 3 4 3.5 4 4v3",
      key: "9lo3o3"
    }
  ],
  ["polyline", { points: "14 2 14 8 20 8", key: "1ew0cm" }],
  ["circle", { cx: "8", cy: "16", r: "6", key: "10v15b" }],
  ["path", { d: "M9.5 17.5 8 16.25V14", key: "1o80t2" }]
]);
const FileCode = createLucideIcon("FileCodeIcon", [
  [
    "path",
    { d: "M4 22h14a2 2 0 0 0 2-2V7.5L14.5 2H6a2 2 0 0 0-2 2v4", key: "702lig" }
  ],
  ["polyline", { points: "14 2 14 8 20 8", key: "1ew0cm" }],
  ["path", { d: "m9 18 3-3-3-3", key: "112psh" }],
  ["path", { d: "m5 12-3 3 3 3", key: "oke12k" }]
]);
const FileCog2 = createLucideIcon("FileCog2Icon", [
  [
    "path",
    {
      d: "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z",
      key: "1nnpy2"
    }
  ],
  ["polyline", { points: "14 2 14 8 20 8", key: "1ew0cm" }],
  ["circle", { cx: "12", cy: "15", r: "2", key: "1vpstw" }],
  ["path", { d: "M12 12v1", key: "1vuyxr" }],
  ["path", { d: "M12 17v1", key: "y8y3f9" }],
  ["path", { d: "m14.6 13.5-.87.5", key: "nomeg4" }],
  ["path", { d: "m10.27 16-.87.5", key: "1o8v95" }],
  ["path", { d: "m14.6 16.5-.87-.5", key: "gzu2jw" }],
  ["path", { d: "m10.27 14-.87-.5", key: "1vlkk3" }]
]);
const FileCog = createLucideIcon("FileCogIcon", [
  [
    "path",
    { d: "M4 6V4a2 2 0 0 1 2-2h8.5L20 7.5V20a2 2 0 0 1-2 2H4", key: "dba9qu" }
  ],
  ["polyline", { points: "14 2 14 8 20 8", key: "1ew0cm" }],
  ["circle", { cx: "6", cy: "14", r: "3", key: "a1xfv6" }],
  ["path", { d: "M6 10v1", key: "xs0f9j" }],
  ["path", { d: "M6 17v1", key: "idyhc0" }],
  ["path", { d: "M10 14H9", key: "m5fm2q" }],
  ["path", { d: "M3 14H2", key: "19ot09" }],
  ["path", { d: "m9 11-.88.88", key: "lhul2b" }],
  ["path", { d: "M3.88 16.12 3 17", key: "169z9n" }],
  ["path", { d: "m9 17-.88-.88", key: "5io96w" }],
  ["path", { d: "M3.88 11.88 3 11", key: "1ynhy1" }]
]);
const FileDiff = createLucideIcon("FileDiffIcon", [
  [
    "path",
    {
      d: "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z",
      key: "1nnpy2"
    }
  ],
  ["path", { d: "M12 13V7", key: "h0r20n" }],
  ["path", { d: "M9 10h6", key: "9gxzsh" }],
  ["path", { d: "M9 17h6", key: "r8uit2" }]
]);
const FileDigit = createLucideIcon("FileDigitIcon", [
  [
    "path",
    { d: "M4 22h14a2 2 0 0 0 2-2V7.5L14.5 2H6a2 2 0 0 0-2 2v4", key: "702lig" }
  ],
  ["polyline", { points: "14 2 14 8 20 8", key: "1ew0cm" }],
  ["path", { d: "M10 12h2v6", key: "12zw74" }],
  ["rect", { x: "2", y: "12", width: "4", height: "6", key: "kg2lqm" }],
  ["path", { d: "M10 18h4", key: "1ulq68" }]
]);
const FileDown = createLucideIcon("FileDownIcon", [
  [
    "path",
    {
      d: "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z",
      key: "1nnpy2"
    }
  ],
  ["polyline", { points: "14 2 14 8 20 8", key: "1ew0cm" }],
  ["path", { d: "M12 18v-6", key: "17g6i2" }],
  ["path", { d: "m9 15 3 3 3-3", key: "1npd3o" }]
]);
const FileEdit = createLucideIcon("FileEditIcon", [
  [
    "path",
    {
      d: "M4 13.5V4a2 2 0 0 1 2-2h8.5L20 7.5V20a2 2 0 0 1-2 2h-5.5",
      key: "1bg6eb"
    }
  ],
  ["polyline", { points: "14 2 14 8 20 8", key: "1ew0cm" }],
  [
    "path",
    {
      d: "M10.42 12.61a2.1 2.1 0 1 1 2.97 2.97L7.95 21 4 22l.99-3.95 5.43-5.44Z",
      key: "1rgxu8"
    }
  ]
]);
const FileHeart = createLucideIcon("FileHeartIcon", [
  [
    "path",
    { d: "M4 6V4a2 2 0 0 1 2-2h8.5L20 7.5V20a2 2 0 0 1-2 2H4", key: "dba9qu" }
  ],
  ["polyline", { points: "14 2 14 8 20 8", key: "1ew0cm" }],
  [
    "path",
    {
      d: "M10.29 10.7a2.43 2.43 0 0 0-2.66-.52c-.29.12-.56.3-.78.53l-.35.34-.35-.34a2.43 2.43 0 0 0-2.65-.53c-.3.12-.56.3-.79.53-.95.94-1 2.53.2 3.74L6.5 18l3.6-3.55c1.2-1.21 1.14-2.8.19-3.74Z",
      key: "1c1fso"
    }
  ]
]);
const FileImage = createLucideIcon("FileImageIcon", [
  [
    "path",
    {
      d: "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z",
      key: "1nnpy2"
    }
  ],
  ["polyline", { points: "14 2 14 8 20 8", key: "1ew0cm" }],
  ["circle", { cx: "10", cy: "13", r: "2", key: "6v46hv" }],
  ["path", { d: "m20 17-1.09-1.09a2 2 0 0 0-2.82 0L10 22", key: "17vly1" }]
]);
const FileInput = createLucideIcon("FileInputIcon", [
  [
    "path",
    { d: "M4 22h14a2 2 0 0 0 2-2V7.5L14.5 2H6a2 2 0 0 0-2 2v4", key: "702lig" }
  ],
  ["polyline", { points: "14 2 14 8 20 8", key: "1ew0cm" }],
  ["path", { d: "M2 15h10", key: "jfw4w8" }],
  ["path", { d: "m9 18 3-3-3-3", key: "112psh" }]
]);
const FileJson2 = createLucideIcon("FileJson2Icon", [
  [
    "path",
    { d: "M4 22h14a2 2 0 0 0 2-2V7.5L14.5 2H6a2 2 0 0 0-2 2v4", key: "702lig" }
  ],
  ["polyline", { points: "14 2 14 8 20 8", key: "1ew0cm" }],
  [
    "path",
    {
      d: "M4 12a1 1 0 0 0-1 1v1a1 1 0 0 1-1 1 1 1 0 0 1 1 1v1a1 1 0 0 0 1 1",
      key: "fq0c9t"
    }
  ],
  [
    "path",
    {
      d: "M8 18a1 1 0 0 0 1-1v-1a1 1 0 0 1 1-1 1 1 0 0 1-1-1v-1a1 1 0 0 0-1-1",
      key: "4gibmv"
    }
  ]
]);
const FileJson = createLucideIcon("FileJsonIcon", [
  [
    "path",
    {
      d: "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z",
      key: "1nnpy2"
    }
  ],
  ["polyline", { points: "14 2 14 8 20 8", key: "1ew0cm" }],
  [
    "path",
    {
      d: "M10 12a1 1 0 0 0-1 1v1a1 1 0 0 1-1 1 1 1 0 0 1 1 1v1a1 1 0 0 0 1 1",
      key: "1oajmo"
    }
  ],
  [
    "path",
    {
      d: "M14 18a1 1 0 0 0 1-1v-1a1 1 0 0 1 1-1 1 1 0 0 1-1-1v-1a1 1 0 0 0-1-1",
      key: "mpwhp6"
    }
  ]
]);
const FileKey2 = createLucideIcon("FileKey2Icon", [
  [
    "path",
    { d: "M4 10V4a2 2 0 0 1 2-2h8.5L20 7.5V20a2 2 0 0 1-2 2H4", key: "1nw5t3" }
  ],
  ["polyline", { points: "14 2 14 8 20 8", key: "1ew0cm" }],
  ["circle", { cx: "4", cy: "16", r: "2", key: "1ehqvc" }],
  ["path", { d: "m10 10-4.5 4.5", key: "7fwrp6" }],
  ["path", { d: "m9 11 1 1", key: "wa6s5q" }]
]);
const FileKey = createLucideIcon("FileKeyIcon", [
  [
    "path",
    {
      d: "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z",
      key: "1nnpy2"
    }
  ],
  ["circle", { cx: "10", cy: "16", r: "2", key: "4ckbqe" }],
  ["path", { d: "m16 10-4.5 4.5", key: "7p3ebg" }],
  ["path", { d: "m15 11 1 1", key: "1bsyx3" }]
]);
const FileLineChart = createLucideIcon("FileLineChartIcon", [
  [
    "path",
    {
      d: "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z",
      key: "1nnpy2"
    }
  ],
  ["polyline", { points: "14 2 14 8 20 8", key: "1ew0cm" }],
  ["path", { d: "m16 13-3.5 3.5-2-2L8 17", key: "zz7yod" }]
]);
const FileLock2 = createLucideIcon("FileLock2Icon", [
  [
    "path",
    { d: "M4 5V4a2 2 0 0 1 2-2h8.5L20 7.5V20a2 2 0 0 1-2 2H4", key: "gwd2r9" }
  ],
  ["polyline", { points: "14 2 14 8 20 8", key: "1ew0cm" }],
  [
    "rect",
    { x: "2", y: "13", width: "8", height: "5", rx: "1", key: "lkev2l" }
  ],
  ["path", { d: "M8 13v-2a2 2 0 1 0-4 0v2", key: "1pdxzg" }]
]);
const FileLock = createLucideIcon("FileLockIcon", [
  [
    "path",
    {
      d: "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z",
      key: "1nnpy2"
    }
  ],
  [
    "rect",
    { x: "8", y: "12", width: "8", height: "6", rx: "1", key: "hql291" }
  ],
  ["path", { d: "M15 12v-2a3 3 0 1 0-6 0v2", key: "1nqnhw" }]
]);
const FileMinus2 = createLucideIcon("FileMinus2Icon", [
  [
    "path",
    { d: "M4 22h14a2 2 0 0 0 2-2V7.5L14.5 2H6a2 2 0 0 0-2 2v4", key: "702lig" }
  ],
  ["polyline", { points: "14 2 14 8 20 8", key: "1ew0cm" }],
  ["path", { d: "M3 15h6", key: "4e2qda" }]
]);
const FileMinus = createLucideIcon("FileMinusIcon", [
  [
    "path",
    {
      d: "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z",
      key: "1nnpy2"
    }
  ],
  ["polyline", { points: "14 2 14 8 20 8", key: "1ew0cm" }],
  ["line", { x1: "9", y1: "15", x2: "15", y2: "15", key: "1hgpwl" }]
]);
const FileOutput = createLucideIcon("FileOutputIcon", [
  [
    "path",
    { d: "M4 22h14a2 2 0 0 0 2-2V7.5L14.5 2H6a2 2 0 0 0-2 2v4", key: "702lig" }
  ],
  ["polyline", { points: "14 2 14 8 20 8", key: "1ew0cm" }],
  ["path", { d: "M2 15h10", key: "jfw4w8" }],
  ["path", { d: "m5 12-3 3 3 3", key: "oke12k" }]
]);
const FilePieChart = createLucideIcon("FilePieChartIcon", [
  [
    "path",
    { d: "M16 22h2a2 2 0 0 0 2-2V7.5L14.5 2H6a2 2 0 0 0-2 2v3", key: "zhyrez" }
  ],
  ["polyline", { points: "14 2 14 8 20 8", key: "1ew0cm" }],
  ["path", { d: "M4.04 11.71a5.84 5.84 0 1 0 8.2 8.29", key: "f1t5jc" }],
  ["path", { d: "M13.83 16A5.83 5.83 0 0 0 8 10.17V16h5.83Z", key: "7q54ec" }]
]);
const FilePlus2 = createLucideIcon("FilePlus2Icon", [
  [
    "path",
    { d: "M4 22h14a2 2 0 0 0 2-2V7.5L14.5 2H6a2 2 0 0 0-2 2v4", key: "702lig" }
  ],
  ["polyline", { points: "14 2 14 8 20 8", key: "1ew0cm" }],
  ["path", { d: "M3 15h6", key: "4e2qda" }],
  ["path", { d: "M6 12v6", key: "1u72j0" }]
]);
const FilePlus = createLucideIcon("FilePlusIcon", [
  [
    "path",
    {
      d: "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z",
      key: "1nnpy2"
    }
  ],
  ["polyline", { points: "14 2 14 8 20 8", key: "1ew0cm" }],
  ["line", { x1: "12", y1: "18", x2: "12", y2: "12", key: "16t3gy" }],
  ["line", { x1: "9", y1: "15", x2: "15", y2: "15", key: "1hgpwl" }]
]);
const FileQuestion = createLucideIcon("FileQuestionIcon", [
  [
    "path",
    {
      d: "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z",
      key: "1nnpy2"
    }
  ],
  [
    "path",
    {
      d: "M10 10.3c.2-.4.5-.8.9-1a2.1 2.1 0 0 1 2.6.4c.3.4.5.8.5 1.3 0 1.3-2 2-2 2",
      key: "1umxtm"
    }
  ],
  ["path", { d: "M12 17h.01", key: "p32p05" }]
]);
const FileScan = createLucideIcon("FileScanIcon", [
  [
    "path",
    {
      d: "M20 10V7.5L14.5 2H6a2 2 0 0 0-2 2v16c0 1.1.9 2 2 2h4.5",
      key: "uvikde"
    }
  ],
  ["polyline", { points: "14 2 14 8 20 8", key: "1ew0cm" }],
  ["path", { d: "M16 22a2 2 0 0 1-2-2", key: "1wqh5n" }],
  ["path", { d: "M20 22a2 2 0 0 0 2-2", key: "1l9q4k" }],
  ["path", { d: "M20 14a2 2 0 0 1 2 2", key: "1ny6zw" }],
  ["path", { d: "M16 14a2 2 0 0 0-2 2", key: "ceaadl" }]
]);
const FileSearch2 = createLucideIcon("FileSearch2Icon", [
  [
    "path",
    {
      d: "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z",
      key: "1nnpy2"
    }
  ],
  ["polyline", { points: "14 2 14 8 20 8", key: "1ew0cm" }],
  ["circle", { cx: "11.5", cy: "14.5", r: "2.5", key: "1bq0ko" }],
  ["path", { d: "M13.25 16.25 15 18", key: "9eh8bj" }]
]);
const FileSearch = createLucideIcon("FileSearchIcon", [
  [
    "path",
    { d: "M4 22h14a2 2 0 0 0 2-2V7.5L14.5 2H6a2 2 0 0 0-2 2v3", key: "am10z3" }
  ],
  ["polyline", { points: "14 2 14 8 20 8", key: "1ew0cm" }],
  ["path", { d: "M5 17a3 3 0 1 0 0-6 3 3 0 0 0 0 6z", key: "ychnub" }],
  ["path", { d: "m9 18-1.5-1.5", key: "1j6qii" }]
]);
const FileSignature = createLucideIcon("FileSignatureIcon", [
  [
    "path",
    {
      d: "M20 19.5v.5a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h8.5L18 5.5",
      key: "kd5d3"
    }
  ],
  ["path", { d: "M8 18h1", key: "13wk12" }],
  [
    "path",
    {
      d: "M18.42 9.61a2.1 2.1 0 1 1 2.97 2.97L16.95 17 13 18l.99-3.95 4.43-4.44Z",
      key: "johvi5"
    }
  ]
]);
const FileSpreadsheet = createLucideIcon("FileSpreadsheetIcon", [
  [
    "path",
    {
      d: "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z",
      key: "1nnpy2"
    }
  ],
  ["polyline", { points: "14 2 14 8 20 8", key: "1ew0cm" }],
  ["path", { d: "M8 13h2", key: "yr2amv" }],
  ["path", { d: "M8 17h2", key: "2yhykz" }],
  ["path", { d: "M14 13h2", key: "un5t4a" }],
  ["path", { d: "M14 17h2", key: "10kma7" }]
]);
const FileSymlink = createLucideIcon("FileSymlinkIcon", [
  [
    "path",
    { d: "M4 22h14a2 2 0 0 0 2-2V7.5L14.5 2H6a2 2 0 0 0-2 2v7", key: "138uzh" }
  ],
  ["polyline", { points: "14 2 14 8 20 8", key: "1ew0cm" }],
  ["path", { d: "m10 18 3-3-3-3", key: "18f6ys" }],
  ["path", { d: "M4 18v-1a2 2 0 0 1 2-2h6", key: "5uz2rn" }]
]);
const FileTerminal = createLucideIcon("FileTerminalIcon", [
  [
    "path",
    {
      d: "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z",
      key: "1nnpy2"
    }
  ],
  ["polyline", { points: "14 2 14 8 20 8", key: "1ew0cm" }],
  ["path", { d: "m8 16 2-2-2-2", key: "10vzyd" }],
  ["path", { d: "M12 18h4", key: "1wd2n7" }]
]);
const FileText = createLucideIcon("FileTextIcon", [
  [
    "path",
    {
      d: "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z",
      key: "1nnpy2"
    }
  ],
  ["polyline", { points: "14 2 14 8 20 8", key: "1ew0cm" }],
  ["line", { x1: "16", y1: "13", x2: "8", y2: "13", key: "7g4hpw" }],
  ["line", { x1: "16", y1: "17", x2: "8", y2: "17", key: "1nzzn0" }],
  ["line", { x1: "10", y1: "9", x2: "8", y2: "9", key: "13jkcr" }]
]);
const FileType2 = createLucideIcon("FileType2Icon", [
  [
    "path",
    { d: "M4 22h14a2 2 0 0 0 2-2V7.5L14.5 2H6a2 2 0 0 0-2 2v4", key: "702lig" }
  ],
  ["polyline", { points: "14 2 14 8 20 8", key: "1ew0cm" }],
  ["path", { d: "M2 13v-1h6v1", key: "1dh9dg" }],
  ["path", { d: "M4 18h2", key: "1xrofg" }],
  ["path", { d: "M5 12v6", key: "150t9c" }]
]);
const FileType = createLucideIcon("FileTypeIcon", [
  [
    "path",
    {
      d: "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z",
      key: "1nnpy2"
    }
  ],
  ["polyline", { points: "14 2 14 8 20 8", key: "1ew0cm" }],
  ["path", { d: "M9 13v-1h6v1", key: "1bb014" }],
  ["path", { d: "M11 18h2", key: "12mj7e" }],
  ["path", { d: "M12 12v6", key: "3ahymv" }]
]);
const FileUp = createLucideIcon("FileUpIcon", [
  [
    "path",
    {
      d: "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z",
      key: "1nnpy2"
    }
  ],
  ["polyline", { points: "14 2 14 8 20 8", key: "1ew0cm" }],
  ["path", { d: "M12 12v6", key: "3ahymv" }],
  ["path", { d: "m15 15-3-3-3 3", key: "15xj92" }]
]);
const FileVideo2 = createLucideIcon("FileVideo2Icon", [
  [
    "path",
    { d: "M4 8V4a2 2 0 0 1 2-2h8.5L20 7.5V20a2 2 0 0 1-2 2H4", key: "1nti49" }
  ],
  ["polyline", { points: "14 2 14 8 20 8", key: "1ew0cm" }],
  ["path", { d: "m10 15.5 4 2.5v-6l-4 2.5", key: "t7cp39" }],
  [
    "rect",
    { x: "2", y: "12", width: "8", height: "6", rx: "1", key: "1fgd6b" }
  ]
]);
const FileVideo = createLucideIcon("FileVideoIcon", [
  [
    "path",
    {
      d: "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z",
      key: "1nnpy2"
    }
  ],
  ["polyline", { points: "14 2 14 8 20 8", key: "1ew0cm" }],
  ["path", { d: "m10 11 5 3-5 3v-6Z", key: "7ntvm4" }]
]);
const FileVolume2 = createLucideIcon("FileVolume2Icon", [
  [
    "path",
    {
      d: "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z",
      key: "1nnpy2"
    }
  ],
  ["polyline", { points: "14 2 14 8 20 8", key: "1ew0cm" }],
  ["path", { d: "M11.5 13.5c.32.4.5.94.5 1.5s-.18 1.1-.5 1.5", key: "joawwx" }],
  ["path", { d: "M15 12c.64.8 1 1.87 1 3s-.36 2.2-1 3", key: "1f2wyw" }],
  ["path", { d: "M8 15h.01", key: "a7atzg" }]
]);
const FileVolume = createLucideIcon("FileVolumeIcon", [
  [
    "path",
    { d: "M4 22h14a2 2 0 0 0 2-2V7.5L14.5 2H6a2 2 0 0 0-2 2v3", key: "am10z3" }
  ],
  ["polyline", { points: "14 2 14 8 20 8", key: "1ew0cm" }],
  ["path", { d: "m7 10-3 2H2v4h2l3 2v-8Z", key: "tazg57" }],
  ["path", { d: "M11 11c.64.8 1 1.87 1 3s-.36 2.2-1 3", key: "1yej3m" }]
]);
const FileWarning = createLucideIcon("FileWarningIcon", [
  [
    "path",
    {
      d: "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z",
      key: "1nnpy2"
    }
  ],
  ["path", { d: "M12 9v4", key: "juzpu7" }],
  ["path", { d: "M12 17h.01", key: "p32p05" }]
]);
const FileX2 = createLucideIcon("FileX2Icon", [
  [
    "path",
    { d: "M4 22h14a2 2 0 0 0 2-2V7.5L14.5 2H6a2 2 0 0 0-2 2v4", key: "702lig" }
  ],
  ["path", { d: "M14 2v6h6", key: "1kof46" }],
  ["path", { d: "m3 12.5 5 5", key: "1qls4r" }],
  ["path", { d: "m8 12.5-5 5", key: "b853mi" }]
]);
const FileX = createLucideIcon("FileXIcon", [
  [
    "path",
    {
      d: "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z",
      key: "1nnpy2"
    }
  ],
  ["polyline", { points: "14 2 14 8 20 8", key: "1ew0cm" }],
  ["line", { x1: "9.5", y1: "12.5", x2: "14.5", y2: "17.5", key: "bu76mq" }],
  ["line", { x1: "14.5", y1: "12.5", x2: "9.5", y2: "17.5", key: "nmydn6" }]
]);
const File = createLucideIcon("FileIcon", [
  [
    "path",
    {
      d: "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z",
      key: "1nnpy2"
    }
  ],
  ["polyline", { points: "14 2 14 8 20 8", key: "1ew0cm" }]
]);
const Files = createLucideIcon("FilesIcon", [
  [
    "path",
    {
      d: "M15.5 2H8.6c-.4 0-.8.2-1.1.5-.3.3-.5.7-.5 1.1v12.8c0 .4.2.8.5 1.1.3.3.7.5 1.1.5h9.8c.4 0 .8-.2 1.1-.5.3-.3.5-.7.5-1.1V6.5L15.5 2z",
      key: "cennsq"
    }
  ],
  [
    "path",
    { d: "M3 7.6v12.8c0 .4.2.8.5 1.1.3.3.7.5 1.1.5h9.8", key: "ms809a" }
  ],
  ["path", { d: "M15 2v5h5", key: "qq6kwv" }]
]);
const Film = createLucideIcon("FilmIcon", [
  [
    "rect",
    {
      x: "2",
      y: "2",
      width: "20",
      height: "20",
      rx: "2.18",
      ry: "2.18",
      key: "15u6kw"
    }
  ],
  ["line", { x1: "7", y1: "2", x2: "7", y2: "22", key: "io8xnd" }],
  ["line", { x1: "17", y1: "2", x2: "17", y2: "22", key: "1ewgih" }],
  ["line", { x1: "2", y1: "12", x2: "22", y2: "12", key: "zvmn4p" }],
  ["line", { x1: "2", y1: "7", x2: "7", y2: "7", key: "15jszs" }],
  ["line", { x1: "2", y1: "17", x2: "7", y2: "17", key: "qjw6jy" }],
  ["line", { x1: "17", y1: "17", x2: "22", y2: "17", key: "132yhf" }],
  ["line", { x1: "17", y1: "7", x2: "22", y2: "7", key: "bl3oy5" }]
]);
const FilterX = createLucideIcon("FilterXIcon", [
  ["path", { d: "M13.013 3H2l8 9.46V19l4 2v-8.54l.9-1.055", key: "1fi1da" }],
  ["path", { d: "m22 3-5 5", key: "12jva0" }],
  ["path", { d: "m17 3 5 5", key: "k36vhe" }]
]);
const Filter2 = createLucideIcon("FilterIcon", [
  [
    "polygon",
    { points: "22 3 2 3 10 12.46 10 19 14 21 14 12.46 22 3", key: "1yg77f" }
  ]
]);
const Fingerprint = createLucideIcon("FingerprintIcon", [
  ["path", { d: "M2 12C2 6.5 6.5 2 12 2a10 10 0 0 1 8 4", key: "1jc9o5" }],
  ["path", { d: "M5 19.5C5.5 18 6 15 6 12c0-.7.12-1.37.34-2", key: "1mxgy1" }],
  ["path", { d: "M17.29 21.02c.12-.6.43-2.3.5-3.02", key: "ptglia" }],
  ["path", { d: "M12 10a2 2 0 0 0-2 2c0 1.02-.1 2.51-.26 4", key: "1nerag" }],
  ["path", { d: "M8.65 22c.21-.66.45-1.32.57-2", key: "13wd9y" }],
  ["path", { d: "M14 13.12c0 2.38 0 6.38-1 8.88", key: "o46ks0" }],
  ["path", { d: "M2 16h.01", key: "1gqxmh" }],
  ["path", { d: "M21.8 16c.2-2 .131-5.354 0-6", key: "drycrb" }],
  ["path", { d: "M9 6.8a6 6 0 0 1 9 5.2c0 .47 0 1.17-.02 2", key: "1fgabc" }]
]);
const FishOff = createLucideIcon("FishOffIcon", [
  [
    "path",
    {
      d: "M18 12.47v.03M18 12v.47M17.525 17.526A6.744 6.744 0 0 1 15 18c-3.56 0-7.56-2.53-8.5-6 .348-1.28 1.114-2.433 2.121-3.38M12.065 6.532A8.802 8.802 0 0 1 15 6c3.56 0 6.06 2.54 7 6-.309 1.14-.786 2.177-1.413 3.058",
      key: "1xfny3"
    }
  ],
  [
    "path",
    {
      d: "M7 10.67C7 8 5.58 5.97 2.73 5.5c-1 1.5-1 5 .23 6.5-1.24 1.5-1.24 5-.23 6.5C5.58 18.03 7 16 7 13.33M14.48 8.958A9.77 9.77 0 0 1 16 6.07M16 17.93a9.77 9.77 0 0 1-1.728-3.618",
      key: "1i7ca5"
    }
  ],
  [
    "path",
    {
      d: "m16.01 17.93-.23 1.4A2 2 0 0 1 13.8 21H9.5a5.96 5.96 0 0 0 1.49-3.98M8.53 3h5.27a2 2 0 0 1 1.98 1.67l.23 1.4M2 2l20 20",
      key: "1407gh"
    }
  ]
]);
const Fish = createLucideIcon("FishIcon", [
  [
    "path",
    {
      d: "M6.5 12c.94-3.46 4.94-6 8.5-6 3.56 0 6.06 2.54 7 6-.94 3.47-3.44 6-7 6s-7.56-2.53-8.5-6Z",
      key: "15baut"
    }
  ],
  ["path", { d: "M18 12v.5", key: "18hhni" }],
  ["path", { d: "M16 17.93a9.77 9.77 0 0 1 0-11.86", key: "16dt7o" }],
  [
    "path",
    {
      d: "M7 10.67C7 8 5.58 5.97 2.73 5.5c-1 1.5-1 5 .23 6.5-1.24 1.5-1.24 5-.23 6.5C5.58 18.03 7 16 7 13.33",
      key: "l9di03"
    }
  ],
  [
    "path",
    {
      d: "M10.46 7.26C10.2 5.88 9.17 4.24 8 3h5.8a2 2 0 0 1 1.98 1.67l.23 1.4",
      key: "1kjonw"
    }
  ],
  [
    "path",
    {
      d: "m16.01 17.93-.23 1.4A2 2 0 0 1 13.8 21H9.5a5.96 5.96 0 0 0 1.49-3.98",
      key: "1zlm23"
    }
  ]
]);
const FlagOff = createLucideIcon("FlagOffIcon", [
  ["path", { d: "M8 2c3 0 5 2 8 2s4-1 4-1v11", key: "9rwyz9" }],
  ["path", { d: "M4 22V4", key: "1plyxx" }],
  ["path", { d: "M4 15s1-1 4-1 5 2 8 2", key: "1myooe" }],
  ["line", { x1: "2", y1: "2", x2: "22", y2: "22", key: "1w4vcy" }]
]);
const FlagTriangleLeft = createLucideIcon("FlagTriangleLeftIcon", [
  ["path", { d: "M17 22V2L7 7l10 5", key: "1rmf0r" }]
]);
const FlagTriangleRight = createLucideIcon("FlagTriangleRightIcon", [
  ["path", { d: "M7 22V2l10 5-10 5", key: "17n18y" }]
]);
const Flag = createLucideIcon("FlagIcon", [
  [
    "path",
    {
      d: "M4 15s1-1 4-1 5 2 8 2 4-1 4-1V3s-1 1-4 1-5-2-8-2-4 1-4 1z",
      key: "i9b6wo"
    }
  ],
  ["line", { x1: "4", y1: "22", x2: "4", y2: "15", key: "1k23bw" }]
]);
const Flame = createLucideIcon("FlameIcon", [
  [
    "path",
    {
      d: "M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z",
      key: "96xj49"
    }
  ]
]);
const FlashlightOff = createLucideIcon("FlashlightOffIcon", [
  [
    "path",
    {
      d: "M16 16v4a2 2 0 0 1-2 2h-4a2 2 0 0 1-2-2V10c0-2-2-2-2-4",
      key: "1r120k"
    }
  ],
  ["path", { d: "M7 2h11v4c0 2-2 2-2 4v1", key: "dz1920" }],
  ["line", { x1: "11", y1: "6", x2: "18", y2: "6", key: "q6oc82" }],
  ["line", { x1: "2", y1: "2", x2: "22", y2: "22", key: "1w4vcy" }]
]);
const Flashlight = createLucideIcon("FlashlightIcon", [
  [
    "path",
    {
      d: "M18 6c0 2-2 2-2 4v10a2 2 0 0 1-2 2h-4a2 2 0 0 1-2-2V10c0-2-2-2-2-4V2h12z",
      key: "1orkel"
    }
  ],
  ["line", { x1: "6", y1: "6", x2: "18", y2: "6", key: "tmfr4k" }],
  ["line", { x1: "12", y1: "12", x2: "12", y2: "12", key: "jyrcx7" }]
]);
const FlaskConicalOff = createLucideIcon("FlaskConicalOffIcon", [
  [
    "path",
    {
      d: "M10 10 4.72 20.55a1 1 0 0 0 .9 1.45h12.76a1 1 0 0 0 .9-1.45l-1.272-2.542",
      key: "59ek9y"
    }
  ],
  ["path", { d: "M10 2v2.343", key: "15t272" }],
  ["path", { d: "M14 2v6.343", key: "sxr80q" }],
  ["path", { d: "M8.5 2h7", key: "csnxdl" }],
  ["path", { d: "M7 16h9", key: "t5njau" }],
  ["line", { x1: "2", y1: "2", x2: "22", y2: "22", key: "1w4vcy" }]
]);
const FlaskConical = createLucideIcon("FlaskConicalIcon", [
  [
    "path",
    {
      d: "M10 2v7.527a2 2 0 0 1-.211.896L4.72 20.55a1 1 0 0 0 .9 1.45h12.76a1 1 0 0 0 .9-1.45l-5.069-10.127A2 2 0 0 1 14 9.527V2",
      key: "pzvekw"
    }
  ],
  ["path", { d: "M8.5 2h7", key: "csnxdl" }],
  ["path", { d: "M7 16h10", key: "wp8him" }]
]);
const FlaskRound = createLucideIcon("FlaskRoundIcon", [
  ["path", { d: "M10 2v7.31", key: "5d1hyh" }],
  ["path", { d: "M14 9.3V1.99", key: "14k4l0" }],
  ["path", { d: "M8.5 2h7", key: "csnxdl" }],
  ["path", { d: "M14 9.3a6.5 6.5 0 1 1-4 0", key: "1r8fvy" }],
  ["path", { d: "M5.58 16.5h12.85", key: "78w9cl" }]
]);
const FlipHorizontal2 = createLucideIcon("FlipHorizontal2Icon", [
  ["path", { d: "m3 7 5 5-5 5V7", key: "couhi7" }],
  ["path", { d: "m21 7-5 5 5 5V7", key: "6ouia7" }],
  ["path", { d: "M12 20v2", key: "1lh1kg" }],
  ["path", { d: "M12 14v2", key: "8jcxud" }],
  ["path", { d: "M12 8v2", key: "1woqiv" }],
  ["path", { d: "M12 2v2", key: "tus03m" }]
]);
const FlipHorizontal = createLucideIcon("FlipHorizontalIcon", [
  ["path", { d: "M8 3H5a2 2 0 0 0-2 2v14c0 1.1.9 2 2 2h3", key: "1i73f7" }],
  ["path", { d: "M16 3h3a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-3", key: "saxlbk" }],
  ["path", { d: "M12 20v2", key: "1lh1kg" }],
  ["path", { d: "M12 14v2", key: "8jcxud" }],
  ["path", { d: "M12 8v2", key: "1woqiv" }],
  ["path", { d: "M12 2v2", key: "tus03m" }]
]);
const FlipVertical2 = createLucideIcon("FlipVertical2Icon", [
  ["path", { d: "m17 3-5 5-5-5h10", key: "1ftt6x" }],
  ["path", { d: "m17 21-5-5-5 5h10", key: "1m0wmu" }],
  ["path", { d: "M4 12H2", key: "rhcxmi" }],
  ["path", { d: "M10 12H8", key: "s88cx1" }],
  ["path", { d: "M16 12h-2", key: "10asgb" }],
  ["path", { d: "M22 12h-2", key: "14jgyd" }]
]);
const FlipVertical = createLucideIcon("FlipVerticalIcon", [
  ["path", { d: "M21 8V5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v3", key: "14bfxa" }],
  ["path", { d: "M21 16v3a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-3", key: "14rx03" }],
  ["path", { d: "M4 12H2", key: "rhcxmi" }],
  ["path", { d: "M10 12H8", key: "s88cx1" }],
  ["path", { d: "M16 12h-2", key: "10asgb" }],
  ["path", { d: "M22 12h-2", key: "14jgyd" }]
]);
const Flower2 = createLucideIcon("Flower2Icon", [
  [
    "path",
    {
      d: "M12 5a3 3 0 1 1 3 3m-3-3a3 3 0 1 0-3 3m3-3v1M9 8a3 3 0 1 0 3 3M9 8h1m5 0a3 3 0 1 1-3 3m3-3h-1m-2 3v-1",
      key: "3pnvol"
    }
  ],
  ["circle", { cx: "12", cy: "8", r: "2", key: "1822b1" }],
  ["path", { d: "M12 10v12", key: "6ubwww" }],
  ["path", { d: "M12 22c4.2 0 7-1.667 7-5-4.2 0-7 1.667-7 5Z", key: "9hd38g" }],
  [
    "path",
    { d: "M12 22c-4.2 0-7-1.667-7-5 4.2 0 7 1.667 7 5Z", key: "ufn41s" }
  ]
]);
const Flower = createLucideIcon("FlowerIcon", [
  [
    "path",
    {
      d: "M12 7.5a4.5 4.5 0 1 1 4.5 4.5M12 7.5A4.5 4.5 0 1 0 7.5 12M12 7.5V9m-4.5 3a4.5 4.5 0 1 0 4.5 4.5M7.5 12H9m7.5 0a4.5 4.5 0 1 1-4.5 4.5m4.5-4.5H15m-3 4.5V15",
      key: "51z86h"
    }
  ],
  ["circle", { cx: "12", cy: "12", r: "3", key: "1v7zrd" }],
  ["path", { d: "m8 16 1.5-1.5", key: "ce6zph" }],
  ["path", { d: "M14.5 9.5 16 8", key: "1kzrzb" }],
  ["path", { d: "m8 8 1.5 1.5", key: "1yv88w" }],
  ["path", { d: "M14.5 14.5 16 16", key: "12xhjh" }]
]);
const Focus = createLucideIcon("FocusIcon", [
  ["circle", { cx: "12", cy: "12", r: "3", key: "1v7zrd" }],
  ["path", { d: "M3 7V5a2 2 0 0 1 2-2h2", key: "aa7l1z" }],
  ["path", { d: "M17 3h2a2 2 0 0 1 2 2v2", key: "4qcy5o" }],
  ["path", { d: "M21 17v2a2 2 0 0 1-2 2h-2", key: "6vwrx8" }],
  ["path", { d: "M7 21H5a2 2 0 0 1-2-2v-2", key: "ioqczr" }]
]);
const FolderArchive = createLucideIcon("FolderArchiveIcon", [
  [
    "path",
    {
      d: "M22 20V8a2 2 0 0 0-2-2h-7.93a2 2 0 0 1-1.66-.9l-.82-1.2A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13c0 1.1.9 2 2 2h6",
      key: "1l0vpk"
    }
  ],
  ["circle", { cx: "16", cy: "19", r: "2", key: "1uwppb" }],
  ["path", { d: "M16 11v-1", key: "eoyjtm" }],
  ["path", { d: "M16 17v-2", key: "1xp69b" }]
]);
const FolderCheck = createLucideIcon("FolderCheckIcon", [
  [
    "path",
    {
      d: "M4 20h16a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.93a2 2 0 0 1-1.66-.9l-.82-1.2A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13c0 1.1.9 2 2 2Z",
      key: "1fr9dc"
    }
  ],
  ["path", { d: "m9 13 2 2 4-4", key: "6343dt" }]
]);
const FolderClock = createLucideIcon("FolderClockIcon", [
  [
    "path",
    {
      d: "M7 20H4a2 2 0 0 1-2-2V5c0-1.1.9-2 2-2h3.93a2 2 0 0 1 1.66.9l.82 1.2a2 2 0 0 0 1.66.9H20a2 2 0 0 1 2 2",
      key: "1p0xo9"
    }
  ],
  ["circle", { cx: "16", cy: "16", r: "6", key: "qoo3c4" }],
  ["path", { d: "M16 14v2l1 1", key: "xth2jh" }]
]);
const FolderClosed = createLucideIcon("FolderClosedIcon", [
  [
    "path",
    {
      d: "M4 20h16a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.93a2 2 0 0 1-1.66-.9l-.82-1.2A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13c0 1.1.9 2 2 2Z",
      key: "1fr9dc"
    }
  ],
  ["path", { d: "M2 10h20", key: "1ir3d8" }]
]);
const FolderCog2 = createLucideIcon("FolderCog2Icon", [
  [
    "path",
    {
      d: "M4 20h16a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.93a2 2 0 0 1-1.66-.9l-.82-1.2A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13c0 1.1.9 2 2 2Z",
      key: "1fr9dc"
    }
  ],
  ["circle", { cx: "12", cy: "13", r: "2", key: "1c1ljs" }],
  ["path", { d: "M12 10v1", key: "ngorzm" }],
  ["path", { d: "M12 15v1", key: "1ovrzm" }],
  ["path", { d: "m14.6 11.5-.87.5", key: "zm6w6e" }],
  ["path", { d: "m10.27 14-.87.5", key: "idea33" }],
  ["path", { d: "m14.6 14.5-.87-.5", key: "1ii18h" }],
  ["path", { d: "m10.27 12-.87-.5", key: "tf2vd0" }]
]);
const FolderCog = createLucideIcon("FolderCogIcon", [
  [
    "path",
    {
      d: "M10.5 20H4a2 2 0 0 1-2-2V5c0-1.1.9-2 2-2h3.93a2 2 0 0 1 1.66.9l.82 1.2a2 2 0 0 0 1.66.9H20a2 2 0 0 1 2 2v3",
      key: "1g1zaq"
    }
  ],
  ["circle", { cx: "18", cy: "18", r: "3", key: "1xkwt0" }],
  ["path", { d: "M18 14v1", key: "1sx9hk" }],
  ["path", { d: "M18 21v1", key: "pviwm2" }],
  ["path", { d: "M22 18h-1", key: "phgwqy" }],
  ["path", { d: "M15 18h-1", key: "1v9fvv" }],
  ["path", { d: "m21 15-.88.88", key: "13nfy4" }],
  ["path", { d: "M15.88 20.12 15 21", key: "qplfkl" }],
  ["path", { d: "m21 21-.88-.88", key: "1ryrr1" }],
  ["path", { d: "M15.88 15.88 15 15", key: "4terp3" }]
]);
const FolderDown = createLucideIcon("FolderDownIcon", [
  [
    "path",
    {
      d: "M4 20h16a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.93a2 2 0 0 1-1.66-.9l-.82-1.2A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13c0 1.1.9 2 2 2Z",
      key: "1fr9dc"
    }
  ],
  ["path", { d: "M12 10v6", key: "1bos4e" }],
  ["path", { d: "m15 13-3 3-3-3", key: "6j2sf0" }]
]);
const FolderEdit = createLucideIcon("FolderEditIcon", [
  [
    "path",
    {
      d: "M8.42 10.61a2.1 2.1 0 1 1 2.97 2.97L5.95 19 2 20l.99-3.95 5.43-5.44Z",
      key: "o1ah0z"
    }
  ],
  [
    "path",
    {
      d: "M2 11.5V5c0-1.1.9-2 2-2h3.93a2 2 0 0 1 1.66.9l.82 1.2a2 2 0 0 0 1.66.9H20a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-9.5",
      key: "bim890"
    }
  ]
]);
const FolderHeart = createLucideIcon("FolderHeartIcon", [
  [
    "path",
    {
      d: "M11 20H4a2 2 0 0 1-2-2V5c0-1.1.9-2 2-2h3.93a2 2 0 0 1 1.66.9l.82 1.2a2 2 0 0 0 1.66.9H20a2 2 0 0 1 2 2v1.5",
      key: "zoglpu"
    }
  ],
  [
    "path",
    {
      d: "M21.29 13.7a2.43 2.43 0 0 0-2.65-.52c-.3.12-.57.3-.8.53l-.34.34-.35-.34a2.43 2.43 0 0 0-2.65-.53c-.3.12-.56.3-.79.53-.95.94-1 2.53.2 3.74L17.5 21l3.6-3.55c1.2-1.21 1.14-2.8.19-3.74Z",
      key: "2tfff6"
    }
  ]
]);
const FolderInput = createLucideIcon("FolderInputIcon", [
  [
    "path",
    {
      d: "M2 9V5c0-1.1.9-2 2-2h3.93a2 2 0 0 1 1.66.9l.82 1.2a2 2 0 0 0 1.66.9H20a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2v-1",
      key: "1gu97c"
    }
  ],
  ["path", { d: "M2 13h10", key: "pgb2dq" }],
  ["path", { d: "m9 16 3-3-3-3", key: "6m91ic" }]
]);
const FolderKey = createLucideIcon("FolderKeyIcon", [
  [
    "path",
    {
      d: "M10 20H4a2 2 0 0 1-2-2V5c0-1.1.9-2 2-2h3.93a2 2 0 0 1 1.66.9l.82 1.2a2 2 0 0 0 1.66.9H20a2 2 0 0 1 2 2v2",
      key: "203odn"
    }
  ],
  ["circle", { cx: "16", cy: "20", r: "2", key: "1vifvg" }],
  ["path", { d: "m22 14-4.5 4.5", key: "1ef6z8" }],
  ["path", { d: "m21 15 1 1", key: "1ejcpy" }]
]);
const FolderLock = createLucideIcon("FolderLockIcon", [
  [
    "path",
    {
      d: "M10 20H4a2 2 0 0 1-2-2V5c0-1.1.9-2 2-2h3.93a2 2 0 0 1 1.66.9l.82 1.2a2 2 0 0 0 1.66.9H20a2 2 0 0 1 2 2v2.5",
      key: "1ivsx8"
    }
  ],
  [
    "rect",
    { x: "14", y: "17", width: "8", height: "5", rx: "1", key: "15pjcy" }
  ],
  ["path", { d: "M20 17v-2a2 2 0 1 0-4 0v2", key: "pwaxnr" }]
]);
const FolderMinus = createLucideIcon("FolderMinusIcon", [
  [
    "path",
    {
      d: "M4 20h16a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.93a2 2 0 0 1-1.66-.9l-.82-1.2A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13c0 1.1.9 2 2 2Z",
      key: "1fr9dc"
    }
  ],
  ["line", { x1: "9", y1: "13", x2: "15", y2: "13", key: "1nzi25" }]
]);
const FolderOpen = createLucideIcon("FolderOpenIcon", [
  [
    "path",
    {
      d: "m6 14 1.45-2.9A2 2 0 0 1 9.24 10H20a2 2 0 0 1 1.94 2.5l-1.55 6a2 2 0 0 1-1.94 1.5H4a2 2 0 0 1-2-2V5c0-1.1.9-2 2-2h3.93a2 2 0 0 1 1.66.9l.82 1.2a2 2 0 0 0 1.66.9H18a2 2 0 0 1 2 2v2",
      key: "1nmvlm"
    }
  ]
]);
const FolderOutput = createLucideIcon("FolderOutputIcon", [
  [
    "path",
    {
      d: "M2 7.5V5c0-1.1.9-2 2-2h3.93a2 2 0 0 1 1.66.9l.82 1.2a2 2 0 0 0 1.66.9H20a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H2",
      key: "jm8npq"
    }
  ],
  ["path", { d: "M2 13h10", key: "pgb2dq" }],
  ["path", { d: "m5 10-3 3 3 3", key: "1r8ie0" }]
]);
const FolderPlus = createLucideIcon("FolderPlusIcon", [
  [
    "path",
    {
      d: "M4 20h16a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.93a2 2 0 0 1-1.66-.9l-.82-1.2A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13c0 1.1.9 2 2 2Z",
      key: "1fr9dc"
    }
  ],
  ["line", { x1: "12", y1: "10", x2: "12", y2: "16", key: "1fgwrs" }],
  ["line", { x1: "9", y1: "13", x2: "15", y2: "13", key: "1nzi25" }]
]);
const FolderSearch2 = createLucideIcon("FolderSearch2Icon", [
  [
    "path",
    {
      d: "M4 20h16a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.93a2 2 0 0 1-1.66-.9l-.82-1.2A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13c0 1.1.9 2 2 2Z",
      key: "1fr9dc"
    }
  ],
  ["circle", { cx: "11.5", cy: "12.5", r: "2.5", key: "1ea5ju" }],
  ["path", { d: "M13.27 14.27 15 16", key: "5hsvtf" }]
]);
const FolderSearch = createLucideIcon("FolderSearchIcon", [
  [
    "path",
    {
      d: "M11 20H4a2 2 0 0 1-2-2V5c0-1.1.9-2 2-2h3.93a2 2 0 0 1 1.66.9l.82 1.2a2 2 0 0 0 1.66.9H20a2 2 0 0 1 2 2v4",
      key: "1moo03"
    }
  ],
  ["circle", { cx: "17", cy: "17", r: "3", key: "18b49y" }],
  ["path", { d: "m21 21-1.5-1.5", key: "3sg1j" }]
]);
const FolderSymlink = createLucideIcon("FolderSymlinkIcon", [
  [
    "path",
    {
      d: "M2 9V5c0-1.1.9-2 2-2h3.93a2 2 0 0 1 1.66.9l.82 1.2a2 2 0 0 0 1.66.9H20a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H2",
      key: "1or2t8"
    }
  ],
  ["path", { d: "m8 16 3-3-3-3", key: "rlqrt1" }],
  ["path", { d: "M2 16v-1a2 2 0 0 1 2-2h6", key: "pgw8ln" }]
]);
const FolderTree = createLucideIcon("FolderTreeIcon", [
  [
    "path",
    {
      d: "M13 10h7a1 1 0 0 0 1-1V6a1 1 0 0 0-1-1h-2.5a1 1 0 0 1-.8-.4l-.9-1.2A1 1 0 0 0 15 3h-2a1 1 0 0 0-1 1v5a1 1 0 0 0 1 1Z",
      key: "10jzg2"
    }
  ],
  [
    "path",
    {
      d: "M13 21h7a1 1 0 0 0 1-1v-3a1 1 0 0 0-1-1h-2.88a1 1 0 0 1-.9-.55l-.44-.9a1 1 0 0 0-.9-.55H13a1 1 0 0 0-1 1v5a1 1 0 0 0 1 1Z",
      key: "1b9nqm"
    }
  ],
  ["path", { d: "M3 3v2c0 1.1.9 2 2 2h3", key: "1wqwis" }],
  ["path", { d: "M3 3v13c0 1.1.9 2 2 2h3", key: "1bqeom" }]
]);
const FolderUp = createLucideIcon("FolderUpIcon", [
  [
    "path",
    {
      d: "M4 20h16a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.93a2 2 0 0 1-1.66-.9l-.82-1.2A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13c0 1.1.9 2 2 2Z",
      key: "1fr9dc"
    }
  ],
  ["path", { d: "M12 10v6", key: "1bos4e" }],
  ["path", { d: "m9 13 3-3 3 3", key: "1pxg3c" }]
]);
const FolderX = createLucideIcon("FolderXIcon", [
  [
    "path",
    {
      d: "M4 20h16a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.93a2 2 0 0 1-1.66-.9l-.82-1.2A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13c0 1.1.9 2 2 2Z",
      key: "1fr9dc"
    }
  ],
  ["path", { d: "m9.5 10.5 5 5", key: "ra9qjz" }],
  ["path", { d: "m14.5 10.5-5 5", key: "l2rkpq" }]
]);
const Folder = createLucideIcon("FolderIcon", [
  [
    "path",
    {
      d: "M4 20h16a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.93a2 2 0 0 1-1.66-.9l-.82-1.2A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13c0 1.1.9 2 2 2Z",
      key: "1fr9dc"
    }
  ]
]);
const Folders = createLucideIcon("FoldersIcon", [
  [
    "path",
    {
      d: "M8 17h12a2 2 0 0 0 2-2V9a2 2 0 0 0-2-2h-3.93a2 2 0 0 1-1.66-.9l-.82-1.2a2 2 0 0 0-1.66-.9H8a2 2 0 0 0-2 2v9c0 1.1.9 2 2 2Z",
      key: "1aska4"
    }
  ],
  ["path", { d: "M2 8v11c0 1.1.9 2 2 2h14", key: "n13cji" }]
]);
const Footprints = createLucideIcon("FootprintsIcon", [
  [
    "path",
    {
      d: "M4 16v-2.38C4 11.5 2.97 10.5 3 8c.03-2.72 1.49-6 4.5-6C9.37 2 10 3.8 10 5.5c0 3.11-2 5.66-2 8.68V16a2 2 0 1 1-4 0Z",
      key: "1dudjm"
    }
  ],
  [
    "path",
    {
      d: "M20 20v-2.38c0-2.12 1.03-3.12 1-5.62-.03-2.72-1.49-6-4.5-6C14.63 6 14 7.8 14 9.5c0 3.11 2 5.66 2 8.68V20a2 2 0 1 0 4 0Z",
      key: "l2t8xc"
    }
  ],
  ["path", { d: "M16 17h4", key: "1dejxt" }],
  ["path", { d: "M4 13h4", key: "1bwh8b" }]
]);
const Forklift = createLucideIcon("ForkliftIcon", [
  ["path", { d: "M12 12H5a2 2 0 0 0-2 2v5", key: "7zsz91" }],
  ["circle", { cx: "13", cy: "19", r: "2", key: "wjnkru" }],
  ["circle", { cx: "5", cy: "19", r: "2", key: "v8kfzx" }],
  [
    "path",
    { d: "M8 19h3M16 2v17h6M6 12V7c0-1.1.9-2 2-2h3l5 5", key: "x1a4xd" }
  ]
]);
const FormInput = createLucideIcon("FormInputIcon", [
  [
    "rect",
    { x: "2", y: "6", width: "20", height: "12", rx: "2", key: "1wpnh2" }
  ],
  ["path", { d: "M12 12h.01", key: "1mp3jc" }],
  ["path", { d: "M17 12h.01", key: "1m0b6t" }],
  ["path", { d: "M7 12h.01", key: "eqddd0" }]
]);
const Forward = createLucideIcon("ForwardIcon", [
  ["polyline", { points: "15 17 20 12 15 7", key: "1w3sku" }],
  ["path", { d: "M4 18v-2a4 4 0 0 1 4-4h12", key: "jmiej9" }]
]);
const Frame = createLucideIcon("FrameIcon", [
  ["line", { x1: "22", y1: "6", x2: "2", y2: "6", key: "181agm" }],
  ["line", { x1: "22", y1: "18", x2: "2", y2: "18", key: "12x4ne" }],
  ["line", { x1: "6", y1: "2", x2: "6", y2: "22", key: "gjs6u1" }],
  ["line", { x1: "18", y1: "2", x2: "18", y2: "22", key: "1hbgm0" }]
]);
const Framer = createLucideIcon("FramerIcon", [
  ["path", { d: "M5 16V9h14V2H5l14 14h-7m-7 0 7 7v-7m-7 0h7", key: "1a2nng" }]
]);
const Frown = createLucideIcon("FrownIcon", [
  ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
  ["path", { d: "M16 16s-1.5-2-4-2-4 2-4 2", key: "epbg0q" }],
  ["line", { x1: "9", y1: "9", x2: "9.01", y2: "9", key: "141aaf" }],
  ["line", { x1: "15", y1: "9", x2: "15.01", y2: "9", key: "1cyg3o" }]
]);
const Fuel = createLucideIcon("FuelIcon", [
  ["line", { x1: "3", y1: "22", x2: "15", y2: "22", key: "fc344c" }],
  ["line", { x1: "4", y1: "9", x2: "14", y2: "9", key: "htzs8q" }],
  ["path", { d: "M14 22V4a2 2 0 0 0-2-2H6a2 2 0 0 0-2 2v18", key: "16j0yd" }],
  [
    "path",
    {
      d: "M14 13h2a2 2 0 0 1 2 2v2a2 2 0 0 0 2 2h0a2 2 0 0 0 2-2V9.83a2 2 0 0 0-.59-1.42L18 5",
      key: "8ur5zv"
    }
  ]
]);
const FunctionSquare = createLucideIcon("FunctionSquareIcon", [
  [
    "rect",
    {
      x: "3",
      y: "3",
      width: "18",
      height: "18",
      rx: "2",
      ry: "2",
      key: "maln0c"
    }
  ],
  ["path", { d: "M9 17c2 0 2.8-1 2.8-2.8V10c0-2 1-3.3 3.2-3", key: "m1af9g" }],
  ["path", { d: "M9 11.2h5.7", key: "3zgcl2" }]
]);
const Gamepad2 = createLucideIcon("Gamepad2Icon", [
  ["line", { x1: "6", y1: "11", x2: "10", y2: "11", key: "19tls9" }],
  ["line", { x1: "8", y1: "9", x2: "8", y2: "13", key: "6w9cvk" }],
  ["line", { x1: "15", y1: "12", x2: "15.01", y2: "12", key: "abmwhw" }],
  ["line", { x1: "18", y1: "10", x2: "18.01", y2: "10", key: "19ehlv" }],
  [
    "path",
    {
      d: "M17.32 5H6.68a4 4 0 0 0-3.978 3.59c-.006.052-.01.101-.017.152C2.604 9.416 2 14.456 2 16a3 3 0 0 0 3 3c1 0 1.5-.5 2-1l1.414-1.414A2 2 0 0 1 9.828 16h4.344a2 2 0 0 1 1.414.586L17 18c.5.5 1 1 2 1a3 3 0 0 0 3-3c0-1.545-.604-6.584-.685-7.258-.007-.05-.011-.1-.017-.151A4 4 0 0 0 17.32 5z",
      key: "mfqc10"
    }
  ]
]);
const Gamepad = createLucideIcon("GamepadIcon", [
  ["line", { x1: "6", y1: "12", x2: "10", y2: "12", key: "xg250c" }],
  ["line", { x1: "8", y1: "10", x2: "8", y2: "14", key: "1cn0zn" }],
  ["line", { x1: "15", y1: "13", x2: "15.01", y2: "13", key: "1pybt0" }],
  ["line", { x1: "18", y1: "11", x2: "18.01", y2: "11", key: "147dzq" }],
  [
    "rect",
    { x: "2", y: "6", width: "20", height: "12", rx: "2", key: "1wpnh2" }
  ]
]);
const Gauge = createLucideIcon("GaugeIcon", [
  ["path", { d: "m12 15 3.5-3.5", key: "1sfa3b" }],
  [
    "path",
    {
      d: "M20.3 18c.4-1 .7-2.2.7-3.4C21 9.8 17 6 12 6s-9 3.8-9 8.6c0 1.2.3 2.4.7 3.4",
      key: "rcs43o"
    }
  ]
]);
const Gavel = createLucideIcon("GavelIcon", [
  [
    "path",
    {
      d: "m14 13-7.5 7.5c-.83.83-2.17.83-3 0 0 0 0 0 0 0a2.12 2.12 0 0 1 0-3L11 10",
      key: "c9cbz0"
    }
  ],
  ["path", { d: "m16 16 6-6", key: "vzrcl6" }],
  ["path", { d: "m8 8 6-6", key: "18bi4p" }],
  ["path", { d: "m9 7 8 8", key: "5jnvq1" }],
  ["path", { d: "m21 11-8-8", key: "z4y7zo" }]
]);
const Gem = createLucideIcon("GemIcon", [
  ["polygon", { points: "6 3 18 3 22 9 12 22 2 9", key: "1kbvml" }],
  ["path", { d: "m12 22 4-13-3-6", key: "19hoeh" }],
  ["path", { d: "M12 22 8 9l3-6", key: "1klo0r" }],
  ["path", { d: "M2 9h20", key: "16fsjt" }]
]);
const Ghost = createLucideIcon("GhostIcon", [
  ["path", { d: "M9 10h.01", key: "qbtxuw" }],
  ["path", { d: "M15 10h.01", key: "1qmjsl" }],
  [
    "path",
    {
      d: "M12 2a8 8 0 0 0-8 8v12l3-3 2.5 2.5L12 19l2.5 2.5L17 19l3 3V10a8 8 0 0 0-8-8z",
      key: "uwwb07"
    }
  ]
]);
const Gift = createLucideIcon("GiftIcon", [
  ["polyline", { points: "20 12 20 22 4 22 4 12", key: "nda8fc" }],
  ["rect", { x: "2", y: "7", width: "20", height: "5", key: "1k9o8g" }],
  ["line", { x1: "12", y1: "22", x2: "12", y2: "7", key: "1tigeq" }],
  ["path", { d: "M12 7H7.5a2.5 2.5 0 0 1 0-5C11 2 12 7 12 7z", key: "zighg4" }],
  ["path", { d: "M12 7h4.5a2.5 2.5 0 0 0 0-5C13 2 12 7 12 7z", key: "1pa5tk" }]
]);
const GitBranchPlus = createLucideIcon("GitBranchPlusIcon", [
  ["path", { d: "M6 3v12", key: "qpgusn" }],
  ["path", { d: "M18 9a3 3 0 1 0 0-6 3 3 0 0 0 0 6z", key: "1d02ji" }],
  ["path", { d: "M6 21a3 3 0 1 0 0-6 3 3 0 0 0 0 6z", key: "chk6ph" }],
  ["path", { d: "M15 6a9 9 0 0 0-9 9", key: "or332x" }],
  ["path", { d: "M18 15v6", key: "9wciyi" }],
  ["path", { d: "M21 18h-6", key: "139f0c" }]
]);
const GitBranch = createLucideIcon("GitBranchIcon", [
  ["line", { x1: "6", y1: "3", x2: "6", y2: "15", key: "1o40i7" }],
  ["circle", { cx: "18", cy: "6", r: "3", key: "1h7g24" }],
  ["circle", { cx: "6", cy: "18", r: "3", key: "fqmcym" }],
  ["path", { d: "M18 9a9 9 0 0 1-9 9", key: "n2h4wq" }]
]);
const GitCommit = createLucideIcon("GitCommitIcon", [
  ["circle", { cx: "12", cy: "12", r: "3", key: "1v7zrd" }],
  ["line", { x1: "3", y1: "12", x2: "9", y2: "12", key: "1vg2s9" }],
  ["line", { x1: "15", y1: "12", x2: "21", y2: "12", key: "fnrdho" }]
]);
const GitCompare = createLucideIcon("GitCompareIcon", [
  ["circle", { cx: "18", cy: "18", r: "3", key: "1xkwt0" }],
  ["circle", { cx: "6", cy: "6", r: "3", key: "1lh9wr" }],
  ["path", { d: "M13 6h3a2 2 0 0 1 2 2v7", key: "1yeb86" }],
  ["path", { d: "M11 18H8a2 2 0 0 1-2-2V9", key: "19pyzm" }]
]);
const GitFork = createLucideIcon("GitForkIcon", [
  ["circle", { cx: "12", cy: "18", r: "3", key: "1mpf1b" }],
  ["circle", { cx: "6", cy: "6", r: "3", key: "1lh9wr" }],
  ["circle", { cx: "18", cy: "6", r: "3", key: "1h7g24" }],
  ["path", { d: "M18 9v1a2 2 0 0 1-2 2H8a2 2 0 0 1-2-2V9", key: "c89w8i" }],
  ["path", { d: "M12 12v3", key: "158kv8" }]
]);
const GitMerge = createLucideIcon("GitMergeIcon", [
  ["circle", { cx: "18", cy: "18", r: "3", key: "1xkwt0" }],
  ["circle", { cx: "6", cy: "6", r: "3", key: "1lh9wr" }],
  ["path", { d: "M6 21V9a9 9 0 0 0 9 9", key: "7kw0sc" }]
]);
const GitPullRequestClosed = createLucideIcon("GitPullRequestClosedIcon", [
  ["circle", { cx: "18", cy: "18", r: "3", key: "1xkwt0" }],
  ["circle", { cx: "6", cy: "6", r: "3", key: "1lh9wr" }],
  ["path", { d: "M18 11.5V15", key: "65xf6f" }],
  ["path", { d: "m21 3-6 6", key: "16nqsk" }],
  ["path", { d: "m21 9-6-6", key: "9j17rh" }],
  ["line", { x1: "6", y1: "9", x2: "6", y2: "21", key: "79th4h" }]
]);
const GitPullRequestDraft = createLucideIcon("GitPullRequestDraftIcon", [
  ["circle", { cx: "18", cy: "18", r: "3", key: "1xkwt0" }],
  ["circle", { cx: "6", cy: "6", r: "3", key: "1lh9wr" }],
  ["path", { d: "M18 6V5", key: "1oao2s" }],
  ["path", { d: "M18 11v-1", key: "11c8tz" }],
  ["line", { x1: "6", y1: "9", x2: "6", y2: "21", key: "79th4h" }]
]);
const GitPullRequest = createLucideIcon("GitPullRequestIcon", [
  ["circle", { cx: "18", cy: "18", r: "3", key: "1xkwt0" }],
  ["circle", { cx: "6", cy: "6", r: "3", key: "1lh9wr" }],
  ["path", { d: "M13 6h3a2 2 0 0 1 2 2v7", key: "1yeb86" }],
  ["line", { x1: "6", y1: "9", x2: "6", y2: "21", key: "79th4h" }]
]);
const Github = createLucideIcon("GithubIcon", [
  [
    "path",
    {
      d: "M15 22v-4a4.8 4.8 0 0 0-1-3.5c3 0 6-2 6-5.5.08-1.25-.27-2.48-1-3.5.28-1.15.28-2.35 0-3.5 0 0-1 0-3 1.5-2.64-.5-5.36-.5-8 0C6 2 5 2 5 2c-.3 1.15-.3 2.35 0 3.5A5.403 5.403 0 0 0 4 9c0 3.5 3 5.5 6 5.5-.39.49-.68 1.05-.85 1.65-.17.6-.22 1.23-.15 1.85v4",
      key: "tonef"
    }
  ],
  ["path", { d: "M9 18c-4.51 2-5-2-7-2", key: "9comsn" }]
]);
const Gitlab = createLucideIcon("GitlabIcon", [
  [
    "path",
    {
      d: "m22 13.29-3.33-10a.42.42 0 0 0-.14-.18.38.38 0 0 0-.22-.11.39.39 0 0 0-.23.07.42.42 0 0 0-.14.18l-2.26 6.67H8.32L6.1 3.26a.42.42 0 0 0-.1-.18.38.38 0 0 0-.26-.08.39.39 0 0 0-.23.07.42.42 0 0 0-.14.18L2 13.29a.74.74 0 0 0 .27.83L12 21l9.69-6.88a.71.71 0 0 0 .31-.83Z",
      key: "148pdi"
    }
  ]
]);
const GlassWater = createLucideIcon("GlassWaterIcon", [
  [
    "path",
    {
      d: "M15.2 22H8.8a2 2 0 0 1-2-1.79L5 3h14l-1.81 17.21A2 2 0 0 1 15.2 22Z",
      key: "48rfw3"
    }
  ],
  ["path", { d: "M6 12a5 5 0 0 1 6 0 5 5 0 0 0 6 0", key: "mjntcy" }]
]);
const Glasses = createLucideIcon("GlassesIcon", [
  ["circle", { cx: "6", cy: "15", r: "4", key: "vux9w4" }],
  ["circle", { cx: "18", cy: "15", r: "4", key: "18o8ve" }],
  ["path", { d: "M14 15a2 2 0 0 0-2-2 2 2 0 0 0-2 2", key: "1ag4bs" }],
  ["path", { d: "M2.5 13 5 7c.7-1.3 1.4-2 3-2", key: "1hm1gs" }],
  ["path", { d: "M21.5 13 19 7c-.7-1.3-1.5-2-3-2", key: "1r31ai" }]
]);
const Globe2 = createLucideIcon("Globe2Icon", [
  ["path", { d: "M21.54 15H17a2 2 0 0 0-2 2v4.54", key: "1djwo0" }],
  [
    "path",
    {
      d: "M7 3.34V5a3 3 0 0 0 3 3v0a2 2 0 0 1 2 2v0c0 1.1.9 2 2 2v0a2 2 0 0 0 2-2v0c0-1.1.9-2 2-2h3.17",
      key: "1fi5u6"
    }
  ],
  [
    "path",
    {
      d: "M11 21.95V18a2 2 0 0 0-2-2v0a2 2 0 0 1-2-2v-1a2 2 0 0 0-2-2H2.05",
      key: "xsiumc"
    }
  ],
  ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }]
]);
const Globe = createLucideIcon("GlobeIcon", [
  ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
  ["line", { x1: "2", y1: "12", x2: "22", y2: "12", key: "zvmn4p" }],
  [
    "path",
    {
      d: "M12 2a15.3 15.3 0 0 1 4 10 15.3 15.3 0 0 1-4 10 15.3 15.3 0 0 1-4-10 15.3 15.3 0 0 1 4-10z",
      key: "nb9nel"
    }
  ]
]);
const Grab = createLucideIcon("GrabIcon", [
  ["path", { d: "M18 11.5V9a2 2 0 0 0-2-2v0a2 2 0 0 0-2 2v1.4", key: "n5nng" }],
  ["path", { d: "M14 10V8a2 2 0 0 0-2-2v0a2 2 0 0 0-2 2v2", key: "185i9d" }],
  ["path", { d: "M10 9.9V9a2 2 0 0 0-2-2v0a2 2 0 0 0-2 2v5", key: "11pz95" }],
  ["path", { d: "M6 14v0a2 2 0 0 0-2-2v0a2 2 0 0 0-2 2v0", key: "16yk7l" }],
  [
    "path",
    {
      d: "M18 11v0a2 2 0 1 1 4 0v3a8 8 0 0 1-8 8h-4a8 8 0 0 1-8-8 2 2 0 1 1 4 0",
      key: "nzvb1c"
    }
  ]
]);
const GraduationCap = createLucideIcon("GraduationCapIcon", [
  ["path", { d: "M22 10v6M2 10l10-5 10 5-10 5z", key: "1ef52a" }],
  ["path", { d: "M6 12v5c3 3 9 3 12 0v-5", key: "1f75yj" }]
]);
const Grape = createLucideIcon("GrapeIcon", [
  ["path", { d: "M22 5V2l-5.89 5.89", key: "1eenpo" }],
  ["circle", { cx: "16.6", cy: "15.89", r: "3", key: "xjtalx" }],
  ["circle", { cx: "8.11", cy: "7.4", r: "3", key: "u2fv6i" }],
  ["circle", { cx: "12.35", cy: "11.65", r: "3", key: "i6i8g7" }],
  ["circle", { cx: "13.91", cy: "5.85", r: "3", key: "6ye0dv" }],
  ["circle", { cx: "18.15", cy: "10.09", r: "3", key: "snx9no" }],
  ["circle", { cx: "6.56", cy: "13.2", r: "3", key: "17x4xg" }],
  ["circle", { cx: "10.8", cy: "17.44", r: "3", key: "1hogw9" }],
  ["circle", { cx: "5", cy: "19", r: "3", key: "1sn6vo" }]
]);
const Grid = createLucideIcon("GridIcon", [
  [
    "rect",
    {
      x: "3",
      y: "3",
      width: "18",
      height: "18",
      rx: "2",
      ry: "2",
      key: "maln0c"
    }
  ],
  ["line", { x1: "3", y1: "9", x2: "21", y2: "9", key: "1uch6j" }],
  ["line", { x1: "3", y1: "15", x2: "21", y2: "15", key: "1xojw2" }],
  ["line", { x1: "9", y1: "3", x2: "9", y2: "21", key: "nvcl17" }],
  ["line", { x1: "15", y1: "3", x2: "15", y2: "21", key: "jcv93v" }]
]);
const GripHorizontal = createLucideIcon("GripHorizontalIcon", [
  ["circle", { cx: "12", cy: "9", r: "1", key: "124mty" }],
  ["circle", { cx: "19", cy: "9", r: "1", key: "1ruzo2" }],
  ["circle", { cx: "5", cy: "9", r: "1", key: "1a8b28" }],
  ["circle", { cx: "12", cy: "15", r: "1", key: "1e56xg" }],
  ["circle", { cx: "19", cy: "15", r: "1", key: "1a92ep" }],
  ["circle", { cx: "5", cy: "15", r: "1", key: "5r1jwy" }]
]);
const GripVertical = createLucideIcon("GripVerticalIcon", [
  ["circle", { cx: "9", cy: "12", r: "1", key: "1vctgf" }],
  ["circle", { cx: "9", cy: "5", r: "1", key: "hp0tcf" }],
  ["circle", { cx: "9", cy: "19", r: "1", key: "fkjjf6" }],
  ["circle", { cx: "15", cy: "12", r: "1", key: "1tmaij" }],
  ["circle", { cx: "15", cy: "5", r: "1", key: "19l28e" }],
  ["circle", { cx: "15", cy: "19", r: "1", key: "f4zoj3" }]
]);
const Grip = createLucideIcon("GripIcon", [
  ["circle", { cx: "12", cy: "5", r: "1", key: "gxeob9" }],
  ["circle", { cx: "19", cy: "5", r: "1", key: "w8mnmm" }],
  ["circle", { cx: "5", cy: "5", r: "1", key: "lttvr7" }],
  ["circle", { cx: "12", cy: "12", r: "1", key: "41hilf" }],
  ["circle", { cx: "19", cy: "12", r: "1", key: "1wjl8i" }],
  ["circle", { cx: "5", cy: "12", r: "1", key: "1pcz8c" }],
  ["circle", { cx: "12", cy: "19", r: "1", key: "lyex9k" }],
  ["circle", { cx: "19", cy: "19", r: "1", key: "shf9b7" }],
  ["circle", { cx: "5", cy: "19", r: "1", key: "bfqh0e" }]
]);
const Hammer = createLucideIcon("HammerIcon", [
  [
    "path",
    {
      d: "m15 12-8.5 8.5c-.83.83-2.17.83-3 0 0 0 0 0 0 0a2.12 2.12 0 0 1 0-3L12 9",
      key: "1afvon"
    }
  ],
  ["path", { d: "M17.64 15 22 10.64", key: "zsji6s" }],
  [
    "path",
    {
      d: "m20.91 11.7-1.25-1.25c-.6-.6-.93-1.4-.93-2.25v-.86L16.01 4.6a5.56 5.56 0 0 0-3.94-1.64H9l.92.82A6.18 6.18 0 0 1 12 8.4v1.56l2 2h2.47l2.26 1.91",
      key: "lehyy1"
    }
  ]
]);
const HandMetal = createLucideIcon("HandMetalIcon", [
  [
    "path",
    { d: "M18 12.5V10a2 2 0 0 0-2-2v0a2 2 0 0 0-2 2v1.4", key: "7eki13" }
  ],
  ["path", { d: "M14 11V9a2 2 0 1 0-4 0v2", key: "94qvcw" }],
  ["path", { d: "M10 10.5V5a2 2 0 1 0-4 0v9", key: "m1ah89" }],
  [
    "path",
    {
      d: "m7 15-1.76-1.76a2 2 0 0 0-2.83 2.82l3.6 3.6C7.5 21.14 9.2 22 12 22h2a8 8 0 0 0 8-8V7a2 2 0 1 0-4 0v5",
      key: "t1skq1"
    }
  ]
]);
const Hand = createLucideIcon("HandIcon", [
  ["path", { d: "M18 11V6a2 2 0 0 0-2-2v0a2 2 0 0 0-2 2v0", key: "aigmz7" }],
  ["path", { d: "M14 10V4a2 2 0 0 0-2-2v0a2 2 0 0 0-2 2v2", key: "1n6bmn" }],
  ["path", { d: "M10 10.5V6a2 2 0 0 0-2-2v0a2 2 0 0 0-2 2v8", key: "a9iiix" }],
  [
    "path",
    {
      d: "M18 8a2 2 0 1 1 4 0v6a8 8 0 0 1-8 8h-2c-2.8 0-4.5-.86-5.99-2.34l-3.6-3.6a2 2 0 0 1 2.83-2.82L7 15",
      key: "1s1gnw"
    }
  ]
]);
const HardDrive = createLucideIcon("HardDriveIcon", [
  ["line", { x1: "22", y1: "12", x2: "2", y2: "12", key: "3mrjqx" }],
  [
    "path",
    {
      d: "M5.45 5.11 2 12v6a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-6l-3.45-6.89A2 2 0 0 0 16.76 4H7.24a2 2 0 0 0-1.79 1.11z",
      key: "oot6mr"
    }
  ],
  ["line", { x1: "6", y1: "16", x2: "6.01", y2: "16", key: "17k2t0" }],
  ["line", { x1: "10", y1: "16", x2: "10.01", y2: "16", key: "1oplzg" }]
]);
const HardHat = createLucideIcon("HardHatIcon", [
  [
    "path",
    {
      d: "M2 18a1 1 0 0 0 1 1h18a1 1 0 0 0 1-1v-2a1 1 0 0 0-1-1H3a1 1 0 0 0-1 1v2z",
      key: "1dej2m"
    }
  ],
  ["path", { d: "M10 10V5a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v5", key: "1p9q5i" }],
  ["path", { d: "M4 15v-3a6 6 0 0 1 6-6h0", key: "1uc279" }],
  ["path", { d: "M14 6h0a6 6 0 0 1 6 6v3", key: "1j9mnm" }]
]);
const Hash = createLucideIcon("HashIcon", [
  ["line", { x1: "4", y1: "9", x2: "20", y2: "9", key: "vg9vz1" }],
  ["line", { x1: "4", y1: "15", x2: "20", y2: "15", key: "12vs86" }],
  ["line", { x1: "10", y1: "3", x2: "8", y2: "21", key: "18wc2u" }],
  ["line", { x1: "16", y1: "3", x2: "14", y2: "21", key: "ohqwl5" }]
]);
const Haze = createLucideIcon("HazeIcon", [
  ["path", { d: "m5.2 6.2 1.4 1.4", key: "17imol" }],
  ["path", { d: "M2 13h2", key: "13gyu8" }],
  ["path", { d: "M20 13h2", key: "16rner" }],
  ["path", { d: "m17.4 7.6 1.4-1.4", key: "t4xlah" }],
  ["path", { d: "M22 17H2", key: "1gtaj3" }],
  ["path", { d: "M22 21H2", key: "1gy6en" }],
  ["path", { d: "M16 13a4 4 0 0 0-8 0", key: "1dyczq" }],
  ["path", { d: "M12 5V2.5", key: "1vytko" }]
]);
const Heading1 = createLucideIcon("Heading1Icon", [
  ["path", { d: "M4 12h8", key: "17cfdx" }],
  ["path", { d: "M4 18V6", key: "1rz3zl" }],
  ["path", { d: "M12 18V6", key: "zqpxq5" }],
  ["path", { d: "m17 12 3-2v8", key: "1hhhft" }]
]);
const Heading2 = createLucideIcon("Heading2Icon", [
  ["path", { d: "M4 12h8", key: "17cfdx" }],
  ["path", { d: "M4 18V6", key: "1rz3zl" }],
  ["path", { d: "M12 18V6", key: "zqpxq5" }],
  ["path", { d: "M21 18h-4c0-4 4-3 4-6 0-1.5-2-2.5-4-1", key: "9jr5yi" }]
]);
const Heading3 = createLucideIcon("Heading3Icon", [
  ["path", { d: "M4 12h8", key: "17cfdx" }],
  ["path", { d: "M4 18V6", key: "1rz3zl" }],
  ["path", { d: "M12 18V6", key: "zqpxq5" }],
  [
    "path",
    { d: "M17.5 10.5c1.7-1 3.5 0 3.5 1.5a2 2 0 0 1-2 2", key: "68ncm8" }
  ],
  ["path", { d: "M17 17.5c2 1.5 4 .3 4-1.5a2 2 0 0 0-2-2", key: "1ejuhz" }]
]);
const Heading4 = createLucideIcon("Heading4Icon", [
  ["path", { d: "M4 12h8", key: "17cfdx" }],
  ["path", { d: "M4 18V6", key: "1rz3zl" }],
  ["path", { d: "M12 18V6", key: "zqpxq5" }],
  ["path", { d: "M17 10v4h4", key: "13sv97" }],
  ["path", { d: "M21 10v8", key: "1kdml4" }]
]);
const Heading5 = createLucideIcon("Heading5Icon", [
  ["path", { d: "M4 12h8", key: "17cfdx" }],
  ["path", { d: "M4 18V6", key: "1rz3zl" }],
  ["path", { d: "M12 18V6", key: "zqpxq5" }],
  ["path", { d: "M17 13v-3h4", key: "1nvgqp" }],
  [
    "path",
    {
      d: "M17 17.7c.4.2.8.3 1.3.3 1.5 0 2.7-1.1 2.7-2.5S19.8 13 18.3 13H17",
      key: "2nebdn"
    }
  ]
]);
const Heading6 = createLucideIcon("Heading6Icon", [
  ["path", { d: "M4 12h8", key: "17cfdx" }],
  ["path", { d: "M4 18V6", key: "1rz3zl" }],
  ["path", { d: "M12 18V6", key: "zqpxq5" }],
  ["circle", { cx: "19", cy: "16", r: "2", key: "15mx69" }],
  ["path", { d: "M20 10c-2 2-3 3.5-3 6", key: "f35dl0" }]
]);
const Heading = createLucideIcon("HeadingIcon", [
  ["path", { d: "M6 12h12", key: "8npq4p" }],
  ["path", { d: "M6 20V4", key: "1w1bmo" }],
  ["path", { d: "M18 20V4", key: "o2hl4u" }]
]);
const Headphones = createLucideIcon("HeadphonesIcon", [
  ["path", { d: "M3 18v-6a9 9 0 0 1 18 0v6", key: "e2ovd" }],
  [
    "path",
    {
      d: "M21 19a2 2 0 0 1-2 2h-1a2 2 0 0 1-2-2v-3a2 2 0 0 1 2-2h3zM3 19a2 2 0 0 0 2 2h1a2 2 0 0 0 2-2v-3a2 2 0 0 0-2-2H3z",
      key: "110y4r"
    }
  ]
]);
const HeartCrack = createLucideIcon("HeartCrackIcon", [
  [
    "path",
    {
      d: "M20.42 4.58a5.4 5.4 0 0 0-7.65 0l-.77.78-.77-.78a5.4 5.4 0 0 0-7.65 0C1.46 6.7 1.33 10.28 4 13l8 8 8-8c2.67-2.72 2.54-6.3.42-8.42z",
      key: "3q7jk9"
    }
  ],
  ["path", { d: "m12 13-1-1 2-2-3-2.5 2.77-2.92", key: "5oba2v" }]
]);
const HeartHandshake = createLucideIcon("HeartHandshakeIcon", [
  [
    "path",
    {
      d: "M20.42 4.58a5.4 5.4 0 0 0-7.65 0l-.77.78-.77-.78a5.4 5.4 0 0 0-7.65 0C1.46 6.7 1.33 10.28 4 13l8 8 8-8c2.67-2.72 2.54-6.3.42-8.42z",
      key: "3q7jk9"
    }
  ],
  [
    "path",
    {
      d: "M12 5.36 8.87 8.5a2.13 2.13 0 0 0 0 3h0a2.13 2.13 0 0 0 3 0l2.26-2.21a3 3 0 0 1 4.22 0l2.4 2.4",
      key: "t2xyyg"
    }
  ],
  ["path", { d: "m18 15-2-2", key: "60u0ii" }],
  ["path", { d: "m15 18-2-2", key: "6p76be" }]
]);
const HeartOff = createLucideIcon("HeartOffIcon", [
  [
    "path",
    {
      d: "M4.12 4.107a5.4 5.4 0 0 0-.538.473C1.46 6.7 1.33 10.28 4 13l8 8 4.5-4.5",
      key: "yskeks"
    }
  ],
  [
    "path",
    {
      d: "M19.328 13.672 20 13c2.67-2.72 2.54-6.3.42-8.42a5.4 5.4 0 0 0-7.65 0l-.77.78-.77-.78a5.4 5.4 0 0 0-2.386-1.393",
      key: "1340qr"
    }
  ],
  ["line", { x1: "2", y1: "2", x2: "22", y2: "22", key: "1w4vcy" }]
]);
const HeartPulse = createLucideIcon("HeartPulseIcon", [
  [
    "path",
    {
      d: "M20.42 4.58a5.4 5.4 0 0 0-7.65 0l-.77.78-.77-.78a5.4 5.4 0 0 0-7.65 0C1.46 6.7 1.33 10.28 4 13l8 8 8-8c2.67-2.72 2.54-6.3.42-8.42z",
      key: "3q7jk9"
    }
  ],
  ["path", { d: "M3.5 12h6l.5-1 2 4.5 2-7 1.5 3.5h5", key: "rc0z4z" }]
]);
const Heart = createLucideIcon("HeartIcon", [
  [
    "path",
    {
      d: "M20.42 4.58a5.4 5.4 0 0 0-7.65 0l-.77.78-.77-.78a5.4 5.4 0 0 0-7.65 0C1.46 6.7 1.33 10.28 4 13l8 8 8-8c2.67-2.72 2.54-6.3.42-8.42z",
      key: "3q7jk9"
    }
  ]
]);
const HelpCircle = createLucideIcon("HelpCircleIcon", [
  ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
  ["path", { d: "M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3", key: "1u773s" }],
  ["line", { x1: "12", y1: "17", x2: "12.01", y2: "17", key: "kdstpg" }]
]);
const HelpingHand = createLucideIcon("HelpingHandIcon", [
  [
    "path",
    {
      d: "m3 15 5.12-5.12A3 3 0 0 1 10.24 9H13a2 2 0 1 1 0 4h-2.5m4-.68 4.17-4.89a1.88 1.88 0 0 1 2.92 2.36l-4.2 5.94A3 3 0 0 1 14.96 17H9.83a2 2 0 0 0-1.42.59L7 19",
      key: "nitrv7"
    }
  ],
  ["path", { d: "m2 14 6 6", key: "g6j1uo" }]
]);
const Hexagon = createLucideIcon("HexagonIcon", [
  [
    "path",
    {
      d: "M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z",
      key: "yt0hxn"
    }
  ]
]);
const Highlighter = createLucideIcon("HighlighterIcon", [
  ["path", { d: "m9 11-6 6v3h9l3-3", key: "1a3l36" }],
  [
    "path",
    {
      d: "m22 12-4.6 4.6a2 2 0 0 1-2.8 0l-5.2-5.2a2 2 0 0 1 0-2.8L14 4",
      key: "14a9rk"
    }
  ]
]);
const History2 = createLucideIcon("HistoryIcon", [
  ["path", { d: "M3 3v5h5", key: "1xhq8a" }],
  ["path", { d: "M3.05 13A9 9 0 1 0 6 5.3L3 8", key: "1xoms2" }],
  ["path", { d: "M12 7v5l4 2", key: "1fdv2h" }]
]);
const Home = createLucideIcon("HomeIcon", [
  [
    "path",
    { d: "m3 9 9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z", key: "y5dka4" }
  ],
  ["polyline", { points: "9 22 9 12 15 12 15 22", key: "e2us08" }]
]);
const HopOff = createLucideIcon("HopOffIcon", [
  [
    "path",
    {
      d: "M17.5 5.5C19 7 20.5 9 21 11c-1.323.265-2.646.39-4.118.226",
      key: "10j95a"
    }
  ],
  [
    "path",
    { d: "M5.5 17.5C7 19 9 20.5 11 21c.5-2.5.5-5-1-8.5", key: "1mqyjd" }
  ],
  ["path", { d: "M17.5 17.5c-2.5 0-4 0-6-1", key: "11elt5" }],
  ["path", { d: "M20 11.5c1 1.5 2 3.5 2 4.5", key: "13ezvz" }],
  [
    "path",
    { d: "M11.5 20c1.5 1 3.5 2 4.5 2 .5-1.5 0-3-.5-4.5", key: "1ufrz1" }
  ],
  ["path", { d: "M22 22c-2 0-3.5-.5-5.5-1.5", key: "1n8vbj" }],
  [
    "path",
    {
      d: "M4.783 4.782C1.073 8.492 1 14.5 5 18c1-1 2-4.5 1.5-6.5 1.5 1 4 1 5.5.5M8.227 2.57C11.578 1.335 15.453 2.089 18 5c-.88.88-3.7 1.761-5.726 1.618",
      key: "1h85u8"
    }
  ],
  ["line", { x1: "2", y1: "2", x2: "22", y2: "22", key: "1w4vcy" }]
]);
const Hop = createLucideIcon("HopIcon", [
  [
    "path",
    { d: "M17.5 5.5C19 7 20.5 9 21 11c-2.5.5-5 .5-8.5-1", key: "l0z2za" }
  ],
  [
    "path",
    { d: "M5.5 17.5C7 19 9 20.5 11 21c.5-2.5.5-5-1-8.5", key: "1mqyjd" }
  ],
  ["path", { d: "M16.5 11.5c1 2 1 3.5 1 6-2.5 0-4 0-6-1", key: "10xoad" }],
  ["path", { d: "M20 11.5c1 1.5 2 3.5 2 4.5-1.5.5-3 0-4.5-.5", key: "1a4gpx" }],
  [
    "path",
    { d: "M11.5 20c1.5 1 3.5 2 4.5 2 .5-1.5 0-3-.5-4.5", key: "1ufrz1" }
  ],
  [
    "path",
    { d: "M20.5 16.5c1 2 1.5 3.5 1.5 5.5-2 0-3.5-.5-5.5-1.5", key: "1ok5d2" }
  ],
  [
    "path",
    {
      d: "M4.783 4.782C8.493 1.072 14.5 1 18 5c-1 1-4.5 2-6.5 1.5 1 1.5 1 4 .5 5.5-1.5.5-4 .5-5.5-.5C7 13.5 6 17 5 18c-4-3.5-3.927-9.508-.217-13.218Z",
      key: "8hlroy"
    }
  ],
  ["path", { d: "M4.5 4.5 3 3c-.184-.185-.184-.816 0-1", key: "q3aj97" }]
]);
const Hourglass = createLucideIcon("HourglassIcon", [
  ["path", { d: "M5 22h14", key: "ehvnwv" }],
  ["path", { d: "M5 2h14", key: "pdyrp9" }],
  [
    "path",
    {
      d: "M17 22v-4.172a2 2 0 0 0-.586-1.414L12 12l-4.414 4.414A2 2 0 0 0 7 17.828V22",
      key: "1d314k"
    }
  ],
  [
    "path",
    {
      d: "M7 2v4.172a2 2 0 0 0 .586 1.414L12 12l4.414-4.414A2 2 0 0 0 17 6.172V2",
      key: "1vvvr6"
    }
  ]
]);
const IceCream2 = createLucideIcon("IceCream2Icon", [
  [
    "path",
    {
      d: "M12 17c5 0 8-2.69 8-6H4c0 3.31 3 6 8 6Zm-4 4h8m-4-3v3M5.14 11a3.5 3.5 0 1 1 6.71 0",
      key: "g86ewz"
    }
  ],
  ["path", { d: "M12.14 11a3.5 3.5 0 1 1 6.71 0", key: "4k3m1s" }],
  ["path", { d: "M15.5 6.5a3.5 3.5 0 1 0-7 0", key: "zmuahr" }]
]);
const IceCream = createLucideIcon("IceCreamIcon", [
  ["path", { d: "m7 11 4.08 10.35a1 1 0 0 0 1.84 0L17 11", key: "1v6356" }],
  ["path", { d: "M17 7A5 5 0 0 0 7 7", key: "151p3v" }],
  ["path", { d: "M17 7a2 2 0 0 1 0 4H7a2 2 0 0 1 0-4", key: "1sdaij" }]
]);
const ImageMinus = createLucideIcon("ImageMinusIcon", [
  [
    "path",
    {
      d: "M21 9v10a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h7",
      key: "m87ecr"
    }
  ],
  ["line", { x1: "16", y1: "5", x2: "22", y2: "5", key: "c5ve4s" }],
  ["circle", { cx: "9", cy: "9", r: "2", key: "af1f0g" }],
  ["path", { d: "m21 15-3.086-3.086a2 2 0 0 0-2.828 0L6 21", key: "1xmnt7" }]
]);
const ImageOff = createLucideIcon("ImageOffIcon", [
  ["line", { x1: "2", y1: "2", x2: "22", y2: "22", key: "1w4vcy" }],
  ["path", { d: "M10.41 10.41a2 2 0 1 1-2.83-2.83", key: "1bzlo9" }],
  ["line", { x1: "13.5", y1: "13.5", x2: "6", y2: "21", key: "1oc4ns" }],
  ["line", { x1: "18", y1: "12", x2: "21", y2: "15", key: "1j50dh" }],
  [
    "path",
    {
      d: "M3.59 3.59A1.99 1.99 0 0 0 3 5v14a2 2 0 0 0 2 2h14c.55 0 1.052-.22 1.41-.59",
      key: "mmje98"
    }
  ],
  ["path", { d: "M21 15V5a2 2 0 0 0-2-2H9", key: "43el77" }]
]);
const ImagePlus = createLucideIcon("ImagePlusIcon", [
  [
    "path",
    {
      d: "M21 12v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h7",
      key: "31hg93"
    }
  ],
  ["line", { x1: "16", y1: "5", x2: "22", y2: "5", key: "c5ve4s" }],
  ["line", { x1: "19", y1: "2", x2: "19", y2: "8", key: "12oc9j" }],
  ["circle", { cx: "9", cy: "9", r: "2", key: "af1f0g" }],
  ["path", { d: "m21 15-3.086-3.086a2 2 0 0 0-2.828 0L6 21", key: "1xmnt7" }]
]);
const Image = createLucideIcon("ImageIcon", [
  [
    "rect",
    {
      x: "3",
      y: "3",
      width: "18",
      height: "18",
      rx: "2",
      ry: "2",
      key: "maln0c"
    }
  ],
  ["circle", { cx: "9", cy: "9", r: "2", key: "af1f0g" }],
  ["path", { d: "m21 15-3.086-3.086a2 2 0 0 0-2.828 0L6 21", key: "1xmnt7" }]
]);
const Import2 = createLucideIcon("ImportIcon", [
  ["path", { d: "M12 3v12", key: "1x0j5s" }],
  ["path", { d: "m8 11 4 4 4-4", key: "1dohi6" }],
  [
    "path",
    {
      d: "M8 5H4a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2h-4",
      key: "1ywtjm"
    }
  ]
]);
const Inbox = createLucideIcon("InboxIcon", [
  ["polyline", { points: "22 12 16 12 14 15 10 15 8 12 2 12", key: "o97t9d" }],
  [
    "path",
    {
      d: "M5.45 5.11 2 12v6a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-6l-3.45-6.89A2 2 0 0 0 16.76 4H7.24a2 2 0 0 0-1.79 1.11z",
      key: "oot6mr"
    }
  ]
]);
const Indent = createLucideIcon("IndentIcon", [
  ["polyline", { points: "3 8 7 12 3 16", key: "f3rxhf" }],
  ["line", { x1: "21", y1: "12", x2: "11", y2: "12", key: "1xy73i" }],
  ["line", { x1: "21", y1: "6", x2: "11", y2: "6", key: "97xvqg" }],
  ["line", { x1: "21", y1: "18", x2: "11", y2: "18", key: "1r7j8g" }]
]);
const IndianRupee = createLucideIcon("IndianRupeeIcon", [
  ["path", { d: "M6 3h12", key: "ggurg9" }],
  ["path", { d: "M6 8h12", key: "6g4wlu" }],
  ["path", { d: "m6 13 8.5 8", key: "u1kupk" }],
  ["path", { d: "M6 13h3", key: "wdp6ag" }],
  ["path", { d: "M9 13c6.667 0 6.667-10 0-10", key: "1nkvk2" }]
]);
const Infinity$1 = createLucideIcon("InfinityIcon", [
  [
    "path",
    {
      d: "M18.178 8c5.096 0 5.096 8 0 8-5.095 0-7.133-8-12.739-8-4.585 0-4.585 8 0 8 5.606 0 7.644-8 12.74-8z",
      key: "13d65y"
    }
  ]
]);
const Info = createLucideIcon("InfoIcon", [
  ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
  ["line", { x1: "12", y1: "16", x2: "12", y2: "12", key: "dkqlv3" }],
  ["line", { x1: "12", y1: "8", x2: "12.01", y2: "8", key: "1kl4hv" }]
]);
const Inspect = createLucideIcon("InspectIcon", [
  [
    "path",
    {
      d: "M21 11V5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h6",
      key: "14rsvq"
    }
  ],
  ["path", { d: "m12 12 4 10 1.7-4.3L22 16Z", key: "64ilsv" }]
]);
const Instagram = createLucideIcon("InstagramIcon", [
  [
    "rect",
    {
      x: "2",
      y: "2",
      width: "20",
      height: "20",
      rx: "5",
      ry: "5",
      key: "cdfzoc"
    }
  ],
  [
    "path",
    { d: "M16 11.37A4 4 0 1 1 12.63 8 4 4 0 0 1 16 11.37z", key: "9exkf1" }
  ],
  ["line", { x1: "17.5", y1: "6.5", x2: "17.51", y2: "6.5", key: "643fve" }]
]);
const Italic = createLucideIcon("ItalicIcon", [
  ["line", { x1: "19", y1: "4", x2: "10", y2: "4", key: "ohvhe" }],
  ["line", { x1: "14", y1: "20", x2: "5", y2: "20", key: "pl6qj" }],
  ["line", { x1: "15", y1: "4", x2: "9", y2: "20", key: "baf5vk" }]
]);
const JapaneseYen = createLucideIcon("JapaneseYenIcon", [
  ["path", { d: "M12 9.5V21m0-11.5L6 3m6 6.5L18 3", key: "2ej80x" }],
  ["path", { d: "M6 15h12", key: "1hwgt5" }],
  ["path", { d: "M6 11h12", key: "wf4gp6" }]
]);
const Joystick = createLucideIcon("JoystickIcon", [
  [
    "path",
    {
      d: "M21 17a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v2a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-2Z",
      key: "jg2n2t"
    }
  ],
  ["path", { d: "M6 15v-2", key: "gd6mvg" }],
  ["path", { d: "M12 15V9", key: "8c7uyn" }],
  ["circle", { cx: "12", cy: "6", r: "3", key: "1gm2ql" }]
]);
const Key = createLucideIcon("KeyIcon", [
  [
    "path",
    {
      d: "m21 2-2 2m-7.61 7.61a5.5 5.5 0 1 1-7.778 7.778 5.5 5.5 0 0 1 7.777-7.777zm0 0L15.5 7.5m0 0 3 3L22 7l-3-3m-3.5 3.5L19 4",
      key: "1b7wfm"
    }
  ]
]);
const Keyboard = createLucideIcon("KeyboardIcon", [
  [
    "rect",
    {
      x: "2",
      y: "4",
      width: "20",
      height: "16",
      rx: "2",
      ry: "2",
      key: "xgg3gf"
    }
  ],
  ["path", { d: "M6 8h.001", key: "1ej0i3" }],
  ["path", { d: "M10 8h.001", key: "1x2st2" }],
  ["path", { d: "M14 8h.001", key: "1vkmyp" }],
  ["path", { d: "M18 8h.001", key: "kfsenl" }],
  ["path", { d: "M8 12h.001", key: "1sjpby" }],
  ["path", { d: "M12 12h.001", key: "al75ts" }],
  ["path", { d: "M16 12h.001", key: "931bgk" }],
  ["path", { d: "M7 16h10", key: "wp8him" }]
]);
const LampCeiling = createLucideIcon("LampCeilingIcon", [
  ["path", { d: "M12 2v5", key: "nd4vlx" }],
  ["path", { d: "M6 7h12l4 9H2l4-9Z", key: "123d64" }],
  ["path", { d: "M9.17 16a3 3 0 1 0 5.66 0", key: "1061mw" }]
]);
const LampDesk = createLucideIcon("LampDeskIcon", [
  ["path", { d: "m14 5-3 3 2 7 8-8-7-2Z", key: "1b0msb" }],
  ["path", { d: "m14 5-3 3-3-3 3-3 3 3Z", key: "1uemms" }],
  ["path", { d: "M9.5 6.5 4 12l3 6", key: "1bx08v" }],
  ["path", { d: "M3 22v-2c0-1.1.9-2 2-2h4a2 2 0 0 1 2 2v2H3Z", key: "wap775" }]
]);
const LampFloor = createLucideIcon("LampFloorIcon", [
  ["path", { d: "M9 2h6l3 7H6l3-7Z", key: "wcx6mj" }],
  ["path", { d: "M12 9v13", key: "3n1su1" }],
  ["path", { d: "M9 22h6", key: "1rlq3v" }]
]);
const LampWallDown = createLucideIcon("LampWallDownIcon", [
  ["path", { d: "M11 13h6l3 7H8l3-7Z", key: "9n3qlo" }],
  ["path", { d: "M14 13V8a2 2 0 0 0-2-2H8", key: "1hu4hb" }],
  ["path", { d: "M4 9h2a2 2 0 0 0 2-2V5a2 2 0 0 0-2-2H4v6Z", key: "s053bc" }]
]);
const LampWallUp = createLucideIcon("LampWallUpIcon", [
  ["path", { d: "M11 4h6l3 7H8l3-7Z", key: "11x1ee" }],
  ["path", { d: "M14 11v5a2 2 0 0 1-2 2H8", key: "eutp5o" }],
  ["path", { d: "M4 15h2a2 2 0 0 1 2 2v2a2 2 0 0 1-2 2H4v-6Z", key: "1iuthr" }]
]);
const Lamp = createLucideIcon("LampIcon", [
  ["path", { d: "M8 2h8l4 10H4L8 2Z", key: "9dma5w" }],
  ["path", { d: "M12 12v6", key: "3ahymv" }],
  ["path", { d: "M8 22v-2c0-1.1.9-2 2-2h4a2 2 0 0 1 2 2v2H8Z", key: "mwf4oh" }]
]);
const Landmark = createLucideIcon("LandmarkIcon", [
  ["line", { x1: "3", y1: "22", x2: "21", y2: "22", key: "1mkv49" }],
  ["line", { x1: "6", y1: "18", x2: "6", y2: "11", key: "shpxqa" }],
  ["line", { x1: "10", y1: "18", x2: "10", y2: "11", key: "6quq76" }],
  ["line", { x1: "14", y1: "18", x2: "14", y2: "11", key: "qxd7vm" }],
  ["line", { x1: "18", y1: "18", x2: "18", y2: "11", key: "1m478d" }],
  ["polygon", { points: "12 2 20 7 4 7", key: "jkujk7" }]
]);
const Languages = createLucideIcon("LanguagesIcon", [
  ["path", { d: "m5 8 6 6", key: "1wu5hv" }],
  ["path", { d: "m4 14 6-6 2-3", key: "1k1g8d" }],
  ["path", { d: "M2 5h12", key: "or177f" }],
  ["path", { d: "M7 2h1", key: "1t2jsx" }],
  ["path", { d: "m22 22-5-10-5 10", key: "don7ne" }],
  ["path", { d: "M14 18h6", key: "1m8k6r" }]
]);
const Laptop2 = createLucideIcon("Laptop2Icon", [
  [
    "rect",
    {
      x: "3",
      y: "4",
      width: "18",
      height: "12",
      rx: "2",
      ry: "2",
      key: "8tl1gx"
    }
  ],
  ["line", { x1: "2", y1: "20", x2: "22", y2: "20", key: "1pxzem" }]
]);
const Laptop = createLucideIcon("LaptopIcon", [
  [
    "path",
    {
      d: "M20 16V7a2 2 0 0 0-2-2H6a2 2 0 0 0-2 2v9m16 0H4m16 0 1.28 2.55a1 1 0 0 1-.9 1.45H3.62a1 1 0 0 1-.9-1.45L4 16",
      key: "tarvll"
    }
  ]
]);
const LassoSelect = createLucideIcon("LassoSelectIcon", [
  ["path", { d: "M7 22a5 5 0 0 1-2-4", key: "umushi" }],
  ["path", { d: "M7 16.93c.96.43 1.96.74 2.99.91", key: "ybbtv3" }],
  [
    "path",
    {
      d: "M3.34 14A6.8 6.8 0 0 1 2 10c0-4.42 4.48-8 10-8s10 3.58 10 8a7.19 7.19 0 0 1-.33 2",
      key: "gt5e1w"
    }
  ],
  ["path", { d: "M5 18a2 2 0 1 0 0-4 2 2 0 0 0 0 4z", key: "bq3ynw" }],
  [
    "path",
    {
      d: "M14.33 22h-.09a.35.35 0 0 1-.24-.32v-10a.34.34 0 0 1 .33-.34c.08 0 .15.03.21.08l7.34 6a.33.33 0 0 1-.21.59h-4.49l-2.57 3.85a.35.35 0 0 1-.28.14v0z",
      key: "1bawls"
    }
  ]
]);
const Lasso = createLucideIcon("LassoIcon", [
  ["path", { d: "M7 22a5 5 0 0 1-2-4", key: "umushi" }],
  [
    "path",
    {
      d: "M3.3 14A6.8 6.8 0 0 1 2 10c0-4.4 4.5-8 10-8s10 3.6 10 8-4.5 8-10 8a12 12 0 0 1-5-1",
      key: "146dds"
    }
  ],
  ["path", { d: "M5 18a2 2 0 1 0 0-4 2 2 0 0 0 0 4z", key: "bq3ynw" }]
]);
const Laugh = createLucideIcon("LaughIcon", [
  ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
  ["path", { d: "M18 13a6 6 0 0 1-6 5 6 6 0 0 1-6-5h12Z", key: "b2q4dd" }],
  ["line", { x1: "9", y1: "9", x2: "9.01", y2: "9", key: "141aaf" }],
  ["line", { x1: "15", y1: "9", x2: "15.01", y2: "9", key: "1cyg3o" }]
]);
const Layers = createLucideIcon("LayersIcon", [
  ["polygon", { points: "12 2 2 7 12 12 22 7 12 2", key: "1b0ttc" }],
  ["polyline", { points: "2 17 12 22 22 17", key: "imjtdl" }],
  ["polyline", { points: "2 12 12 17 22 12", key: "5dexcv" }]
]);
const LayoutDashboard = createLucideIcon("LayoutDashboardIcon", [
  ["rect", { x: "3", y: "3", width: "7", height: "9", key: "1eurd7" }],
  ["rect", { x: "14", y: "3", width: "7", height: "5", key: "zff5ux" }],
  ["rect", { x: "14", y: "12", width: "7", height: "9", key: "1oiq0r" }],
  ["rect", { x: "3", y: "16", width: "7", height: "5", key: "1145ac" }]
]);
const LayoutGrid = createLucideIcon("LayoutGridIcon", [
  ["rect", { x: "3", y: "3", width: "7", height: "7", key: "1q9d4d" }],
  ["rect", { x: "14", y: "3", width: "7", height: "7", key: "1kofyi" }],
  ["rect", { x: "14", y: "14", width: "7", height: "7", key: "18jxcw" }],
  ["rect", { x: "3", y: "14", width: "7", height: "7", key: "1omegr" }]
]);
const LayoutList = createLucideIcon("LayoutListIcon", [
  ["rect", { x: "3", y: "14", width: "7", height: "7", key: "1omegr" }],
  ["rect", { x: "3", y: "3", width: "7", height: "7", key: "1q9d4d" }],
  ["line", { x1: "14", y1: "4", x2: "21", y2: "4", key: "1klf7b" }],
  ["line", { x1: "14", y1: "9", x2: "21", y2: "9", key: "1kf9x0" }],
  ["line", { x1: "14", y1: "15", x2: "21", y2: "15", key: "s6i7v1" }],
  ["line", { x1: "14", y1: "20", x2: "21", y2: "20", key: "yxpbil" }]
]);
const LayoutTemplate = createLucideIcon("LayoutTemplateIcon", [
  ["path", { d: "M21 3H3v7h18V3z", key: "cq2tmr" }],
  ["path", { d: "M21 14h-5v7h5v-7z", key: "1dv32i" }],
  ["path", { d: "M12 14H3v7h9v-7z", key: "1k92lm" }]
]);
const Layout2 = createLucideIcon("LayoutIcon", [
  [
    "rect",
    {
      x: "3",
      y: "3",
      width: "18",
      height: "18",
      rx: "2",
      ry: "2",
      key: "maln0c"
    }
  ],
  ["line", { x1: "3", y1: "9", x2: "21", y2: "9", key: "1uch6j" }],
  ["line", { x1: "9", y1: "21", x2: "9", y2: "9", key: "97zt75" }]
]);
const Leaf = createLucideIcon("LeafIcon", [
  [
    "path",
    {
      d: "M11 20A7 7 0 0 1 9.8 6.1C15.5 5 17 4.48 19 2c1 2 2 4.18 2 8 0 5.5-4.78 10-10 10Z",
      key: "nnexq3"
    }
  ],
  [
    "path",
    { d: "M2 21c0-3 1.85-5.36 5.08-6C9.5 14.52 12 13 13 12", key: "mt58a7" }
  ]
]);
const Library = createLucideIcon("LibraryIcon", [
  ["path", { d: "m16 6 4 14", key: "ji33uf" }],
  ["path", { d: "M12 6v14", key: "1n7gus" }],
  ["path", { d: "M8 8v12", key: "1gg7y9" }],
  ["path", { d: "M4 4v16", key: "6qkkli" }]
]);
const LifeBuoy = createLucideIcon("LifeBuoyIcon", [
  ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
  ["circle", { cx: "12", cy: "12", r: "4", key: "4exip2" }],
  ["line", { x1: "4.93", y1: "4.93", x2: "9.17", y2: "9.17", key: "1akcti" }],
  [
    "line",
    { x1: "14.83", y1: "14.83", x2: "19.07", y2: "19.07", key: "js56sr" }
  ],
  ["line", { x1: "14.83", y1: "9.17", x2: "19.07", y2: "4.93", key: "ca9a8b" }],
  ["line", { x1: "14.83", y1: "9.17", x2: "18.36", y2: "5.64", key: "dsbuwx" }],
  ["line", { x1: "4.93", y1: "19.07", x2: "9.17", y2: "14.83", key: "1lkv3n" }]
]);
const LightbulbOff = createLucideIcon("LightbulbOffIcon", [
  ["path", { d: "M9 18h6", key: "x1upvd" }],
  ["path", { d: "M10 22h4", key: "ceow96" }],
  ["path", { d: "m2 2 20 20", key: "1ooewy" }],
  [
    "path",
    { d: "M9 2.804A6 6 0 0 1 18 8a4.65 4.65 0 0 1-1.03 3", key: "1v6krz" }
  ],
  [
    "path",
    {
      d: "M8.91 14a4.61 4.61 0 0 0-1.41-2.5C6.23 10.23 6 9 6 8a6 6 0 0 1 .084-1",
      key: "1jxmct"
    }
  ]
]);
const Lightbulb = createLucideIcon("LightbulbIcon", [
  ["line", { x1: "9", y1: "18", x2: "15", y2: "18", key: "poumom" }],
  ["line", { x1: "10", y1: "22", x2: "14", y2: "22", key: "1oekqc" }],
  [
    "path",
    {
      d: "M15.09 14c.18-.98.65-1.74 1.41-2.5A4.65 4.65 0 0 0 18 8 6 6 0 0 0 6 8c0 1 .23 2.23 1.5 3.5A4.61 4.61 0 0 1 8.91 14",
      key: "a9yf0y"
    }
  ]
]);
const LineChart = createLucideIcon("LineChartIcon", [
  ["path", { d: "M3 3v18h18", key: "1s2lah" }],
  ["path", { d: "m19 9-5 5-4-4-3 3", key: "2osh9i" }]
]);
const Link2Off = createLucideIcon("Link2OffIcon", [
  ["path", { d: "M9 17H7A5 5 0 0 1 7 7", key: "10o201" }],
  ["path", { d: "M15 7h2a5 5 0 0 1 4 8", key: "1d3206" }],
  ["line", { x1: "8", y1: "12", x2: "12", y2: "12", key: "1drbw0" }],
  ["line", { x1: "2", y1: "2", x2: "22", y2: "22", key: "1w4vcy" }]
]);
const Link2 = createLucideIcon("Link2Icon", [
  ["path", { d: "M9 17H7A5 5 0 0 1 7 7h2", key: "8i5ue5" }],
  ["path", { d: "M15 7h2a5 5 0 1 1 0 10h-2", key: "1b9ql8" }],
  ["line", { x1: "8", y1: "12", x2: "16", y2: "12", key: "1myapg" }]
]);
const Link = createLucideIcon("LinkIcon", [
  [
    "path",
    {
      d: "M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71",
      key: "1cjeqo"
    }
  ],
  [
    "path",
    {
      d: "M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71",
      key: "19qd67"
    }
  ]
]);
const Linkedin = createLucideIcon("LinkedinIcon", [
  [
    "path",
    {
      d: "M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z",
      key: "c2jq9f"
    }
  ],
  ["rect", { x: "2", y: "9", width: "4", height: "12", key: "fu1a4h" }],
  ["circle", { cx: "4", cy: "4", r: "2", key: "bt5ra8" }]
]);
const ListChecks = createLucideIcon("ListChecksIcon", [
  ["line", { x1: "10", y1: "6", x2: "21", y2: "6", key: "g7ikjt" }],
  ["line", { x1: "10", y1: "12", x2: "21", y2: "12", key: "xgqux5" }],
  ["line", { x1: "10", y1: "18", x2: "21", y2: "18", key: "1q4fbe" }],
  ["polyline", { points: "3 6 4 7 6 5", key: "ectua5" }],
  ["polyline", { points: "3 12 4 13 6 11", key: "gtbhyw" }],
  ["polyline", { points: "3 18 4 19 6 17", key: "qzp18e" }]
]);
const ListEnd = createLucideIcon("ListEndIcon", [
  ["path", { d: "M16 12H3", key: "1a2rj7" }],
  ["path", { d: "M16 6H3", key: "1wxfjs" }],
  ["path", { d: "M10 18H3", key: "13769t" }],
  ["path", { d: "M21 6v10a2 2 0 0 1-2 2h-4", key: "1snekz" }],
  ["path", { d: "m16 16-2 2 2 2", key: "kkc6pm" }]
]);
const ListMinus = createLucideIcon("ListMinusIcon", [
  ["path", { d: "M11 12H3", key: "51ecnj" }],
  ["path", { d: "M16 6H3", key: "1wxfjs" }],
  ["path", { d: "M16 18H3", key: "12xzn7" }],
  ["path", { d: "M21 12h-6", key: "bt1uis" }]
]);
const ListMusic = createLucideIcon("ListMusicIcon", [
  ["path", { d: "M21 15V6", key: "h1cx4g" }],
  [
    "path",
    { d: "M18.5 18a2.5 2.5 0 1 0 0-5 2.5 2.5 0 0 0 0 5Z", key: "8saifv" }
  ],
  ["path", { d: "M12 12H3", key: "18klou" }],
  ["path", { d: "M16 6H3", key: "1wxfjs" }],
  ["path", { d: "M12 18H3", key: "11ftsu" }]
]);
const ListOrdered = createLucideIcon("ListOrderedIcon", [
  ["line", { x1: "10", y1: "6", x2: "21", y2: "6", key: "g7ikjt" }],
  ["line", { x1: "10", y1: "12", x2: "21", y2: "12", key: "xgqux5" }],
  ["line", { x1: "10", y1: "18", x2: "21", y2: "18", key: "1q4fbe" }],
  ["path", { d: "M4 6h1v4", key: "cnovpq" }],
  ["path", { d: "M4 10h2", key: "16xx2s" }],
  ["path", { d: "M6 18H4c0-1 2-2 2-3s-1-1.5-2-1", key: "m9a95d" }]
]);
const ListPlus = createLucideIcon("ListPlusIcon", [
  ["path", { d: "M11 12H3", key: "51ecnj" }],
  ["path", { d: "M16 6H3", key: "1wxfjs" }],
  ["path", { d: "M16 18H3", key: "12xzn7" }],
  ["path", { d: "M18 9v6", key: "1twb98" }],
  ["path", { d: "M21 12h-6", key: "bt1uis" }]
]);
const ListStart = createLucideIcon("ListStartIcon", [
  ["path", { d: "M16 12H3", key: "1a2rj7" }],
  ["path", { d: "M16 18H3", key: "12xzn7" }],
  ["path", { d: "M10 6H3", key: "lf8lx7" }],
  ["path", { d: "M21 18V8a2 2 0 0 0-2-2h-5", key: "1hghli" }],
  ["path", { d: "m16 8-2-2 2-2", key: "160uvd" }]
]);
const ListVideo = createLucideIcon("ListVideoIcon", [
  ["path", { d: "M12 12H3", key: "18klou" }],
  ["path", { d: "M16 6H3", key: "1wxfjs" }],
  ["path", { d: "M12 18H3", key: "11ftsu" }],
  ["path", { d: "m16 12 5 3-5 3v-6Z", key: "zpskkp" }]
]);
const ListX = createLucideIcon("ListXIcon", [
  ["path", { d: "M11 12H3", key: "51ecnj" }],
  ["path", { d: "M16 6H3", key: "1wxfjs" }],
  ["path", { d: "M16 18H3", key: "12xzn7" }],
  ["path", { d: "m19 10-4 4", key: "1tz659" }],
  ["path", { d: "m15 10 4 4", key: "1n7nei" }]
]);
const List = createLucideIcon("ListIcon", [
  ["line", { x1: "8", y1: "6", x2: "21", y2: "6", key: "1kveod" }],
  ["line", { x1: "8", y1: "12", x2: "21", y2: "12", key: "120u6p" }],
  ["line", { x1: "8", y1: "18", x2: "21", y2: "18", key: "1k409v" }],
  ["line", { x1: "3", y1: "6", x2: "3.01", y2: "6", key: "13co06" }],
  ["line", { x1: "3", y1: "12", x2: "3.01", y2: "12", key: "11tec3" }],
  ["line", { x1: "3", y1: "18", x2: "3.01", y2: "18", key: "14wug1" }]
]);
const Loader2 = createLucideIcon("Loader2Icon", [
  ["path", { d: "M21 12a9 9 0 1 1-6.219-8.56", key: "13zald" }]
]);
const Loader = createLucideIcon("LoaderIcon", [
  ["line", { x1: "12", y1: "2", x2: "12", y2: "6", key: "1pduqs" }],
  ["line", { x1: "12", y1: "18", x2: "12", y2: "22", key: "1b94uv" }],
  ["line", { x1: "4.93", y1: "4.93", x2: "7.76", y2: "7.76", key: "1a736z" }],
  [
    "line",
    { x1: "16.24", y1: "16.24", x2: "19.07", y2: "19.07", key: "gt096z" }
  ],
  ["line", { x1: "2", y1: "12", x2: "6", y2: "12", key: "rkbu33" }],
  ["line", { x1: "18", y1: "12", x2: "22", y2: "12", key: "1vrbnu" }],
  ["line", { x1: "4.93", y1: "19.07", x2: "7.76", y2: "16.24", key: "59c6el" }],
  ["line", { x1: "16.24", y1: "7.76", x2: "19.07", y2: "4.93", key: "8m03gt" }]
]);
const LocateFixed = createLucideIcon("LocateFixedIcon", [
  ["line", { x1: "2", x2: "5", y1: "12", y2: "12", key: "bvdh0s" }],
  ["line", { x1: "19", x2: "22", y1: "12", y2: "12", key: "1tbv5k" }],
  ["line", { x1: "12", x2: "12", y1: "2", y2: "5", key: "11lu5j" }],
  ["line", { x1: "12", x2: "12", y1: "19", y2: "22", key: "x3vr5v" }],
  ["circle", { cx: "12", cy: "12", r: "7", key: "fim9np" }],
  ["circle", { cx: "12", cy: "12", r: "3", key: "1v7zrd" }]
]);
const LocateOff = createLucideIcon("LocateOffIcon", [
  ["line", { x1: "2", x2: "5", y1: "12", y2: "12", key: "bvdh0s" }],
  ["line", { x1: "19", x2: "22", y1: "12", y2: "12", key: "1tbv5k" }],
  ["line", { x1: "12", x2: "12", y1: "2", y2: "5", key: "11lu5j" }],
  ["line", { x1: "12", x2: "12", y1: "19", y2: "22", key: "x3vr5v" }],
  [
    "path",
    {
      d: "M7.11 7.11C5.83 8.39 5 10.1 5 12c0 3.87 3.13 7 7 7 1.9 0 3.61-.83 4.89-2.11",
      key: "1oh7ia"
    }
  ],
  [
    "path",
    {
      d: "M18.71 13.96c.19-.63.29-1.29.29-1.96 0-3.87-3.13-7-7-7-.67 0-1.33.1-1.96.29",
      key: "3qdecy"
    }
  ],
  ["line", { x1: "2", x2: "22", y1: "2", y2: "22", key: "a6p6uj" }]
]);
const Locate = createLucideIcon("LocateIcon", [
  ["line", { x1: "2", x2: "5", y1: "12", y2: "12", key: "bvdh0s" }],
  ["line", { x1: "19", x2: "22", y1: "12", y2: "12", key: "1tbv5k" }],
  ["line", { x1: "12", x2: "12", y1: "2", y2: "5", key: "11lu5j" }],
  ["line", { x1: "12", x2: "12", y1: "19", y2: "22", key: "x3vr5v" }],
  ["circle", { cx: "12", cy: "12", r: "7", key: "fim9np" }]
]);
const Lock = createLucideIcon("LockIcon", [
  [
    "rect",
    {
      x: "3",
      y: "11",
      width: "18",
      height: "11",
      rx: "2",
      ry: "2",
      key: "biyj2e"
    }
  ],
  ["path", { d: "M7 11V7a5 5 0 0 1 10 0v4", key: "fwvmzm" }]
]);
const LogIn = createLucideIcon("LogInIcon", [
  ["path", { d: "M15 3h4a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-4", key: "u53s6r" }],
  ["polyline", { points: "10 17 15 12 10 7", key: "1ail0h" }],
  ["line", { x1: "15", y1: "12", x2: "3", y2: "12", key: "80e4vw" }]
]);
const LogOut = createLucideIcon("LogOutIcon", [
  ["path", { d: "M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4", key: "1uf3rs" }],
  ["polyline", { points: "16 17 21 12 16 7", key: "1gabdz" }],
  ["line", { x1: "21", y1: "12", x2: "9", y2: "12", key: "1stwgr" }]
]);
const Luggage = createLucideIcon("LuggageIcon", [
  [
    "path",
    {
      d: "M6 20h0a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h0",
      key: "1h5fkc"
    }
  ],
  ["path", { d: "M8 18V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v14", key: "1l99gc" }],
  ["path", { d: "M10 20h4", key: "ni2waw" }],
  ["circle", { cx: "16", cy: "20", r: "2", key: "1vifvg" }],
  ["circle", { cx: "8", cy: "20", r: "2", key: "ckkr5m" }]
]);
const Magnet = createLucideIcon("MagnetIcon", [
  [
    "path",
    {
      d: "m6 15-4-4 6.75-6.77a7.79 7.79 0 0 1 11 11L13 22l-4-4 6.39-6.36a2.14 2.14 0 0 0-3-3L6 15",
      key: "1i3lhw"
    }
  ],
  ["path", { d: "m5 8 4 4", key: "j6kj7e" }],
  ["path", { d: "m12 15 4 4", key: "lnac28" }]
]);
const MailCheck = createLucideIcon("MailCheckIcon", [
  [
    "path",
    {
      d: "M22 13V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h8",
      key: "12jkf8"
    }
  ],
  ["path", { d: "m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7", key: "1ocrg3" }],
  ["path", { d: "m16 19 2 2 4-4", key: "1b14m6" }]
]);
const MailMinus = createLucideIcon("MailMinusIcon", [
  [
    "path",
    {
      d: "M22 15V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h8",
      key: "fuxbkv"
    }
  ],
  ["path", { d: "m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7", key: "1ocrg3" }],
  ["path", { d: "M16 19h6", key: "xwg31i" }]
]);
const MailOpen = createLucideIcon("MailOpenIcon", [
  [
    "path",
    {
      d: "M21.2 8.4c.5.38.8.97.8 1.6v10a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V10a2 2 0 0 1 .8-1.6l8-6a2 2 0 0 1 2.4 0l8 6Z",
      key: "1jhwl8"
    }
  ],
  ["path", { d: "m22 10-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 10", key: "1qfld7" }]
]);
const MailPlus = createLucideIcon("MailPlusIcon", [
  [
    "path",
    {
      d: "M22 13V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h8",
      key: "12jkf8"
    }
  ],
  ["path", { d: "m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7", key: "1ocrg3" }],
  ["path", { d: "M19 16v6", key: "tddt3s" }],
  ["path", { d: "M16 19h6", key: "xwg31i" }]
]);
const MailQuestion = createLucideIcon("MailQuestionIcon", [
  [
    "path",
    {
      d: "M22 10.5V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h12.5",
      key: "e61zoh"
    }
  ],
  ["path", { d: "m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7", key: "1ocrg3" }],
  [
    "path",
    {
      d: "M18 15.28c.2-.4.5-.8.9-1a2.1 2.1 0 0 1 2.6.4c.3.4.5.8.5 1.3 0 1.3-2 2-2 2",
      key: "7z9rxb"
    }
  ],
  ["path", { d: "M20 22v.01", key: "12bgn6" }]
]);
const MailSearch = createLucideIcon("MailSearchIcon", [
  [
    "path",
    {
      d: "M22 12.5V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h7.5",
      key: "w80f2v"
    }
  ],
  ["path", { d: "m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7", key: "1ocrg3" }],
  ["path", { d: "M18 21a3 3 0 1 0 0-6 3 3 0 0 0 0 6v0Z", key: "mgbru4" }],
  ["circle", { cx: "18", cy: "18", r: "3", key: "1xkwt0" }],
  ["path", { d: "m22 22-1.5-1.5", key: "1x83k4" }]
]);
const MailWarning = createLucideIcon("MailWarningIcon", [
  [
    "path",
    {
      d: "M22 10.5V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h12.5",
      key: "e61zoh"
    }
  ],
  ["path", { d: "m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7", key: "1ocrg3" }],
  ["path", { d: "M20 14v4", key: "1hm744" }],
  ["path", { d: "M20 22v.01", key: "12bgn6" }]
]);
const MailX = createLucideIcon("MailXIcon", [
  [
    "path",
    {
      d: "M22 13V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h9",
      key: "1j9vog"
    }
  ],
  ["path", { d: "m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7", key: "1ocrg3" }],
  ["path", { d: "m17 17 4 4", key: "1b3523" }],
  ["path", { d: "m21 17-4 4", key: "uinynz" }]
]);
const Mail = createLucideIcon("MailIcon", [
  [
    "rect",
    { x: "2", y: "4", width: "20", height: "16", rx: "2", key: "izxlao" }
  ],
  ["path", { d: "m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7", key: "1ocrg3" }]
]);
const Mails = createLucideIcon("MailsIcon", [
  [
    "rect",
    { x: "6", y: "4", width: "16", height: "13", rx: "2", key: "q6n4z8" }
  ],
  ["path", { d: "m22 7-7.1 3.78c-.57.3-1.23.3-1.8 0L6 7", key: "xn252p" }],
  ["path", { d: "M2 8v11c0 1.1.9 2 2 2h14", key: "n13cji" }]
]);
const MapPinOff = createLucideIcon("MapPinOffIcon", [
  [
    "path",
    {
      d: "M5.43 5.43A8.06 8.06 0 0 0 4 10c0 6 8 12 8 12a29.94 29.94 0 0 0 5-5",
      key: "12a8pk"
    }
  ],
  [
    "path",
    {
      d: "M19.18 13.52A8.66 8.66 0 0 0 20 10a8 8 0 0 0-8-8 7.88 7.88 0 0 0-3.52.82",
      key: "1r9f6y"
    }
  ],
  [
    "path",
    {
      d: "M9.13 9.13A2.78 2.78 0 0 0 9 10a3 3 0 0 0 3 3 2.78 2.78 0 0 0 .87-.13",
      key: "erynq7"
    }
  ],
  ["path", { d: "M14.9 9.25a3 3 0 0 0-2.15-2.16", key: "1hwwmx" }],
  ["line", { x1: "2", y1: "2", x2: "22", y2: "22", key: "1w4vcy" }]
]);
const MapPin = createLucideIcon("MapPinIcon", [
  [
    "path",
    { d: "M20 10c0 6-8 12-8 12s-8-6-8-12a8 8 0 0 1 16 0Z", key: "2oe9fu" }
  ],
  ["circle", { cx: "12", cy: "10", r: "3", key: "ilqhr7" }]
]);
const Map$1 = createLucideIcon("MapIcon", [
  [
    "polygon",
    { points: "3 6 9 3 15 6 21 3 21 18 15 21 9 18 3 21", key: "ok2ie8" }
  ],
  ["line", { x1: "9", y1: "3", x2: "9", y2: "18", key: "3zqglt" }],
  ["line", { x1: "15", y1: "6", x2: "15", y2: "21", key: "1c9xoo" }]
]);
const Martini = createLucideIcon("MartiniIcon", [
  ["path", { d: "M8 22h8", key: "rmew8v" }],
  ["path", { d: "M12 11v11", key: "ur9y6a" }],
  ["path", { d: "m19 3-7 8-7-8Z", key: "1sgpiw" }]
]);
const Maximize2 = createLucideIcon("Maximize2Icon", [
  ["polyline", { points: "15 3 21 3 21 9", key: "mznyad" }],
  ["polyline", { points: "9 21 3 21 3 15", key: "1avn1i" }],
  ["line", { x1: "21", y1: "3", x2: "14", y2: "10", key: "8isubj" }],
  ["line", { x1: "3", y1: "21", x2: "10", y2: "14", key: "c1a6xr" }]
]);
const Maximize = createLucideIcon("MaximizeIcon", [
  ["path", { d: "M8 3H5a2 2 0 0 0-2 2v3", key: "1dcmit" }],
  ["path", { d: "M21 8V5a2 2 0 0 0-2-2h-3", key: "1e4gt3" }],
  ["path", { d: "M3 16v3a2 2 0 0 0 2 2h3", key: "wsl5sc" }],
  ["path", { d: "M16 21h3a2 2 0 0 0 2-2v-3", key: "18trek" }]
]);
const Medal = createLucideIcon("MedalIcon", [
  [
    "path",
    {
      d: "M7.21 15 2.66 7.14a2 2 0 0 1 .13-2.2L4.4 2.8A2 2 0 0 1 6 2h12a2 2 0 0 1 1.6.8l1.6 2.14a2 2 0 0 1 .14 2.2L16.79 15",
      key: "143lza"
    }
  ],
  ["path", { d: "M11 12 5.12 2.2", key: "qhuxz6" }],
  ["path", { d: "m13 12 5.88-9.8", key: "hbye0f" }],
  ["path", { d: "M8 7h8", key: "i86dvs" }],
  ["circle", { cx: "12", cy: "17", r: "5", key: "qbz8iq" }],
  ["path", { d: "M12 18v-2h-.5", key: "fawc4q" }]
]);
const MegaphoneOff = createLucideIcon("MegaphoneOffIcon", [
  ["path", { d: "M9.26 9.26 3 11v3l14.14 3.14", key: "3429n" }],
  ["path", { d: "M21 15.34V6l-7.31 2.03", key: "4o1dh8" }],
  ["path", { d: "M11.6 16.8a3 3 0 1 1-5.8-1.6", key: "1yl0tm" }],
  ["line", { x1: "2", x2: "22", y1: "2", y2: "22", key: "a6p6uj" }]
]);
const Megaphone = createLucideIcon("MegaphoneIcon", [
  ["path", { d: "m3 11 18-5v12L3 14v-3z", key: "n962bs" }],
  ["path", { d: "M11.6 16.8a3 3 0 1 1-5.8-1.6", key: "1yl0tm" }]
]);
const Meh = createLucideIcon("MehIcon", [
  ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
  ["line", { x1: "8", y1: "15", x2: "16", y2: "15", key: "29ieok" }],
  ["line", { x1: "9", y1: "9", x2: "9.01", y2: "9", key: "141aaf" }],
  ["line", { x1: "15", y1: "9", x2: "15.01", y2: "9", key: "1cyg3o" }]
]);
const Menu2 = createLucideIcon("MenuIcon", [
  ["line", { x1: "4", y1: "12", x2: "20", y2: "12", key: "1q6rtp" }],
  ["line", { x1: "4", y1: "6", x2: "20", y2: "6", key: "1jr6gt" }],
  ["line", { x1: "4", y1: "18", x2: "20", y2: "18", key: "98tuvx" }]
]);
const MessageCircle = createLucideIcon("MessageCircleIcon", [
  [
    "path",
    {
      d: "M21 11.5a8.38 8.38 0 0 1-.9 3.8 8.5 8.5 0 0 1-7.6 4.7 8.38 8.38 0 0 1-3.8-.9L3 21l1.9-5.7a8.38 8.38 0 0 1-.9-3.8 8.5 8.5 0 0 1 4.7-7.6 8.38 8.38 0 0 1 3.8-.9h.5a8.48 8.48 0 0 1 8 8v.5z",
      key: "5iho0c"
    }
  ]
]);
const MessageSquare = createLucideIcon("MessageSquareIcon", [
  [
    "path",
    {
      d: "M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z",
      key: "1lielz"
    }
  ]
]);
const Mic2 = createLucideIcon("Mic2Icon", [
  [
    "path",
    { d: "m12 8-9.04 9.06a2.82 2.82 0 1 0 3.98 3.98L16 12", key: "zoua8r" }
  ],
  ["circle", { cx: "17", cy: "7", r: "5", key: "1fomce" }]
]);
const MicOff = createLucideIcon("MicOffIcon", [
  ["line", { x1: "2", y1: "2", x2: "22", y2: "22", key: "1w4vcy" }],
  ["path", { d: "M18.89 13.23A7.12 7.12 0 0 0 19 12v-2", key: "80xlxr" }],
  ["path", { d: "M5 10v2a7 7 0 0 0 12 5", key: "p2k8kg" }],
  ["path", { d: "M15 9.34V5a3 3 0 0 0-5.68-1.33", key: "1gzdoj" }],
  ["path", { d: "M9 9v3a3 3 0 0 0 5.12 2.12", key: "r2i35w" }],
  ["line", { x1: "12", y1: "19", x2: "12", y2: "22", key: "1l505v" }]
]);
const Mic = createLucideIcon("MicIcon", [
  [
    "path",
    {
      d: "M12 2a3 3 0 0 0-3 3v7a3 3 0 0 0 6 0V5a3 3 0 0 0-3-3Z",
      key: "131961"
    }
  ],
  ["path", { d: "M19 10v2a7 7 0 0 1-14 0v-2", key: "1vc78b" }],
  ["line", { x1: "12", y1: "19", x2: "12", y2: "22", key: "1l505v" }]
]);
const Microscope = createLucideIcon("MicroscopeIcon", [
  ["path", { d: "M6 18h8", key: "1borvv" }],
  ["path", { d: "M3 22h18", key: "8prr45" }],
  ["path", { d: "M14 22a7 7 0 1 0 0-14h-1", key: "1jwaiy" }],
  ["path", { d: "M9 14h2", key: "197e7h" }],
  ["path", { d: "M8 6h4", key: "i9thid" }],
  [
    "path",
    {
      d: "M13 10V6.5a.5.5 0 0 0-.5-.5.5.5 0 0 1-.5-.5V3a1 1 0 0 0-1-1H9a1 1 0 0 0-1 1v2.5a.5.5 0 0 1-.5.5.5.5 0 0 0-.5.5V10c0 1.1.9 2 2 2h2a2 2 0 0 0 2-2Z",
      key: "z62yqi"
    }
  ]
]);
const Microwave = createLucideIcon("MicrowaveIcon", [
  [
    "rect",
    { x: "2", y: "4", width: "20", height: "15", rx: "2", key: "1rfv8z" }
  ],
  ["rect", { x: "6", y: "8", width: "8", height: "7", rx: "1", key: "i43qc1" }],
  ["path", { d: "M18 8v7", key: "o5zi4n" }],
  ["path", { d: "M6 19v2", key: "1loha6" }],
  ["path", { d: "M18 19v2", key: "1dawf0" }]
]);
const Milestone = createLucideIcon("MilestoneIcon", [
  [
    "path",
    {
      d: "M18 6H5a2 2 0 0 0-2 2v3a2 2 0 0 0 2 2h13l4-3.5L18 6Z",
      key: "1mp5s7"
    }
  ],
  ["path", { d: "M12 13v8", key: "1l5pq0" }],
  ["path", { d: "M12 3v3", key: "1n5kay" }]
]);
const MilkOff = createLucideIcon("MilkOffIcon", [
  ["path", { d: "M8 2h8", key: "1ssgc1" }],
  [
    "path",
    {
      d: "M9 2v1.343M15 2v2.789a4 4 0 0 0 .672 2.219l.656.984a4 4 0 0 1 .672 2.22v1.131M7.8 7.8l-.128.192A4 4 0 0 0 7 10.212V20a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2v-3",
      key: "y0ejgx"
    }
  ],
  [
    "path",
    {
      d: "M7 15a6.47 6.47 0 0 1 5 0 6.472 6.472 0 0 0 3.435.435",
      key: "iaxqsy"
    }
  ],
  ["line", { x1: "2", y1: "2", x2: "22", y2: "22", key: "1w4vcy" }]
]);
const Milk = createLucideIcon("MilkIcon", [
  ["path", { d: "M8 2h8", key: "1ssgc1" }],
  [
    "path",
    {
      d: "M9 2v2.789a4 4 0 0 1-.672 2.219l-.656.984A4 4 0 0 0 7 10.212V20a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2v-9.789a4 4 0 0 0-.672-2.219l-.656-.984A4 4 0 0 1 15 4.788V2",
      key: "qtp12x"
    }
  ],
  [
    "path",
    { d: "M7 15a6.472 6.472 0 0 1 5 0 6.47 6.47 0 0 0 5 0", key: "ygeh44" }
  ]
]);
const Minimize2 = createLucideIcon("Minimize2Icon", [
  ["polyline", { points: "4 14 10 14 10 20", key: "11kfnr" }],
  ["polyline", { points: "20 10 14 10 14 4", key: "rlmsce" }],
  ["line", { x1: "14", y1: "10", x2: "21", y2: "3", key: "6dvi8v" }],
  ["line", { x1: "3", y1: "21", x2: "10", y2: "14", key: "c1a6xr" }]
]);
const Minimize = createLucideIcon("MinimizeIcon", [
  ["path", { d: "M8 3v3a2 2 0 0 1-2 2H3", key: "hohbtr" }],
  ["path", { d: "M21 8h-3a2 2 0 0 1-2-2V3", key: "5jw1f3" }],
  ["path", { d: "M3 16h3a2 2 0 0 1 2 2v3", key: "198tvr" }],
  ["path", { d: "M16 21v-3a2 2 0 0 1 2-2h3", key: "ph8mxp" }]
]);
const MinusCircle = createLucideIcon("MinusCircleIcon", [
  ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
  ["line", { x1: "8", y1: "12", x2: "16", y2: "12", key: "1myapg" }]
]);
const MinusSquare = createLucideIcon("MinusSquareIcon", [
  [
    "rect",
    {
      x: "3",
      y: "3",
      width: "18",
      height: "18",
      rx: "2",
      ry: "2",
      key: "maln0c"
    }
  ],
  ["line", { x1: "8", y1: "12", x2: "16", y2: "12", key: "1myapg" }]
]);
const Minus = createLucideIcon("MinusIcon", [
  ["line", { x1: "5", y1: "12", x2: "19", y2: "12", key: "1smlys" }]
]);
const MonitorOff = createLucideIcon("MonitorOffIcon", [
  ["path", { d: "M17 17H4a2 2 0 0 1-2-2V5c0-1.5 1-2 1-2", key: "k0q8oc" }],
  ["path", { d: "M22 15V5a2 2 0 0 0-2-2H9", key: "cp1ac0" }],
  ["path", { d: "M8 21h8", key: "1ev6f3" }],
  ["path", { d: "M12 17v4", key: "1riwvh" }],
  ["path", { d: "m2 2 20 20", key: "1ooewy" }]
]);
const MonitorSmartphone = createLucideIcon("MonitorSmartphoneIcon", [
  [
    "path",
    {
      d: "M18 8V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v7a2 2 0 0 0 2 2h8",
      key: "10dyio"
    }
  ],
  ["path", { d: "M10 19v-3.96 3.15", key: "1irgej" }],
  ["path", { d: "M7 19h5", key: "qswx4l" }],
  [
    "rect",
    { x: "16", y: "12", width: "6", height: "10", rx: "2", key: "k4sdfk" }
  ]
]);
const MonitorSpeaker = createLucideIcon("MonitorSpeakerIcon", [
  ["path", { d: "M5.5 20H8", key: "1k40s5" }],
  ["path", { d: "M17 9h.01", key: "1j24nn" }],
  [
    "rect",
    { x: "12", y: "4", width: "10", height: "16", rx: "2", key: "1gi0i2" }
  ],
  ["path", { d: "M8 6H4a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2h4", key: "1mp6e1" }],
  ["circle", { cx: "17", cy: "15", r: "1", key: "tqvash" }]
]);
const Monitor = createLucideIcon("MonitorIcon", [
  [
    "rect",
    {
      x: "2",
      y: "3",
      width: "20",
      height: "14",
      rx: "2",
      ry: "2",
      key: "1q87ek"
    }
  ],
  ["line", { x1: "8", y1: "21", x2: "16", y2: "21", key: "bcbiac" }],
  ["line", { x1: "12", y1: "17", x2: "12", y2: "21", key: "1v4d7v" }]
]);
const Moon = createLucideIcon("MoonIcon", [
  ["path", { d: "M12 3a6.364 6.364 0 0 0 9 9 9 9 0 1 1-9-9Z", key: "1rit1i" }]
]);
const MoreHorizontal = createLucideIcon("MoreHorizontalIcon", [
  ["circle", { cx: "12", cy: "12", r: "1", key: "41hilf" }],
  ["circle", { cx: "19", cy: "12", r: "1", key: "1wjl8i" }],
  ["circle", { cx: "5", cy: "12", r: "1", key: "1pcz8c" }]
]);
const MoreVertical = createLucideIcon("MoreVerticalIcon", [
  ["circle", { cx: "12", cy: "12", r: "1", key: "41hilf" }],
  ["circle", { cx: "12", cy: "5", r: "1", key: "gxeob9" }],
  ["circle", { cx: "12", cy: "19", r: "1", key: "lyex9k" }]
]);
const MountainSnow = createLucideIcon("MountainSnowIcon", [
  ["path", { d: "m8 3 4 8 5-5 5 15H2L8 3z", key: "otkl63" }],
  [
    "path",
    {
      d: "M4.14 15.08c2.62-1.57 5.24-1.43 7.86.42 2.74 1.94 5.49 2 8.23.19",
      key: "1pvmmp"
    }
  ]
]);
const Mountain = createLucideIcon("MountainIcon", [
  ["path", { d: "m8 3 4 8 5-5 5 15H2L8 3z", key: "otkl63" }]
]);
const MousePointer2 = createLucideIcon("MousePointer2Icon", [
  ["path", { d: "m4 4 7.07 17 2.51-7.39L21 11.07z", key: "1vqm48" }]
]);
const MousePointerClick = createLucideIcon("MousePointerClickIcon", [
  ["path", { d: "m9 9 5 12 1.774-5.226L21 14 9 9z", key: "1qd44z" }],
  ["path", { d: "m16.071 16.071 4.243 4.243", key: "wfhsjb" }],
  [
    "path",
    {
      d: "m7.188 2.239.777 2.897M5.136 7.965l-2.898-.777M13.95 4.05l-2.122 2.122m-5.657 5.656-2.12 2.122",
      key: "1bk8fz"
    }
  ]
]);
const MousePointer = createLucideIcon("MousePointerIcon", [
  ["path", { d: "m3 3 7.07 16.97 2.51-7.39 7.39-2.51L3 3z", key: "y2ucgo" }],
  ["path", { d: "m13 13 6 6", key: "1nhxnf" }]
]);
const Mouse = createLucideIcon("MouseIcon", [
  [
    "rect",
    { x: "6", y: "3", width: "12", height: "18", rx: "6", key: "wskjtk" }
  ],
  ["path", { d: "M12 7v4", key: "xawao1" }]
]);
const Move3d = createLucideIcon("Move3dIcon", [
  ["path", { d: "M5 3v16h16", key: "1mqmf9" }],
  ["path", { d: "m5 19 6-6", key: "jh6hbb" }],
  ["path", { d: "m2 6 3-3 3 3", key: "tkyvxa" }],
  ["path", { d: "m18 16 3 3-3 3", key: "1d4glt" }]
]);
const MoveDiagonal2 = createLucideIcon("MoveDiagonal2Icon", [
  ["polyline", { points: "5 11 5 5 11 5", key: "ncfzxk" }],
  ["polyline", { points: "19 13 19 19 13 19", key: "1mk7hk" }],
  ["line", { x1: "5", y1: "5", x2: "19", y2: "19", key: "4tvgsr" }]
]);
const MoveDiagonal = createLucideIcon("MoveDiagonalIcon", [
  ["polyline", { points: "13 5 19 5 19 11", key: "11219e" }],
  ["polyline", { points: "11 19 5 19 5 13", key: "sfq3wq" }],
  ["line", { x1: "19", y1: "5", x2: "5", y2: "19", key: "t1677v" }]
]);
const MoveHorizontal = createLucideIcon("MoveHorizontalIcon", [
  ["polyline", { points: "18 8 22 12 18 16", key: "1hqrds" }],
  ["polyline", { points: "6 8 2 12 6 16", key: "f0ernq" }],
  ["line", { x1: "2", y1: "12", x2: "22", y2: "12", key: "zvmn4p" }]
]);
const MoveVertical = createLucideIcon("MoveVerticalIcon", [
  ["polyline", { points: "8 18 12 22 16 18", key: "1uutw3" }],
  ["polyline", { points: "8 6 12 2 16 6", key: "d60sxy" }],
  ["line", { x1: "12", y1: "2", x2: "12", y2: "22", key: "1k6o5o" }]
]);
const Move = createLucideIcon("MoveIcon", [
  ["polyline", { points: "5 9 2 12 5 15", key: "1r5uj5" }],
  ["polyline", { points: "9 5 12 2 15 5", key: "5v383o" }],
  ["polyline", { points: "15 19 12 22 9 19", key: "g7qi8m" }],
  ["polyline", { points: "19 9 22 12 19 15", key: "tpp73q" }],
  ["line", { x1: "2", y1: "12", x2: "22", y2: "12", key: "zvmn4p" }],
  ["line", { x1: "12", y1: "2", x2: "12", y2: "22", key: "1k6o5o" }]
]);
const Music2 = createLucideIcon("Music2Icon", [
  ["circle", { cx: "8", cy: "18", r: "4", key: "1fc0mg" }],
  ["path", { d: "M12 18V2l7 4", key: "g04rme" }]
]);
const Music3 = createLucideIcon("Music3Icon", [
  ["circle", { cx: "12", cy: "18", r: "4", key: "m3r9ws" }],
  ["path", { d: "M16 18V2", key: "40x2m5" }]
]);
const Music4 = createLucideIcon("Music4Icon", [
  ["path", { d: "M9 18V5l12-2v13", key: "1jmyc2" }],
  ["path", { d: "m9 9 12-2", key: "1e64n2" }],
  ["circle", { cx: "6", cy: "18", r: "3", key: "fqmcym" }],
  ["circle", { cx: "18", cy: "16", r: "3", key: "1hluhg" }]
]);
const Music = createLucideIcon("MusicIcon", [
  ["path", { d: "M9 18V5l12-2v13", key: "1jmyc2" }],
  ["circle", { cx: "6", cy: "18", r: "3", key: "fqmcym" }],
  ["circle", { cx: "18", cy: "16", r: "3", key: "1hluhg" }]
]);
const Navigation2Off = createLucideIcon("Navigation2OffIcon", [
  ["path", { d: "M9.31 9.31 5 21l7-4 7 4-1.17-3.17", key: "qoq2o2" }],
  ["path", { d: "M14.53 8.88 12 2l-1.17 3.17", key: "k3sjzy" }],
  ["line", { x1: "2", y1: "2", x2: "22", y2: "22", key: "1w4vcy" }]
]);
const Navigation2 = createLucideIcon("Navigation2Icon", [
  ["polygon", { points: "12 2 19 21 12 17 5 21 12 2", key: "x8c0qg" }]
]);
const NavigationOff = createLucideIcon("NavigationOffIcon", [
  ["path", { d: "M8.43 8.43 3 11l8 2 2 8 2.57-5.43", key: "1vdtb7" }],
  ["path", { d: "M17.39 11.73 22 2l-9.73 4.61", key: "tya3r6" }],
  ["line", { x1: "2", y1: "2", x2: "22", y2: "22", key: "1w4vcy" }]
]);
const Navigation = createLucideIcon("NavigationIcon", [
  ["polygon", { points: "3 11 22 2 13 21 11 13 3 11", key: "1ltx0t" }]
]);
const Network = createLucideIcon("NetworkIcon", [
  ["rect", { x: "9", y: "2", width: "6", height: "6", key: "1iwon9" }],
  ["rect", { x: "16", y: "16", width: "6", height: "6", key: "gonbwd" }],
  ["rect", { x: "2", y: "16", width: "6", height: "6", key: "1q0lzr" }],
  ["path", { d: "M5 16v-4h14v4", key: "8njgxx" }],
  ["path", { d: "M12 12V8", key: "2874zd" }]
]);
const Newspaper = createLucideIcon("NewspaperIcon", [
  [
    "path",
    {
      d: "M4 22h16a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2H8a2 2 0 0 0-2 2v16a2 2 0 0 1-2 2Zm0 0a2 2 0 0 1-2-2v-9c0-1.1.9-2 2-2h2",
      key: "7pis2x"
    }
  ],
  ["path", { d: "M18 14h-8", key: "sponae" }],
  ["path", { d: "M15 18h-5", key: "95g1m2" }],
  ["path", { d: "M10 6h8v4h-8V6Z", key: "smlsk5" }]
]);
const Nfc = createLucideIcon("NfcIcon", [
  ["path", { d: "M6 8.32a7.43 7.43 0 0 1 0 7.36", key: "9iaqei" }],
  ["path", { d: "M9.46 6.21a11.76 11.76 0 0 1 0 11.58", key: "1yha7l" }],
  ["path", { d: "M12.91 4.1a15.91 15.91 0 0 1 .01 15.8", key: "4iu2gk" }],
  ["path", { d: "M16.37 2a20.16 20.16 0 0 1 0 20", key: "sap9u2" }]
]);
const NutOff = createLucideIcon("NutOffIcon", [
  ["path", { d: "M12 4V2", key: "1k5q1u" }],
  [
    "path",
    {
      d: "M5 10v4a7.004 7.004 0 0 0 5.277 6.787c.412.104.802.292 1.102.592L12 22l.621-.621c.3-.3.69-.488 1.102-.592a7.01 7.01 0 0 0 4.125-2.939",
      key: "1xcvy9"
    }
  ],
  ["path", { d: "M19 10v3.343", key: "163tfc" }],
  [
    "path",
    {
      d: "M12 12c-1.349-.573-1.905-1.005-2.5-2-.546.902-1.048 1.353-2.5 2-1.018-.644-1.46-1.08-2-2-1.028.71-1.69.918-3 1 1.081-1.048 1.757-2.03 2-3 .194-.776.84-1.551 1.79-2.21m11.654 5.997c.887-.457 1.28-.891 1.556-1.787 1.032.916 1.683 1.157 3 1-1.297-1.036-1.758-2.03-2-3-.5-2-4-4-8-4-.74 0-1.461.068-2.15.192",
      key: "17914v"
    }
  ],
  ["line", { x1: "2", y1: "2", x2: "22", y2: "22", key: "1w4vcy" }]
]);
const Nut = createLucideIcon("NutIcon", [
  ["path", { d: "M12 4V2", key: "1k5q1u" }],
  [
    "path",
    {
      d: "M5 10v4a7.004 7.004 0 0 0 5.277 6.787c.412.104.802.292 1.102.592L12 22l.621-.621c.3-.3.69-.488 1.102-.592A7.003 7.003 0 0 0 19 14v-4",
      key: "1tgyif"
    }
  ],
  [
    "path",
    {
      d: "M12 4C8 4 4.5 6 4 8c-.243.97-.919 1.952-2 3 1.31-.082 1.972-.29 3-1 .54.92.982 1.356 2 2 1.452-.647 1.954-1.098 2.5-2 .595.995 1.151 1.427 2.5 2 1.31-.621 1.862-1.058 2.5-2 .629.977 1.162 1.423 2.5 2 1.209-.548 1.68-.967 2-2 1.032.916 1.683 1.157 3 1-1.297-1.036-1.758-2.03-2-3-.5-2-4-4-8-4Z",
      key: "tnsqj"
    }
  ]
]);
const Octagon = createLucideIcon("OctagonIcon", [
  [
    "polygon",
    {
      points: "7.86 2 16.14 2 22 7.86 22 16.14 16.14 22 7.86 22 2 16.14 2 7.86 7.86 2",
      key: "h1p8hx"
    }
  ]
]);
const Option = createLucideIcon("OptionIcon", [
  ["path", { d: "M3 3h6l6 18h6", key: "ph9rgk" }],
  ["path", { d: "M14 3h7", key: "16f0ms" }]
]);
const Outdent = createLucideIcon("OutdentIcon", [
  ["polyline", { points: "7 8 3 12 7 16", key: "2j60jr" }],
  ["line", { x1: "21", y1: "12", x2: "11", y2: "12", key: "1xy73i" }],
  ["line", { x1: "21", y1: "6", x2: "11", y2: "6", key: "97xvqg" }],
  ["line", { x1: "21", y1: "18", x2: "11", y2: "18", key: "1r7j8g" }]
]);
const Package2 = createLucideIcon("Package2Icon", [
  ["path", { d: "M3 9h18v10a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V9Z", key: "1ront0" }],
  [
    "path",
    {
      d: "m3 9 2.45-4.9A2 2 0 0 1 7.24 3h9.52a2 2 0 0 1 1.8 1.1L21 9",
      key: "19h2x1"
    }
  ],
  ["path", { d: "M12 3v6", key: "1holv5" }]
]);
const PackageCheck = createLucideIcon("PackageCheckIcon", [
  ["path", { d: "m16 16 2 2 4-4", key: "gfu2re" }],
  [
    "path",
    {
      d: "M21 10V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l2-1.14",
      key: "e7tb2h"
    }
  ],
  ["path", { d: "M16.5 9.4 7.55 4.24", key: "10qotr" }],
  ["polyline", { points: "3.29 7 12 12 20.71 7", key: "ousv84" }],
  ["line", { x1: "12", y1: "22", x2: "12", y2: "12", key: "gdv6h4" }]
]);
const PackageMinus = createLucideIcon("PackageMinusIcon", [
  ["path", { d: "M16 16h6", key: "100bgy" }],
  [
    "path",
    {
      d: "M21 10V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l2-1.14",
      key: "e7tb2h"
    }
  ],
  ["path", { d: "M16.5 9.4 7.55 4.24", key: "10qotr" }],
  ["polyline", { points: "3.29 7 12 12 20.71 7", key: "ousv84" }],
  ["line", { x1: "12", y1: "22", x2: "12", y2: "12", key: "gdv6h4" }]
]);
const PackageOpen = createLucideIcon("PackageOpenIcon", [
  [
    "path",
    {
      d: "M20.91 8.84 8.56 2.23a1.93 1.93 0 0 0-1.81 0L3.1 4.13a2.12 2.12 0 0 0-.05 3.69l12.22 6.93a2 2 0 0 0 1.94 0L21 12.51a2.12 2.12 0 0 0-.09-3.67Z",
      key: "1vy178"
    }
  ],
  [
    "path",
    {
      d: "m3.09 8.84 12.35-6.61a1.93 1.93 0 0 1 1.81 0l3.65 1.9a2.12 2.12 0 0 1 .1 3.69L8.73 14.75a2 2 0 0 1-1.94 0L3 12.51a2.12 2.12 0 0 1 .09-3.67Z",
      key: "s3bv25"
    }
  ],
  ["line", { x1: "12", y1: "22", x2: "12", y2: "13", key: "15r0fr" }],
  [
    "path",
    {
      d: "M20 13.5v3.37a2.06 2.06 0 0 1-1.11 1.83l-6 3.08a1.93 1.93 0 0 1-1.78 0l-6-3.08A2.06 2.06 0 0 1 4 16.87V13.5",
      key: "1na2nq"
    }
  ]
]);
const PackagePlus = createLucideIcon("PackagePlusIcon", [
  ["path", { d: "M16 16h6", key: "100bgy" }],
  ["path", { d: "M19 13v6", key: "85cyf1" }],
  [
    "path",
    {
      d: "M21 10V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l2-1.14",
      key: "e7tb2h"
    }
  ],
  ["path", { d: "M16.5 9.4 7.55 4.24", key: "10qotr" }],
  ["polyline", { points: "3.29 7 12 12 20.71 7", key: "ousv84" }],
  ["line", { x1: "12", y1: "22", x2: "12", y2: "12", key: "gdv6h4" }]
]);
const PackageSearch = createLucideIcon("PackageSearchIcon", [
  [
    "path",
    {
      d: "M21 10V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l2-1.14",
      key: "e7tb2h"
    }
  ],
  ["path", { d: "M16.5 9.4 7.55 4.24", key: "10qotr" }],
  ["polyline", { points: "3.29 7 12 12 20.71 7", key: "ousv84" }],
  ["line", { x1: "12", y1: "22", x2: "12", y2: "12", key: "gdv6h4" }],
  ["circle", { cx: "18.5", cy: "15.5", r: "2.5", key: "b5zd12" }],
  ["path", { d: "M20.27 17.27 22 19", key: "1l4muz" }]
]);
const PackageX = createLucideIcon("PackageXIcon", [
  [
    "path",
    {
      d: "M21 10V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l2-1.14",
      key: "e7tb2h"
    }
  ],
  ["path", { d: "M16.5 9.4 7.55 4.24", key: "10qotr" }],
  ["polyline", { points: "3.29 7 12 12 20.71 7", key: "ousv84" }],
  ["line", { x1: "12", y1: "22", x2: "12", y2: "12", key: "gdv6h4" }],
  ["path", { d: "m17 13 5 5m-5 0 5-5", key: "im3w4b" }]
]);
const Package = createLucideIcon("PackageIcon", [
  ["line", { x1: "16.5", y1: "9.4", x2: "7.5", y2: "4.21", key: "i6f8yp" }],
  [
    "path",
    {
      d: "M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z",
      key: "yt0hxn"
    }
  ],
  ["polyline", { points: "3.29 7 12 12 20.71 7", key: "ousv84" }],
  ["line", { x1: "12", y1: "22", x2: "12", y2: "12", key: "gdv6h4" }]
]);
const PaintBucket = createLucideIcon("PaintBucketIcon", [
  [
    "path",
    {
      d: "m19 11-8-8-8.6 8.6a2 2 0 0 0 0 2.8l5.2 5.2c.8.8 2 .8 2.8 0L19 11Z",
      key: "irua1i"
    }
  ],
  ["path", { d: "m5 2 5 5", key: "1lls2c" }],
  ["path", { d: "M2 13h15", key: "1hkzvu" }],
  [
    "path",
    {
      d: "M22 20a2 2 0 1 1-4 0c0-1.6 1.7-2.4 2-4 .3 1.6 2 2.4 2 4Z",
      key: "xk76lq"
    }
  ]
]);
const Paintbrush2 = createLucideIcon("Paintbrush2Icon", [
  [
    "path",
    {
      d: "M14 19.9V16h3a2 2 0 0 0 2-2v-2H5v2c0 1.1.9 2 2 2h3v3.9a2 2 0 1 0 4 0Z",
      key: "1c8kta"
    }
  ],
  ["path", { d: "M6 12V2h12v10", key: "1esbnf" }],
  ["path", { d: "M14 2v4", key: "qmzblu" }],
  ["path", { d: "M10 2v2", key: "7u0qdc" }]
]);
const Paintbrush = createLucideIcon("PaintbrushIcon", [
  [
    "path",
    {
      d: "M18.37 2.63 14 7l-1.59-1.59a2 2 0 0 0-2.82 0L8 7l9 9 1.59-1.59a2 2 0 0 0 0-2.82L17 10l4.37-4.37a2.12 2.12 0 1 0-3-3Z",
      key: "m6k5sh"
    }
  ],
  ["path", { d: "M9 8c-2 3-4 3.5-7 4l8 10c2-1 6-5 6-7", key: "arzq70" }],
  ["path", { d: "M14.5 17.5 4.5 15", key: "s7fvrz" }]
]);
const Palette = createLucideIcon("PaletteIcon", [
  ["circle", { cx: "13.5", cy: "6.5", r: ".5", key: "1xcu5" }],
  ["circle", { cx: "17.5", cy: "10.5", r: ".5", key: "736e4u" }],
  ["circle", { cx: "8.5", cy: "7.5", r: ".5", key: "clrty" }],
  ["circle", { cx: "6.5", cy: "12.5", r: ".5", key: "1s4xz9" }],
  [
    "path",
    {
      d: "M12 2C6.5 2 2 6.5 2 12s4.5 10 10 10c.926 0 1.648-.746 1.648-1.688 0-.437-.18-.835-.437-1.125-.29-.289-.438-.652-.438-1.125a1.64 1.64 0 0 1 1.668-1.668h1.996c3.051 0 5.555-2.503 5.555-5.554C21.965 6.012 17.461 2 12 2z",
      key: "12rzf8"
    }
  ]
]);
const Palmtree = createLucideIcon("PalmtreeIcon", [
  [
    "path",
    { d: "M13 8c0-2.76-2.46-5-5.5-5S2 5.24 2 8h2l1-1 1 1h4", key: "foxbe7" }
  ],
  [
    "path",
    {
      d: "M13 7.14A5.82 5.82 0 0 1 16.5 6c3.04 0 5.5 2.24 5.5 5h-3l-1-1-1 1h-3",
      key: "18arnh"
    }
  ],
  [
    "path",
    {
      d: "M5.89 9.71c-2.15 2.15-2.3 5.47-.35 7.43l4.24-4.25.7-.7.71-.71 2.12-2.12c-1.95-1.96-5.27-1.8-7.42.35z",
      key: "epoumf"
    }
  ],
  [
    "path",
    { d: "M11 15.5c.5 2.5-.17 4.5-1 6.5h4c2-5.5-.5-12-1-14", key: "ft0feo" }
  ]
]);
const Paperclip = createLucideIcon("PaperclipIcon", [
  [
    "path",
    {
      d: "m21.44 11.05-9.19 9.19a6 6 0 0 1-8.49-8.49l8.57-8.57A4 4 0 1 1 18 8.84l-8.59 8.57a2 2 0 0 1-2.83-2.83l8.49-8.48",
      key: "1u3ebp"
    }
  ]
]);
const PartyPopper = createLucideIcon("PartyPopperIcon", [
  ["path", { d: "M5.8 11.3 2 22l10.7-3.79", key: "gwxi1d" }],
  ["path", { d: "M4 3h.01", key: "1vcuye" }],
  ["path", { d: "M22 8h.01", key: "1mrtc2" }],
  ["path", { d: "M15 2h.01", key: "1cjtqr" }],
  ["path", { d: "M22 20h.01", key: "1mrys2" }],
  [
    "path",
    {
      d: "m22 2-2.24.75a2.9 2.9 0 0 0-1.96 3.12v0c.1.86-.57 1.63-1.45 1.63h-.38c-.86 0-1.6.6-1.76 1.44L14 10",
      key: "bpx1uq"
    }
  ],
  [
    "path",
    {
      d: "m22 13-.82-.33c-.86-.34-1.82.2-1.98 1.11v0c-.11.7-.72 1.22-1.43 1.22H17",
      key: "1pd0s7"
    }
  ],
  [
    "path",
    {
      d: "m11 2 .33.82c.34.86-.2 1.82-1.11 1.98v0C9.52 4.9 9 5.52 9 6.23V7",
      key: "zq5xbz"
    }
  ],
  [
    "path",
    {
      d: "M11 13c1.93 1.93 2.83 4.17 2 5-.83.83-3.07-.07-5-2-1.93-1.93-2.83-4.17-2-5 .83-.83 3.07.07 5 2Z",
      key: "4kbmks"
    }
  ]
]);
const PauseCircle = createLucideIcon("PauseCircleIcon", [
  ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
  ["line", { x1: "10", y1: "15", x2: "10", y2: "9", key: "2cxng6" }],
  ["line", { x1: "14", y1: "15", x2: "14", y2: "9", key: "wsglx2" }]
]);
const PauseOctagon = createLucideIcon("PauseOctagonIcon", [
  ["path", { d: "M10 15V9", key: "1lckn7" }],
  ["path", { d: "M14 15V9", key: "1muqhk" }],
  [
    "path",
    {
      d: "M7.714 2h8.572L22 7.714v8.572L16.286 22H7.714L2 16.286V7.714L7.714 2z",
      key: "1m7qra"
    }
  ]
]);
const Pause = createLucideIcon("PauseIcon", [
  ["rect", { x: "6", y: "4", width: "4", height: "16", key: "5yltu4" }],
  ["rect", { x: "14", y: "4", width: "4", height: "16", key: "duxydb" }]
]);
const PenTool = createLucideIcon("PenToolIcon", [
  ["path", { d: "m12 19 7-7 3 3-7 7-3-3z", key: "rklqx2" }],
  ["path", { d: "m18 13-1.5-7.5L2 2l3.5 14.5L13 18l5-5z", key: "1et58u" }],
  ["path", { d: "m2 2 7.586 7.586", key: "etlp93" }],
  ["circle", { cx: "11", cy: "11", r: "2", key: "xmgehs" }]
]);
const Pencil = createLucideIcon("PencilIcon", [
  ["line", { x1: "18", y1: "2", x2: "22", y2: "6", key: "1k5sg2" }],
  ["path", { d: "M7.5 20.5 19 9l-4-4L3.5 16.5 2 22z", key: "12iwkt" }]
]);
const Percent = createLucideIcon("PercentIcon", [
  ["line", { x1: "19", y1: "5", x2: "5", y2: "19", key: "t1677v" }],
  ["circle", { cx: "6.5", cy: "6.5", r: "2.5", key: "4mh3h7" }],
  ["circle", { cx: "17.5", cy: "17.5", r: "2.5", key: "1mdrzq" }]
]);
const PersonStanding = createLucideIcon("PersonStandingIcon", [
  ["circle", { cx: "12", cy: "5", r: "1", key: "gxeob9" }],
  ["path", { d: "m9 20 3-6 3 6", key: "se2kox" }],
  ["path", { d: "m6 8 6 2 6-2", key: "4o3us4" }],
  ["path", { d: "M12 10v4", key: "1kjpxc" }]
]);
const PhoneCall = createLucideIcon("PhoneCallIcon", [
  [
    "path",
    {
      d: "M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z",
      key: "foiqr5"
    }
  ],
  ["path", { d: "M14.05 2a9 9 0 0 1 8 7.94", key: "vmijpz" }],
  ["path", { d: "M14.05 6A5 5 0 0 1 18 10", key: "13nbpp" }]
]);
const PhoneForwarded = createLucideIcon("PhoneForwardedIcon", [
  ["polyline", { points: "18 2 22 6 18 10", key: "6vjanh" }],
  ["line", { x1: "14", y1: "6", x2: "22", y2: "6", key: "1yuov7" }],
  [
    "path",
    {
      d: "M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z",
      key: "foiqr5"
    }
  ]
]);
const PhoneIncoming = createLucideIcon("PhoneIncomingIcon", [
  ["polyline", { points: "16 2 16 8 22 8", key: "1ygljm" }],
  ["line", { x1: "22", y1: "2", x2: "16", y2: "8", key: "kb9lty" }],
  [
    "path",
    {
      d: "M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z",
      key: "foiqr5"
    }
  ]
]);
const PhoneMissed = createLucideIcon("PhoneMissedIcon", [
  ["line", { x1: "22", y1: "2", x2: "16", y2: "8", key: "kb9lty" }],
  ["line", { x1: "16", y1: "2", x2: "22", y2: "8", key: "11291p" }],
  [
    "path",
    {
      d: "M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z",
      key: "foiqr5"
    }
  ]
]);
const PhoneOff = createLucideIcon("PhoneOffIcon", [
  [
    "path",
    {
      d: "M10.68 13.31a16 16 0 0 0 3.41 2.6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7 2 2 0 0 1 1.72 2v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.42 19.42 0 0 1-3.33-2.67m-2.67-3.34a19.79 19.79 0 0 1-3.07-8.63A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91",
      key: "z86iuo"
    }
  ],
  ["line", { x1: "22", y1: "2", x2: "2", y2: "22", key: "1sphze" }]
]);
const PhoneOutgoing = createLucideIcon("PhoneOutgoingIcon", [
  ["polyline", { points: "22 8 22 2 16 2", key: "1g204g" }],
  ["line", { x1: "16", y1: "8", x2: "22", y2: "2", key: "1hkegm" }],
  [
    "path",
    {
      d: "M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z",
      key: "foiqr5"
    }
  ]
]);
const Phone = createLucideIcon("PhoneIcon", [
  [
    "path",
    {
      d: "M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z",
      key: "foiqr5"
    }
  ]
]);
const PictureInPicture2 = createLucideIcon("PictureInPicture2Icon", [
  [
    "path",
    {
      d: "M21 9V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v10c0 1.1.9 2 2 2h4",
      key: "daa4of"
    }
  ],
  [
    "rect",
    { x: "12", y: "13", width: "10", height: "7", rx: "2", key: "1wczht" }
  ]
]);
const PictureInPicture = createLucideIcon("PictureInPictureIcon", [
  [
    "path",
    {
      d: "M8 4.5v5H3m-1-6 6 6m13 0v-3c0-1.16-.84-2-2-2h-7m-9 9v2c0 1.05.95 2 2 2h3",
      key: "bcd8fb"
    }
  ],
  [
    "rect",
    { width: "10", height: "7", x: "12", y: "13.5", ry: "2", key: "136fx3" }
  ]
]);
const PieChart = createLucideIcon("PieChartIcon", [
  ["path", { d: "M21.21 15.89A10 10 0 1 1 8 2.83", key: "k2fpak" }],
  ["path", { d: "M22 12A10 10 0 0 0 12 2v10z", key: "1rfc4y" }]
]);
const PiggyBank = createLucideIcon("PiggyBankIcon", [
  [
    "path",
    {
      d: "M19 5c-1.5 0-2.8 1.4-3 2-3.5-1.5-11-.3-11 5 0 1.8 0 3 2 4.5V20h4v-2h3v2h4v-4c1-.5 1.7-1 2-2h2v-4h-2c0-1-.5-1.5-1-2h0V5z",
      key: "uf6l00"
    }
  ],
  ["path", { d: "M2 9v1c0 1.1.9 2 2 2h1", key: "nm575m" }],
  ["path", { d: "M16 11h0", key: "k2aug8" }]
]);
const Pilcrow = createLucideIcon("PilcrowIcon", [
  ["path", { d: "M13 4v16", key: "8vvj80" }],
  ["path", { d: "M17 4v16", key: "7dpous" }],
  ["path", { d: "M19 4H9.5a4.5 4.5 0 0 0 0 9H13", key: "sh4n9v" }]
]);
const Pill = createLucideIcon("PillIcon", [
  [
    "path",
    {
      d: "m10.5 20.5 10-10a4.95 4.95 0 1 0-7-7l-10 10a4.95 4.95 0 1 0 7 7Z",
      key: "wa1lgi"
    }
  ],
  ["path", { d: "m8.5 8.5 7 7", key: "rvfmvr" }]
]);
const PinOff = createLucideIcon("PinOffIcon", [
  ["line", { x1: "2", y1: "2", x2: "22", y2: "22", key: "1w4vcy" }],
  ["line", { x1: "12", y1: "17", x2: "12", y2: "22", key: "fb3qrx" }],
  [
    "path",
    {
      d: "M9 9v1.76a2 2 0 0 1-1.11 1.79l-1.78.9A2 2 0 0 0 5 15.24V17h12",
      key: "13x2n8"
    }
  ],
  ["path", { d: "M15 9.34V6h1a2 2 0 0 0 0-4H7.89", key: "reo3ki" }]
]);
const Pin = createLucideIcon("PinIcon", [
  ["line", { x1: "12", y1: "17", x2: "12", y2: "22", key: "fb3qrx" }],
  [
    "path",
    {
      d: "M5 17h14v-1.76a2 2 0 0 0-1.11-1.79l-1.78-.9A2 2 0 0 1 15 10.76V6h1a2 2 0 0 0 0-4H8a2 2 0 0 0 0 4h1v4.76a2 2 0 0 1-1.11 1.79l-1.78.9A2 2 0 0 0 5 15.24Z",
      key: "13yl11"
    }
  ]
]);
const Pipette = createLucideIcon("PipetteIcon", [
  ["path", { d: "m2 22 1-1h3l9-9", key: "1sre89" }],
  ["path", { d: "M3 21v-3l9-9", key: "hpe2y6" }],
  [
    "path",
    {
      d: "m15 6 3.4-3.4a2.1 2.1 0 1 1 3 3L18 9l.4.4a2.1 2.1 0 1 1-3 3l-3.8-3.8a2.1 2.1 0 1 1 3-3l.4.4Z",
      key: "196du1"
    }
  ]
]);
const Pizza = createLucideIcon("PizzaIcon", [
  ["path", { d: "M15 11h.01", key: "rns66s" }],
  ["path", { d: "M11 15h.01", key: "k85uqc" }],
  ["path", { d: "M16 16h.01", key: "1f9h7w" }],
  [
    "path",
    {
      d: "m2 16 20 6-6-20c-3.36.9-6.42 2.67-8.88 5.12A19.876 19.876 0 0 0 2 16Z",
      key: "1akyvp"
    }
  ],
  ["path", { d: "M17 6c-6.29 1.47-9.43 5.13-11 11", key: "1dsok0" }]
]);
const Plane = createLucideIcon("PlaneIcon", [
  [
    "path",
    {
      d: "M17.8 19.2 16 11l3.5-3.5C21 6 21.5 4 21 3c-1-.5-3 0-4.5 1.5L13 8 4.8 6.2c-.5-.1-.9.1-1.1.5l-.3.5c-.2.5-.1 1 .3 1.3L9 12l-2 3H4l-1 1 3 2 2 3 1-1v-3l3-2 3.5 5.3c.3.4.8.5 1.3.3l.5-.2c.4-.3.6-.7.5-1.2z",
      key: "1v9wt8"
    }
  ]
]);
const PlayCircle = createLucideIcon("PlayCircleIcon", [
  ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
  ["polygon", { points: "10 8 16 12 10 16 10 8", key: "1cimsy" }]
]);
const Play = createLucideIcon("PlayIcon", [
  ["polygon", { points: "5 3 19 12 5 21 5 3", key: "191637" }]
]);
const Plug2 = createLucideIcon("Plug2Icon", [
  ["path", { d: "M9 2v6", key: "17ngun" }],
  ["path", { d: "M15 2v6", key: "s7yy2p" }],
  ["path", { d: "M12 17v5", key: "bb1du9" }],
  ["path", { d: "M5 8h14", key: "pcz4l3" }],
  ["path", { d: "M6 11V8h12v3a6 6 0 1 1-12 0v0Z", key: "nd4hoy" }]
]);
const PlugZap = createLucideIcon("PlugZapIcon", [
  ["path", { d: "m13 2-2 2.5h3L12 7", key: "1me98u" }],
  ["path", { d: "M12 22v-3", key: "kmzjlo" }],
  ["path", { d: "M10 13v-2.5", key: "1g2mrq" }],
  ["path", { d: "M10 12.5v-2", key: "pcvzbb" }],
  ["path", { d: "M14 12.5v-2", key: "qv1toj" }],
  [
    "path",
    {
      d: "M16 15a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v2a2 2 0 0 0 2 2h4a2 2 0 0 0 2-2v-2z",
      key: "17xmdd"
    }
  ]
]);
const Plug = createLucideIcon("PlugIcon", [
  ["path", { d: "M12 22v-5", key: "1ega77" }],
  ["path", { d: "M9 7V2", key: "1r97uf" }],
  ["path", { d: "M15 7V2", key: "1uo4jc" }],
  [
    "path",
    { d: "M6 13V8h12v5a4 4 0 0 1-4 4h-4a4 4 0 0 1-4-4Z", key: "1xki7n" }
  ]
]);
const PlusCircle = createLucideIcon("PlusCircleIcon", [
  ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
  ["line", { x1: "12", y1: "8", x2: "12", y2: "16", key: "55jlg" }],
  ["line", { x1: "8", y1: "12", x2: "16", y2: "12", key: "1myapg" }]
]);
const PlusSquare = createLucideIcon("PlusSquareIcon", [
  [
    "rect",
    {
      x: "3",
      y: "3",
      width: "18",
      height: "18",
      rx: "2",
      ry: "2",
      key: "maln0c"
    }
  ],
  ["line", { x1: "12", y1: "8", x2: "12", y2: "16", key: "55jlg" }],
  ["line", { x1: "8", y1: "12", x2: "16", y2: "12", key: "1myapg" }]
]);
const Plus = createLucideIcon("PlusIcon", [
  ["line", { x1: "12", y1: "5", x2: "12", y2: "19", key: "myz83a" }],
  ["line", { x1: "5", y1: "12", x2: "19", y2: "12", key: "1smlys" }]
]);
const Pocket = createLucideIcon("PocketIcon", [
  [
    "path",
    {
      d: "M4 3h16a2 2 0 0 1 2 2v6a10 10 0 0 1-10 10A10 10 0 0 1 2 11V5a2 2 0 0 1 2-2z",
      key: "1mz881"
    }
  ],
  ["polyline", { points: "8 10 12 14 16 10", key: "w4mbv5" }]
]);
const Podcast = createLucideIcon("PodcastIcon", [
  ["circle", { cx: "12", cy: "11", r: "1", key: "1gvufo" }],
  [
    "path",
    {
      d: "M11 17a1 1 0 0 1 2 0c0 .5-.34 3-.5 4.5a.5.5 0 0 1-1 0c-.16-1.5-.5-4-.5-4.5Z",
      key: "1n5fvv"
    }
  ],
  ["path", { d: "M8 14a5 5 0 1 1 8 0", key: "fc81rn" }],
  ["path", { d: "M17 18.5a9 9 0 1 0-10 0", key: "jqtxkf" }]
]);
const Pointer = createLucideIcon("PointerIcon", [
  ["path", { d: "M22 14a8 8 0 0 1-8 8", key: "56vcr3" }],
  ["path", { d: "M18 11v-1a2 2 0 0 0-2-2v0a2 2 0 0 0-2 2v0", key: "1pp0yd" }],
  ["path", { d: "M14 10V9a2 2 0 0 0-2-2v0a2 2 0 0 0-2 2v1", key: "u654g" }],
  ["path", { d: "M10 9.5V4a2 2 0 0 0-2-2v0a2 2 0 0 0-2 2v10", key: "1e2dtv" }],
  [
    "path",
    {
      d: "M18 11a2 2 0 1 1 4 0v3a8 8 0 0 1-8 8h-2c-2.8 0-4.5-.86-5.99-2.34l-3.6-3.6a2 2 0 0 1 2.83-2.82L7 15",
      key: "g6ys72"
    }
  ]
]);
const PoundSterling = createLucideIcon("PoundSterlingIcon", [
  ["path", { d: "M18 7c0-5.333-8-5.333-8 0", key: "1prm2n" }],
  ["path", { d: "M10 7v14", key: "18tmcs" }],
  ["path", { d: "M6 21h12", key: "4dkmi1" }],
  ["path", { d: "M6 13h10", key: "ybwr4a" }]
]);
const PowerOff = createLucideIcon("PowerOffIcon", [
  ["path", { d: "M18.36 6.64A9 9 0 0 1 20.77 15", key: "dxknvb" }],
  ["path", { d: "M6.16 6.16a9 9 0 1 0 12.68 12.68", key: "1x7qb5" }],
  ["path", { d: "M12 2v4", key: "3427ic" }],
  ["path", { d: "m2 2 20 20", key: "1ooewy" }]
]);
const Power = createLucideIcon("PowerIcon", [
  ["path", { d: "M18.36 6.64a9 9 0 1 1-12.73 0", key: "phirl6" }],
  ["line", { x1: "12", y1: "2", x2: "12", y2: "12", key: "1d1p48" }]
]);
const Printer = createLucideIcon("PrinterIcon", [
  ["polyline", { points: "6 9 6 2 18 2 18 9", key: "1306q4" }],
  [
    "path",
    {
      d: "M6 18H4a2 2 0 0 1-2-2v-5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v5a2 2 0 0 1-2 2h-2",
      key: "143wyd"
    }
  ],
  ["rect", { x: "6", y: "14", width: "12", height: "8", key: "emw7yt" }]
]);
const Puzzle = createLucideIcon("PuzzleIcon", [
  [
    "path",
    {
      d: "M19.439 7.85c-.049.322.059.648.289.878l1.568 1.568c.47.47.706 1.087.706 1.704s-.235 1.233-.706 1.704l-1.611 1.611a.98.98 0 0 1-.837.276c-.47-.07-.802-.48-.968-.925a2.501 2.501 0 1 0-3.214 3.214c.446.166.855.497.925.968a.979.979 0 0 1-.276.837l-1.61 1.61a2.404 2.404 0 0 1-1.705.707 2.402 2.402 0 0 1-1.704-.706l-1.568-1.568a1.026 1.026 0 0 0-.877-.29c-.493.074-.84.504-1.02.968a2.5 2.5 0 1 1-3.237-3.237c.464-.18.894-.527.967-1.02a1.026 1.026 0 0 0-.289-.877l-1.568-1.568A2.402 2.402 0 0 1 1.998 12c0-.617.236-1.234.706-1.704L4.23 8.77c.24-.24.581-.353.917-.303.515.077.877.528 1.073 1.01a2.5 2.5 0 1 0 3.259-3.259c-.482-.196-.933-.558-1.01-1.073-.05-.336.062-.676.303-.917l1.525-1.525A2.402 2.402 0 0 1 12 1.998c.617 0 1.234.236 1.704.706l1.568 1.568c.23.23.556.338.877.29.493-.074.84-.504 1.02-.968a2.5 2.5 0 1 1 3.237 3.237c-.464.18-.894.527-.967 1.02Z",
      key: "i0oyt7"
    }
  ]
]);
const QrCode = createLucideIcon("QrCodeIcon", [
  ["rect", { x: "3", y: "3", width: "5", height: "5", rx: "1", key: "fue5ao" }],
  [
    "rect",
    { x: "16", y: "3", width: "5", height: "5", rx: "1", key: "1narh3" }
  ],
  [
    "rect",
    { x: "3", y: "16", width: "5", height: "5", rx: "1", key: "1ovwlo" }
  ],
  ["path", { d: "M21 16h-3a2 2 0 0 0-2 2v3", key: "177gqh" }],
  ["path", { d: "M21 21v.01", key: "ents32" }],
  ["path", { d: "M12 7v3a2 2 0 0 1-2 2H7", key: "8crl2c" }],
  ["path", { d: "M3 12h.01", key: "nlz23k" }],
  ["path", { d: "M12 3h.01", key: "n36tog" }],
  ["path", { d: "M12 16v.01", key: "133mhm" }],
  ["path", { d: "M16 12h1", key: "1slzba" }],
  ["path", { d: "M21 12v.01", key: "1lwtk9" }],
  ["path", { d: "M12 21v-1", key: "1880an" }]
]);
const Quote = createLucideIcon("QuoteIcon", [
  [
    "path",
    {
      d: "M3 21c3 0 7-1 7-8V5c0-1.25-.756-2.017-2-2H4c-1.25 0-2 .75-2 1.972V11c0 1.25.75 2 2 2 1 0 1 0 1 1v1c0 1-1 2-2 2s-1 .008-1 1.031V20c0 1 0 1 1 1z",
      key: "4rm80e"
    }
  ],
  [
    "path",
    {
      d: "M15 21c3 0 7-1 7-8V5c0-1.25-.757-2.017-2-2h-4c-1.25 0-2 .75-2 1.972V11c0 1.25.75 2 2 2h.75c0 2.25.25 4-2.75 4v3c0 1 0 1 1 1z",
      key: "10za9r"
    }
  ]
]);
const RadioReceiver = createLucideIcon("RadioReceiverIcon", [
  ["path", { d: "M5 16v2", key: "g5qcv5" }],
  ["path", { d: "M19 16v2", key: "1gbaio" }],
  [
    "rect",
    { x: "2", y: "8", width: "20", height: "8", rx: "2", key: "1xflse" }
  ],
  ["path", { d: "M18 12h0", key: "1ucjzd" }]
]);
const Radio = createLucideIcon("RadioIcon", [
  ["circle", { cx: "12", cy: "12", r: "2", key: "1c9p78" }],
  ["path", { d: "M4.93 19.07a10 10 0 0 1 0-14.14", key: "r41b39" }],
  [
    "path",
    {
      d: "M7.76 16.24a6 6 0 0 1-1.3-1.95 6 6 0 0 1 0-4.59 6 6 0 0 1 1.3-1.95",
      key: "1pc8et"
    }
  ],
  [
    "path",
    {
      d: "M16.24 7.76a6 6 0 0 1 1.3 2 6 6 0 0 1 0 4.59 6 6 0 0 1-1.3 1.95",
      key: "8dzjga"
    }
  ],
  ["path", { d: "M19.07 4.93a10 10 0 0 1 0 14.14", key: "1kegas" }]
]);
const RectangleHorizontal = createLucideIcon("RectangleHorizontalIcon", [
  [
    "rect",
    { x: "2", y: "6", width: "20", height: "12", rx: "2", key: "1wpnh2" }
  ]
]);
const RectangleVertical = createLucideIcon("RectangleVerticalIcon", [
  [
    "rect",
    { x: "6", y: "2", width: "12", height: "20", rx: "2", key: "749fme" }
  ]
]);
const Recycle = createLucideIcon("RecycleIcon", [
  [
    "path",
    {
      d: "M7 19H4.815a1.83 1.83 0 0 1-1.57-.881 1.785 1.785 0 0 1-.004-1.784L7.196 9.5",
      key: "x6z5xu"
    }
  ],
  [
    "path",
    {
      d: "M11 19h8.203a1.83 1.83 0 0 0 1.556-.89 1.784 1.784 0 0 0 0-1.775l-1.226-2.12",
      key: "1x4zh5"
    }
  ],
  ["path", { d: "m14 16-3 3 3 3", key: "f6jyew" }],
  ["path", { d: "M8.293 13.596 7.196 9.5 3.1 10.598", key: "wf1obh" }],
  [
    "path",
    {
      d: "m9.344 5.811 1.093-1.892A1.83 1.83 0 0 1 11.985 3a1.784 1.784 0 0 1 1.546.888l3.943 6.843",
      key: "9tzpgr"
    }
  ],
  ["path", { d: "m13.378 9.633 4.096 1.098 1.097-4.096", key: "1oe83g" }]
]);
const Redo2 = createLucideIcon("Redo2Icon", [
  ["path", { d: "m15 14 5-5-5-5", key: "12vg1m" }],
  [
    "path",
    {
      d: "M20 9H9.5A5.5 5.5 0 0 0 4 14.5v0A5.5 5.5 0 0 0 9.5 20H13",
      key: "19mnr4"
    }
  ]
]);
const Redo = createLucideIcon("RedoIcon", [
  ["path", { d: "M21 7v6h-6", key: "3ptur4" }],
  ["path", { d: "M3 17a9 9 0 0 1 9-9 9 9 0 0 1 6 2.3l3 2.7", key: "1kgawr" }]
]);
const RefreshCcw = createLucideIcon("RefreshCcwIcon", [
  ["path", { d: "M3 2v6h6", key: "18ldww" }],
  ["path", { d: "M21 12A9 9 0 0 0 6 5.3L3 8", key: "1pbrqz" }],
  ["path", { d: "M21 22v-6h-6", key: "usdfbe" }],
  ["path", { d: "M3 12a9 9 0 0 0 15 6.7l3-2.7", key: "1hosoe" }]
]);
const RefreshCw = createLucideIcon("RefreshCwIcon", [
  ["path", { d: "M21 2v6h-6", key: "1lwg0q" }],
  ["path", { d: "M3 12a9 9 0 0 1 15-6.7L21 8", key: "vaktt2" }],
  ["path", { d: "M3 22v-6h6", key: "6llvyv" }],
  ["path", { d: "M21 12a9 9 0 0 1-15 6.7L3 16", key: "i52hsp" }]
]);
const Refrigerator = createLucideIcon("RefrigeratorIcon", [
  [
    "path",
    {
      d: "M5 6a4 4 0 0 1 4-4h6a4 4 0 0 1 4 4v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6Z",
      key: "fpq118"
    }
  ],
  ["path", { d: "M5 10h14", key: "elsbfy" }],
  ["path", { d: "M15 7v6", key: "1nx30x" }]
]);
const Regex = createLucideIcon("RegexIcon", [
  ["path", { d: "M17 3v10", key: "15fgeh" }],
  ["path", { d: "m12.67 5.5 8.66 5", key: "1gpheq" }],
  ["path", { d: "m12.67 10.5 8.66-5", key: "1dkfa6" }],
  [
    "path",
    {
      d: "M9 17a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v2a2 2 0 0 0 2 2h2a2 2 0 0 0 2-2v-2z",
      key: "swwfx4"
    }
  ]
]);
const RemoveFormatting = createLucideIcon("RemoveFormattingIcon", [
  ["path", { d: "M4 7V4h16v3", key: "9msm58" }],
  ["path", { d: "M5 20h6", key: "1h6pxn" }],
  ["path", { d: "M13 4 8 20", key: "kqq6aj" }],
  ["path", { d: "m15 15 5 5", key: "me55sn" }],
  ["path", { d: "m20 15-5 5", key: "11p7ol" }]
]);
const Repeat1 = createLucideIcon("Repeat1Icon", [
  ["path", { d: "m17 2 4 4-4 4", key: "nntrym" }],
  ["path", { d: "M3 11v-1a4 4 0 0 1 4-4h14", key: "84bu3i" }],
  ["path", { d: "m7 22-4-4 4-4", key: "1wqhfi" }],
  ["path", { d: "M21 13v1a4 4 0 0 1-4 4H3", key: "1rx37r" }],
  ["path", { d: "M11 10h1v4", key: "70cz1p" }]
]);
const Repeat = createLucideIcon("RepeatIcon", [
  ["path", { d: "m17 2 4 4-4 4", key: "nntrym" }],
  ["path", { d: "M3 11v-1a4 4 0 0 1 4-4h14", key: "84bu3i" }],
  ["path", { d: "m7 22-4-4 4-4", key: "1wqhfi" }],
  ["path", { d: "M21 13v1a4 4 0 0 1-4 4H3", key: "1rx37r" }]
]);
const ReplyAll = createLucideIcon("ReplyAllIcon", [
  ["polyline", { points: "7 17 2 12 7 7", key: "t83bqg" }],
  ["polyline", { points: "12 17 7 12 12 7", key: "1g4ajm" }],
  ["path", { d: "M22 18v-2a4 4 0 0 0-4-4H7", key: "1fcyog" }]
]);
const Reply = createLucideIcon("ReplyIcon", [
  ["polyline", { points: "9 17 4 12 9 7", key: "hvgpf2" }],
  ["path", { d: "M20 18v-2a4 4 0 0 0-4-4H4", key: "5vmcpk" }]
]);
const Rewind = createLucideIcon("RewindIcon", [
  ["polygon", { points: "11 19 2 12 11 5 11 19", key: "14yba5" }],
  ["polygon", { points: "22 19 13 12 22 5 22 19", key: "1pi1cj" }]
]);
const Rocket = createLucideIcon("RocketIcon", [
  [
    "path",
    {
      d: "M4.5 16.5c-1.5 1.26-2 5-2 5s3.74-.5 5-2c.71-.84.7-2.13-.09-2.91a2.18 2.18 0 0 0-2.91-.09z",
      key: "m3kijz"
    }
  ],
  [
    "path",
    {
      d: "m12 15-3-3a22 22 0 0 1 2-3.95A12.88 12.88 0 0 1 22 2c0 2.72-.78 7.5-6 11a22.35 22.35 0 0 1-4 2z",
      key: "1fmvmk"
    }
  ],
  ["path", { d: "M9 12H4s.55-3.03 2-4c1.62-1.08 5 0 5 0", key: "1f8sc4" }],
  ["path", { d: "M12 15v5s3.03-.55 4-2c1.08-1.62 0-5 0-5", key: "qeys4" }]
]);
const RockingChair = createLucideIcon("RockingChairIcon", [
  ["polyline", { points: "3.5 2 6.5 12.5 18 12.5", key: "y3iy52" }],
  ["line", { x1: "9.5", y1: "12.5", x2: "5.5", y2: "20", key: "ivgihp" }],
  ["line", { x1: "15", y1: "12.5", x2: "18.5", y2: "20", key: "1palb4" }],
  ["path", { d: "M2.75 18a13 13 0 0 0 18.5 0", key: "1nquas" }]
]);
const Rotate3d = createLucideIcon("Rotate3dIcon", [
  [
    "path",
    {
      d: "M16.466 7.5C15.643 4.237 13.952 2 12 2 9.239 2 7 6.477 7 12s2.239 10 5 10c.342 0 .677-.069 1-.2",
      key: "10n0gc"
    }
  ],
  ["path", { d: "m15.194 13.707 3.814 1.86-1.86 3.814", key: "16shm9" }],
  [
    "path",
    {
      d: "M19 15.57c-1.804.885-4.274 1.43-7 1.43-5.523 0-10-2.239-10-5s4.477-5 10-5c4.838 0 8.873 1.718 9.8 4",
      key: "1lxi77"
    }
  ]
]);
const RotateCcw = createLucideIcon("RotateCcwIcon", [
  ["path", { d: "M3 2v6h6", key: "18ldww" }],
  ["path", { d: "M3 13a9 9 0 1 0 3-7.7L3 8", key: "aahkch" }]
]);
const RotateCw = createLucideIcon("RotateCwIcon", [
  ["path", { d: "M21 2v6h-6", key: "1lwg0q" }],
  ["path", { d: "M21 13a9 9 0 1 1-3-7.7L21 8", key: "vix499" }]
]);
const Router = createLucideIcon("RouterIcon", [
  [
    "rect",
    { width: "20", height: "8", x: "2", y: "14", rx: "2", key: "w68u3i" }
  ],
  ["path", { d: "M6.01 18H6", key: "19vcac" }],
  ["path", { d: "M10.01 18H10", key: "uamcmx" }],
  ["path", { d: "M15 10v4", key: "qjz1xs" }],
  ["path", { d: "M17.84 7.17a4 4 0 0 0-5.66 0", key: "1rif40" }],
  ["path", { d: "M20.66 4.34a8 8 0 0 0-11.31 0", key: "6a5xfq" }]
]);
const Rss = createLucideIcon("RssIcon", [
  ["path", { d: "M4 11a9 9 0 0 1 9 9", key: "pv89mb" }],
  ["path", { d: "M4 4a16 16 0 0 1 16 16", key: "k0647b" }],
  ["circle", { cx: "5", cy: "19", r: "1", key: "bfqh0e" }]
]);
const Ruler = createLucideIcon("RulerIcon", [
  [
    "path",
    {
      d: "M21.3 8.7 8.7 21.3c-1 1-2.5 1-3.4 0l-2.6-2.6c-1-1-1-2.5 0-3.4L15.3 2.7c1-1 2.5-1 3.4 0l2.6 2.6c1 1 1 2.5 0 3.4Z",
      key: "14xb44"
    }
  ],
  ["path", { d: "m7.5 10.5 2 2", key: "3h1c69" }],
  ["path", { d: "m10.5 7.5 2 2", key: "1lvsmz" }],
  ["path", { d: "m13.5 4.5 2 2", key: "1i616n" }],
  ["path", { d: "m4.5 13.5 2 2", key: "16iojn" }]
]);
const RussianRuble = createLucideIcon("RussianRubleIcon", [
  ["path", { d: "M14 11c5.333 0 5.333-8 0-8", key: "92e629" }],
  ["path", { d: "M6 11h8", key: "1cr2u4" }],
  ["path", { d: "M6 15h8", key: "1y8f6l" }],
  ["path", { d: "M9 21V3", key: "1jd2g6" }],
  ["path", { d: "M9 3h5", key: "8bgvcw" }]
]);
const Sailboat = createLucideIcon("SailboatIcon", [
  ["path", { d: "M22 18H2a4 4 0 0 0 4 4h12a4 4 0 0 0 4-4Z", key: "1404fh" }],
  ["path", { d: "M21 14 10 2 3 14h18Z", key: "1nzg7v" }],
  ["path", { d: "M10 2v16", key: "1labyt" }]
]);
const Salad = createLucideIcon("SaladIcon", [
  ["path", { d: "M7 21h10", key: "1b0cd5" }],
  ["path", { d: "M12 21a9 9 0 0 0 9-9H3a9 9 0 0 0 9 9Z", key: "4rw317" }],
  [
    "path",
    {
      d: "M11.38 12a2.4 2.4 0 0 1-.4-4.77 2.4 2.4 0 0 1 3.2-2.77 2.4 2.4 0 0 1 3.47-.63 2.4 2.4 0 0 1 3.37 3.37 2.4 2.4 0 0 1-1.1 3.7 2.51 2.51 0 0 1 .03 1.1",
      key: "10xrj0"
    }
  ],
  ["path", { d: "m13 12 4-4", key: "1hckqy" }],
  [
    "path",
    { d: "M10.9 7.25A3.99 3.99 0 0 0 4 10c0 .73.2 1.41.54 2", key: "1p4srx" }
  ]
]);
const Sandwich = createLucideIcon("SandwichIcon", [
  ["path", { d: "M3 11v3a1 1 0 0 0 1 1h16a1 1 0 0 0 1-1v-3", key: "34v9d7" }],
  [
    "path",
    {
      d: "M12 19H4a1 1 0 0 1-1-1v-2a1 1 0 0 1 1-1h16a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1h-3.83",
      key: "1k5vfb"
    }
  ],
  ["path", { d: "m3 11 7.77-6.04a2 2 0 0 1 2.46 0L21 11H3Z", key: "1oe7l6" }],
  [
    "path",
    { d: "M12.97 19.77 7 15h12.5l-3.75 4.5a2 2 0 0 1-2.78.27Z", key: "1ts2ri" }
  ]
]);
const Save = createLucideIcon("SaveIcon", [
  [
    "path",
    {
      d: "M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z",
      key: "1owoqh"
    }
  ],
  ["polyline", { points: "17 21 17 13 7 13 7 21", key: "1md35c" }],
  ["polyline", { points: "7 3 7 8 15 8", key: "8nz8an" }]
]);
const Scale3d = createLucideIcon("Scale3dIcon", [
  ["path", { d: "M5 7v12h12", key: "vtaa4r" }],
  ["path", { d: "m5 19 6-6", key: "jh6hbb" }],
  ["rect", { x: "3", y: "3", width: "4", height: "4", rx: "1", key: "1qeirs" }],
  [
    "rect",
    { x: "17", y: "17", width: "4", height: "4", rx: "1", key: "b22pg0" }
  ]
]);
const Scale = createLucideIcon("ScaleIcon", [
  [
    "path",
    { d: "m16 16 3-8 3 8c-.87.65-1.92 1-3 1s-2.13-.35-3-1Z", key: "7g6ntu" }
  ],
  [
    "path",
    { d: "m2 16 3-8 3 8c-.87.65-1.92 1-3 1s-2.13-.35-3-1Z", key: "ijws7r" }
  ],
  ["path", { d: "M7 21h10", key: "1b0cd5" }],
  ["path", { d: "M12 3v18", key: "108xh3" }],
  ["path", { d: "M3 7h2c2 0 5-1 7-2 2 1 5 2 7 2h2", key: "3gwbw2" }]
]);
const Scaling = createLucideIcon("ScalingIcon", [
  ["path", { d: "M21 3 9 15", key: "15kdhq" }],
  ["path", { d: "M12 3H3v18h18v-9", key: "8suug0" }],
  ["path", { d: "M16 3h5v5", key: "1806ms" }],
  ["path", { d: "M14 15H9v-5", key: "pi4jk9" }]
]);
const ScanFace = createLucideIcon("ScanFaceIcon", [
  ["path", { d: "M3 7V5a2 2 0 0 1 2-2h2", key: "aa7l1z" }],
  ["path", { d: "M17 3h2a2 2 0 0 1 2 2v2", key: "4qcy5o" }],
  ["path", { d: "M21 17v2a2 2 0 0 1-2 2h-2", key: "6vwrx8" }],
  ["path", { d: "M7 21H5a2 2 0 0 1-2-2v-2", key: "ioqczr" }],
  ["path", { d: "M8 14s1.5 2 4 2 4-2 4-2", key: "1y1vjs" }],
  ["path", { d: "M9 9h.01", key: "1q5me6" }],
  ["path", { d: "M15 9h.01", key: "x1ddxp" }]
]);
const ScanLine = createLucideIcon("ScanLineIcon", [
  ["path", { d: "M3 7V5a2 2 0 0 1 2-2h2", key: "aa7l1z" }],
  ["path", { d: "M17 3h2a2 2 0 0 1 2 2v2", key: "4qcy5o" }],
  ["path", { d: "M21 17v2a2 2 0 0 1-2 2h-2", key: "6vwrx8" }],
  ["path", { d: "M7 21H5a2 2 0 0 1-2-2v-2", key: "ioqczr" }],
  ["line", { x1: "7", y1: "12", x2: "17", y2: "12", key: "bc9tui" }]
]);
const Scan = createLucideIcon("ScanIcon", [
  ["path", { d: "M3 7V5a2 2 0 0 1 2-2h2", key: "aa7l1z" }],
  ["path", { d: "M17 3h2a2 2 0 0 1 2 2v2", key: "4qcy5o" }],
  ["path", { d: "M21 17v2a2 2 0 0 1-2 2h-2", key: "6vwrx8" }],
  ["path", { d: "M7 21H5a2 2 0 0 1-2-2v-2", key: "ioqczr" }]
]);
const Scissors = createLucideIcon("ScissorsIcon", [
  ["circle", { cx: "6", cy: "6", r: "3", key: "1lh9wr" }],
  ["circle", { cx: "6", cy: "18", r: "3", key: "fqmcym" }],
  ["line", { x1: "20", y1: "4", x2: "8.12", y2: "15.88", key: "3cwkde" }],
  ["line", { x1: "14.47", y1: "14.48", x2: "20", y2: "20", key: "1keerz" }],
  ["line", { x1: "8.12", y1: "8.12", x2: "12", y2: "12", key: "spxzcb" }]
]);
const ScreenShareOff = createLucideIcon("ScreenShareOffIcon", [
  [
    "path",
    {
      d: "M13 3H4a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-3",
      key: "i8wdob"
    }
  ],
  ["path", { d: "M8 21h8", key: "1ev6f3" }],
  ["path", { d: "M12 17v4", key: "1riwvh" }],
  ["path", { d: "m22 3-5 5", key: "12jva0" }],
  ["path", { d: "m17 3 5 5", key: "k36vhe" }]
]);
const ScreenShare = createLucideIcon("ScreenShareIcon", [
  [
    "path",
    {
      d: "M13 3H4a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-3",
      key: "i8wdob"
    }
  ],
  ["path", { d: "M8 21h8", key: "1ev6f3" }],
  ["path", { d: "M12 17v4", key: "1riwvh" }],
  ["path", { d: "m17 8 5-5", key: "fqif7o" }],
  ["path", { d: "M17 3h5v5", key: "1o3tu8" }]
]);
const Scroll = createLucideIcon("ScrollIcon", [
  [
    "path",
    {
      d: "M10 17v2a2 2 0 0 1-2 2v0a2 2 0 0 1-2-2V5a2 2 0 0 0-2-2v0a2 2 0 0 0-2 2v3h3",
      key: "1knuaj"
    }
  ],
  ["path", { d: "M22 17v2a2 2 0 0 1-2 2H8", key: "62edg8" }],
  ["path", { d: "M19 17V5a2 2 0 0 0-2-2H4", key: "zz82l3" }],
  ["path", { d: "M22 17H10", key: "1dr9mz" }]
]);
const Search = createLucideIcon("SearchIcon", [
  ["circle", { cx: "11", cy: "11", r: "8", key: "4ej97u" }],
  ["line", { x1: "21", y1: "21", x2: "16.65", y2: "16.65", key: "1p50m8" }]
]);
const Send = createLucideIcon("SendIcon", [
  ["line", { x1: "22", y1: "2", x2: "11", y2: "13", key: "10auo0" }],
  ["polygon", { points: "22 2 15 22 11 13 2 9 22 2", key: "12uapv" }]
]);
const SeparatorHorizontal = createLucideIcon("SeparatorHorizontalIcon", [
  ["line", { x1: "3", y1: "12", x2: "21", y2: "12", key: "1aui40" }],
  ["polyline", { points: "8 8 12 4 16 8", key: "zo8t4w" }],
  ["polyline", { points: "16 16 12 20 8 16", key: "1oyrid" }]
]);
const SeparatorVertical = createLucideIcon("SeparatorVerticalIcon", [
  ["line", { x1: "12", y1: "3", x2: "12", y2: "21", key: "essbwb" }],
  ["polyline", { points: "8 8 4 12 8 16", key: "bnfmv4" }],
  ["polyline", { points: "16 16 20 12 16 8", key: "u90052" }]
]);
const ServerCog = createLucideIcon("ServerCogIcon", [
  [
    "path",
    {
      d: "M5 10H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2h-1",
      key: "1qm4no"
    }
  ],
  [
    "path",
    {
      d: "M5 14H4a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-4a2 2 0 0 0-2-2h-1",
      key: "1lpaho"
    }
  ],
  ["path", { d: "M6 6h.01", key: "1utrut" }],
  ["path", { d: "M6 18h.01", key: "uhywen" }],
  ["circle", { cx: "12", cy: "12", r: "3", key: "1v7zrd" }],
  ["path", { d: "M12 8v1", key: "1rj8u4" }],
  ["path", { d: "M12 15v1", key: "1ovrzm" }],
  ["path", { d: "M16 12h-1", key: "1qpdyp" }],
  ["path", { d: "M9 12H8", key: "1l15iv" }],
  ["path", { d: "m15 9-.88.88", key: "3hwatj" }],
  ["path", { d: "M9.88 14.12 9 15", key: "13ldc9" }],
  ["path", { d: "m15 15-.88-.88", key: "45priv" }],
  ["path", { d: "M9.88 9.88 9 9", key: "1ladhj" }]
]);
const ServerCrash = createLucideIcon("ServerCrashIcon", [
  [
    "path",
    {
      d: "M6 10H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2h-2",
      key: "4b9dqc"
    }
  ],
  [
    "path",
    {
      d: "M6 14H4a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-4a2 2 0 0 0-2-2h-2",
      key: "22nnkd"
    }
  ],
  ["path", { d: "M6 6h.01", key: "1utrut" }],
  ["path", { d: "M6 18h.01", key: "uhywen" }],
  ["path", { d: "m13 6-4 6h6l-4 6", key: "14hqih" }]
]);
const ServerOff = createLucideIcon("ServerOffIcon", [
  ["path", { d: "M7 2h13a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2h-5", key: "bt2siv" }],
  [
    "path",
    { d: "M10 10 2.5 2.5C2 2 2 2.5 2 5v3a2 2 0 0 0 2 2h6z", key: "1hjrv1" }
  ],
  ["path", { d: "M22 17v-1a2 2 0 0 0-2-2h-1", key: "1iynyr" }],
  [
    "path",
    {
      d: "M4 14a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h16.5l1-.5.5.5-8-8H4z",
      key: "161ggg"
    }
  ],
  ["path", { d: "M6 18h.01", key: "uhywen" }],
  ["path", { d: "m2 2 20 20", key: "1ooewy" }]
]);
const Server = createLucideIcon("ServerIcon", [
  [
    "rect",
    {
      x: "2",
      y: "2",
      width: "20",
      height: "8",
      rx: "2",
      ry: "2",
      key: "e1v5fq"
    }
  ],
  [
    "rect",
    {
      x: "2",
      y: "14",
      width: "20",
      height: "8",
      rx: "2",
      ry: "2",
      key: "10c4lq"
    }
  ],
  ["line", { x1: "6", y1: "6", x2: "6.01", y2: "6", key: "1g0o6g" }],
  ["line", { x1: "6", y1: "18", x2: "6.01", y2: "18", key: "y2j7fo" }]
]);
const Settings2 = createLucideIcon("Settings2Icon", [
  ["path", { d: "M20 7h-9", key: "3s1dr2" }],
  ["path", { d: "M14 17H5", key: "gfn3mx" }],
  ["circle", { cx: "17", cy: "17", r: "3", key: "18b49y" }],
  ["circle", { cx: "7", cy: "7", r: "3", key: "dfmy0x" }]
]);
const Settings = createLucideIcon("SettingsIcon", [
  [
    "path",
    {
      d: "M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z",
      key: "1qme2f"
    }
  ],
  ["circle", { cx: "12", cy: "12", r: "3", key: "1v7zrd" }]
]);
const Share2 = createLucideIcon("Share2Icon", [
  ["circle", { cx: "18", cy: "5", r: "3", key: "gq8acd" }],
  ["circle", { cx: "6", cy: "12", r: "3", key: "w7nqdw" }],
  ["circle", { cx: "18", cy: "19", r: "3", key: "1xt0gg" }],
  [
    "line",
    { x1: "8.59", y1: "13.51", x2: "15.42", y2: "17.49", key: "10dsx0" }
  ],
  ["line", { x1: "15.41", y1: "6.51", x2: "8.59", y2: "10.49", key: "1qn9hm" }]
]);
const Share = createLucideIcon("ShareIcon", [
  ["path", { d: "M4 12v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8", key: "1b2hhj" }],
  ["polyline", { points: "16 6 12 2 8 6", key: "m901s6" }],
  ["line", { x1: "12", y1: "2", x2: "12", y2: "15", key: "1sxkij" }]
]);
const Sheet = createLucideIcon("SheetIcon", [
  [
    "rect",
    {
      x: "3",
      y: "3",
      width: "18",
      height: "18",
      rx: "2",
      ry: "2",
      key: "maln0c"
    }
  ],
  ["line", { x1: "3", y1: "9", x2: "21", y2: "9", key: "1uch6j" }],
  ["line", { x1: "3", y1: "15", x2: "21", y2: "15", key: "1xojw2" }],
  ["line", { x1: "9", y1: "9", x2: "9", y2: "21", key: "x5ianl" }],
  ["line", { x1: "15", y1: "9", x2: "15", y2: "21", key: "13a17d" }]
]);
const ShieldAlert = createLucideIcon("ShieldAlertIcon", [
  ["path", { d: "M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z", key: "3xmgem" }],
  ["path", { d: "M12 8v4", key: "1got3b" }],
  ["path", { d: "M12 16h.01", key: "1drbdi" }]
]);
const ShieldCheck = createLucideIcon("ShieldCheckIcon", [
  ["path", { d: "M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z", key: "3xmgem" }],
  ["path", { d: "m9 12 2 2 4-4", key: "dzmm74" }]
]);
const ShieldClose = createLucideIcon("ShieldCloseIcon", [
  ["path", { d: "M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z", key: "3xmgem" }],
  ["line", { x1: "9.5", y1: "9", x2: "14.5", y2: "14", key: "154127" }],
  ["line", { x1: "14.5", y1: "9", x2: "9.5", y2: "14", key: "1rm6h8" }]
]);
const ShieldOff = createLucideIcon("ShieldOffIcon", [
  [
    "path",
    { d: "M19.69 14a6.9 6.9 0 0 0 .31-2V5l-8-3-3.16 1.18", key: "ungvgc" }
  ],
  [
    "path",
    {
      d: "M4.73 4.73 4 5v7c0 6 8 10 8 10a20.29 20.29 0 0 0 5.62-4.38",
      key: "1qf5yw"
    }
  ],
  ["line", { x1: "2", y1: "2", x2: "22", y2: "22", key: "1w4vcy" }]
]);
const Shield = createLucideIcon("ShieldIcon", [
  ["path", { d: "M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z", key: "3xmgem" }]
]);
const Ship = createLucideIcon("ShipIcon", [
  [
    "path",
    {
      d: "M2 21c.6.5 1.2 1 2.5 1 2.5 0 2.5-2 5-2 1.3 0 1.9.5 2.5 1 .6.5 1.2 1 2.5 1 2.5 0 2.5-2 5-2 1.3 0 1.9.5 2.5 1",
      key: "iegodh"
    }
  ],
  [
    "path",
    {
      d: "M19.38 20A11.6 11.6 0 0 0 21 14l-9-4-9 4c0 2.9.94 5.34 2.81 7.76",
      key: "fp8vka"
    }
  ],
  ["path", { d: "M19 13V7a2 2 0 0 0-2-2H7a2 2 0 0 0-2 2v6", key: "qpkstq" }],
  ["path", { d: "M12 10v4", key: "1kjpxc" }],
  ["path", { d: "M12 2v3", key: "qbqxhf" }]
]);
const Shirt = createLucideIcon("ShirtIcon", [
  [
    "path",
    {
      d: "M20.38 3.46 16 2a4 4 0 0 1-8 0L3.62 3.46a2 2 0 0 0-1.34 2.23l.58 3.47a1 1 0 0 0 .99.84H6v10c0 1.1.9 2 2 2h8a2 2 0 0 0 2-2V10h2.15a1 1 0 0 0 .99-.84l.58-3.47a2 2 0 0 0-1.34-2.23z",
      key: "1wgbhj"
    }
  ]
]);
const ShoppingBag = createLucideIcon("ShoppingBagIcon", [
  [
    "path",
    { d: "M6 2 3 6v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6l-3-4z", key: "14a4hr" }
  ],
  ["line", { x1: "3", y1: "6", x2: "21", y2: "6", key: "1tp2lp" }],
  ["path", { d: "M16 10a4 4 0 0 1-8 0", key: "1ltviw" }]
]);
const ShoppingCart = createLucideIcon("ShoppingCartIcon", [
  ["circle", { cx: "8", cy: "21", r: "1", key: "jimo8o" }],
  ["circle", { cx: "19", cy: "21", r: "1", key: "13723u" }],
  [
    "path",
    {
      d: "M2.05 2.05h2l2.66 12.42a2 2 0 0 0 2 1.58h9.78a2 2 0 0 0 1.95-1.57l1.65-7.43H5.12",
      key: "9zh506"
    }
  ]
]);
const Shovel = createLucideIcon("ShovelIcon", [
  ["path", { d: "M2 22v-5l5-5 5 5-5 5z", key: "1fh25c" }],
  ["path", { d: "M9.5 14.5 16 8", key: "1smz5x" }],
  [
    "path",
    {
      d: "m17 2 5 5-.5.5a3.53 3.53 0 0 1-5 0s0 0 0 0a3.53 3.53 0 0 1 0-5L17 2",
      key: "1q8uv5"
    }
  ]
]);
const ShowerHead = createLucideIcon("ShowerHeadIcon", [
  ["path", { d: "m4 4 2.5 2.5", key: "uv2vmf" }],
  ["path", { d: "M13.5 6.5a4.95 4.95 0 0 0-7 7", key: "frdkwv" }],
  ["path", { d: "M15 5 5 15", key: "1ag8rq" }],
  ["path", { d: "M14 17v.01", key: "eokfpp" }],
  ["path", { d: "M10 16v.01", key: "14uyyl" }],
  ["path", { d: "M13 13v.01", key: "1v1k97" }],
  ["path", { d: "M16 10v.01", key: "5169yg" }],
  ["path", { d: "M11 20v.01", key: "cj92p8" }],
  ["path", { d: "M17 14v.01", key: "11cswd" }],
  ["path", { d: "M20 11v.01", key: "19e0od" }]
]);
const Shrink = createLucideIcon("ShrinkIcon", [
  ["path", { d: "m15 15 6 6m-6-6v4.8m0-4.8h4.8", key: "17vawe" }],
  ["path", { d: "M9 19.8V15m0 0H4.2M9 15l-6 6", key: "chjx8e" }],
  ["path", { d: "M15 4.2V9m0 0h4.8M15 9l6-6", key: "lav6yq" }],
  ["path", { d: "M9 4.2V9m0 0H4.2M9 9 3 3", key: "1pxi2q" }]
]);
const Shrub = createLucideIcon("ShrubIcon", [
  ["path", { d: "M12 22v-7l-2-2", key: "eqv9mc" }],
  [
    "path",
    {
      d: "M17 8v.8A6 6 0 0 1 13.8 20v0H10v0A6.5 6.5 0 0 1 7 8h0a5 5 0 0 1 10 0Z",
      key: "12jcau"
    }
  ],
  ["path", { d: "m14 14-2 2", key: "847xa2" }]
]);
const Shuffle = createLucideIcon("ShuffleIcon", [
  ["polyline", { points: "16 3 21 3 21 8", key: "11391h" }],
  ["line", { x1: "4", y1: "20", x2: "21", y2: "3", key: "pnd031" }],
  ["polyline", { points: "21 16 21 21 16 21", key: "1j0gwc" }],
  ["line", { x1: "15", y1: "15", x2: "21", y2: "21", key: "ygtzor" }],
  ["line", { x1: "4", y1: "4", x2: "9", y2: "9", key: "q17lez" }]
]);
const SidebarClose = createLucideIcon("SidebarCloseIcon", [
  [
    "rect",
    {
      x: "3",
      y: "3",
      width: "18",
      height: "18",
      rx: "2",
      ry: "2",
      key: "maln0c"
    }
  ],
  ["path", { d: "M9 3v18", key: "fh3hqa" }],
  ["path", { d: "m16 15-3-3 3-3", key: "14y99z" }]
]);
const SidebarOpen = createLucideIcon("SidebarOpenIcon", [
  [
    "rect",
    {
      x: "3",
      y: "3",
      width: "18",
      height: "18",
      rx: "2",
      ry: "2",
      key: "maln0c"
    }
  ],
  ["path", { d: "M9 3v18", key: "fh3hqa" }],
  ["path", { d: "m14 9 3 3-3 3", key: "8010ee" }]
]);
const Sidebar = createLucideIcon("SidebarIcon", [
  [
    "rect",
    {
      x: "3",
      y: "3",
      width: "18",
      height: "18",
      rx: "2",
      ry: "2",
      key: "maln0c"
    }
  ],
  ["line", { x1: "9", y1: "3", x2: "9", y2: "21", key: "nvcl17" }]
]);
const Sigma = createLucideIcon("SigmaIcon", [
  ["path", { d: "M18 7V4H6l6 8-6 8h12v-3", key: "zis8ev" }]
]);
const SignalHigh = createLucideIcon("SignalHighIcon", [
  ["path", { d: "M2 20h.01", key: "4haj6o" }],
  ["path", { d: "M7 20v-4", key: "j294jx" }],
  ["path", { d: "M12 20v-8", key: "i3yub9" }],
  ["path", { d: "M17 20V8", key: "1tkaf5" }]
]);
const SignalLow = createLucideIcon("SignalLowIcon", [
  ["path", { d: "M2 20h.01", key: "4haj6o" }],
  ["path", { d: "M7 20v-4", key: "j294jx" }]
]);
const SignalMedium = createLucideIcon("SignalMediumIcon", [
  ["path", { d: "M2 20h.01", key: "4haj6o" }],
  ["path", { d: "M7 20v-4", key: "j294jx" }],
  ["path", { d: "M12 20v-8", key: "i3yub9" }]
]);
const SignalZero = createLucideIcon("SignalZeroIcon", [
  ["path", { d: "M2 20h.01", key: "4haj6o" }]
]);
const Signal = createLucideIcon("SignalIcon", [
  ["path", { d: "M2 20h.01", key: "4haj6o" }],
  ["path", { d: "M7 20v-4", key: "j294jx" }],
  ["path", { d: "M12 20v-8", key: "i3yub9" }],
  ["path", { d: "M17 20V8", key: "1tkaf5" }],
  ["path", { d: "M22 4v16", key: "sih9yq" }]
]);
const Siren = createLucideIcon("SirenIcon", [
  ["path", { d: "M7 12a5 5 0 0 1 5-5v0a5 5 0 0 1 5 5v6H7v-6Z", key: "rmc51c" }],
  [
    "path",
    { d: "M5 20a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v2H5v-2Z", key: "yyvmjy" }
  ],
  ["path", { d: "M21 12h1", key: "jtio3y" }],
  ["path", { d: "M18.5 4.5 18 5", key: "g5sp9y" }],
  ["path", { d: "M2 12h1", key: "1uaihz" }],
  ["path", { d: "M12 2v1", key: "11qlp1" }],
  ["path", { d: "m4.929 4.929.707.707", key: "1i51kw" }],
  ["path", { d: "M12 12v6", key: "3ahymv" }]
]);
const SkipBack = createLucideIcon("SkipBackIcon", [
  ["polygon", { points: "19 20 9 12 19 4 19 20", key: "o2sva" }],
  ["line", { x1: "5", y1: "19", x2: "5", y2: "5", key: "1qxvzh" }]
]);
const SkipForward = createLucideIcon("SkipForwardIcon", [
  ["polygon", { points: "5 4 15 12 5 20 5 4", key: "16p6eg" }],
  ["line", { x1: "19", y1: "5", x2: "19", y2: "19", key: "5lndli" }]
]);
const Skull = createLucideIcon("SkullIcon", [
  ["circle", { cx: "9", cy: "12", r: "1", key: "1vctgf" }],
  ["circle", { cx: "15", cy: "12", r: "1", key: "1tmaij" }],
  ["path", { d: "M8 20v2h8v-2", key: "ded4og" }],
  ["path", { d: "m12.5 17-.5-1-.5 1h1z", key: "3me087" }],
  [
    "path",
    {
      d: "M16 20a2 2 0 0 0 1.56-3.25 8 8 0 1 0-11.12 0A2 2 0 0 0 8 20",
      key: "xq9p5u"
    }
  ]
]);
const Slack = createLucideIcon("SlackIcon", [
  [
    "rect",
    { x: "13", y: "2", width: "3", height: "8", rx: "1.5", key: "134gbe" }
  ],
  ["path", { d: "M19 8.5V10h1.5A1.5 1.5 0 1 0 19 8.5", key: "183iwg" }],
  [
    "rect",
    { x: "8", y: "14", width: "3", height: "8", rx: "1.5", key: "6p48jh" }
  ],
  ["path", { d: "M5 15.5V14H3.5A1.5 1.5 0 1 0 5 15.5", key: "76g71w" }],
  [
    "rect",
    { x: "14", y: "13", width: "8", height: "3", rx: "1.5", key: "1gabf9" }
  ],
  ["path", { d: "M15.5 19H14v1.5a1.5 1.5 0 1 0 1.5-1.5", key: "jc4sz0" }],
  [
    "rect",
    { x: "2", y: "8", width: "8", height: "3", rx: "1.5", key: "1bingn" }
  ],
  ["path", { d: "M8.5 5H10V3.5A1.5 1.5 0 1 0 8.5 5", key: "16f3cl" }]
]);
const Slash = createLucideIcon("SlashIcon", [
  ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
  ["line", { x1: "4.93", y1: "4.93", x2: "19.07", y2: "19.07", key: "bqqkff" }]
]);
const Slice = createLucideIcon("SliceIcon", [
  ["path", { d: "m8 14-6 6h9v-3", key: "zo3j9a" }],
  [
    "path",
    {
      d: "M18.37 3.63 8 14l3 3L21.37 6.63a2.12 2.12 0 1 0-3-3Z",
      key: "1dzx0j"
    }
  ]
]);
const SlidersHorizontal = createLucideIcon("SlidersHorizontalIcon", [
  ["line", { x1: "21", y1: "4", x2: "14", y2: "4", key: "ujuyh9" }],
  ["line", { x1: "10", y1: "4", x2: "3", y2: "4", key: "5ejmvt" }],
  ["line", { x1: "21", y1: "12", x2: "12", y2: "12", key: "inadxn" }],
  ["line", { x1: "8", y1: "12", x2: "3", y2: "12", key: "apa8u8" }],
  ["line", { x1: "21", y1: "20", x2: "16", y2: "20", key: "w4k2j3" }],
  ["line", { x1: "12", y1: "20", x2: "3", y2: "20", key: "15hqih" }],
  ["line", { x1: "14", y1: "2", x2: "14", y2: "6", key: "19ksk4" }],
  ["line", { x1: "8", y1: "10", x2: "8", y2: "14", key: "1cn0zn" }],
  ["line", { x1: "16", y1: "18", x2: "16", y2: "22", key: "1vfncj" }]
]);
const Sliders = createLucideIcon("SlidersIcon", [
  ["line", { x1: "4", y1: "21", x2: "4", y2: "14", key: "2cpl65" }],
  ["line", { x1: "4", y1: "10", x2: "4", y2: "3", key: "1b26kg" }],
  ["line", { x1: "12", y1: "21", x2: "12", y2: "12", key: "fxobwr" }],
  ["line", { x1: "12", y1: "8", x2: "12", y2: "3", key: "bkspcw" }],
  ["line", { x1: "20", y1: "21", x2: "20", y2: "16", key: "b7lt1r" }],
  ["line", { x1: "20", y1: "12", x2: "20", y2: "3", key: "inamez" }],
  ["line", { x1: "2", y1: "14", x2: "6", y2: "14", key: "tezuxb" }],
  ["line", { x1: "10", y1: "8", x2: "14", y2: "8", key: "1w8tme" }],
  ["line", { x1: "18", y1: "16", x2: "22", y2: "16", key: "1gnq8h" }]
]);
const SmartphoneCharging = createLucideIcon("SmartphoneChargingIcon", [
  [
    "rect",
    {
      x: "5",
      y: "2",
      width: "14",
      height: "20",
      rx: "2",
      ry: "2",
      key: "1gcc4z"
    }
  ],
  ["path", { d: "M12.667 8 10 12h4l-2.667 4", key: "h9lk2d" }]
]);
const SmartphoneNfc = createLucideIcon("SmartphoneNfcIcon", [
  [
    "rect",
    { x: "2", y: "6", width: "7", height: "12", rx: "1", key: "wbc15s" }
  ],
  ["path", { d: "M13 8.32a7.43 7.43 0 0 1 0 7.36", key: "1g306n" }],
  ["path", { d: "M16.46 6.21a11.76 11.76 0 0 1 0 11.58", key: "uqvjvo" }],
  ["path", { d: "M19.91 4.1a15.91 15.91 0 0 1 .01 15.8", key: "ujntz3" }]
]);
const Smartphone = createLucideIcon("SmartphoneIcon", [
  [
    "rect",
    {
      x: "5",
      y: "2",
      width: "14",
      height: "20",
      rx: "2",
      ry: "2",
      key: "1gcc4z"
    }
  ],
  ["path", { d: "M12 18h.01", key: "mhygvu" }]
]);
const SmilePlus = createLucideIcon("SmilePlusIcon", [
  ["path", { d: "M22 11v1a10 10 0 1 1-9-10", key: "ew0xw9" }],
  ["path", { d: "M8 14s1.5 2 4 2 4-2 4-2", key: "1y1vjs" }],
  ["line", { x1: "9", y1: "9", x2: "9.01", y2: "9", key: "141aaf" }],
  ["line", { x1: "15", y1: "9", x2: "15.01", y2: "9", key: "1cyg3o" }],
  ["path", { d: "M16 5h6", key: "1vod17" }],
  ["path", { d: "M19 2v6", key: "4bpg5p" }]
]);
const Smile = createLucideIcon("SmileIcon", [
  ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
  ["path", { d: "M8 14s1.5 2 4 2 4-2 4-2", key: "1y1vjs" }],
  ["line", { x1: "9", y1: "9", x2: "9.01", y2: "9", key: "141aaf" }],
  ["line", { x1: "15", y1: "9", x2: "15.01", y2: "9", key: "1cyg3o" }]
]);
const Snowflake = createLucideIcon("SnowflakeIcon", [
  ["line", { x1: "2", y1: "12", x2: "22", y2: "12", key: "zvmn4p" }],
  ["line", { x1: "12", y1: "2", x2: "12", y2: "22", key: "1k6o5o" }],
  ["path", { d: "m20 16-4-4 4-4", key: "rquw4f" }],
  ["path", { d: "m4 8 4 4-4 4", key: "12s3z9" }],
  ["path", { d: "m16 4-4 4-4-4", key: "1tumq1" }],
  ["path", { d: "m8 20 4-4 4 4", key: "9p200w" }]
]);
const Sofa = createLucideIcon("SofaIcon", [
  ["path", { d: "M20 9V6a2 2 0 0 0-2-2H6a2 2 0 0 0-2 2v3", key: "1dgpiv" }],
  [
    "path",
    {
      d: "M2 11v5a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-5a2 2 0 0 0-4 0v2H6v-2a2 2 0 0 0-4 0Z",
      key: "u5qfb7"
    }
  ],
  ["path", { d: "M4 18v2", key: "jwo5n2" }],
  ["path", { d: "M20 18v2", key: "1ar1qi" }],
  ["path", { d: "M12 4v9", key: "oqhhn3" }]
]);
const SortAsc = createLucideIcon("SortAscIcon", [
  ["path", { d: "M11 11h4", key: "1iu023" }],
  ["path", { d: "M11 15h7", key: "23lz64" }],
  ["path", { d: "M11 19h10", key: "11t30w" }],
  ["path", { d: "M9 7 6 4 3 7", key: "1s6vko" }],
  ["path", { d: "M6 6v14", key: "1s15cj" }]
]);
const SortDesc = createLucideIcon("SortDescIcon", [
  ["path", { d: "M11 5h10", key: "1cz7ny" }],
  ["path", { d: "M11 9h7", key: "13ra05" }],
  ["path", { d: "M11 13h4", key: "1p7l4v" }],
  ["path", { d: "m3 17 3 3 3-3", key: "d2bl7z" }],
  ["path", { d: "M6 18V4", key: "20vmay" }]
]);
const Soup = createLucideIcon("SoupIcon", [
  ["path", { d: "M12 21a9 9 0 0 0 9-9H3a9 9 0 0 0 9 9Z", key: "4rw317" }],
  ["path", { d: "M7 21h10", key: "1b0cd5" }],
  ["path", { d: "M19.5 12 22 6", key: "shfsr5" }],
  [
    "path",
    {
      d: "M16.25 3c.27.1.8.53.75 1.36-.06.83-.93 1.2-1 2.02-.05.78.34 1.24.73 1.62",
      key: "rpc6vp"
    }
  ],
  [
    "path",
    {
      d: "M11.25 3c.27.1.8.53.74 1.36-.05.83-.93 1.2-.98 2.02-.06.78.33 1.24.72 1.62",
      key: "1lf63m"
    }
  ],
  [
    "path",
    {
      d: "M6.25 3c.27.1.8.53.75 1.36-.06.83-.93 1.2-1 2.02-.05.78.34 1.24.74 1.62",
      key: "97tijn"
    }
  ]
]);
const Speaker = createLucideIcon("SpeakerIcon", [
  [
    "rect",
    {
      x: "4",
      y: "2",
      width: "16",
      height: "20",
      rx: "2",
      ry: "2",
      key: "152kg8"
    }
  ],
  ["circle", { cx: "12", cy: "14", r: "4", key: "1jruaj" }],
  ["line", { x1: "12", y1: "6", x2: "12.01", y2: "6", key: "fpk8as" }]
]);
const Spline = createLucideIcon("SplineIcon", [
  [
    "path",
    {
      d: "M21 6V4c0-.6-.4-1-1-1h-2a1 1 0 0 0-1 1v2c0 .6.4 1 1 1h2c.6 0 1-.4 1-1Z",
      key: "1alwvo"
    }
  ],
  [
    "path",
    {
      d: "M7 20v-2c0-.6-.4-1-1-1H4a1 1 0 0 0-1 1v2c0 .6.4 1 1 1h2c.6 0 1-.4 1-1Z",
      key: "f14zj6"
    }
  ],
  ["path", { d: "M5 17A12 12 0 0 1 17 5", key: "1okkup" }]
]);
const SplitSquareHorizontal = createLucideIcon("SplitSquareHorizontalIcon", [
  ["path", { d: "M8 19H5c-1 0-2-1-2-2V7c0-1 1-2 2-2h3", key: "lubmu8" }],
  ["path", { d: "M16 5h3c1 0 2 1 2 2v10c0 1-1 2-2 2h-3", key: "1ag34g" }],
  ["line", { x1: "12", x2: "12", y1: "4", y2: "20", key: "1tx1rr" }]
]);
const SplitSquareVertical = createLucideIcon("SplitSquareVerticalIcon", [
  ["path", { d: "M5 8V5c0-1 1-2 2-2h10c1 0 2 1 2 2v3", key: "1pi83i" }],
  ["path", { d: "M19 16v3c0 1-1 2-2 2H7c-1 0-2-1-2-2v-3", key: "ido5k7" }],
  ["line", { x1: "4", x2: "20", y1: "12", y2: "12", key: "1e0a9i" }]
]);
const Sprout = createLucideIcon("SproutIcon", [
  ["path", { d: "M7 20h10", key: "e6iznv" }],
  ["path", { d: "M10 20c5.5-2.5.8-6.4 3-10", key: "161w41" }],
  [
    "path",
    {
      d: "M9.5 9.4c1.1.8 1.8 2.2 2.3 3.7-2 .4-3.5.4-4.8-.3-1.2-.6-2.3-1.9-3-4.2 2.8-.5 4.4 0 5.5.8z",
      key: "9gtqwd"
    }
  ],
  [
    "path",
    {
      d: "M14.1 6a7 7 0 0 0-1.1 4c1.9-.1 3.3-.6 4.3-1.4 1-1 1.6-2.3 1.7-4.6-2.7.1-4 1-4.9 2z",
      key: "bkxnd2"
    }
  ]
]);
const Square = createLucideIcon("SquareIcon", [
  [
    "rect",
    {
      x: "3",
      y: "3",
      width: "18",
      height: "18",
      rx: "2",
      ry: "2",
      key: "maln0c"
    }
  ]
]);
const Stamp = createLucideIcon("StampIcon", [
  ["path", { d: "M5 22h14", key: "ehvnwv" }],
  [
    "path",
    {
      d: "M19.27 13.73A2.5 2.5 0 0 0 17.5 13h-11A2.5 2.5 0 0 0 4 15.5V17a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1v-1.5c0-.66-.26-1.3-.73-1.77Z",
      key: "1sy9ra"
    }
  ],
  [
    "path",
    {
      d: "M14 13V8.5C14 7 15 7 15 5a3 3 0 0 0-3-3c-1.66 0-3 1-3 3s1 2 1 3.5V13",
      key: "cnxgux"
    }
  ]
]);
const StarHalf = createLucideIcon("StarHalfIcon", [
  ["path", { d: "M12 17.8 5.8 21 7 14.1 2 9.3l7-1L12 2", key: "nare05" }]
]);
const StarOff = createLucideIcon("StarOffIcon", [
  [
    "path",
    {
      d: "M8.34 8.34 2 9.27l5 4.87L5.82 21 12 17.77 18.18 21l-.59-3.43",
      key: "16m0ql"
    }
  ],
  [
    "path",
    { d: "M18.42 12.76 22 9.27l-6.91-1L12 2l-1.44 2.91", key: "1vt8nq" }
  ],
  ["line", { x1: "2", y1: "2", x2: "22", y2: "22", key: "1w4vcy" }]
]);
const Star = createLucideIcon("StarIcon", [
  [
    "polygon",
    {
      points: "12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2",
      key: "8f66p6"
    }
  ]
]);
const Stethoscope = createLucideIcon("StethoscopeIcon", [
  [
    "path",
    {
      d: "M4.8 2.3A.3.3 0 1 0 5 2H4a2 2 0 0 0-2 2v5a6 6 0 0 0 6 6v0a6 6 0 0 0 6-6V4a2 2 0 0 0-2-2h-1a.2.2 0 1 0 .3.3",
      key: "1jd90r"
    }
  ],
  ["path", { d: "M8 15v1a6 6 0 0 0 6 6v0a6 6 0 0 0 6-6v-4", key: "126ukv" }],
  ["circle", { cx: "20", cy: "10", r: "2", key: "ts1r5v" }]
]);
const Sticker = createLucideIcon("StickerIcon", [
  [
    "path",
    {
      d: "M15.5 3H5a2 2 0 0 0-2 2v14c0 1.1.9 2 2 2h14a2 2 0 0 0 2-2V8.5L15.5 3Z",
      key: "1wis1t"
    }
  ],
  ["path", { d: "M15 3v6h6", key: "edgan2" }],
  ["path", { d: "M10 16s.8 1 2 1c1.3 0 2-1 2-1", key: "1vvgv3" }],
  ["path", { d: "M8 13h0", key: "jdup5h" }],
  ["path", { d: "M16 13h0", key: "l4i2ga" }]
]);
const StickyNote = createLucideIcon("StickyNoteIcon", [
  [
    "path",
    {
      d: "M15.5 3H5a2 2 0 0 0-2 2v14c0 1.1.9 2 2 2h14a2 2 0 0 0 2-2V8.5L15.5 3Z",
      key: "1wis1t"
    }
  ],
  ["path", { d: "M15 3v6h6", key: "edgan2" }]
]);
const StopCircle = createLucideIcon("StopCircleIcon", [
  ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
  ["rect", { x: "9", y: "9", width: "6", height: "6", key: "o3kz5p" }]
]);
const StretchHorizontal = createLucideIcon("StretchHorizontalIcon", [
  [
    "rect",
    { x: "2", y: "4", width: "20", height: "6", rx: "2", key: "12sjy4" }
  ],
  [
    "rect",
    { x: "2", y: "14", width: "20", height: "6", rx: "2", key: "lnm6uo" }
  ]
]);
const StretchVertical = createLucideIcon("StretchVerticalIcon", [
  [
    "rect",
    { x: "4", y: "2", width: "6", height: "20", rx: "2", key: "1lym67" }
  ],
  [
    "rect",
    { x: "14", y: "2", width: "6", height: "20", rx: "2", key: "b7v5o0" }
  ]
]);
const Strikethrough = createLucideIcon("StrikethroughIcon", [
  ["path", { d: "M16 4H9a3 3 0 0 0-2.83 4", key: "43sutm" }],
  ["path", { d: "M14 12a4 4 0 0 1 0 8H6", key: "nlfj13" }],
  ["line", { x1: "4", y1: "12", x2: "20", y2: "12", key: "1q6rtp" }]
]);
const Subscript = createLucideIcon("SubscriptIcon", [
  ["path", { d: "m4 5 8 8", key: "1eunvl" }],
  ["path", { d: "m12 5-8 8", key: "1ah0jp" }],
  [
    "path",
    {
      d: "M20 19h-4c0-1.5.44-2 1.5-2.5S20 15.33 20 14c0-.47-.17-.93-.48-1.29a2.11 2.11 0 0 0-2.62-.44c-.42.24-.74.62-.9 1.07",
      key: "e8ta8j"
    }
  ]
]);
const Subtitles = createLucideIcon("SubtitlesIcon", [
  ["path", { d: "M7 13h4", key: "1m1xj0" }],
  ["path", { d: "M15 13h2", key: "vgjay3" }],
  ["path", { d: "M7 9h2", key: "1q072n" }],
  ["path", { d: "M13 9h4", key: "o7fxw0" }],
  [
    "path",
    {
      d: "M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v10Z",
      key: "12yqn6"
    }
  ]
]);
const SunDim = createLucideIcon("SunDimIcon", [
  ["path", { d: "M12 16a4 4 0 1 0 0-8 4 4 0 0 0 0 8z", key: "1r4kox" }],
  ["path", { d: "M12 4h.01", key: "1ujb9j" }],
  ["path", { d: "M20 12h.01", key: "1ykeid" }],
  ["path", { d: "M12 20h.01", key: "zekei9" }],
  ["path", { d: "M4 12h.01", key: "158zrr" }],
  ["path", { d: "M17.657 6.343h.01", key: "31pqzk" }],
  ["path", { d: "M17.657 17.657h.01", key: "jehnf4" }],
  ["path", { d: "M6.343 17.657h.01", key: "gdk6ow" }],
  ["path", { d: "M6.343 6.343h.01", key: "1uurf0" }]
]);
const SunMedium = createLucideIcon("SunMediumIcon", [
  ["path", { d: "M12 16a4 4 0 1 0 0-8 4 4 0 0 0 0 8z", key: "1r4kox" }],
  ["path", { d: "M12 3v1", key: "1asbbs" }],
  ["path", { d: "M12 20v1", key: "1wcdkc" }],
  ["path", { d: "M3 12h1", key: "lp3yf2" }],
  ["path", { d: "M20 12h1", key: "1vloll" }],
  ["path", { d: "m18.364 5.636-.707.707", key: "1hakh0" }],
  ["path", { d: "m6.343 17.657-.707.707", key: "18m9nf" }],
  ["path", { d: "m5.636 5.636.707.707", key: "1xv1c5" }],
  ["path", { d: "m17.657 17.657.707.707", key: "vl76zb" }]
]);
const SunMoon = createLucideIcon("SunMoonIcon", [
  ["path", { d: "M12 16a4 4 0 1 0 0-8 4 4 0 0 0 0 8z", key: "1r4kox" }],
  ["path", { d: "M12 8a2.828 2.828 0 1 0 4 4", key: "16688u" }],
  ["path", { d: "M12 2v2", key: "tus03m" }],
  ["path", { d: "M12 20v2", key: "1lh1kg" }],
  ["path", { d: "m4.93 4.93 1.41 1.41", key: "149t6j" }],
  ["path", { d: "m17.66 17.66 1.41 1.41", key: "ptbguv" }],
  ["path", { d: "M2 12h2", key: "1t8f8n" }],
  ["path", { d: "M20 12h2", key: "1q8mjw" }],
  ["path", { d: "m6.34 17.66-1.41 1.41", key: "1m8zz5" }],
  ["path", { d: "m19.07 4.93-1.41 1.41", key: "1shlcs" }]
]);
const SunSnow = createLucideIcon("SunSnowIcon", [
  ["path", { d: "M10 9a3 3 0 1 0 0 6", key: "6zmtdl" }],
  ["path", { d: "M2 12h1", key: "1uaihz" }],
  ["path", { d: "M14 21V3", key: "1llu3z" }],
  ["path", { d: "M10 4V3", key: "pkzwkn" }],
  ["path", { d: "M10 21v-1", key: "1u8rkd" }],
  ["path", { d: "m3.64 18.36.7-.7", key: "105rm9" }],
  ["path", { d: "m4.34 6.34-.7-.7", key: "d3unjp" }],
  ["path", { d: "M14 12h8", key: "4f43i9" }],
  ["path", { d: "m17 4-3 3", key: "15jcng" }],
  ["path", { d: "m14 17 3 3", key: "6tlq38" }],
  ["path", { d: "m21 15-3-3 3-3", key: "1nlnje" }]
]);
const Sun = createLucideIcon("SunIcon", [
  ["circle", { cx: "12", cy: "12", r: "4", key: "4exip2" }],
  ["path", { d: "M12 2v2", key: "tus03m" }],
  ["path", { d: "M12 20v2", key: "1lh1kg" }],
  ["path", { d: "m4.93 4.93 1.41 1.41", key: "149t6j" }],
  ["path", { d: "m17.66 17.66 1.41 1.41", key: "ptbguv" }],
  ["path", { d: "M2 12h2", key: "1t8f8n" }],
  ["path", { d: "M20 12h2", key: "1q8mjw" }],
  ["path", { d: "m6.34 17.66-1.41 1.41", key: "1m8zz5" }],
  ["path", { d: "m19.07 4.93-1.41 1.41", key: "1shlcs" }]
]);
const Sunrise = createLucideIcon("SunriseIcon", [
  ["path", { d: "M12 2v8", key: "1q4o3n" }],
  ["path", { d: "m4.93 10.93 1.41 1.41", key: "2a7f42" }],
  ["path", { d: "M2 18h2", key: "j10viu" }],
  ["path", { d: "M20 18h2", key: "wocana" }],
  ["path", { d: "m19.07 10.93-1.41 1.41", key: "15zs5n" }],
  ["path", { d: "M22 22H2", key: "19qnx5" }],
  ["path", { d: "m8 6 4-4 4 4", key: "ybng9g" }],
  ["path", { d: "M16 18a4 4 0 0 0-8 0", key: "1lzouq" }]
]);
const Sunset = createLucideIcon("SunsetIcon", [
  ["path", { d: "M12 10V2", key: "16sf7g" }],
  ["path", { d: "m4.93 10.93 1.41 1.41", key: "2a7f42" }],
  ["path", { d: "M2 18h2", key: "j10viu" }],
  ["path", { d: "M20 18h2", key: "wocana" }],
  ["path", { d: "m19.07 10.93-1.41 1.41", key: "15zs5n" }],
  ["path", { d: "M22 22H2", key: "19qnx5" }],
  ["path", { d: "m16 6-4 4-4-4", key: "6wukr" }],
  ["path", { d: "M16 18a4 4 0 0 0-8 0", key: "1lzouq" }]
]);
const Superscript = createLucideIcon("SuperscriptIcon", [
  ["path", { d: "m4 19 8-8", key: "hr47gm" }],
  ["path", { d: "m12 19-8-8", key: "1dhhmo" }],
  [
    "path",
    {
      d: "M20 12h-4c0-1.5.442-2 1.5-2.5S20 8.334 20 7.002c0-.472-.17-.93-.484-1.29a2.105 2.105 0 0 0-2.617-.436c-.42.239-.738.614-.899 1.06",
      key: "1dfcux"
    }
  ]
]);
const SwissFranc = createLucideIcon("SwissFrancIcon", [
  ["path", { d: "M10 21V3h8", key: "br2l0g" }],
  ["path", { d: "M6 16h9", key: "2py0wn" }],
  ["path", { d: "M10 9.5h7", key: "13dmhz" }]
]);
const SwitchCamera = createLucideIcon("SwitchCameraIcon", [
  ["path", { d: "M11 19H4a2 2 0 0 1-2-2V7a2 2 0 0 1 2-2h5", key: "mtk2lu" }],
  ["path", { d: "M13 5h7a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-5", key: "120jsl" }],
  ["circle", { cx: "12", cy: "12", r: "3", key: "1v7zrd" }],
  ["path", { d: "m18 22-3-3 3-3", key: "kgdoj7" }],
  ["path", { d: "m6 2 3 3-3 3", key: "1fnbkv" }]
]);
const Sword = createLucideIcon("SwordIcon", [
  ["polyline", { points: "14.5 17.5 3 6 3 3 6 3 17.5 14.5", key: "1hfsw2" }],
  ["line", { x1: "13", y1: "19", x2: "19", y2: "13", key: "7h9f57" }],
  ["line", { x1: "16", y1: "16", x2: "20", y2: "20", key: "1b4zco" }],
  ["line", { x1: "19", y1: "21", x2: "21", y2: "19", key: "df24kr" }]
]);
const Swords = createLucideIcon("SwordsIcon", [
  ["polyline", { points: "14.5 17.5 3 6 3 3 6 3 17.5 14.5", key: "1hfsw2" }],
  ["line", { x1: "13", y1: "19", x2: "19", y2: "13", key: "7h9f57" }],
  ["line", { x1: "16", y1: "16", x2: "20", y2: "20", key: "1b4zco" }],
  ["line", { x1: "19", y1: "21", x2: "21", y2: "19", key: "df24kr" }],
  ["polyline", { points: "14.5 6.5 18 3 21 3 21 6 17.5 9.5", key: "hbey2j" }],
  ["line", { x1: "5", y1: "14", x2: "9", y2: "18", key: "acydkb" }],
  ["line", { x1: "7", y1: "17", x2: "4", y2: "20", key: "1vmq9v" }],
  ["line", { x1: "3", y1: "19", x2: "5", y2: "21", key: "139kw4" }]
]);
const Syringe = createLucideIcon("SyringeIcon", [
  ["path", { d: "m18 2 4 4", key: "22kx64" }],
  ["path", { d: "m17 7 3-3", key: "1w1zoj" }],
  [
    "path",
    {
      d: "M19 9 8.7 19.3c-1 1-2.5 1-3.4 0l-.6-.6c-1-1-1-2.5 0-3.4L15 5",
      key: "1exhtz"
    }
  ],
  ["path", { d: "m9 11 4 4", key: "rovt3i" }],
  ["path", { d: "m5 19-3 3", key: "59f2uf" }],
  ["path", { d: "m14 4 6 6", key: "yqp9t2" }]
]);
const Table2 = createLucideIcon("Table2Icon", [
  [
    "path",
    {
      d: "M9 3H5a2 2 0 0 0-2 2v4m6-6h10a2 2 0 0 1 2 2v4M9 3v18m0 0h10a2 2 0 0 0 2-2V9M9 21H5a2 2 0 0 1-2-2V9m0 0h18",
      key: "gugj83"
    }
  ]
]);
const Table = createLucideIcon("TableIcon", [
  [
    "rect",
    {
      x: "3",
      y: "3",
      width: "18",
      height: "18",
      rx: "2",
      ry: "2",
      key: "maln0c"
    }
  ],
  ["line", { x1: "3", y1: "9", x2: "21", y2: "9", key: "1uch6j" }],
  ["line", { x1: "3", y1: "15", x2: "21", y2: "15", key: "1xojw2" }],
  ["line", { x1: "12", y1: "3", x2: "12", y2: "21", key: "essbwb" }]
]);
const Tablet = createLucideIcon("TabletIcon", [
  [
    "rect",
    {
      x: "4",
      y: "2",
      width: "16",
      height: "20",
      rx: "2",
      ry: "2",
      key: "152kg8"
    }
  ],
  ["line", { x1: "12", y1: "18", x2: "12.01", y2: "18", key: "73g4n8" }]
]);
const Tablets = createLucideIcon("TabletsIcon", [
  ["circle", { cx: "7", cy: "7", r: "5", key: "x29byf" }],
  ["circle", { cx: "17", cy: "17", r: "5", key: "1op1d2" }],
  ["path", { d: "M12 17h10", key: "ls21zv" }],
  ["path", { d: "m3.46 10.54 7.08-7.08", key: "1rehiu" }]
]);
const Tag = createLucideIcon("TagIcon", [
  [
    "path",
    {
      d: "M12 2H2v10l9.29 9.29c.94.94 2.48.94 3.42 0l6.58-6.58c.94-.94.94-2.48 0-3.42L12 2Z",
      key: "14b2ls"
    }
  ],
  ["path", { d: "M7 7h.01", key: "7u93v4" }]
]);
const Tags = createLucideIcon("TagsIcon", [
  [
    "path",
    {
      d: "M9 5H2v7l6.29 6.29c.94.94 2.48.94 3.42 0l3.58-3.58c.94-.94.94-2.48 0-3.42L9 5Z",
      key: "gt587u"
    }
  ],
  ["path", { d: "M6 9.01V9", key: "1flxpt" }],
  ["path", { d: "m15 5 6.3 6.3a2.4 2.4 0 0 1 0 3.4L17 19", key: "1cbfv1" }]
]);
const Target = createLucideIcon("TargetIcon", [
  ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
  ["circle", { cx: "12", cy: "12", r: "6", key: "1vlfrh" }],
  ["circle", { cx: "12", cy: "12", r: "2", key: "1c9p78" }]
]);
const Tent = createLucideIcon("TentIcon", [
  ["path", { d: "M19 20 10 4", key: "1ak541" }],
  ["path", { d: "m5 20 9-16", key: "11dtj9" }],
  ["path", { d: "M3 20h18", key: "1l19wn" }],
  ["path", { d: "m12 15-3 5", key: "1c5kej" }],
  ["path", { d: "m12 15 3 5", key: "odkmhi" }]
]);
const TerminalSquare = createLucideIcon("TerminalSquareIcon", [
  ["path", { d: "m7 11 2-2-2-2", key: "1lz0vl" }],
  ["path", { d: "M11 13h4", key: "1p7l4v" }],
  [
    "rect",
    {
      x: "3",
      y: "3",
      width: "18",
      height: "18",
      rx: "2",
      ry: "2",
      key: "maln0c"
    }
  ]
]);
const Terminal = createLucideIcon("TerminalIcon", [
  ["polyline", { points: "4 17 10 11 4 5", key: "akl6gq" }],
  ["line", { x1: "12", y1: "19", x2: "20", y2: "19", key: "fyyrwq" }]
]);
const TextCursorInput = createLucideIcon("TextCursorInputIcon", [
  ["path", { d: "M13 20h-1a3 3 0 0 1-3-3V7a3 3 0 0 1 3-3h1", key: "19sqy7" }],
  ["path", { d: "M5 4h1a3 3 0 0 1 3 3v10a3 3 0 0 1-3 3H5", key: "1etnvu" }],
  [
    "path",
    {
      d: "M13.1 7.9h6.8A2.18 2.18 0 0 1 22 10v4a2.11 2.11 0 0 1-2.1 2.1h-6.8",
      key: "ebxlah"
    }
  ],
  [
    "path",
    {
      d: "M4.8 16.1h-.7A2.18 2.18 0 0 1 2 14v-4a2.18 2.18 0 0 1 2.1-2.1h.7",
      key: "1l3v11"
    }
  ]
]);
const TextCursor = createLucideIcon("TextCursorIcon", [
  ["path", { d: "M17 22h-1a4 4 0 0 1-4-4V6a4 4 0 0 1 4-4h1", key: "uvaxm9" }],
  ["path", { d: "M7 22h1a4 4 0 0 0 4-4v-1", key: "11xy8d" }],
  ["path", { d: "M7 2h1a4 4 0 0 1 4 4v1", key: "1uw06m" }]
]);
const ThermometerSnowflake = createLucideIcon("ThermometerSnowflakeIcon", [
  ["path", { d: "M2 12h10", key: "19562f" }],
  ["path", { d: "M9 4v16", key: "81ygyz" }],
  ["path", { d: "m3 9 3 3-3 3", key: "1sas0l" }],
  ["path", { d: "M12 6 9 9 6 6", key: "pfrgxu" }],
  ["path", { d: "m6 18 3-3 1.5 1.5", key: "1e277p" }],
  ["path", { d: "M20 4v10.54a4 4 0 1 1-4 0V4a2 2 0 0 1 4 0Z", key: "iof6y5" }]
]);
const ThermometerSun = createLucideIcon("ThermometerSunIcon", [
  ["path", { d: "M12 9a4 4 0 0 0-2 7.5", key: "1jvsq6" }],
  ["path", { d: "M12 3v2", key: "1w22ol" }],
  ["path", { d: "m6.6 18.4-1.4 1.4", key: "w2yidj" }],
  ["path", { d: "M20 4v10.54a4 4 0 1 1-4 0V4a2 2 0 0 1 4 0Z", key: "iof6y5" }],
  ["path", { d: "M4 13H2", key: "118le4" }],
  ["path", { d: "M6.34 7.34 4.93 5.93", key: "1brd51" }]
]);
const Thermometer = createLucideIcon("ThermometerIcon", [
  ["path", { d: "M14 4v10.54a4 4 0 1 1-4 0V4a2 2 0 0 1 4 0Z", key: "17jzev" }]
]);
const ThumbsDown = createLucideIcon("ThumbsDownIcon", [
  ["path", { d: "M17 14V2", key: "8ymqnk" }],
  [
    "path",
    {
      d: "M9 18.12 10 14H4.17a2 2 0 0 1-1.92-2.56l2.33-8A2 2 0 0 1 6.5 2H20a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2h-2.76a2 2 0 0 0-1.79 1.11L12 22h0a3.13 3.13 0 0 1-3-3.88Z",
      key: "s6e0r"
    }
  ]
]);
const ThumbsUp = createLucideIcon("ThumbsUpIcon", [
  ["path", { d: "M7 10v12", key: "1qc93n" }],
  [
    "path",
    {
      d: "M15 5.88 14 10h5.83a2 2 0 0 1 1.92 2.56l-2.33 8A2 2 0 0 1 17.5 22H4a2 2 0 0 1-2-2v-8a2 2 0 0 1 2-2h2.76a2 2 0 0 0 1.79-1.11L12 2h0a3.13 3.13 0 0 1 3 3.88Z",
      key: "y3tblf"
    }
  ]
]);
const Ticket = createLucideIcon("TicketIcon", [
  [
    "path",
    {
      d: "M3 7v2a3 3 0 1 1 0 6v2c0 1.1.9 2 2 2h14a2 2 0 0 0 2-2v-2a3 3 0 1 1 0-6V7a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2Z",
      key: "nswdcl"
    }
  ],
  ["path", { d: "M13 5v2", key: "dyzc3o" }],
  ["path", { d: "M13 17v2", key: "1ont0d" }],
  ["path", { d: "M13 11v2", key: "1wjjxi" }]
]);
const TimerOff = createLucideIcon("TimerOffIcon", [
  ["path", { d: "M10 2h4", key: "n1abiw" }],
  ["path", { d: "M4.6 11a8 8 0 0 0 1.7 8.7 8 8 0 0 0 8.7 1.7", key: "10he05" }],
  ["path", { d: "M7.4 7.4a8 8 0 0 1 10.3 1 8 8 0 0 1 .9 10.2", key: "15f7sh" }],
  ["path", { d: "m2 2 20 20", key: "1ooewy" }],
  ["path", { d: "M12 12v-2", key: "fwoke6" }]
]);
const TimerReset = createLucideIcon("TimerResetIcon", [
  ["path", { d: "M10 2h4", key: "n1abiw" }],
  ["path", { d: "M12 14v-4", key: "1evpnu" }],
  ["path", { d: "M4 13a8 8 0 0 1 8-7 8 8 0 1 1-5.3 14L4 17.6", key: "1ts96g" }],
  ["path", { d: "M9 17H4v5", key: "8t5av" }]
]);
const Timer = createLucideIcon("TimerIcon", [
  ["line", { x1: "10", x2: "14", y1: "2", y2: "2", key: "14vaq8" }],
  ["line", { x1: "12", x2: "15", y1: "14", y2: "11", key: "17fdiu" }],
  ["circle", { cx: "12", cy: "14", r: "8", key: "1e1u0o" }]
]);
const ToggleLeft = createLucideIcon("ToggleLeftIcon", [
  [
    "rect",
    {
      x: "2",
      y: "6",
      width: "20",
      height: "12",
      rx: "6",
      ry: "6",
      key: "cdopvd"
    }
  ],
  ["circle", { cx: "8", cy: "12", r: "2", key: "1nvbw3" }]
]);
const ToggleRight = createLucideIcon("ToggleRightIcon", [
  [
    "rect",
    {
      x: "2",
      y: "6",
      width: "20",
      height: "12",
      rx: "6",
      ry: "6",
      key: "cdopvd"
    }
  ],
  ["circle", { cx: "16", cy: "12", r: "2", key: "4ma0v8" }]
]);
const Tornado = createLucideIcon("TornadoIcon", [
  ["path", { d: "M21 4H3", key: "1hwok0" }],
  ["path", { d: "M18 8H6", key: "41n648" }],
  ["path", { d: "M19 12H9", key: "1g4lpz" }],
  ["path", { d: "M16 16h-6", key: "1j5d54" }],
  ["path", { d: "M11 20H9", key: "39obr8" }]
]);
const TowerControl = createLucideIcon("TowerControlIcon", [
  [
    "path",
    {
      d: "M18.2 12.27 20 6H4l1.8 6.27a1 1 0 0 0 .95.73h10.5a1 1 0 0 0 .96-.73Z",
      key: "1pledb"
    }
  ],
  ["path", { d: "M8 13v9", key: "hmv0ci" }],
  ["path", { d: "M16 22v-9", key: "ylnf1u" }],
  ["path", { d: "m9 6 1 7", key: "dpdgam" }],
  ["path", { d: "m15 6-1 7", key: "ls7zgu" }],
  ["path", { d: "M12 6V2", key: "1pj48d" }],
  ["path", { d: "M13 2h-2", key: "mj6ths" }]
]);
const ToyBrick = createLucideIcon("ToyBrickIcon", [
  [
    "rect",
    { x: "3", y: "8", width: "18", height: "12", rx: "1", key: "1yob91" }
  ],
  ["path", { d: "M10 8V5c0-.6-.4-1-1-1H6a1 1 0 0 0-1 1v3", key: "s0042v" }],
  ["path", { d: "M19 8V5c0-.6-.4-1-1-1h-3a1 1 0 0 0-1 1v3", key: "9wmeh2" }]
]);
const Train = createLucideIcon("TrainIcon", [
  [
    "rect",
    { x: "4", y: "3", width: "16", height: "16", rx: "2", key: "u93jis" }
  ],
  ["path", { d: "M4 11h16", key: "mpoxn0" }],
  ["path", { d: "M12 3v8", key: "1h2ygw" }],
  ["path", { d: "m8 19-2 3", key: "13i0xs" }],
  ["path", { d: "m18 22-2-3", key: "1p0ohu" }],
  ["path", { d: "M8 15h0", key: "q9eq1f" }],
  ["path", { d: "M16 15h0", key: "pzrbjg" }]
]);
const Trash2 = createLucideIcon("Trash2Icon", [
  ["path", { d: "M3 6h18", key: "d0wm0j" }],
  ["path", { d: "M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6", key: "4alrt4" }],
  ["path", { d: "M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2", key: "v07s0e" }],
  ["line", { x1: "10", y1: "11", x2: "10", y2: "17", key: "m9v7hp" }],
  ["line", { x1: "14", y1: "11", x2: "14", y2: "17", key: "23cpt9" }]
]);
const Trash = createLucideIcon("TrashIcon", [
  ["path", { d: "M3 6h18", key: "d0wm0j" }],
  ["path", { d: "M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6", key: "4alrt4" }],
  ["path", { d: "M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2", key: "v07s0e" }]
]);
const TreeDeciduous = createLucideIcon("TreeDeciduousIcon", [
  [
    "path",
    {
      d: "M8 19h8a4 4 0 0 0 3.8-2.8 4 4 0 0 0-1.6-4.5c1-1.1 1-2.7.4-4-.7-1.2-2.2-2-3.6-1.7a3 3 0 0 0-3-3 3 3 0 0 0-3 3c-1.4-.2-2.9.5-3.6 1.7-.7 1.3-.5 2.9.4 4a4 4 0 0 0-1.6 4.5A4 4 0 0 0 8 19Z",
      key: "12ivfl"
    }
  ],
  ["path", { d: "M12 19v3", key: "npa21l" }]
]);
const TreePine = createLucideIcon("TreePineIcon", [
  [
    "path",
    {
      d: "m17 14 3 3.3a1 1 0 0 1-.7 1.7H4.7a1 1 0 0 1-.7-1.7L7 14h-.3a1 1 0 0 1-.7-1.7L9 9h-.2A1 1 0 0 1 8 7.3L12 3l4 4.3a1 1 0 0 1-.8 1.7H15l3 3.3a1 1 0 0 1-.7 1.7H17Z",
      key: "cpyugq"
    }
  ],
  ["path", { d: "M12 22v-3", key: "kmzjlo" }]
]);
const Trees = createLucideIcon("TreesIcon", [
  [
    "path",
    {
      d: "M10 10v.2A3 3 0 0 1 8.9 16v0H5v0h0a3 3 0 0 1-1-5.8V10a3 3 0 0 1 6 0Z",
      key: "yh07w9"
    }
  ],
  ["path", { d: "M7 16v6", key: "1a82de" }],
  ["path", { d: "M13 19v3", key: "13sx9i" }],
  [
    "path",
    {
      d: "M12 19h8.3a1 1 0 0 0 .7-1.7L18 14h.3a1 1 0 0 0 .7-1.7L16 9h.2a1 1 0 0 0 .8-1.7L13 3l-1.4 1.5",
      key: "1sj9kv"
    }
  ]
]);
const Trello = createLucideIcon("TrelloIcon", [
  [
    "rect",
    {
      x: "3",
      y: "3",
      width: "18",
      height: "18",
      rx: "2",
      ry: "2",
      key: "maln0c"
    }
  ],
  ["rect", { x: "7", y: "7", width: "3", height: "9", key: "1xk0xp" }],
  ["rect", { x: "14", y: "7", width: "3", height: "5", key: "1otkhn" }]
]);
const TrendingDown = createLucideIcon("TrendingDownIcon", [
  ["polyline", { points: "22 17 13.5 8.5 8.5 13.5 2 7", key: "1r2t7k" }],
  ["polyline", { points: "16 17 22 17 22 11", key: "11uiuu" }]
]);
const TrendingUp = createLucideIcon("TrendingUpIcon", [
  ["polyline", { points: "22 7 13.5 15.5 8.5 10.5 2 17", key: "126l90" }],
  ["polyline", { points: "16 7 22 7 22 13", key: "kwv8wd" }]
]);
const Triangle = createLucideIcon("TriangleIcon", [
  [
    "path",
    {
      d: "m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z",
      key: "c3ski4"
    }
  ]
]);
const Trophy = createLucideIcon("TrophyIcon", [
  ["path", { d: "M6 9H4.5a2.5 2.5 0 0 1 0-5H6", key: "17hqa7" }],
  ["path", { d: "M18 9h1.5a2.5 2.5 0 0 0 0-5H18", key: "lmptdp" }],
  ["path", { d: "M4 22h16", key: "57wxv0" }],
  [
    "path",
    {
      d: "M10 14.66V17c0 .55-.47.98-.97 1.21C7.85 18.75 7 20.24 7 22",
      key: "1nw9bq"
    }
  ],
  [
    "path",
    {
      d: "M14 14.66V17c0 .55.47.98.97 1.21C16.15 18.75 17 20.24 17 22",
      key: "1np0yb"
    }
  ],
  ["path", { d: "M18 2H6v7a6 6 0 0 0 12 0V2Z", key: "u46fv3" }]
]);
const Truck = createLucideIcon("TruckIcon", [
  ["path", { d: "M10 17h4V5H2v12h3", key: "1jq12e" }],
  ["path", { d: "M20 17h2v-3.34a4 4 0 0 0-1.17-2.83L19 9h-5", key: "1xb3ft" }],
  ["path", { d: "M14 17h1", key: "nufu4t" }],
  ["circle", { cx: "7.5", cy: "17.5", r: "2.5", key: "a7aife" }],
  ["circle", { cx: "17.5", cy: "17.5", r: "2.5", key: "1mdrzq" }]
]);
const Tv2 = createLucideIcon("Tv2Icon", [
  ["path", { d: "M7 21h10", key: "1b0cd5" }],
  [
    "rect",
    { x: "2", y: "3", width: "20", height: "14", rx: "2", key: "x3v2xh" }
  ]
]);
const Tv = createLucideIcon("TvIcon", [
  [
    "rect",
    {
      x: "2",
      y: "7",
      width: "20",
      height: "15",
      rx: "2",
      ry: "2",
      key: "f237mn"
    }
  ],
  ["polyline", { points: "17 2 12 7 7 2", key: "11pgbg" }]
]);
const Twitch = createLucideIcon("TwitchIcon", [
  ["path", { d: "M21 2H3v16h5v4l4-4h5l4-4V2zm-10 9V7m5 4V7", key: "c0yzno" }]
]);
const Twitter = createLucideIcon("TwitterIcon", [
  [
    "path",
    {
      d: "M22 4s-.7 2.1-2 3.4c1.6 10-9.4 17.3-18 11.6 2.2.1 4.4-.6 6-2C3 15.5.5 9.6 3 5c2.2 2.6 5.6 4.1 9 4-.9-4.2 4-6.6 7-3.8 1.1 0 3-1.2 3-1.2z",
      key: "pff0z6"
    }
  ]
]);
const Type = createLucideIcon("TypeIcon", [
  ["polyline", { points: "4 7 4 4 20 4 20 7", key: "1nosan" }],
  ["line", { x1: "9", y1: "20", x2: "15", y2: "20", key: "10hqwk" }],
  ["line", { x1: "12", y1: "4", x2: "12", y2: "20", key: "8v58sd" }]
]);
const Umbrella = createLucideIcon("UmbrellaIcon", [
  [
    "path",
    {
      d: "M22 12a9.92 9.92 0 0 0-3.24-6.41 10.12 10.12 0 0 0-13.52 0A9.92 9.92 0 0 0 2 12Z",
      key: "gyh82n"
    }
  ],
  ["path", { d: "M12 12v8a2 2 0 0 0 4 0", key: "ulpmoc" }],
  ["line", { x1: "12", y1: "2", x2: "12", y2: "3", key: "7v6ckq" }]
]);
const Underline = createLucideIcon("UnderlineIcon", [
  ["path", { d: "M6 4v6a6 6 0 0 0 12 0V4", key: "9kb039" }],
  ["line", { x1: "4", y1: "20", x2: "20", y2: "20", key: "klhyhp" }]
]);
const Undo2 = createLucideIcon("Undo2Icon", [
  ["path", { d: "M9 14 4 9l5-5", key: "102s5s" }],
  [
    "path",
    {
      d: "M4 9h10.5a5.5 5.5 0 0 1 5.5 5.5v0a5.5 5.5 0 0 1-5.5 5.5H11",
      key: "llx8ln"
    }
  ]
]);
const Undo = createLucideIcon("UndoIcon", [
  ["path", { d: "M3 7v6h6", key: "1v2h90" }],
  ["path", { d: "M21 17a9 9 0 0 0-9-9 9 9 0 0 0-6 2.3L3 13", key: "1r6uu6" }]
]);
const Unlink2 = createLucideIcon("Unlink2Icon", [
  [
    "path",
    { d: "M15 7h2a5 5 0 0 1 0 10h-2m-6 0H7A5 5 0 0 1 7 7h2", key: "1re2ne" }
  ]
]);
const Unlink = createLucideIcon("UnlinkIcon", [
  [
    "path",
    {
      d: "m18.84 12.25 1.72-1.71h-.02a5.004 5.004 0 0 0-.12-7.07 5.006 5.006 0 0 0-6.95 0l-1.72 1.71",
      key: "yqzxt4"
    }
  ],
  [
    "path",
    {
      d: "m5.17 11.75-1.71 1.71a5.004 5.004 0 0 0 .12 7.07 5.006 5.006 0 0 0 6.95 0l1.71-1.71",
      key: "4qinb0"
    }
  ],
  ["line", { x1: "8", y1: "2", x2: "8", y2: "5", key: "187dr9" }],
  ["line", { x1: "2", y1: "8", x2: "5", y2: "8", key: "peo5ws" }],
  ["line", { x1: "16", y1: "19", x2: "16", y2: "22", key: "6aelkz" }],
  ["line", { x1: "19", y1: "16", x2: "22", y2: "16", key: "ln8io3" }]
]);
const Unlock = createLucideIcon("UnlockIcon", [
  [
    "rect",
    {
      x: "3",
      y: "11",
      width: "18",
      height: "11",
      rx: "2",
      ry: "2",
      key: "biyj2e"
    }
  ],
  ["path", { d: "M7 11V7a5 5 0 0 1 9.9-1", key: "1mm8w8" }]
]);
const UploadCloud = createLucideIcon("UploadCloudIcon", [
  [
    "path",
    {
      d: "M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242",
      key: "1pljnt"
    }
  ],
  ["path", { d: "M12 12v9", key: "192myk" }],
  ["path", { d: "m16 16-4-4-4 4", key: "119tzi" }]
]);
const Upload = createLucideIcon("UploadIcon", [
  ["path", { d: "M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4", key: "ih7n3h" }],
  ["polyline", { points: "17 8 12 3 7 8", key: "t8dd8p" }],
  ["line", { x1: "12", y1: "3", x2: "12", y2: "15", key: "wktxj0" }]
]);
const Usb = createLucideIcon("UsbIcon", [
  ["circle", { cx: "4", cy: "20", r: "1", key: "22iqad" }],
  ["circle", { cx: "10", cy: "7", r: "1", key: "dypaad" }],
  ["path", { d: "M4 20 19 5", key: "15hogs" }],
  ["path", { d: "m21 3-3 1 2 2 1-3Z", key: "ew8vct" }],
  ["path", { d: "m10 7-5 5 2 5", key: "148pqf" }],
  ["path", { d: "m10 14 5 2 4-4", key: "1ivjwr" }],
  ["path", { d: "m18 12 1-1 1 1-1 1-1-1Z", key: "tus6kn" }]
]);
const UserCheck = createLucideIcon("UserCheckIcon", [
  ["path", { d: "M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2", key: "1yyitq" }],
  ["circle", { cx: "9", cy: "7", r: "4", key: "nufk8" }],
  ["polyline", { points: "16 11 18 13 22 9", key: "1pwet4" }]
]);
const UserCog = createLucideIcon("UserCogIcon", [
  ["path", { d: "M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2", key: "1yyitq" }],
  ["circle", { cx: "9", cy: "7", r: "4", key: "nufk8" }],
  ["circle", { cx: "19", cy: "11", r: "2", key: "1rxg02" }],
  ["path", { d: "M19 8v1", key: "1iffrw" }],
  ["path", { d: "M19 13v1", key: "z4xc62" }],
  ["path", { d: "m21.6 9.5-.87.5", key: "6lxupl" }],
  ["path", { d: "m17.27 12-.87.5", key: "1rwhxx" }],
  ["path", { d: "m21.6 12.5-.87-.5", key: "agvc9a" }],
  ["path", { d: "m17.27 10-.87-.5", key: "12d57s" }]
]);
const UserMinus = createLucideIcon("UserMinusIcon", [
  ["path", { d: "M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2", key: "1yyitq" }],
  ["circle", { cx: "9", cy: "7", r: "4", key: "nufk8" }],
  ["line", { x1: "22", y1: "11", x2: "16", y2: "11", key: "8bk570" }]
]);
const UserPlus = createLucideIcon("UserPlusIcon", [
  ["path", { d: "M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2", key: "1yyitq" }],
  ["circle", { cx: "9", cy: "7", r: "4", key: "nufk8" }],
  ["line", { x1: "19", y1: "8", x2: "19", y2: "14", key: "9s353q" }],
  ["line", { x1: "22", y1: "11", x2: "16", y2: "11", key: "8bk570" }]
]);
const UserX = createLucideIcon("UserXIcon", [
  ["path", { d: "M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2", key: "1yyitq" }],
  ["circle", { cx: "9", cy: "7", r: "4", key: "nufk8" }],
  ["line", { x1: "17", y1: "8", x2: "22", y2: "13", key: "10apcb" }],
  ["line", { x1: "22", y1: "8", x2: "17", y2: "13", key: "1l8di5" }]
]);
const User = createLucideIcon("UserIcon", [
  ["path", { d: "M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2", key: "975kel" }],
  ["circle", { cx: "12", cy: "7", r: "4", key: "17ys0d" }]
]);
const Users = createLucideIcon("UsersIcon", [
  ["path", { d: "M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2", key: "1yyitq" }],
  ["circle", { cx: "9", cy: "7", r: "4", key: "nufk8" }],
  ["path", { d: "M22 21v-2a4 4 0 0 0-3-3.87", key: "kshegd" }],
  ["path", { d: "M16 3.13a4 4 0 0 1 0 7.75", key: "1da9ce" }]
]);
const UtensilsCrossed = createLucideIcon("UtensilsCrossedIcon", [
  [
    "path",
    {
      d: "m16 2-2.3 2.3a3 3 0 0 0 0 4.2l1.8 1.8a3 3 0 0 0 4.2 0L22 8",
      key: "n7qcjb"
    }
  ],
  [
    "path",
    {
      d: "M15 15 3.3 3.3a4.2 4.2 0 0 0 0 6l7.3 7.3c.7.7 2 .7 2.8 0L15 15Zm0 0 7 7",
      key: "d0u48b"
    }
  ],
  ["path", { d: "m2.1 21.8 6.4-6.3", key: "yn04lh" }],
  ["path", { d: "m19 5-7 7", key: "194lzd" }]
]);
const Utensils = createLucideIcon("UtensilsIcon", [
  ["path", { d: "M3 2v7c0 1.1.9 2 2 2h4a2 2 0 0 0 2-2V2", key: "cjf0a3" }],
  ["path", { d: "M7 2v20", key: "1473qp" }],
  [
    "path",
    { d: "M21 15V2v0a5 5 0 0 0-5 5v6c0 1.1.9 2 2 2h3Zm0 0v7", key: "1ogz0v" }
  ]
]);
const UtilityPole = createLucideIcon("UtilityPoleIcon", [
  ["path", { d: "M12 2v20", key: "t6zp3m" }],
  ["path", { d: "M2 5h20", key: "1fs1ex" }],
  ["path", { d: "M3 3v2", key: "9imdir" }],
  ["path", { d: "M7 3v2", key: "n0os7" }],
  ["path", { d: "M17 3v2", key: "1l2re6" }],
  ["path", { d: "M21 3v2", key: "1duuac" }],
  ["path", { d: "m19 5-7 7-7-7", key: "133zxf" }]
]);
const Vegan = createLucideIcon("VeganIcon", [
  [
    "path",
    {
      d: "M2 2c4.056 3.007 9.232 9.337 10 20 .897-6.818 1.5-9.5 4-14",
      key: "eao96d"
    }
  ],
  [
    "path",
    {
      d: "M20.375 6.533A9.953 9.953 0 0 1 22 12c0 5.523-4.477 10-10 10S2 17.523 2 12 6.477 2 12 2c2.003 0 3.869.589 5.433 1.603",
      key: "fbotu5"
    }
  ],
  [
    "path",
    {
      d: "M17.104 4c-1.002 1.274-1.146 2.586-1.1 4 1.9-.1 3.003-.201 4.3-1.4 1.406-1.3 1.6-2.3 1.7-4.6-2.7.1-3.623.375-4.9 2Z",
      key: "14agoq"
    }
  ]
]);
const VenetianMask = createLucideIcon("VenetianMaskIcon", [
  [
    "path",
    {
      d: "M2 12a5 5 0 0 0 5 5 8 8 0 0 1 5 2 8 8 0 0 1 5-2 5 5 0 0 0 5-5V7h-5a8 8 0 0 0-5 2 8 8 0 0 0-5-2H2Z",
      key: "1g6z3j"
    }
  ],
  ["path", { d: "M6 11c1.5 0 3 .5 3 2-2 0-3 0-3-2Z", key: "c2lwnf" }],
  ["path", { d: "M18 11c-1.5 0-3 .5-3 2 2 0 3 0 3-2Z", key: "njd9zo" }]
]);
const Verified = createLucideIcon("VerifiedIcon", [
  [
    "path",
    {
      d: "M12 3c-1.2 0-2.4.6-3 1.7A3.6 3.6 0 0 0 4.6 9c-1 .6-1.7 1.8-1.7 3s.7 2.4 1.7 3c-.3 1.2 0 2.5 1 3.4.8.8 2.1 1.2 3.3 1 .6 1 1.8 1.6 3 1.6s2.4-.6 3-1.7c1.2.3 2.5 0 3.4-1 .8-.8 1.2-2 1-3.3 1-.6 1.6-1.8 1.6-3s-.6-2.4-1.7-3c.3-1.2 0-2.5-1-3.4a3.7 3.7 0 0 0-3.3-1c-.6-1-1.8-1.6-3-1.6Z",
      key: "7kujkm"
    }
  ],
  ["path", { d: "m9 12 2 2 4-4", key: "dzmm74" }]
]);
const VibrateOff = createLucideIcon("VibrateOffIcon", [
  ["path", { d: "m2 8 2 2-2 2 2 2-2 2", key: "sv1b1" }],
  ["path", { d: "m22 8-2 2 2 2-2 2 2 2", key: "101i4y" }],
  ["path", { d: "M8 8v10c0 .55.45 1 1 1h6c.55 0 1-.45 1-1v-2", key: "1hbad5" }],
  ["path", { d: "M16 10.34V6c0-.55-.45-1-1-1h-4.34", key: "1x5tf0" }],
  ["line", { x1: "2", y1: "2", x2: "22", y2: "22", key: "1w4vcy" }]
]);
const Vibrate = createLucideIcon("VibrateIcon", [
  ["path", { d: "m2 8 2 2-2 2 2 2-2 2", key: "sv1b1" }],
  ["path", { d: "m22 8-2 2 2 2-2 2 2 2", key: "101i4y" }],
  [
    "rect",
    { x: "8", y: "5", width: "8", height: "14", rx: "1", key: "bi6xeo" }
  ]
]);
const VideoOff = createLucideIcon("VideoOffIcon", [
  ["path", { d: "M10.66 6H14a2 2 0 0 1 2 2v2.34l1 1L22 8v8", key: "ubwiq0" }],
  [
    "path",
    {
      d: "M16 16a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h2l10 10Z",
      key: "1l10zd"
    }
  ],
  ["line", { x1: "2", y1: "2", x2: "22", y2: "22", key: "1w4vcy" }]
]);
const Video = createLucideIcon("VideoIcon", [
  ["path", { d: "m22 8-6 4 6 4V8Z", key: "50v9me" }],
  [
    "rect",
    {
      x: "2",
      y: "6",
      width: "14",
      height: "12",
      rx: "2",
      ry: "2",
      key: "14il7g"
    }
  ]
]);
const View = createLucideIcon("ViewIcon", [
  [
    "path",
    {
      d: "M5 12s2.545-5 7-5c4.454 0 7 5 7 5s-2.546 5-7 5c-4.455 0-7-5-7-5z",
      key: "vptub8"
    }
  ],
  ["path", { d: "M12 13a1 1 0 1 0 0-2 1 1 0 0 0 0 2z", key: "10lhjs" }],
  ["path", { d: "M21 17v2a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-2", key: "mrq65r" }],
  ["path", { d: "M21 7V5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v2", key: "be3xqs" }]
]);
const Voicemail = createLucideIcon("VoicemailIcon", [
  ["circle", { cx: "6", cy: "12", r: "4", key: "1ehtga" }],
  ["circle", { cx: "18", cy: "12", r: "4", key: "4vafl8" }],
  ["line", { x1: "6", y1: "16", x2: "18", y2: "16", key: "1xgyj1" }]
]);
const Volume1 = createLucideIcon("Volume1Icon", [
  ["polygon", { points: "11 5 6 9 2 9 2 15 6 15 11 19 11 5", key: "16drj5" }],
  ["path", { d: "M15.54 8.46a5 5 0 0 1 0 7.07", key: "ltjumu" }]
]);
const Volume2 = createLucideIcon("Volume2Icon", [
  ["polygon", { points: "11 5 6 9 2 9 2 15 6 15 11 19 11 5", key: "16drj5" }],
  ["path", { d: "M15.54 8.46a5 5 0 0 1 0 7.07", key: "ltjumu" }],
  ["path", { d: "M19.07 4.93a10 10 0 0 1 0 14.14", key: "1kegas" }]
]);
const VolumeX = createLucideIcon("VolumeXIcon", [
  ["polygon", { points: "11 5 6 9 2 9 2 15 6 15 11 19 11 5", key: "16drj5" }],
  ["line", { x1: "22", y1: "9", x2: "16", y2: "15", key: "3gspht" }],
  ["line", { x1: "16", y1: "9", x2: "22", y2: "15", key: "2tltpt" }]
]);
const Volume = createLucideIcon("VolumeIcon", [
  ["polygon", { points: "11 5 6 9 2 9 2 15 6 15 11 19 11 5", key: "16drj5" }]
]);
const Vote = createLucideIcon("VoteIcon", [
  ["path", { d: "m9 12 2 2 4-4", key: "dzmm74" }],
  ["path", { d: "M5 7c0-1.1.9-2 2-2h10a2 2 0 0 1 2 2v12H5V7Z", key: "1ezoue" }],
  ["path", { d: "M22 19H2", key: "nuriw5" }]
]);
const Wallet = createLucideIcon("WalletIcon", [
  ["path", { d: "M20 12V8H6a2 2 0 0 1-2-2c0-1.1.9-2 2-2h12v4", key: "st805m" }],
  ["path", { d: "M4 6v12c0 1.1.9 2 2 2h14v-4", key: "16cu1e" }],
  ["path", { d: "M18 12a2 2 0 0 0-2 2c0 1.1.9 2 2 2h4v-4h-4z", key: "lwd56p" }]
]);
const Wand2 = createLucideIcon("Wand2Icon", [
  [
    "path",
    {
      d: "m21.64 3.64-1.28-1.28a1.21 1.21 0 0 0-1.72 0L2.36 18.64a1.21 1.21 0 0 0 0 1.72l1.28 1.28a1.2 1.2 0 0 0 1.72 0L21.64 5.36a1.2 1.2 0 0 0 0-1.72Z",
      key: "1bcowg"
    }
  ],
  ["path", { d: "m14 7 3 3", key: "1r5n42" }],
  ["path", { d: "M5 6v4", key: "ilb8ba" }],
  ["path", { d: "M19 14v4", key: "blhpug" }],
  ["path", { d: "M10 2v2", key: "7u0qdc" }],
  ["path", { d: "M7 8H3", key: "zfb6yr" }],
  ["path", { d: "M21 16h-4", key: "1cnmox" }],
  ["path", { d: "M11 3H9", key: "1obp7u" }]
]);
const Wand = createLucideIcon("WandIcon", [
  ["path", { d: "M15 4V2", key: "z1p9b7" }],
  ["path", { d: "M15 16v-2", key: "px0unx" }],
  ["path", { d: "M8 9h2", key: "1g203m" }],
  ["path", { d: "M20 9h2", key: "19tzq7" }],
  ["path", { d: "M17.8 11.8 19 13", key: "yihg8r" }],
  ["path", { d: "M15 9h0", key: "kg5t1u" }],
  ["path", { d: "M17.8 6.2 19 5", key: "fd4us0" }],
  ["path", { d: "m3 21 9-9", key: "1jfql5" }],
  ["path", { d: "M12.2 6.2 11 5", key: "i3da3b" }]
]);
const Watch = createLucideIcon("WatchIcon", [
  ["circle", { cx: "12", cy: "12", r: "6", key: "1vlfrh" }],
  ["polyline", { points: "12 10 12 12 13 13", key: "19dquz" }],
  [
    "path",
    {
      d: "m16.13 7.66-.81-4.05a2 2 0 0 0-2-1.61h-2.68a2 2 0 0 0-2 1.61l-.78 4.05",
      key: "18k57s"
    }
  ],
  [
    "path",
    {
      d: "m7.88 16.36.8 4a2 2 0 0 0 2 1.61h2.72a2 2 0 0 0 2-1.61l.81-4.05",
      key: "16ny36"
    }
  ]
]);
const Waves = createLucideIcon("WavesIcon", [
  [
    "path",
    {
      d: "M2 6c.6.5 1.2 1 2.5 1C7 7 7 5 9.5 5c2.6 0 2.4 2 5 2 2.5 0 2.5-2 5-2 1.3 0 1.9.5 2.5 1",
      key: "knzxuh"
    }
  ],
  [
    "path",
    {
      d: "M2 12c.6.5 1.2 1 2.5 1 2.5 0 2.5-2 5-2 2.6 0 2.4 2 5 2 2.5 0 2.5-2 5-2 1.3 0 1.9.5 2.5 1",
      key: "2jd2cc"
    }
  ],
  [
    "path",
    {
      d: "M2 18c.6.5 1.2 1 2.5 1 2.5 0 2.5-2 5-2 2.6 0 2.4 2 5 2 2.5 0 2.5-2 5-2 1.3 0 1.9.5 2.5 1",
      key: "rd2r6e"
    }
  ]
]);
const Webcam = createLucideIcon("WebcamIcon", [
  ["circle", { cx: "12", cy: "10", r: "8", key: "1gshiw" }],
  ["circle", { cx: "12", cy: "10", r: "3", key: "ilqhr7" }],
  ["path", { d: "M7 22h10", key: "10w4w3" }],
  ["path", { d: "M12 22v-4", key: "1utk9m" }]
]);
const Webhook = createLucideIcon("WebhookIcon", [
  [
    "path",
    {
      d: "M18 16.98h-5.99c-1.1 0-1.95.94-2.48 1.9A4 4 0 0 1 2 17c.01-.7.2-1.4.57-2",
      key: "q3hayz"
    }
  ],
  [
    "path",
    {
      d: "m6 17 3.13-5.78c.53-.97.1-2.18-.5-3.1a4 4 0 1 1 6.89-4.06",
      key: "1go1hn"
    }
  ],
  [
    "path",
    {
      d: "m12 6 3.13 5.73C15.66 12.7 16.9 13 18 13a4 4 0 0 1 0 8",
      key: "qlwsc0"
    }
  ]
]);
const WheatOff = createLucideIcon("WheatOffIcon", [
  ["path", { d: "m2 22 10-10", key: "28ilpk" }],
  ["path", { d: "m16 8-1.17 1.17", key: "1qqm82" }],
  [
    "path",
    {
      d: "M3.47 12.53 5 11l1.53 1.53a3.5 3.5 0 0 1 0 4.94L5 19l-1.53-1.53a3.5 3.5 0 0 1 0-4.94Z",
      key: "1rdhi6"
    }
  ],
  [
    "path",
    {
      d: "m8 8-.53.53a3.5 3.5 0 0 0 0 4.94L9 15l1.53-1.53c.55-.55.88-1.25.98-1.97",
      key: "4wz8re"
    }
  ],
  [
    "path",
    {
      d: "M10.91 5.26c.15-.26.34-.51.56-.73L13 3l1.53 1.53a3.5 3.5 0 0 1 .28 4.62",
      key: "rves66"
    }
  ],
  ["path", { d: "M20 2h2v2a4 4 0 0 1-4 4h-2V6a4 4 0 0 1 4-4Z", key: "19rau1" }],
  [
    "path",
    {
      d: "M11.47 17.47 13 19l-1.53 1.53a3.5 3.5 0 0 1-4.94 0L5 19l1.53-1.53a3.5 3.5 0 0 1 4.94 0Z",
      key: "tc8ph9"
    }
  ],
  [
    "path",
    {
      d: "m16 16-.53.53a3.5 3.5 0 0 1-4.94 0L9 15l1.53-1.53a3.49 3.49 0 0 1 1.97-.98",
      key: "ak46r"
    }
  ],
  [
    "path",
    {
      d: "M18.74 13.09c.26-.15.51-.34.73-.56L21 11l-1.53-1.53a3.5 3.5 0 0 0-4.62-.28",
      key: "1tw520"
    }
  ],
  ["line", { x1: "2", y1: "2", x2: "22", y2: "22", key: "1w4vcy" }]
]);
const Wheat = createLucideIcon("WheatIcon", [
  ["path", { d: "M2 22 16 8", key: "60hf96" }],
  [
    "path",
    {
      d: "M3.47 12.53 5 11l1.53 1.53a3.5 3.5 0 0 1 0 4.94L5 19l-1.53-1.53a3.5 3.5 0 0 1 0-4.94Z",
      key: "1rdhi6"
    }
  ],
  [
    "path",
    {
      d: "M7.47 8.53 9 7l1.53 1.53a3.5 3.5 0 0 1 0 4.94L9 15l-1.53-1.53a3.5 3.5 0 0 1 0-4.94Z",
      key: "1sdzmb"
    }
  ],
  [
    "path",
    {
      d: "M11.47 4.53 13 3l1.53 1.53a3.5 3.5 0 0 1 0 4.94L13 11l-1.53-1.53a3.5 3.5 0 0 1 0-4.94Z",
      key: "eoatbi"
    }
  ],
  ["path", { d: "M20 2h2v2a4 4 0 0 1-4 4h-2V6a4 4 0 0 1 4-4Z", key: "19rau1" }],
  [
    "path",
    {
      d: "M11.47 17.47 13 19l-1.53 1.53a3.5 3.5 0 0 1-4.94 0L5 19l1.53-1.53a3.5 3.5 0 0 1 4.94 0Z",
      key: "tc8ph9"
    }
  ],
  [
    "path",
    {
      d: "M15.47 13.47 17 15l-1.53 1.53a3.5 3.5 0 0 1-4.94 0L9 15l1.53-1.53a3.5 3.5 0 0 1 4.94 0Z",
      key: "2m8kc5"
    }
  ],
  [
    "path",
    {
      d: "M19.47 9.47 21 11l-1.53 1.53a3.5 3.5 0 0 1-4.94 0L13 11l1.53-1.53a3.5 3.5 0 0 1 4.94 0Z",
      key: "vex3ng"
    }
  ]
]);
const WifiOff = createLucideIcon("WifiOffIcon", [
  ["line", { x1: "2", y1: "2", x2: "22", y2: "22", key: "1w4vcy" }],
  ["path", { d: "M8.5 16.5a5 5 0 0 1 7 0", key: "sej527" }],
  ["path", { d: "M2 8.82a15 15 0 0 1 4.17-2.65", key: "11utq1" }],
  ["path", { d: "M10.66 5c4.01-.36 8.14.9 11.34 3.76", key: "hxefdu" }],
  ["path", { d: "M16.85 11.25a10 10 0 0 1 2.22 1.68", key: "q734kn" }],
  ["path", { d: "M5 13a10 10 0 0 1 5.24-2.76", key: "piq4yl" }],
  ["line", { x1: "12", y1: "20", x2: "12.01", y2: "20", key: "wbu7xg" }]
]);
const Wifi = createLucideIcon("WifiIcon", [
  ["path", { d: "M5 13a10 10 0 0 1 14 0", key: "6v8j51" }],
  ["path", { d: "M8.5 16.5a5 5 0 0 1 7 0", key: "sej527" }],
  ["path", { d: "M2 8.82a15 15 0 0 1 20 0", key: "dnpr2z" }],
  ["line", { x1: "12", y1: "20", x2: "12.01", y2: "20", key: "wbu7xg" }]
]);
const Wind = createLucideIcon("WindIcon", [
  ["path", { d: "M17.7 7.7a2.5 2.5 0 1 1 1.8 4.3H2", key: "1k4u03" }],
  ["path", { d: "M9.6 4.6A2 2 0 1 1 11 8H2", key: "b7d0fd" }],
  ["path", { d: "M12.6 19.4A2 2 0 1 0 14 16H2", key: "1p5cb3" }]
]);
const WineOff = createLucideIcon("WineOffIcon", [
  ["path", { d: "M8 22h8", key: "rmew8v" }],
  ["path", { d: "M7 10h3m7 0h-1.343", key: "v48bem" }],
  ["path", { d: "M12 15v7", key: "t2xh3l" }],
  [
    "path",
    {
      d: "M7.307 7.307A12.33 12.33 0 0 0 7 10a5 5 0 0 0 7.391 4.391M8.638 2.981C8.75 2.668 8.872 2.34 9 2h6c1.5 4 2 6 2 8 0 .407-.05.809-.145 1.198",
      key: "1ymjlu"
    }
  ],
  ["line", { x1: "2", y1: "2", x2: "22", y2: "22", key: "1w4vcy" }]
]);
const Wine = createLucideIcon("WineIcon", [
  ["path", { d: "M8 22h8", key: "rmew8v" }],
  ["path", { d: "M7 10h10", key: "1101jm" }],
  ["path", { d: "M12 15v7", key: "t2xh3l" }],
  [
    "path",
    {
      d: "M12 15a5 5 0 0 0 5-5c0-2-.5-4-2-8H9c-1.5 4-2 6-2 8a5 5 0 0 0 5 5Z",
      key: "10ffi3"
    }
  ]
]);
const WrapText = createLucideIcon("WrapTextIcon", [
  ["line", { x1: "3", y1: "6", x2: "21", y2: "6", key: "1tp2lp" }],
  ["path", { d: "M3 12h15a3 3 0 1 1 0 6h-4", key: "1cl7v7" }],
  ["polyline", { points: "16 16 14 18 16 20", key: "1jznyi" }],
  ["line", { x1: "3", y1: "18", x2: "10", y2: "18", key: "16bh46" }]
]);
const Wrench = createLucideIcon("WrenchIcon", [
  [
    "path",
    {
      d: "M14.7 6.3a1 1 0 0 0 0 1.4l1.6 1.6a1 1 0 0 0 1.4 0l3.77-3.77a6 6 0 0 1-7.94 7.94l-6.91 6.91a2.12 2.12 0 0 1-3-3l6.91-6.91a6 6 0 0 1 7.94-7.94l-3.76 3.76z",
      key: "cbrjhi"
    }
  ]
]);
const XCircle = createLucideIcon("XCircleIcon", [
  ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
  ["line", { x1: "15", y1: "9", x2: "9", y2: "15", key: "19zs77" }],
  ["line", { x1: "9", y1: "9", x2: "15", y2: "15", key: "10u9bu" }]
]);
const XOctagon = createLucideIcon("XOctagonIcon", [
  [
    "polygon",
    {
      points: "7.86 2 16.14 2 22 7.86 22 16.14 16.14 22 7.86 22 2 16.14 2 7.86 7.86 2",
      key: "h1p8hx"
    }
  ],
  ["line", { x1: "15", y1: "9", x2: "9", y2: "15", key: "19zs77" }],
  ["line", { x1: "9", y1: "9", x2: "15", y2: "15", key: "10u9bu" }]
]);
const XSquare = createLucideIcon("XSquareIcon", [
  [
    "rect",
    {
      x: "3",
      y: "3",
      width: "18",
      height: "18",
      rx: "2",
      ry: "2",
      key: "maln0c"
    }
  ],
  ["line", { x1: "9", y1: "9", x2: "15", y2: "15", key: "10u9bu" }],
  ["line", { x1: "15", y1: "9", x2: "9", y2: "15", key: "19zs77" }]
]);
const X = createLucideIcon("XIcon", [
  ["line", { x1: "18", y1: "6", x2: "6", y2: "18", key: "1o5bob" }],
  ["line", { x1: "6", y1: "6", x2: "18", y2: "18", key: "z4dcbv" }]
]);
const Youtube = createLucideIcon("YoutubeIcon", [
  [
    "path",
    {
      d: "M12 19c-2.3 0-6.4-.2-8.1-.6-.7-.2-1.2-.7-1.4-1.4-.3-1.1-.5-3.4-.5-5s.2-3.9.5-5c.2-.7.7-1.2 1.4-1.4C5.6 5.2 9.7 5 12 5s6.4.2 8.1.6c.7.2 1.2.7 1.4 1.4.3 1.1.5 3.4.5 5s-.2 3.9-.5 5c-.2.7-.7 1.2-1.4 1.4-1.7.4-5.8.6-8.1.6 0 0 0 0 0 0z",
      key: "1nqccg"
    }
  ],
  ["polygon", { points: "10 15 15 12 10 9", key: "1c7afu" }]
]);
const ZapOff = createLucideIcon("ZapOffIcon", [
  ["polyline", { points: "12.41 6.75 13 2 10.57 4.92", key: "122m05" }],
  ["polyline", { points: "18.57 12.91 21 10 15.66 10", key: "16r43o" }],
  ["polyline", { points: "8 8 3 14 12 14 11 22 16 16", key: "tmh4bc" }],
  ["line", { x1: "2", y1: "2", x2: "22", y2: "22", key: "1w4vcy" }]
]);
const Zap = createLucideIcon("ZapIcon", [
  [
    "polygon",
    { points: "13 2 3 14 12 14 11 22 21 10 12 10 13 2", key: "45s27k" }
  ]
]);
const ZoomIn = createLucideIcon("ZoomInIcon", [
  ["circle", { cx: "11", cy: "11", r: "8", key: "4ej97u" }],
  ["line", { x1: "21", y1: "21", x2: "16.65", y2: "16.65", key: "1p50m8" }],
  ["line", { x1: "11", y1: "8", x2: "11", y2: "14", key: "jw7mvq" }],
  ["line", { x1: "8", y1: "11", x2: "14", y2: "11", key: "1nivud" }]
]);
const ZoomOut = createLucideIcon("ZoomOutIcon", [
  ["circle", { cx: "11", cy: "11", r: "8", key: "4ej97u" }],
  ["line", { x1: "21", y1: "21", x2: "16.65", y2: "16.65", key: "1p50m8" }],
  ["line", { x1: "8", y1: "11", x2: "14", y2: "11", key: "1nivud" }]
]);
const index$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  Accessibility,
  Activity,
  AirVent,
  Airplay,
  AlarmCheck,
  AlarmClock,
  AlarmClockOff,
  AlarmMinus,
  AlarmPlus,
  Album,
  AlertCircle,
  AlertOctagon,
  AlertTriangle,
  AlignCenter,
  AlignCenterHorizontal,
  AlignCenterVertical,
  AlignEndHorizontal,
  AlignEndVertical,
  AlignHorizontalDistributeCenter,
  AlignHorizontalDistributeEnd,
  AlignHorizontalDistributeStart,
  AlignHorizontalJustifyCenter,
  AlignHorizontalJustifyEnd,
  AlignHorizontalJustifyStart,
  AlignHorizontalSpaceAround,
  AlignHorizontalSpaceBetween,
  AlignJustify,
  AlignLeft,
  AlignRight,
  AlignStartHorizontal,
  AlignStartVertical,
  AlignVerticalDistributeCenter,
  AlignVerticalDistributeEnd,
  AlignVerticalDistributeStart,
  AlignVerticalJustifyCenter,
  AlignVerticalJustifyEnd,
  AlignVerticalJustifyStart,
  AlignVerticalSpaceAround,
  AlignVerticalSpaceBetween,
  Anchor,
  Angry,
  Annoyed,
  Aperture,
  Apple,
  Archive,
  ArchiveRestore,
  Armchair,
  ArrowBigDown,
  ArrowBigLeft,
  ArrowBigRight,
  ArrowBigUp,
  ArrowDown,
  ArrowDownCircle,
  ArrowDownLeft,
  ArrowDownRight,
  ArrowLeft,
  ArrowLeftCircle,
  ArrowLeftRight,
  ArrowRight,
  ArrowRightCircle,
  ArrowUp,
  ArrowUpCircle,
  ArrowUpDown,
  ArrowUpLeft,
  ArrowUpRight,
  Asterisk,
  AtSign,
  Award,
  Axe,
  Axis3d,
  Baby,
  Backpack,
  BaggageClaim,
  Banana,
  Banknote,
  BarChart,
  BarChart2,
  BarChart3,
  BarChart4,
  BarChartHorizontal,
  Baseline,
  Bath,
  Battery,
  BatteryCharging,
  BatteryFull,
  BatteryLow,
  BatteryMedium,
  BatteryWarning,
  Beaker,
  Bean,
  BeanOff,
  Bed,
  BedDouble,
  BedSingle,
  Beef,
  Beer,
  Bell,
  BellMinus,
  BellOff,
  BellPlus,
  BellRing,
  Bike,
  Binary,
  Bird,
  Bitcoin,
  Blinds,
  Bluetooth,
  BluetoothConnected,
  BluetoothOff,
  BluetoothSearching,
  Bold,
  Bomb,
  Bone,
  Book,
  BookOpen,
  BookOpenCheck,
  Bookmark,
  BookmarkMinus,
  BookmarkPlus,
  Bot,
  Box,
  BoxSelect,
  Boxes,
  Brain,
  BrainCircuit,
  BrainCog,
  Briefcase,
  Brush,
  Bug,
  Building,
  Building2,
  Bus,
  Cake,
  Calculator,
  Calendar,
  CalendarCheck,
  CalendarCheck2,
  CalendarClock,
  CalendarDays,
  CalendarHeart,
  CalendarMinus,
  CalendarOff,
  CalendarPlus,
  CalendarRange,
  CalendarSearch,
  CalendarX,
  CalendarX2,
  Camera,
  CameraOff,
  Candy,
  CandyOff,
  Car,
  Carrot,
  Cast,
  Cat,
  Check,
  CheckCheck,
  CheckCircle,
  CheckCircle2,
  CheckSquare,
  ChefHat,
  Cherry,
  ChevronDown,
  ChevronFirst,
  ChevronLast,
  ChevronLeft,
  ChevronRight,
  ChevronUp,
  ChevronsDown,
  ChevronsDownUp,
  ChevronsLeft,
  ChevronsLeftRight,
  ChevronsRight,
  ChevronsRightLeft,
  ChevronsUp,
  ChevronsUpDown,
  Chrome,
  Cigarette,
  CigaretteOff,
  Circle,
  CircleDot,
  CircleEllipsis,
  CircleSlashed,
  Citrus,
  Clapperboard,
  Clipboard: Clipboard2,
  ClipboardCheck,
  ClipboardCopy,
  ClipboardEdit,
  ClipboardList,
  ClipboardSignature,
  ClipboardType,
  ClipboardX,
  Clock,
  Clock1,
  Clock10,
  Clock11,
  Clock12,
  Clock2,
  Clock3,
  Clock4,
  Clock5,
  Clock6,
  Clock7,
  Clock8,
  Clock9,
  Cloud,
  CloudCog,
  CloudDrizzle,
  CloudFog,
  CloudHail,
  CloudLightning,
  CloudMoon,
  CloudMoonRain,
  CloudOff,
  CloudRain,
  CloudRainWind,
  CloudSnow,
  CloudSun,
  CloudSunRain,
  Cloudy,
  Clover,
  Code,
  Code2,
  Codepen,
  Codesandbox,
  Coffee,
  Cog,
  Coins,
  Columns,
  Command,
  Compass,
  Component,
  ConciergeBell,
  Construction,
  Contact,
  Contrast,
  Cookie,
  Copy,
  Copyleft,
  Copyright,
  CornerDownLeft,
  CornerDownRight,
  CornerLeftDown,
  CornerLeftUp,
  CornerRightDown,
  CornerRightUp,
  CornerUpLeft,
  CornerUpRight,
  Cpu,
  CreativeCommons,
  CreditCard,
  Croissant,
  Crop,
  Cross,
  Crosshair,
  Crown,
  CupSoda,
  CurlyBraces,
  Currency,
  Database,
  DatabaseBackup,
  Delete,
  Diamond,
  Dice1,
  Dice2,
  Dice3,
  Dice4,
  Dice5,
  Dice6,
  Dices,
  Diff,
  Disc,
  Divide,
  DivideCircle,
  DivideSquare,
  Dna,
  DnaOff,
  Dog,
  DollarSign,
  Download: Download2,
  DownloadCloud,
  Dribbble,
  Droplet,
  Droplets,
  Drumstick,
  Dumbbell,
  Ear,
  EarOff,
  Edit: Edit4,
  Edit2,
  Edit3,
  Egg,
  EggFried,
  EggOff,
  Equal,
  EqualNot,
  Eraser,
  Euro,
  Expand,
  ExternalLink,
  Eye,
  EyeOff,
  Facebook,
  Factory,
  Fan,
  FastForward,
  Feather,
  Figma,
  File,
  FileArchive,
  FileAudio,
  FileAudio2,
  FileAxis3d,
  FileBadge,
  FileBadge2,
  FileBarChart,
  FileBarChart2,
  FileBox,
  FileCheck,
  FileCheck2,
  FileClock,
  FileCode,
  FileCog,
  FileCog2,
  FileDiff,
  FileDigit,
  FileDown,
  FileEdit,
  FileHeart,
  FileImage,
  FileInput,
  FileJson,
  FileJson2,
  FileKey,
  FileKey2,
  FileLineChart,
  FileLock,
  FileLock2,
  FileMinus,
  FileMinus2,
  FileOutput,
  FilePieChart,
  FilePlus,
  FilePlus2,
  FileQuestion,
  FileScan,
  FileSearch,
  FileSearch2,
  FileSignature,
  FileSpreadsheet,
  FileSymlink,
  FileTerminal,
  FileText,
  FileType,
  FileType2,
  FileUp,
  FileVideo,
  FileVideo2,
  FileVolume,
  FileVolume2,
  FileWarning,
  FileX,
  FileX2,
  Files,
  Film,
  Filter: Filter2,
  FilterX,
  Fingerprint,
  Fish,
  FishOff,
  Flag,
  FlagOff,
  FlagTriangleLeft,
  FlagTriangleRight,
  Flame,
  Flashlight,
  FlashlightOff,
  FlaskConical,
  FlaskConicalOff,
  FlaskRound,
  FlipHorizontal,
  FlipHorizontal2,
  FlipVertical,
  FlipVertical2,
  Flower,
  Flower2,
  Focus,
  Folder,
  FolderArchive,
  FolderCheck,
  FolderClock,
  FolderClosed,
  FolderCog,
  FolderCog2,
  FolderDown,
  FolderEdit,
  FolderHeart,
  FolderInput,
  FolderKey,
  FolderLock,
  FolderMinus,
  FolderOpen,
  FolderOutput,
  FolderPlus,
  FolderSearch,
  FolderSearch2,
  FolderSymlink,
  FolderTree,
  FolderUp,
  FolderX,
  Folders,
  Footprints,
  Forklift,
  FormInput,
  Forward,
  Frame,
  Framer,
  Frown,
  Fuel,
  FunctionSquare,
  Gamepad,
  Gamepad2,
  Gauge,
  Gavel,
  Gem,
  Ghost,
  Gift,
  GitBranch,
  GitBranchPlus,
  GitCommit,
  GitCompare,
  GitFork,
  GitMerge,
  GitPullRequest,
  GitPullRequestClosed,
  GitPullRequestDraft,
  Github,
  Gitlab,
  GlassWater,
  Glasses,
  Globe,
  Globe2,
  Grab,
  GraduationCap,
  Grape,
  Grid,
  Grip,
  GripHorizontal,
  GripVertical,
  Hammer,
  Hand,
  HandMetal,
  HardDrive,
  HardHat,
  Hash,
  Haze,
  Heading,
  Heading1,
  Heading2,
  Heading3,
  Heading4,
  Heading5,
  Heading6,
  Headphones,
  Heart,
  HeartCrack,
  HeartHandshake,
  HeartOff,
  HeartPulse,
  HelpCircle,
  HelpingHand,
  Hexagon,
  Highlighter,
  History: History2,
  Home,
  Hop,
  HopOff,
  Hourglass,
  IceCream,
  IceCream2,
  Image,
  ImageMinus,
  ImageOff,
  ImagePlus,
  Import: Import2,
  Inbox,
  Indent,
  IndianRupee,
  Infinity: Infinity$1,
  Info,
  Inspect,
  Instagram,
  Italic,
  JapaneseYen,
  Joystick,
  Key,
  Keyboard,
  Lamp,
  LampCeiling,
  LampDesk,
  LampFloor,
  LampWallDown,
  LampWallUp,
  Landmark,
  Languages,
  Laptop,
  Laptop2,
  Lasso,
  LassoSelect,
  Laugh,
  Layers,
  Layout: Layout2,
  LayoutDashboard,
  LayoutGrid,
  LayoutList,
  LayoutTemplate,
  Leaf,
  Library,
  LifeBuoy,
  Lightbulb,
  LightbulbOff,
  LineChart,
  Link,
  Link2,
  Link2Off,
  Linkedin,
  List,
  ListChecks,
  ListEnd,
  ListMinus,
  ListMusic,
  ListOrdered,
  ListPlus,
  ListStart,
  ListVideo,
  ListX,
  Loader,
  Loader2,
  Locate,
  LocateFixed,
  LocateOff,
  Lock,
  LogIn,
  LogOut,
  Luggage,
  Magnet,
  Mail,
  MailCheck,
  MailMinus,
  MailOpen,
  MailPlus,
  MailQuestion,
  MailSearch,
  MailWarning,
  MailX,
  Mails,
  Map: Map$1,
  MapPin,
  MapPinOff,
  Martini,
  Maximize,
  Maximize2,
  Medal,
  Megaphone,
  MegaphoneOff,
  Meh,
  Menu: Menu2,
  MessageCircle,
  MessageSquare,
  Mic,
  Mic2,
  MicOff,
  Microscope,
  Microwave,
  Milestone,
  Milk,
  MilkOff,
  Minimize,
  Minimize2,
  Minus,
  MinusCircle,
  MinusSquare,
  Monitor,
  MonitorOff,
  MonitorSmartphone,
  MonitorSpeaker,
  Moon,
  MoreHorizontal,
  MoreVertical,
  Mountain,
  MountainSnow,
  Mouse,
  MousePointer,
  MousePointer2,
  MousePointerClick,
  Move,
  Move3d,
  MoveDiagonal,
  MoveDiagonal2,
  MoveHorizontal,
  MoveVertical,
  Music,
  Music2,
  Music3,
  Music4,
  Navigation,
  Navigation2,
  Navigation2Off,
  NavigationOff,
  Network,
  Newspaper,
  Nfc,
  Nut,
  NutOff,
  Octagon,
  Option,
  Outdent,
  Package,
  Package2,
  PackageCheck,
  PackageMinus,
  PackageOpen,
  PackagePlus,
  PackageSearch,
  PackageX,
  PaintBucket,
  Paintbrush,
  Paintbrush2,
  Palette,
  Palmtree,
  Paperclip,
  PartyPopper,
  Pause,
  PauseCircle,
  PauseOctagon,
  PenTool,
  Pencil,
  Percent,
  PersonStanding,
  Phone,
  PhoneCall,
  PhoneForwarded,
  PhoneIncoming,
  PhoneMissed,
  PhoneOff,
  PhoneOutgoing,
  PictureInPicture,
  PictureInPicture2,
  PieChart,
  PiggyBank,
  Pilcrow,
  Pill,
  Pin,
  PinOff,
  Pipette,
  Pizza,
  Plane,
  Play,
  PlayCircle,
  Plug,
  Plug2,
  PlugZap,
  Plus,
  PlusCircle,
  PlusSquare,
  Pocket,
  Podcast,
  Pointer,
  PoundSterling,
  Power,
  PowerOff,
  Printer,
  Puzzle,
  QrCode,
  Quote,
  Radio,
  RadioReceiver,
  RectangleHorizontal,
  RectangleVertical,
  Recycle,
  Redo,
  Redo2,
  RefreshCcw,
  RefreshCw,
  Refrigerator,
  Regex,
  RemoveFormatting,
  Repeat,
  Repeat1,
  Reply,
  ReplyAll,
  Rewind,
  Rocket,
  RockingChair,
  Rotate3d,
  RotateCcw,
  RotateCw,
  Router,
  Rss,
  Ruler,
  RussianRuble,
  Sailboat,
  Salad,
  Sandwich,
  Save,
  Scale,
  Scale3d,
  Scaling,
  Scan,
  ScanFace,
  ScanLine,
  Scissors,
  ScreenShare,
  ScreenShareOff,
  Scroll,
  Search,
  Send,
  SeparatorHorizontal,
  SeparatorVertical,
  Server,
  ServerCog,
  ServerCrash,
  ServerOff,
  Settings,
  Settings2,
  Share,
  Share2,
  Sheet,
  Shield,
  ShieldAlert,
  ShieldCheck,
  ShieldClose,
  ShieldOff,
  Ship,
  Shirt,
  ShoppingBag,
  ShoppingCart,
  Shovel,
  ShowerHead,
  Shrink,
  Shrub,
  Shuffle,
  Sidebar,
  SidebarClose,
  SidebarOpen,
  Sigma,
  Signal,
  SignalHigh,
  SignalLow,
  SignalMedium,
  SignalZero,
  Siren,
  SkipBack,
  SkipForward,
  Skull,
  Slack,
  Slash,
  Slice,
  Sliders,
  SlidersHorizontal,
  Smartphone,
  SmartphoneCharging,
  SmartphoneNfc,
  Smile,
  SmilePlus,
  Snowflake,
  Sofa,
  SortAsc,
  SortDesc,
  Soup,
  Speaker,
  Spline,
  SplitSquareHorizontal,
  SplitSquareVertical,
  Sprout,
  Square,
  Stamp,
  Star,
  StarHalf,
  StarOff,
  Stethoscope,
  Sticker,
  StickyNote,
  StopCircle,
  StretchHorizontal,
  StretchVertical,
  Strikethrough,
  Subscript,
  Subtitles,
  Sun,
  SunDim,
  SunMedium,
  SunMoon,
  SunSnow,
  Sunrise,
  Sunset,
  Superscript,
  SwissFranc,
  SwitchCamera,
  Sword,
  Swords,
  Syringe,
  Table,
  Table2,
  Tablet,
  Tablets,
  Tag,
  Tags,
  Target,
  Tent,
  Terminal,
  TerminalSquare,
  TextCursor,
  TextCursorInput,
  Thermometer,
  ThermometerSnowflake,
  ThermometerSun,
  ThumbsDown,
  ThumbsUp,
  Ticket,
  Timer,
  TimerOff,
  TimerReset,
  ToggleLeft,
  ToggleRight,
  Tornado,
  TowerControl,
  ToyBrick,
  Train,
  Trash,
  Trash2,
  TreeDeciduous,
  TreePine,
  Trees,
  Trello,
  TrendingDown,
  TrendingUp,
  Triangle,
  Trophy,
  Truck,
  Tv,
  Tv2,
  Twitch,
  Twitter,
  Type,
  Umbrella,
  Underline,
  Undo,
  Undo2,
  Unlink,
  Unlink2,
  Unlock,
  Upload,
  UploadCloud,
  Usb,
  User,
  UserCheck,
  UserCog,
  UserMinus,
  UserPlus,
  UserX,
  Users,
  Utensils,
  UtensilsCrossed,
  UtilityPole,
  Vegan,
  VenetianMask,
  Verified,
  Vibrate,
  VibrateOff,
  Video,
  VideoOff,
  View,
  Voicemail,
  Volume,
  Volume1,
  Volume2,
  VolumeX,
  Vote,
  Wallet,
  Wand,
  Wand2,
  Watch,
  Waves,
  Webcam,
  Webhook,
  Wheat,
  WheatOff,
  Wifi,
  WifiOff,
  Wind,
  Wine,
  WineOff,
  WrapText,
  Wrench,
  X,
  XCircle,
  XOctagon,
  XSquare,
  Youtube,
  Zap,
  ZapOff,
  ZoomIn,
  ZoomOut
}, Symbol.toStringTag, { value: "Module" }));
const lucideIcons = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  Accessibility,
  AccessibilityIcon: Accessibility,
  Activity,
  ActivityIcon: Activity,
  AirVent,
  AirVentIcon: AirVent,
  Airplay,
  AirplayIcon: Airplay,
  AlarmCheck,
  AlarmCheckIcon: AlarmCheck,
  AlarmClock,
  AlarmClockIcon: AlarmClock,
  AlarmClockOff,
  AlarmClockOffIcon: AlarmClockOff,
  AlarmMinus,
  AlarmMinusIcon: AlarmMinus,
  AlarmPlus,
  AlarmPlusIcon: AlarmPlus,
  Album,
  AlbumIcon: Album,
  AlertCircle,
  AlertCircleIcon: AlertCircle,
  AlertOctagon,
  AlertOctagonIcon: AlertOctagon,
  AlertTriangle,
  AlertTriangleIcon: AlertTriangle,
  AlignCenter,
  AlignCenterHorizontal,
  AlignCenterHorizontalIcon: AlignCenterHorizontal,
  AlignCenterIcon: AlignCenter,
  AlignCenterVertical,
  AlignCenterVerticalIcon: AlignCenterVertical,
  AlignEndHorizontal,
  AlignEndHorizontalIcon: AlignEndHorizontal,
  AlignEndVertical,
  AlignEndVerticalIcon: AlignEndVertical,
  AlignHorizontalDistributeCenter,
  AlignHorizontalDistributeCenterIcon: AlignHorizontalDistributeCenter,
  AlignHorizontalDistributeEnd,
  AlignHorizontalDistributeEndIcon: AlignHorizontalDistributeEnd,
  AlignHorizontalDistributeStart,
  AlignHorizontalDistributeStartIcon: AlignHorizontalDistributeStart,
  AlignHorizontalJustifyCenter,
  AlignHorizontalJustifyCenterIcon: AlignHorizontalJustifyCenter,
  AlignHorizontalJustifyEnd,
  AlignHorizontalJustifyEndIcon: AlignHorizontalJustifyEnd,
  AlignHorizontalJustifyStart,
  AlignHorizontalJustifyStartIcon: AlignHorizontalJustifyStart,
  AlignHorizontalSpaceAround,
  AlignHorizontalSpaceAroundIcon: AlignHorizontalSpaceAround,
  AlignHorizontalSpaceBetween,
  AlignHorizontalSpaceBetweenIcon: AlignHorizontalSpaceBetween,
  AlignJustify,
  AlignJustifyIcon: AlignJustify,
  AlignLeft,
  AlignLeftIcon: AlignLeft,
  AlignRight,
  AlignRightIcon: AlignRight,
  AlignStartHorizontal,
  AlignStartHorizontalIcon: AlignStartHorizontal,
  AlignStartVertical,
  AlignStartVerticalIcon: AlignStartVertical,
  AlignVerticalDistributeCenter,
  AlignVerticalDistributeCenterIcon: AlignVerticalDistributeCenter,
  AlignVerticalDistributeEnd,
  AlignVerticalDistributeEndIcon: AlignVerticalDistributeEnd,
  AlignVerticalDistributeStart,
  AlignVerticalDistributeStartIcon: AlignVerticalDistributeStart,
  AlignVerticalJustifyCenter,
  AlignVerticalJustifyCenterIcon: AlignVerticalJustifyCenter,
  AlignVerticalJustifyEnd,
  AlignVerticalJustifyEndIcon: AlignVerticalJustifyEnd,
  AlignVerticalJustifyStart,
  AlignVerticalJustifyStartIcon: AlignVerticalJustifyStart,
  AlignVerticalSpaceAround,
  AlignVerticalSpaceAroundIcon: AlignVerticalSpaceAround,
  AlignVerticalSpaceBetween,
  AlignVerticalSpaceBetweenIcon: AlignVerticalSpaceBetween,
  Anchor,
  AnchorIcon: Anchor,
  Angry,
  AngryIcon: Angry,
  Annoyed,
  AnnoyedIcon: Annoyed,
  Aperture,
  ApertureIcon: Aperture,
  Apple,
  AppleIcon: Apple,
  Archive,
  ArchiveIcon: Archive,
  ArchiveRestore,
  ArchiveRestoreIcon: ArchiveRestore,
  Armchair,
  ArmchairIcon: Armchair,
  ArrowBigDown,
  ArrowBigDownIcon: ArrowBigDown,
  ArrowBigLeft,
  ArrowBigLeftIcon: ArrowBigLeft,
  ArrowBigRight,
  ArrowBigRightIcon: ArrowBigRight,
  ArrowBigUp,
  ArrowBigUpIcon: ArrowBigUp,
  ArrowDown,
  ArrowDownCircle,
  ArrowDownCircleIcon: ArrowDownCircle,
  ArrowDownIcon: ArrowDown,
  ArrowDownLeft,
  ArrowDownLeftIcon: ArrowDownLeft,
  ArrowDownRight,
  ArrowDownRightIcon: ArrowDownRight,
  ArrowLeft,
  ArrowLeftCircle,
  ArrowLeftCircleIcon: ArrowLeftCircle,
  ArrowLeftIcon: ArrowLeft,
  ArrowLeftRight,
  ArrowLeftRightIcon: ArrowLeftRight,
  ArrowRight,
  ArrowRightCircle,
  ArrowRightCircleIcon: ArrowRightCircle,
  ArrowRightIcon: ArrowRight,
  ArrowUp,
  ArrowUpCircle,
  ArrowUpCircleIcon: ArrowUpCircle,
  ArrowUpDown,
  ArrowUpDownIcon: ArrowUpDown,
  ArrowUpIcon: ArrowUp,
  ArrowUpLeft,
  ArrowUpLeftIcon: ArrowUpLeft,
  ArrowUpRight,
  ArrowUpRightIcon: ArrowUpRight,
  Asterisk,
  AsteriskIcon: Asterisk,
  AtSign,
  AtSignIcon: AtSign,
  Award,
  AwardIcon: Award,
  Axe,
  AxeIcon: Axe,
  Axis3d,
  Axis3dIcon: Axis3d,
  Baby,
  BabyIcon: Baby,
  Backpack,
  BackpackIcon: Backpack,
  BaggageClaim,
  BaggageClaimIcon: BaggageClaim,
  Banana,
  BananaIcon: Banana,
  Banknote,
  BanknoteIcon: Banknote,
  BarChart,
  BarChart2,
  BarChart2Icon: BarChart2,
  BarChart3,
  BarChart3Icon: BarChart3,
  BarChart4,
  BarChart4Icon: BarChart4,
  BarChartHorizontal,
  BarChartHorizontalIcon: BarChartHorizontal,
  BarChartIcon: BarChart,
  Baseline,
  BaselineIcon: Baseline,
  Bath,
  BathIcon: Bath,
  Battery,
  BatteryCharging,
  BatteryChargingIcon: BatteryCharging,
  BatteryFull,
  BatteryFullIcon: BatteryFull,
  BatteryIcon: Battery,
  BatteryLow,
  BatteryLowIcon: BatteryLow,
  BatteryMedium,
  BatteryMediumIcon: BatteryMedium,
  BatteryWarning,
  BatteryWarningIcon: BatteryWarning,
  Beaker,
  BeakerIcon: Beaker,
  Bean,
  BeanIcon: Bean,
  BeanOff,
  BeanOffIcon: BeanOff,
  Bed,
  BedDouble,
  BedDoubleIcon: BedDouble,
  BedIcon: Bed,
  BedSingle,
  BedSingleIcon: BedSingle,
  Beef,
  BeefIcon: Beef,
  Beer,
  BeerIcon: Beer,
  Bell,
  BellIcon: Bell,
  BellMinus,
  BellMinusIcon: BellMinus,
  BellOff,
  BellOffIcon: BellOff,
  BellPlus,
  BellPlusIcon: BellPlus,
  BellRing,
  BellRingIcon: BellRing,
  Bike,
  BikeIcon: Bike,
  Binary,
  BinaryIcon: Binary,
  Bird,
  BirdIcon: Bird,
  Bitcoin,
  BitcoinIcon: Bitcoin,
  Blinds,
  BlindsIcon: Blinds,
  Bluetooth,
  BluetoothConnected,
  BluetoothConnectedIcon: BluetoothConnected,
  BluetoothIcon: Bluetooth,
  BluetoothOff,
  BluetoothOffIcon: BluetoothOff,
  BluetoothSearching,
  BluetoothSearchingIcon: BluetoothSearching,
  Bold,
  BoldIcon: Bold,
  Bomb,
  BombIcon: Bomb,
  Bone,
  BoneIcon: Bone,
  Book,
  BookIcon: Book,
  BookOpen,
  BookOpenCheck,
  BookOpenCheckIcon: BookOpenCheck,
  BookOpenIcon: BookOpen,
  Bookmark,
  BookmarkIcon: Bookmark,
  BookmarkMinus,
  BookmarkMinusIcon: BookmarkMinus,
  BookmarkPlus,
  BookmarkPlusIcon: BookmarkPlus,
  Bot,
  BotIcon: Bot,
  Box,
  BoxIcon: Box,
  BoxSelect,
  BoxSelectIcon: BoxSelect,
  Boxes,
  BoxesIcon: Boxes,
  Brain,
  BrainCircuit,
  BrainCircuitIcon: BrainCircuit,
  BrainCog,
  BrainCogIcon: BrainCog,
  BrainIcon: Brain,
  Briefcase,
  BriefcaseIcon: Briefcase,
  Brush,
  BrushIcon: Brush,
  Bug,
  BugIcon: Bug,
  Building,
  Building2,
  Building2Icon: Building2,
  BuildingIcon: Building,
  Bus,
  BusIcon: Bus,
  Cake,
  CakeIcon: Cake,
  Calculator,
  CalculatorIcon: Calculator,
  Calendar,
  CalendarCheck,
  CalendarCheck2,
  CalendarCheck2Icon: CalendarCheck2,
  CalendarCheckIcon: CalendarCheck,
  CalendarClock,
  CalendarClockIcon: CalendarClock,
  CalendarDays,
  CalendarDaysIcon: CalendarDays,
  CalendarHeart,
  CalendarHeartIcon: CalendarHeart,
  CalendarIcon: Calendar,
  CalendarMinus,
  CalendarMinusIcon: CalendarMinus,
  CalendarOff,
  CalendarOffIcon: CalendarOff,
  CalendarPlus,
  CalendarPlusIcon: CalendarPlus,
  CalendarRange,
  CalendarRangeIcon: CalendarRange,
  CalendarSearch,
  CalendarSearchIcon: CalendarSearch,
  CalendarX,
  CalendarX2,
  CalendarX2Icon: CalendarX2,
  CalendarXIcon: CalendarX,
  Camera,
  CameraIcon: Camera,
  CameraOff,
  CameraOffIcon: CameraOff,
  Candy,
  CandyIcon: Candy,
  CandyOff,
  CandyOffIcon: CandyOff,
  Car,
  CarIcon: Car,
  Carrot,
  CarrotIcon: Carrot,
  Cast,
  CastIcon: Cast,
  Cat,
  CatIcon: Cat,
  Check,
  CheckCheck,
  CheckCheckIcon: CheckCheck,
  CheckCircle,
  CheckCircle2,
  CheckCircle2Icon: CheckCircle2,
  CheckCircleIcon: CheckCircle,
  CheckIcon: Check,
  CheckSquare,
  CheckSquareIcon: CheckSquare,
  ChefHat,
  ChefHatIcon: ChefHat,
  Cherry,
  CherryIcon: Cherry,
  ChevronDown,
  ChevronDownIcon: ChevronDown,
  ChevronFirst,
  ChevronFirstIcon: ChevronFirst,
  ChevronLast,
  ChevronLastIcon: ChevronLast,
  ChevronLeft,
  ChevronLeftIcon: ChevronLeft,
  ChevronRight,
  ChevronRightIcon: ChevronRight,
  ChevronUp,
  ChevronUpIcon: ChevronUp,
  ChevronsDown,
  ChevronsDownIcon: ChevronsDown,
  ChevronsDownUp,
  ChevronsDownUpIcon: ChevronsDownUp,
  ChevronsLeft,
  ChevronsLeftIcon: ChevronsLeft,
  ChevronsLeftRight,
  ChevronsLeftRightIcon: ChevronsLeftRight,
  ChevronsRight,
  ChevronsRightIcon: ChevronsRight,
  ChevronsRightLeft,
  ChevronsRightLeftIcon: ChevronsRightLeft,
  ChevronsUp,
  ChevronsUpDown,
  ChevronsUpDownIcon: ChevronsUpDown,
  ChevronsUpIcon: ChevronsUp,
  Chrome,
  ChromeIcon: Chrome,
  Cigarette,
  CigaretteIcon: Cigarette,
  CigaretteOff,
  CigaretteOffIcon: CigaretteOff,
  Circle,
  CircleDot,
  CircleDotIcon: CircleDot,
  CircleEllipsis,
  CircleEllipsisIcon: CircleEllipsis,
  CircleIcon: Circle,
  CircleSlashed,
  CircleSlashedIcon: CircleSlashed,
  Citrus,
  CitrusIcon: Citrus,
  Clapperboard,
  ClapperboardIcon: Clapperboard,
  Clipboard: Clipboard2,
  ClipboardCheck,
  ClipboardCheckIcon: ClipboardCheck,
  ClipboardCopy,
  ClipboardCopyIcon: ClipboardCopy,
  ClipboardEdit,
  ClipboardEditIcon: ClipboardEdit,
  ClipboardIcon: Clipboard2,
  ClipboardList,
  ClipboardListIcon: ClipboardList,
  ClipboardSignature,
  ClipboardSignatureIcon: ClipboardSignature,
  ClipboardType,
  ClipboardTypeIcon: ClipboardType,
  ClipboardX,
  ClipboardXIcon: ClipboardX,
  Clock,
  Clock1,
  Clock10,
  Clock10Icon: Clock10,
  Clock11,
  Clock11Icon: Clock11,
  Clock12,
  Clock12Icon: Clock12,
  Clock1Icon: Clock1,
  Clock2,
  Clock2Icon: Clock2,
  Clock3,
  Clock3Icon: Clock3,
  Clock4,
  Clock4Icon: Clock4,
  Clock5,
  Clock5Icon: Clock5,
  Clock6,
  Clock6Icon: Clock6,
  Clock7,
  Clock7Icon: Clock7,
  Clock8,
  Clock8Icon: Clock8,
  Clock9,
  Clock9Icon: Clock9,
  ClockIcon: Clock,
  Cloud,
  CloudCog,
  CloudCogIcon: CloudCog,
  CloudDrizzle,
  CloudDrizzleIcon: CloudDrizzle,
  CloudFog,
  CloudFogIcon: CloudFog,
  CloudHail,
  CloudHailIcon: CloudHail,
  CloudIcon: Cloud,
  CloudLightning,
  CloudLightningIcon: CloudLightning,
  CloudMoon,
  CloudMoonIcon: CloudMoon,
  CloudMoonRain,
  CloudMoonRainIcon: CloudMoonRain,
  CloudOff,
  CloudOffIcon: CloudOff,
  CloudRain,
  CloudRainIcon: CloudRain,
  CloudRainWind,
  CloudRainWindIcon: CloudRainWind,
  CloudSnow,
  CloudSnowIcon: CloudSnow,
  CloudSun,
  CloudSunIcon: CloudSun,
  CloudSunRain,
  CloudSunRainIcon: CloudSunRain,
  Cloudy,
  CloudyIcon: Cloudy,
  Clover,
  CloverIcon: Clover,
  Code,
  Code2,
  Code2Icon: Code2,
  CodeIcon: Code,
  Codepen,
  CodepenIcon: Codepen,
  Codesandbox,
  CodesandboxIcon: Codesandbox,
  Coffee,
  CoffeeIcon: Coffee,
  Cog,
  CogIcon: Cog,
  Coins,
  CoinsIcon: Coins,
  Columns,
  ColumnsIcon: Columns,
  Command,
  CommandIcon: Command,
  Compass,
  CompassIcon: Compass,
  Component,
  ComponentIcon: Component,
  ConciergeBell,
  ConciergeBellIcon: ConciergeBell,
  Construction,
  ConstructionIcon: Construction,
  Contact,
  ContactIcon: Contact,
  Contrast,
  ContrastIcon: Contrast,
  Cookie,
  CookieIcon: Cookie,
  Copy,
  CopyIcon: Copy,
  Copyleft,
  CopyleftIcon: Copyleft,
  Copyright,
  CopyrightIcon: Copyright,
  CornerDownLeft,
  CornerDownLeftIcon: CornerDownLeft,
  CornerDownRight,
  CornerDownRightIcon: CornerDownRight,
  CornerLeftDown,
  CornerLeftDownIcon: CornerLeftDown,
  CornerLeftUp,
  CornerLeftUpIcon: CornerLeftUp,
  CornerRightDown,
  CornerRightDownIcon: CornerRightDown,
  CornerRightUp,
  CornerRightUpIcon: CornerRightUp,
  CornerUpLeft,
  CornerUpLeftIcon: CornerUpLeft,
  CornerUpRight,
  CornerUpRightIcon: CornerUpRight,
  Cpu,
  CpuIcon: Cpu,
  CreativeCommons,
  CreativeCommonsIcon: CreativeCommons,
  CreditCard,
  CreditCardIcon: CreditCard,
  Croissant,
  CroissantIcon: Croissant,
  Crop,
  CropIcon: Crop,
  Cross,
  CrossIcon: Cross,
  Crosshair,
  CrosshairIcon: Crosshair,
  Crown,
  CrownIcon: Crown,
  CupSoda,
  CupSodaIcon: CupSoda,
  CurlyBraces,
  CurlyBracesIcon: CurlyBraces,
  Currency,
  CurrencyIcon: Currency,
  Database,
  DatabaseBackup,
  DatabaseBackupIcon: DatabaseBackup,
  DatabaseIcon: Database,
  Delete,
  DeleteIcon: Delete,
  Diamond,
  DiamondIcon: Diamond,
  Dice1,
  Dice1Icon: Dice1,
  Dice2,
  Dice2Icon: Dice2,
  Dice3,
  Dice3Icon: Dice3,
  Dice4,
  Dice4Icon: Dice4,
  Dice5,
  Dice5Icon: Dice5,
  Dice6,
  Dice6Icon: Dice6,
  Dices,
  DicesIcon: Dices,
  Diff,
  DiffIcon: Diff,
  Disc,
  DiscIcon: Disc,
  Divide,
  DivideCircle,
  DivideCircleIcon: DivideCircle,
  DivideIcon: Divide,
  DivideSquare,
  DivideSquareIcon: DivideSquare,
  Dna,
  DnaIcon: Dna,
  DnaOff,
  DnaOffIcon: DnaOff,
  Dog,
  DogIcon: Dog,
  DollarSign,
  DollarSignIcon: DollarSign,
  Download: Download2,
  DownloadCloud,
  DownloadCloudIcon: DownloadCloud,
  DownloadIcon: Download2,
  Dribbble,
  DribbbleIcon: Dribbble,
  Droplet,
  DropletIcon: Droplet,
  Droplets,
  DropletsIcon: Droplets,
  Drumstick,
  DrumstickIcon: Drumstick,
  Dumbbell,
  DumbbellIcon: Dumbbell,
  Ear,
  EarIcon: Ear,
  EarOff,
  EarOffIcon: EarOff,
  Edit: Edit4,
  Edit2,
  Edit2Icon: Edit2,
  Edit3,
  Edit3Icon: Edit3,
  EditIcon: Edit4,
  Egg,
  EggFried,
  EggFriedIcon: EggFried,
  EggIcon: Egg,
  EggOff,
  EggOffIcon: EggOff,
  Equal,
  EqualIcon: Equal,
  EqualNot,
  EqualNotIcon: EqualNot,
  Eraser,
  EraserIcon: Eraser,
  Euro,
  EuroIcon: Euro,
  Expand,
  ExpandIcon: Expand,
  ExternalLink,
  ExternalLinkIcon: ExternalLink,
  Eye,
  EyeIcon: Eye,
  EyeOff,
  EyeOffIcon: EyeOff,
  Facebook,
  FacebookIcon: Facebook,
  Factory,
  FactoryIcon: Factory,
  Fan,
  FanIcon: Fan,
  FastForward,
  FastForwardIcon: FastForward,
  Feather,
  FeatherIcon: Feather,
  Figma,
  FigmaIcon: Figma,
  File,
  FileArchive,
  FileArchiveIcon: FileArchive,
  FileAudio,
  FileAudio2,
  FileAudio2Icon: FileAudio2,
  FileAudioIcon: FileAudio,
  FileAxis3d,
  FileAxis3dIcon: FileAxis3d,
  FileBadge,
  FileBadge2,
  FileBadge2Icon: FileBadge2,
  FileBadgeIcon: FileBadge,
  FileBarChart,
  FileBarChart2,
  FileBarChart2Icon: FileBarChart2,
  FileBarChartIcon: FileBarChart,
  FileBox,
  FileBoxIcon: FileBox,
  FileCheck,
  FileCheck2,
  FileCheck2Icon: FileCheck2,
  FileCheckIcon: FileCheck,
  FileClock,
  FileClockIcon: FileClock,
  FileCode,
  FileCodeIcon: FileCode,
  FileCog,
  FileCog2,
  FileCog2Icon: FileCog2,
  FileCogIcon: FileCog,
  FileDiff,
  FileDiffIcon: FileDiff,
  FileDigit,
  FileDigitIcon: FileDigit,
  FileDown,
  FileDownIcon: FileDown,
  FileEdit,
  FileEditIcon: FileEdit,
  FileHeart,
  FileHeartIcon: FileHeart,
  FileIcon: File,
  FileImage,
  FileImageIcon: FileImage,
  FileInput,
  FileInputIcon: FileInput,
  FileJson,
  FileJson2,
  FileJson2Icon: FileJson2,
  FileJsonIcon: FileJson,
  FileKey,
  FileKey2,
  FileKey2Icon: FileKey2,
  FileKeyIcon: FileKey,
  FileLineChart,
  FileLineChartIcon: FileLineChart,
  FileLock,
  FileLock2,
  FileLock2Icon: FileLock2,
  FileLockIcon: FileLock,
  FileMinus,
  FileMinus2,
  FileMinus2Icon: FileMinus2,
  FileMinusIcon: FileMinus,
  FileOutput,
  FileOutputIcon: FileOutput,
  FilePieChart,
  FilePieChartIcon: FilePieChart,
  FilePlus,
  FilePlus2,
  FilePlus2Icon: FilePlus2,
  FilePlusIcon: FilePlus,
  FileQuestion,
  FileQuestionIcon: FileQuestion,
  FileScan,
  FileScanIcon: FileScan,
  FileSearch,
  FileSearch2,
  FileSearch2Icon: FileSearch2,
  FileSearchIcon: FileSearch,
  FileSignature,
  FileSignatureIcon: FileSignature,
  FileSpreadsheet,
  FileSpreadsheetIcon: FileSpreadsheet,
  FileSymlink,
  FileSymlinkIcon: FileSymlink,
  FileTerminal,
  FileTerminalIcon: FileTerminal,
  FileText,
  FileTextIcon: FileText,
  FileType,
  FileType2,
  FileType2Icon: FileType2,
  FileTypeIcon: FileType,
  FileUp,
  FileUpIcon: FileUp,
  FileVideo,
  FileVideo2,
  FileVideo2Icon: FileVideo2,
  FileVideoIcon: FileVideo,
  FileVolume,
  FileVolume2,
  FileVolume2Icon: FileVolume2,
  FileVolumeIcon: FileVolume,
  FileWarning,
  FileWarningIcon: FileWarning,
  FileX,
  FileX2,
  FileX2Icon: FileX2,
  FileXIcon: FileX,
  Files,
  FilesIcon: Files,
  Film,
  FilmIcon: Film,
  Filter: Filter2,
  FilterIcon: Filter2,
  FilterX,
  FilterXIcon: FilterX,
  Fingerprint,
  FingerprintIcon: Fingerprint,
  Fish,
  FishIcon: Fish,
  FishOff,
  FishOffIcon: FishOff,
  Flag,
  FlagIcon: Flag,
  FlagOff,
  FlagOffIcon: FlagOff,
  FlagTriangleLeft,
  FlagTriangleLeftIcon: FlagTriangleLeft,
  FlagTriangleRight,
  FlagTriangleRightIcon: FlagTriangleRight,
  Flame,
  FlameIcon: Flame,
  Flashlight,
  FlashlightIcon: Flashlight,
  FlashlightOff,
  FlashlightOffIcon: FlashlightOff,
  FlaskConical,
  FlaskConicalIcon: FlaskConical,
  FlaskConicalOff,
  FlaskConicalOffIcon: FlaskConicalOff,
  FlaskRound,
  FlaskRoundIcon: FlaskRound,
  FlipHorizontal,
  FlipHorizontal2,
  FlipHorizontal2Icon: FlipHorizontal2,
  FlipHorizontalIcon: FlipHorizontal,
  FlipVertical,
  FlipVertical2,
  FlipVertical2Icon: FlipVertical2,
  FlipVerticalIcon: FlipVertical,
  Flower,
  Flower2,
  Flower2Icon: Flower2,
  FlowerIcon: Flower,
  Focus,
  FocusIcon: Focus,
  Folder,
  FolderArchive,
  FolderArchiveIcon: FolderArchive,
  FolderCheck,
  FolderCheckIcon: FolderCheck,
  FolderClock,
  FolderClockIcon: FolderClock,
  FolderClosed,
  FolderClosedIcon: FolderClosed,
  FolderCog,
  FolderCog2,
  FolderCog2Icon: FolderCog2,
  FolderCogIcon: FolderCog,
  FolderDown,
  FolderDownIcon: FolderDown,
  FolderEdit,
  FolderEditIcon: FolderEdit,
  FolderHeart,
  FolderHeartIcon: FolderHeart,
  FolderIcon: Folder,
  FolderInput,
  FolderInputIcon: FolderInput,
  FolderKey,
  FolderKeyIcon: FolderKey,
  FolderLock,
  FolderLockIcon: FolderLock,
  FolderMinus,
  FolderMinusIcon: FolderMinus,
  FolderOpen,
  FolderOpenIcon: FolderOpen,
  FolderOutput,
  FolderOutputIcon: FolderOutput,
  FolderPlus,
  FolderPlusIcon: FolderPlus,
  FolderSearch,
  FolderSearch2,
  FolderSearch2Icon: FolderSearch2,
  FolderSearchIcon: FolderSearch,
  FolderSymlink,
  FolderSymlinkIcon: FolderSymlink,
  FolderTree,
  FolderTreeIcon: FolderTree,
  FolderUp,
  FolderUpIcon: FolderUp,
  FolderX,
  FolderXIcon: FolderX,
  Folders,
  FoldersIcon: Folders,
  Footprints,
  FootprintsIcon: Footprints,
  Forklift,
  ForkliftIcon: Forklift,
  FormInput,
  FormInputIcon: FormInput,
  Forward,
  ForwardIcon: Forward,
  Frame,
  FrameIcon: Frame,
  Framer,
  FramerIcon: Framer,
  Frown,
  FrownIcon: Frown,
  Fuel,
  FuelIcon: Fuel,
  FunctionSquare,
  FunctionSquareIcon: FunctionSquare,
  Gamepad,
  Gamepad2,
  Gamepad2Icon: Gamepad2,
  GamepadIcon: Gamepad,
  Gauge,
  GaugeIcon: Gauge,
  Gavel,
  GavelIcon: Gavel,
  Gem,
  GemIcon: Gem,
  Ghost,
  GhostIcon: Ghost,
  Gift,
  GiftIcon: Gift,
  GitBranch,
  GitBranchIcon: GitBranch,
  GitBranchPlus,
  GitBranchPlusIcon: GitBranchPlus,
  GitCommit,
  GitCommitIcon: GitCommit,
  GitCompare,
  GitCompareIcon: GitCompare,
  GitFork,
  GitForkIcon: GitFork,
  GitMerge,
  GitMergeIcon: GitMerge,
  GitPullRequest,
  GitPullRequestClosed,
  GitPullRequestClosedIcon: GitPullRequestClosed,
  GitPullRequestDraft,
  GitPullRequestDraftIcon: GitPullRequestDraft,
  GitPullRequestIcon: GitPullRequest,
  Github,
  GithubIcon: Github,
  Gitlab,
  GitlabIcon: Gitlab,
  GlassWater,
  GlassWaterIcon: GlassWater,
  Glasses,
  GlassesIcon: Glasses,
  Globe,
  Globe2,
  Globe2Icon: Globe2,
  GlobeIcon: Globe,
  Grab,
  GrabIcon: Grab,
  GraduationCap,
  GraduationCapIcon: GraduationCap,
  Grape,
  GrapeIcon: Grape,
  Grid,
  GridIcon: Grid,
  Grip,
  GripHorizontal,
  GripHorizontalIcon: GripHorizontal,
  GripIcon: Grip,
  GripVertical,
  GripVerticalIcon: GripVertical,
  Hammer,
  HammerIcon: Hammer,
  Hand,
  HandIcon: Hand,
  HandMetal,
  HandMetalIcon: HandMetal,
  HardDrive,
  HardDriveIcon: HardDrive,
  HardHat,
  HardHatIcon: HardHat,
  Hash,
  HashIcon: Hash,
  Haze,
  HazeIcon: Haze,
  Heading,
  Heading1,
  Heading1Icon: Heading1,
  Heading2,
  Heading2Icon: Heading2,
  Heading3,
  Heading3Icon: Heading3,
  Heading4,
  Heading4Icon: Heading4,
  Heading5,
  Heading5Icon: Heading5,
  Heading6,
  Heading6Icon: Heading6,
  HeadingIcon: Heading,
  Headphones,
  HeadphonesIcon: Headphones,
  Heart,
  HeartCrack,
  HeartCrackIcon: HeartCrack,
  HeartHandshake,
  HeartHandshakeIcon: HeartHandshake,
  HeartIcon: Heart,
  HeartOff,
  HeartOffIcon: HeartOff,
  HeartPulse,
  HeartPulseIcon: HeartPulse,
  HelpCircle,
  HelpCircleIcon: HelpCircle,
  HelpingHand,
  HelpingHandIcon: HelpingHand,
  Hexagon,
  HexagonIcon: Hexagon,
  Highlighter,
  HighlighterIcon: Highlighter,
  History: History2,
  HistoryIcon: History2,
  Home,
  HomeIcon: Home,
  Hop,
  HopIcon: Hop,
  HopOff,
  HopOffIcon: HopOff,
  Hourglass,
  HourglassIcon: Hourglass,
  IceCream,
  IceCream2,
  IceCream2Icon: IceCream2,
  IceCreamIcon: IceCream,
  Image,
  ImageIcon: Image,
  ImageMinus,
  ImageMinusIcon: ImageMinus,
  ImageOff,
  ImageOffIcon: ImageOff,
  ImagePlus,
  ImagePlusIcon: ImagePlus,
  Import: Import2,
  ImportIcon: Import2,
  Inbox,
  InboxIcon: Inbox,
  Indent,
  IndentIcon: Indent,
  IndianRupee,
  IndianRupeeIcon: IndianRupee,
  Infinity: Infinity$1,
  InfinityIcon: Infinity$1,
  Info,
  InfoIcon: Info,
  Inspect,
  InspectIcon: Inspect,
  Instagram,
  InstagramIcon: Instagram,
  Italic,
  ItalicIcon: Italic,
  JapaneseYen,
  JapaneseYenIcon: JapaneseYen,
  Joystick,
  JoystickIcon: Joystick,
  Key,
  KeyIcon: Key,
  Keyboard,
  KeyboardIcon: Keyboard,
  Lamp,
  LampCeiling,
  LampCeilingIcon: LampCeiling,
  LampDesk,
  LampDeskIcon: LampDesk,
  LampFloor,
  LampFloorIcon: LampFloor,
  LampIcon: Lamp,
  LampWallDown,
  LampWallDownIcon: LampWallDown,
  LampWallUp,
  LampWallUpIcon: LampWallUp,
  Landmark,
  LandmarkIcon: Landmark,
  Languages,
  LanguagesIcon: Languages,
  Laptop,
  Laptop2,
  Laptop2Icon: Laptop2,
  LaptopIcon: Laptop,
  Lasso,
  LassoIcon: Lasso,
  LassoSelect,
  LassoSelectIcon: LassoSelect,
  Laugh,
  LaughIcon: Laugh,
  Layers,
  LayersIcon: Layers,
  Layout: Layout2,
  LayoutDashboard,
  LayoutDashboardIcon: LayoutDashboard,
  LayoutGrid,
  LayoutGridIcon: LayoutGrid,
  LayoutIcon: Layout2,
  LayoutList,
  LayoutListIcon: LayoutList,
  LayoutTemplate,
  LayoutTemplateIcon: LayoutTemplate,
  Leaf,
  LeafIcon: Leaf,
  Library,
  LibraryIcon: Library,
  LifeBuoy,
  LifeBuoyIcon: LifeBuoy,
  Lightbulb,
  LightbulbIcon: Lightbulb,
  LightbulbOff,
  LightbulbOffIcon: LightbulbOff,
  LineChart,
  LineChartIcon: LineChart,
  Link,
  Link2,
  Link2Icon: Link2,
  Link2Off,
  Link2OffIcon: Link2Off,
  LinkIcon: Link,
  Linkedin,
  LinkedinIcon: Linkedin,
  List,
  ListChecks,
  ListChecksIcon: ListChecks,
  ListEnd,
  ListEndIcon: ListEnd,
  ListIcon: List,
  ListMinus,
  ListMinusIcon: ListMinus,
  ListMusic,
  ListMusicIcon: ListMusic,
  ListOrdered,
  ListOrderedIcon: ListOrdered,
  ListPlus,
  ListPlusIcon: ListPlus,
  ListStart,
  ListStartIcon: ListStart,
  ListVideo,
  ListVideoIcon: ListVideo,
  ListX,
  ListXIcon: ListX,
  Loader,
  Loader2,
  Loader2Icon: Loader2,
  LoaderIcon: Loader,
  Locate,
  LocateFixed,
  LocateFixedIcon: LocateFixed,
  LocateIcon: Locate,
  LocateOff,
  LocateOffIcon: LocateOff,
  Lock,
  LockIcon: Lock,
  LogIn,
  LogInIcon: LogIn,
  LogOut,
  LogOutIcon: LogOut,
  LucideAccessibility: Accessibility,
  LucideActivity: Activity,
  LucideAirVent: AirVent,
  LucideAirplay: Airplay,
  LucideAlarmCheck: AlarmCheck,
  LucideAlarmClock: AlarmClock,
  LucideAlarmClockOff: AlarmClockOff,
  LucideAlarmMinus: AlarmMinus,
  LucideAlarmPlus: AlarmPlus,
  LucideAlbum: Album,
  LucideAlertCircle: AlertCircle,
  LucideAlertOctagon: AlertOctagon,
  LucideAlertTriangle: AlertTriangle,
  LucideAlignCenter: AlignCenter,
  LucideAlignCenterHorizontal: AlignCenterHorizontal,
  LucideAlignCenterVertical: AlignCenterVertical,
  LucideAlignEndHorizontal: AlignEndHorizontal,
  LucideAlignEndVertical: AlignEndVertical,
  LucideAlignHorizontalDistributeCenter: AlignHorizontalDistributeCenter,
  LucideAlignHorizontalDistributeEnd: AlignHorizontalDistributeEnd,
  LucideAlignHorizontalDistributeStart: AlignHorizontalDistributeStart,
  LucideAlignHorizontalJustifyCenter: AlignHorizontalJustifyCenter,
  LucideAlignHorizontalJustifyEnd: AlignHorizontalJustifyEnd,
  LucideAlignHorizontalJustifyStart: AlignHorizontalJustifyStart,
  LucideAlignHorizontalSpaceAround: AlignHorizontalSpaceAround,
  LucideAlignHorizontalSpaceBetween: AlignHorizontalSpaceBetween,
  LucideAlignJustify: AlignJustify,
  LucideAlignLeft: AlignLeft,
  LucideAlignRight: AlignRight,
  LucideAlignStartHorizontal: AlignStartHorizontal,
  LucideAlignStartVertical: AlignStartVertical,
  LucideAlignVerticalDistributeCenter: AlignVerticalDistributeCenter,
  LucideAlignVerticalDistributeEnd: AlignVerticalDistributeEnd,
  LucideAlignVerticalDistributeStart: AlignVerticalDistributeStart,
  LucideAlignVerticalJustifyCenter: AlignVerticalJustifyCenter,
  LucideAlignVerticalJustifyEnd: AlignVerticalJustifyEnd,
  LucideAlignVerticalJustifyStart: AlignVerticalJustifyStart,
  LucideAlignVerticalSpaceAround: AlignVerticalSpaceAround,
  LucideAlignVerticalSpaceBetween: AlignVerticalSpaceBetween,
  LucideAnchor: Anchor,
  LucideAngry: Angry,
  LucideAnnoyed: Annoyed,
  LucideAperture: Aperture,
  LucideApple: Apple,
  LucideArchive: Archive,
  LucideArchiveRestore: ArchiveRestore,
  LucideArmchair: Armchair,
  LucideArrowBigDown: ArrowBigDown,
  LucideArrowBigLeft: ArrowBigLeft,
  LucideArrowBigRight: ArrowBigRight,
  LucideArrowBigUp: ArrowBigUp,
  LucideArrowDown: ArrowDown,
  LucideArrowDownCircle: ArrowDownCircle,
  LucideArrowDownLeft: ArrowDownLeft,
  LucideArrowDownRight: ArrowDownRight,
  LucideArrowLeft: ArrowLeft,
  LucideArrowLeftCircle: ArrowLeftCircle,
  LucideArrowLeftRight: ArrowLeftRight,
  LucideArrowRight: ArrowRight,
  LucideArrowRightCircle: ArrowRightCircle,
  LucideArrowUp: ArrowUp,
  LucideArrowUpCircle: ArrowUpCircle,
  LucideArrowUpDown: ArrowUpDown,
  LucideArrowUpLeft: ArrowUpLeft,
  LucideArrowUpRight: ArrowUpRight,
  LucideAsterisk: Asterisk,
  LucideAtSign: AtSign,
  LucideAward: Award,
  LucideAxe: Axe,
  LucideAxis3d: Axis3d,
  LucideBaby: Baby,
  LucideBackpack: Backpack,
  LucideBaggageClaim: BaggageClaim,
  LucideBanana: Banana,
  LucideBanknote: Banknote,
  LucideBarChart: BarChart,
  LucideBarChart2: BarChart2,
  LucideBarChart3: BarChart3,
  LucideBarChart4: BarChart4,
  LucideBarChartHorizontal: BarChartHorizontal,
  LucideBaseline: Baseline,
  LucideBath: Bath,
  LucideBattery: Battery,
  LucideBatteryCharging: BatteryCharging,
  LucideBatteryFull: BatteryFull,
  LucideBatteryLow: BatteryLow,
  LucideBatteryMedium: BatteryMedium,
  LucideBatteryWarning: BatteryWarning,
  LucideBeaker: Beaker,
  LucideBean: Bean,
  LucideBeanOff: BeanOff,
  LucideBed: Bed,
  LucideBedDouble: BedDouble,
  LucideBedSingle: BedSingle,
  LucideBeef: Beef,
  LucideBeer: Beer,
  LucideBell: Bell,
  LucideBellMinus: BellMinus,
  LucideBellOff: BellOff,
  LucideBellPlus: BellPlus,
  LucideBellRing: BellRing,
  LucideBike: Bike,
  LucideBinary: Binary,
  LucideBird: Bird,
  LucideBitcoin: Bitcoin,
  LucideBlinds: Blinds,
  LucideBluetooth: Bluetooth,
  LucideBluetoothConnected: BluetoothConnected,
  LucideBluetoothOff: BluetoothOff,
  LucideBluetoothSearching: BluetoothSearching,
  LucideBold: Bold,
  LucideBomb: Bomb,
  LucideBone: Bone,
  LucideBook: Book,
  LucideBookOpen: BookOpen,
  LucideBookOpenCheck: BookOpenCheck,
  LucideBookmark: Bookmark,
  LucideBookmarkMinus: BookmarkMinus,
  LucideBookmarkPlus: BookmarkPlus,
  LucideBot: Bot,
  LucideBox: Box,
  LucideBoxSelect: BoxSelect,
  LucideBoxes: Boxes,
  LucideBrain: Brain,
  LucideBrainCircuit: BrainCircuit,
  LucideBrainCog: BrainCog,
  LucideBriefcase: Briefcase,
  LucideBrush: Brush,
  LucideBug: Bug,
  LucideBuilding: Building,
  LucideBuilding2: Building2,
  LucideBus: Bus,
  LucideCake: Cake,
  LucideCalculator: Calculator,
  LucideCalendar: Calendar,
  LucideCalendarCheck: CalendarCheck,
  LucideCalendarCheck2: CalendarCheck2,
  LucideCalendarClock: CalendarClock,
  LucideCalendarDays: CalendarDays,
  LucideCalendarHeart: CalendarHeart,
  LucideCalendarMinus: CalendarMinus,
  LucideCalendarOff: CalendarOff,
  LucideCalendarPlus: CalendarPlus,
  LucideCalendarRange: CalendarRange,
  LucideCalendarSearch: CalendarSearch,
  LucideCalendarX: CalendarX,
  LucideCalendarX2: CalendarX2,
  LucideCamera: Camera,
  LucideCameraOff: CameraOff,
  LucideCandy: Candy,
  LucideCandyOff: CandyOff,
  LucideCar: Car,
  LucideCarrot: Carrot,
  LucideCast: Cast,
  LucideCat: Cat,
  LucideCheck: Check,
  LucideCheckCheck: CheckCheck,
  LucideCheckCircle: CheckCircle,
  LucideCheckCircle2: CheckCircle2,
  LucideCheckSquare: CheckSquare,
  LucideChefHat: ChefHat,
  LucideCherry: Cherry,
  LucideChevronDown: ChevronDown,
  LucideChevronFirst: ChevronFirst,
  LucideChevronLast: ChevronLast,
  LucideChevronLeft: ChevronLeft,
  LucideChevronRight: ChevronRight,
  LucideChevronUp: ChevronUp,
  LucideChevronsDown: ChevronsDown,
  LucideChevronsDownUp: ChevronsDownUp,
  LucideChevronsLeft: ChevronsLeft,
  LucideChevronsLeftRight: ChevronsLeftRight,
  LucideChevronsRight: ChevronsRight,
  LucideChevronsRightLeft: ChevronsRightLeft,
  LucideChevronsUp: ChevronsUp,
  LucideChevronsUpDown: ChevronsUpDown,
  LucideChrome: Chrome,
  LucideCigarette: Cigarette,
  LucideCigaretteOff: CigaretteOff,
  LucideCircle: Circle,
  LucideCircleDot: CircleDot,
  LucideCircleEllipsis: CircleEllipsis,
  LucideCircleSlashed: CircleSlashed,
  LucideCitrus: Citrus,
  LucideClapperboard: Clapperboard,
  LucideClipboard: Clipboard2,
  LucideClipboardCheck: ClipboardCheck,
  LucideClipboardCopy: ClipboardCopy,
  LucideClipboardEdit: ClipboardEdit,
  LucideClipboardList: ClipboardList,
  LucideClipboardSignature: ClipboardSignature,
  LucideClipboardType: ClipboardType,
  LucideClipboardX: ClipboardX,
  LucideClock: Clock,
  LucideClock1: Clock1,
  LucideClock10: Clock10,
  LucideClock11: Clock11,
  LucideClock12: Clock12,
  LucideClock2: Clock2,
  LucideClock3: Clock3,
  LucideClock4: Clock4,
  LucideClock5: Clock5,
  LucideClock6: Clock6,
  LucideClock7: Clock7,
  LucideClock8: Clock8,
  LucideClock9: Clock9,
  LucideCloud: Cloud,
  LucideCloudCog: CloudCog,
  LucideCloudDrizzle: CloudDrizzle,
  LucideCloudFog: CloudFog,
  LucideCloudHail: CloudHail,
  LucideCloudLightning: CloudLightning,
  LucideCloudMoon: CloudMoon,
  LucideCloudMoonRain: CloudMoonRain,
  LucideCloudOff: CloudOff,
  LucideCloudRain: CloudRain,
  LucideCloudRainWind: CloudRainWind,
  LucideCloudSnow: CloudSnow,
  LucideCloudSun: CloudSun,
  LucideCloudSunRain: CloudSunRain,
  LucideCloudy: Cloudy,
  LucideClover: Clover,
  LucideCode: Code,
  LucideCode2: Code2,
  LucideCodepen: Codepen,
  LucideCodesandbox: Codesandbox,
  LucideCoffee: Coffee,
  LucideCog: Cog,
  LucideCoins: Coins,
  LucideColumns: Columns,
  LucideCommand: Command,
  LucideCompass: Compass,
  LucideComponent: Component,
  LucideConciergeBell: ConciergeBell,
  LucideConstruction: Construction,
  LucideContact: Contact,
  LucideContrast: Contrast,
  LucideCookie: Cookie,
  LucideCopy: Copy,
  LucideCopyleft: Copyleft,
  LucideCopyright: Copyright,
  LucideCornerDownLeft: CornerDownLeft,
  LucideCornerDownRight: CornerDownRight,
  LucideCornerLeftDown: CornerLeftDown,
  LucideCornerLeftUp: CornerLeftUp,
  LucideCornerRightDown: CornerRightDown,
  LucideCornerRightUp: CornerRightUp,
  LucideCornerUpLeft: CornerUpLeft,
  LucideCornerUpRight: CornerUpRight,
  LucideCpu: Cpu,
  LucideCreativeCommons: CreativeCommons,
  LucideCreditCard: CreditCard,
  LucideCroissant: Croissant,
  LucideCrop: Crop,
  LucideCross: Cross,
  LucideCrosshair: Crosshair,
  LucideCrown: Crown,
  LucideCupSoda: CupSoda,
  LucideCurlyBraces: CurlyBraces,
  LucideCurrency: Currency,
  LucideDatabase: Database,
  LucideDatabaseBackup: DatabaseBackup,
  LucideDelete: Delete,
  LucideDiamond: Diamond,
  LucideDice1: Dice1,
  LucideDice2: Dice2,
  LucideDice3: Dice3,
  LucideDice4: Dice4,
  LucideDice5: Dice5,
  LucideDice6: Dice6,
  LucideDices: Dices,
  LucideDiff: Diff,
  LucideDisc: Disc,
  LucideDivide: Divide,
  LucideDivideCircle: DivideCircle,
  LucideDivideSquare: DivideSquare,
  LucideDna: Dna,
  LucideDnaOff: DnaOff,
  LucideDog: Dog,
  LucideDollarSign: DollarSign,
  LucideDownload: Download2,
  LucideDownloadCloud: DownloadCloud,
  LucideDribbble: Dribbble,
  LucideDroplet: Droplet,
  LucideDroplets: Droplets,
  LucideDrumstick: Drumstick,
  LucideDumbbell: Dumbbell,
  LucideEar: Ear,
  LucideEarOff: EarOff,
  LucideEdit: Edit4,
  LucideEdit2: Edit2,
  LucideEdit3: Edit3,
  LucideEgg: Egg,
  LucideEggFried: EggFried,
  LucideEggOff: EggOff,
  LucideEqual: Equal,
  LucideEqualNot: EqualNot,
  LucideEraser: Eraser,
  LucideEuro: Euro,
  LucideExpand: Expand,
  LucideExternalLink: ExternalLink,
  LucideEye: Eye,
  LucideEyeOff: EyeOff,
  LucideFacebook: Facebook,
  LucideFactory: Factory,
  LucideFan: Fan,
  LucideFastForward: FastForward,
  LucideFeather: Feather,
  LucideFigma: Figma,
  LucideFile: File,
  LucideFileArchive: FileArchive,
  LucideFileAudio: FileAudio,
  LucideFileAudio2: FileAudio2,
  LucideFileAxis3d: FileAxis3d,
  LucideFileBadge: FileBadge,
  LucideFileBadge2: FileBadge2,
  LucideFileBarChart: FileBarChart,
  LucideFileBarChart2: FileBarChart2,
  LucideFileBox: FileBox,
  LucideFileCheck: FileCheck,
  LucideFileCheck2: FileCheck2,
  LucideFileClock: FileClock,
  LucideFileCode: FileCode,
  LucideFileCog: FileCog,
  LucideFileCog2: FileCog2,
  LucideFileDiff: FileDiff,
  LucideFileDigit: FileDigit,
  LucideFileDown: FileDown,
  LucideFileEdit: FileEdit,
  LucideFileHeart: FileHeart,
  LucideFileImage: FileImage,
  LucideFileInput: FileInput,
  LucideFileJson: FileJson,
  LucideFileJson2: FileJson2,
  LucideFileKey: FileKey,
  LucideFileKey2: FileKey2,
  LucideFileLineChart: FileLineChart,
  LucideFileLock: FileLock,
  LucideFileLock2: FileLock2,
  LucideFileMinus: FileMinus,
  LucideFileMinus2: FileMinus2,
  LucideFileOutput: FileOutput,
  LucideFilePieChart: FilePieChart,
  LucideFilePlus: FilePlus,
  LucideFilePlus2: FilePlus2,
  LucideFileQuestion: FileQuestion,
  LucideFileScan: FileScan,
  LucideFileSearch: FileSearch,
  LucideFileSearch2: FileSearch2,
  LucideFileSignature: FileSignature,
  LucideFileSpreadsheet: FileSpreadsheet,
  LucideFileSymlink: FileSymlink,
  LucideFileTerminal: FileTerminal,
  LucideFileText: FileText,
  LucideFileType: FileType,
  LucideFileType2: FileType2,
  LucideFileUp: FileUp,
  LucideFileVideo: FileVideo,
  LucideFileVideo2: FileVideo2,
  LucideFileVolume: FileVolume,
  LucideFileVolume2: FileVolume2,
  LucideFileWarning: FileWarning,
  LucideFileX: FileX,
  LucideFileX2: FileX2,
  LucideFiles: Files,
  LucideFilm: Film,
  LucideFilter: Filter2,
  LucideFilterX: FilterX,
  LucideFingerprint: Fingerprint,
  LucideFish: Fish,
  LucideFishOff: FishOff,
  LucideFlag: Flag,
  LucideFlagOff: FlagOff,
  LucideFlagTriangleLeft: FlagTriangleLeft,
  LucideFlagTriangleRight: FlagTriangleRight,
  LucideFlame: Flame,
  LucideFlashlight: Flashlight,
  LucideFlashlightOff: FlashlightOff,
  LucideFlaskConical: FlaskConical,
  LucideFlaskConicalOff: FlaskConicalOff,
  LucideFlaskRound: FlaskRound,
  LucideFlipHorizontal: FlipHorizontal,
  LucideFlipHorizontal2: FlipHorizontal2,
  LucideFlipVertical: FlipVertical,
  LucideFlipVertical2: FlipVertical2,
  LucideFlower: Flower,
  LucideFlower2: Flower2,
  LucideFocus: Focus,
  LucideFolder: Folder,
  LucideFolderArchive: FolderArchive,
  LucideFolderCheck: FolderCheck,
  LucideFolderClock: FolderClock,
  LucideFolderClosed: FolderClosed,
  LucideFolderCog: FolderCog,
  LucideFolderCog2: FolderCog2,
  LucideFolderDown: FolderDown,
  LucideFolderEdit: FolderEdit,
  LucideFolderHeart: FolderHeart,
  LucideFolderInput: FolderInput,
  LucideFolderKey: FolderKey,
  LucideFolderLock: FolderLock,
  LucideFolderMinus: FolderMinus,
  LucideFolderOpen: FolderOpen,
  LucideFolderOutput: FolderOutput,
  LucideFolderPlus: FolderPlus,
  LucideFolderSearch: FolderSearch,
  LucideFolderSearch2: FolderSearch2,
  LucideFolderSymlink: FolderSymlink,
  LucideFolderTree: FolderTree,
  LucideFolderUp: FolderUp,
  LucideFolderX: FolderX,
  LucideFolders: Folders,
  LucideFootprints: Footprints,
  LucideForklift: Forklift,
  LucideFormInput: FormInput,
  LucideForward: Forward,
  LucideFrame: Frame,
  LucideFramer: Framer,
  LucideFrown: Frown,
  LucideFuel: Fuel,
  LucideFunctionSquare: FunctionSquare,
  LucideGamepad: Gamepad,
  LucideGamepad2: Gamepad2,
  LucideGauge: Gauge,
  LucideGavel: Gavel,
  LucideGem: Gem,
  LucideGhost: Ghost,
  LucideGift: Gift,
  LucideGitBranch: GitBranch,
  LucideGitBranchPlus: GitBranchPlus,
  LucideGitCommit: GitCommit,
  LucideGitCompare: GitCompare,
  LucideGitFork: GitFork,
  LucideGitMerge: GitMerge,
  LucideGitPullRequest: GitPullRequest,
  LucideGitPullRequestClosed: GitPullRequestClosed,
  LucideGitPullRequestDraft: GitPullRequestDraft,
  LucideGithub: Github,
  LucideGitlab: Gitlab,
  LucideGlassWater: GlassWater,
  LucideGlasses: Glasses,
  LucideGlobe: Globe,
  LucideGlobe2: Globe2,
  LucideGrab: Grab,
  LucideGraduationCap: GraduationCap,
  LucideGrape: Grape,
  LucideGrid: Grid,
  LucideGrip: Grip,
  LucideGripHorizontal: GripHorizontal,
  LucideGripVertical: GripVertical,
  LucideHammer: Hammer,
  LucideHand: Hand,
  LucideHandMetal: HandMetal,
  LucideHardDrive: HardDrive,
  LucideHardHat: HardHat,
  LucideHash: Hash,
  LucideHaze: Haze,
  LucideHeading: Heading,
  LucideHeading1: Heading1,
  LucideHeading2: Heading2,
  LucideHeading3: Heading3,
  LucideHeading4: Heading4,
  LucideHeading5: Heading5,
  LucideHeading6: Heading6,
  LucideHeadphones: Headphones,
  LucideHeart: Heart,
  LucideHeartCrack: HeartCrack,
  LucideHeartHandshake: HeartHandshake,
  LucideHeartOff: HeartOff,
  LucideHeartPulse: HeartPulse,
  LucideHelpCircle: HelpCircle,
  LucideHelpingHand: HelpingHand,
  LucideHexagon: Hexagon,
  LucideHighlighter: Highlighter,
  LucideHistory: History2,
  LucideHome: Home,
  LucideHop: Hop,
  LucideHopOff: HopOff,
  LucideHourglass: Hourglass,
  LucideIceCream: IceCream,
  LucideIceCream2: IceCream2,
  LucideImage: Image,
  LucideImageMinus: ImageMinus,
  LucideImageOff: ImageOff,
  LucideImagePlus: ImagePlus,
  LucideImport: Import2,
  LucideInbox: Inbox,
  LucideIndent: Indent,
  LucideIndianRupee: IndianRupee,
  LucideInfinity: Infinity$1,
  LucideInfo: Info,
  LucideInspect: Inspect,
  LucideInstagram: Instagram,
  LucideItalic: Italic,
  LucideJapaneseYen: JapaneseYen,
  LucideJoystick: Joystick,
  LucideKey: Key,
  LucideKeyboard: Keyboard,
  LucideLamp: Lamp,
  LucideLampCeiling: LampCeiling,
  LucideLampDesk: LampDesk,
  LucideLampFloor: LampFloor,
  LucideLampWallDown: LampWallDown,
  LucideLampWallUp: LampWallUp,
  LucideLandmark: Landmark,
  LucideLanguages: Languages,
  LucideLaptop: Laptop,
  LucideLaptop2: Laptop2,
  LucideLasso: Lasso,
  LucideLassoSelect: LassoSelect,
  LucideLaugh: Laugh,
  LucideLayers: Layers,
  LucideLayout: Layout2,
  LucideLayoutDashboard: LayoutDashboard,
  LucideLayoutGrid: LayoutGrid,
  LucideLayoutList: LayoutList,
  LucideLayoutTemplate: LayoutTemplate,
  LucideLeaf: Leaf,
  LucideLibrary: Library,
  LucideLifeBuoy: LifeBuoy,
  LucideLightbulb: Lightbulb,
  LucideLightbulbOff: LightbulbOff,
  LucideLineChart: LineChart,
  LucideLink: Link,
  LucideLink2: Link2,
  LucideLink2Off: Link2Off,
  LucideLinkedin: Linkedin,
  LucideList: List,
  LucideListChecks: ListChecks,
  LucideListEnd: ListEnd,
  LucideListMinus: ListMinus,
  LucideListMusic: ListMusic,
  LucideListOrdered: ListOrdered,
  LucideListPlus: ListPlus,
  LucideListStart: ListStart,
  LucideListVideo: ListVideo,
  LucideListX: ListX,
  LucideLoader: Loader,
  LucideLoader2: Loader2,
  LucideLocate: Locate,
  LucideLocateFixed: LocateFixed,
  LucideLocateOff: LocateOff,
  LucideLock: Lock,
  LucideLogIn: LogIn,
  LucideLogOut: LogOut,
  LucideLuggage: Luggage,
  LucideMagnet: Magnet,
  LucideMail: Mail,
  LucideMailCheck: MailCheck,
  LucideMailMinus: MailMinus,
  LucideMailOpen: MailOpen,
  LucideMailPlus: MailPlus,
  LucideMailQuestion: MailQuestion,
  LucideMailSearch: MailSearch,
  LucideMailWarning: MailWarning,
  LucideMailX: MailX,
  LucideMails: Mails,
  LucideMap: Map$1,
  LucideMapPin: MapPin,
  LucideMapPinOff: MapPinOff,
  LucideMartini: Martini,
  LucideMaximize: Maximize,
  LucideMaximize2: Maximize2,
  LucideMedal: Medal,
  LucideMegaphone: Megaphone,
  LucideMegaphoneOff: MegaphoneOff,
  LucideMeh: Meh,
  LucideMenu: Menu2,
  LucideMessageCircle: MessageCircle,
  LucideMessageSquare: MessageSquare,
  LucideMic: Mic,
  LucideMic2: Mic2,
  LucideMicOff: MicOff,
  LucideMicroscope: Microscope,
  LucideMicrowave: Microwave,
  LucideMilestone: Milestone,
  LucideMilk: Milk,
  LucideMilkOff: MilkOff,
  LucideMinimize: Minimize,
  LucideMinimize2: Minimize2,
  LucideMinus: Minus,
  LucideMinusCircle: MinusCircle,
  LucideMinusSquare: MinusSquare,
  LucideMonitor: Monitor,
  LucideMonitorOff: MonitorOff,
  LucideMonitorSmartphone: MonitorSmartphone,
  LucideMonitorSpeaker: MonitorSpeaker,
  LucideMoon: Moon,
  LucideMoreHorizontal: MoreHorizontal,
  LucideMoreVertical: MoreVertical,
  LucideMountain: Mountain,
  LucideMountainSnow: MountainSnow,
  LucideMouse: Mouse,
  LucideMousePointer: MousePointer,
  LucideMousePointer2: MousePointer2,
  LucideMousePointerClick: MousePointerClick,
  LucideMove: Move,
  LucideMove3d: Move3d,
  LucideMoveDiagonal: MoveDiagonal,
  LucideMoveDiagonal2: MoveDiagonal2,
  LucideMoveHorizontal: MoveHorizontal,
  LucideMoveVertical: MoveVertical,
  LucideMusic: Music,
  LucideMusic2: Music2,
  LucideMusic3: Music3,
  LucideMusic4: Music4,
  LucideNavigation: Navigation,
  LucideNavigation2: Navigation2,
  LucideNavigation2Off: Navigation2Off,
  LucideNavigationOff: NavigationOff,
  LucideNetwork: Network,
  LucideNewspaper: Newspaper,
  LucideNfc: Nfc,
  LucideNut: Nut,
  LucideNutOff: NutOff,
  LucideOctagon: Octagon,
  LucideOption: Option,
  LucideOutdent: Outdent,
  LucidePackage: Package,
  LucidePackage2: Package2,
  LucidePackageCheck: PackageCheck,
  LucidePackageMinus: PackageMinus,
  LucidePackageOpen: PackageOpen,
  LucidePackagePlus: PackagePlus,
  LucidePackageSearch: PackageSearch,
  LucidePackageX: PackageX,
  LucidePaintBucket: PaintBucket,
  LucidePaintbrush: Paintbrush,
  LucidePaintbrush2: Paintbrush2,
  LucidePalette: Palette,
  LucidePalmtree: Palmtree,
  LucidePaperclip: Paperclip,
  LucidePartyPopper: PartyPopper,
  LucidePause: Pause,
  LucidePauseCircle: PauseCircle,
  LucidePauseOctagon: PauseOctagon,
  LucidePenTool: PenTool,
  LucidePencil: Pencil,
  LucidePercent: Percent,
  LucidePersonStanding: PersonStanding,
  LucidePhone: Phone,
  LucidePhoneCall: PhoneCall,
  LucidePhoneForwarded: PhoneForwarded,
  LucidePhoneIncoming: PhoneIncoming,
  LucidePhoneMissed: PhoneMissed,
  LucidePhoneOff: PhoneOff,
  LucidePhoneOutgoing: PhoneOutgoing,
  LucidePictureInPicture: PictureInPicture,
  LucidePictureInPicture2: PictureInPicture2,
  LucidePieChart: PieChart,
  LucidePiggyBank: PiggyBank,
  LucidePilcrow: Pilcrow,
  LucidePill: Pill,
  LucidePin: Pin,
  LucidePinOff: PinOff,
  LucidePipette: Pipette,
  LucidePizza: Pizza,
  LucidePlane: Plane,
  LucidePlay: Play,
  LucidePlayCircle: PlayCircle,
  LucidePlug: Plug,
  LucidePlug2: Plug2,
  LucidePlugZap: PlugZap,
  LucidePlus: Plus,
  LucidePlusCircle: PlusCircle,
  LucidePlusSquare: PlusSquare,
  LucidePocket: Pocket,
  LucidePodcast: Podcast,
  LucidePointer: Pointer,
  LucidePoundSterling: PoundSterling,
  LucidePower: Power,
  LucidePowerOff: PowerOff,
  LucidePrinter: Printer,
  LucidePuzzle: Puzzle,
  LucideQrCode: QrCode,
  LucideQuote: Quote,
  LucideRadio: Radio,
  LucideRadioReceiver: RadioReceiver,
  LucideRectangleHorizontal: RectangleHorizontal,
  LucideRectangleVertical: RectangleVertical,
  LucideRecycle: Recycle,
  LucideRedo: Redo,
  LucideRedo2: Redo2,
  LucideRefreshCcw: RefreshCcw,
  LucideRefreshCw: RefreshCw,
  LucideRefrigerator: Refrigerator,
  LucideRegex: Regex,
  LucideRemoveFormatting: RemoveFormatting,
  LucideRepeat: Repeat,
  LucideRepeat1: Repeat1,
  LucideReply: Reply,
  LucideReplyAll: ReplyAll,
  LucideRewind: Rewind,
  LucideRocket: Rocket,
  LucideRockingChair: RockingChair,
  LucideRotate3d: Rotate3d,
  LucideRotateCcw: RotateCcw,
  LucideRotateCw: RotateCw,
  LucideRouter: Router,
  LucideRss: Rss,
  LucideRuler: Ruler,
  LucideRussianRuble: RussianRuble,
  LucideSailboat: Sailboat,
  LucideSalad: Salad,
  LucideSandwich: Sandwich,
  LucideSave: Save,
  LucideScale: Scale,
  LucideScale3d: Scale3d,
  LucideScaling: Scaling,
  LucideScan: Scan,
  LucideScanFace: ScanFace,
  LucideScanLine: ScanLine,
  LucideScissors: Scissors,
  LucideScreenShare: ScreenShare,
  LucideScreenShareOff: ScreenShareOff,
  LucideScroll: Scroll,
  LucideSearch: Search,
  LucideSend: Send,
  LucideSeparatorHorizontal: SeparatorHorizontal,
  LucideSeparatorVertical: SeparatorVertical,
  LucideServer: Server,
  LucideServerCog: ServerCog,
  LucideServerCrash: ServerCrash,
  LucideServerOff: ServerOff,
  LucideSettings: Settings,
  LucideSettings2: Settings2,
  LucideShare: Share,
  LucideShare2: Share2,
  LucideSheet: Sheet,
  LucideShield: Shield,
  LucideShieldAlert: ShieldAlert,
  LucideShieldCheck: ShieldCheck,
  LucideShieldClose: ShieldClose,
  LucideShieldOff: ShieldOff,
  LucideShip: Ship,
  LucideShirt: Shirt,
  LucideShoppingBag: ShoppingBag,
  LucideShoppingCart: ShoppingCart,
  LucideShovel: Shovel,
  LucideShowerHead: ShowerHead,
  LucideShrink: Shrink,
  LucideShrub: Shrub,
  LucideShuffle: Shuffle,
  LucideSidebar: Sidebar,
  LucideSidebarClose: SidebarClose,
  LucideSidebarOpen: SidebarOpen,
  LucideSigma: Sigma,
  LucideSignal: Signal,
  LucideSignalHigh: SignalHigh,
  LucideSignalLow: SignalLow,
  LucideSignalMedium: SignalMedium,
  LucideSignalZero: SignalZero,
  LucideSiren: Siren,
  LucideSkipBack: SkipBack,
  LucideSkipForward: SkipForward,
  LucideSkull: Skull,
  LucideSlack: Slack,
  LucideSlash: Slash,
  LucideSlice: Slice,
  LucideSliders: Sliders,
  LucideSlidersHorizontal: SlidersHorizontal,
  LucideSmartphone: Smartphone,
  LucideSmartphoneCharging: SmartphoneCharging,
  LucideSmartphoneNfc: SmartphoneNfc,
  LucideSmile: Smile,
  LucideSmilePlus: SmilePlus,
  LucideSnowflake: Snowflake,
  LucideSofa: Sofa,
  LucideSortAsc: SortAsc,
  LucideSortDesc: SortDesc,
  LucideSoup: Soup,
  LucideSpeaker: Speaker,
  LucideSpline: Spline,
  LucideSplitSquareHorizontal: SplitSquareHorizontal,
  LucideSplitSquareVertical: SplitSquareVertical,
  LucideSprout: Sprout,
  LucideSquare: Square,
  LucideStamp: Stamp,
  LucideStar: Star,
  LucideStarHalf: StarHalf,
  LucideStarOff: StarOff,
  LucideStethoscope: Stethoscope,
  LucideSticker: Sticker,
  LucideStickyNote: StickyNote,
  LucideStopCircle: StopCircle,
  LucideStretchHorizontal: StretchHorizontal,
  LucideStretchVertical: StretchVertical,
  LucideStrikethrough: Strikethrough,
  LucideSubscript: Subscript,
  LucideSubtitles: Subtitles,
  LucideSun: Sun,
  LucideSunDim: SunDim,
  LucideSunMedium: SunMedium,
  LucideSunMoon: SunMoon,
  LucideSunSnow: SunSnow,
  LucideSunrise: Sunrise,
  LucideSunset: Sunset,
  LucideSuperscript: Superscript,
  LucideSwissFranc: SwissFranc,
  LucideSwitchCamera: SwitchCamera,
  LucideSword: Sword,
  LucideSwords: Swords,
  LucideSyringe: Syringe,
  LucideTable: Table,
  LucideTable2: Table2,
  LucideTablet: Tablet,
  LucideTablets: Tablets,
  LucideTag: Tag,
  LucideTags: Tags,
  LucideTarget: Target,
  LucideTent: Tent,
  LucideTerminal: Terminal,
  LucideTerminalSquare: TerminalSquare,
  LucideTextCursor: TextCursor,
  LucideTextCursorInput: TextCursorInput,
  LucideThermometer: Thermometer,
  LucideThermometerSnowflake: ThermometerSnowflake,
  LucideThermometerSun: ThermometerSun,
  LucideThumbsDown: ThumbsDown,
  LucideThumbsUp: ThumbsUp,
  LucideTicket: Ticket,
  LucideTimer: Timer,
  LucideTimerOff: TimerOff,
  LucideTimerReset: TimerReset,
  LucideToggleLeft: ToggleLeft,
  LucideToggleRight: ToggleRight,
  LucideTornado: Tornado,
  LucideTowerControl: TowerControl,
  LucideToyBrick: ToyBrick,
  LucideTrain: Train,
  LucideTrash: Trash,
  LucideTrash2: Trash2,
  LucideTreeDeciduous: TreeDeciduous,
  LucideTreePine: TreePine,
  LucideTrees: Trees,
  LucideTrello: Trello,
  LucideTrendingDown: TrendingDown,
  LucideTrendingUp: TrendingUp,
  LucideTriangle: Triangle,
  LucideTrophy: Trophy,
  LucideTruck: Truck,
  LucideTv: Tv,
  LucideTv2: Tv2,
  LucideTwitch: Twitch,
  LucideTwitter: Twitter,
  LucideType: Type,
  LucideUmbrella: Umbrella,
  LucideUnderline: Underline,
  LucideUndo: Undo,
  LucideUndo2: Undo2,
  LucideUnlink: Unlink,
  LucideUnlink2: Unlink2,
  LucideUnlock: Unlock,
  LucideUpload: Upload,
  LucideUploadCloud: UploadCloud,
  LucideUsb: Usb,
  LucideUser: User,
  LucideUserCheck: UserCheck,
  LucideUserCog: UserCog,
  LucideUserMinus: UserMinus,
  LucideUserPlus: UserPlus,
  LucideUserX: UserX,
  LucideUsers: Users,
  LucideUtensils: Utensils,
  LucideUtensilsCrossed: UtensilsCrossed,
  LucideUtilityPole: UtilityPole,
  LucideVegan: Vegan,
  LucideVenetianMask: VenetianMask,
  LucideVerified: Verified,
  LucideVibrate: Vibrate,
  LucideVibrateOff: VibrateOff,
  LucideVideo: Video,
  LucideVideoOff: VideoOff,
  LucideView: View,
  LucideVoicemail: Voicemail,
  LucideVolume: Volume,
  LucideVolume1: Volume1,
  LucideVolume2: Volume2,
  LucideVolumeX: VolumeX,
  LucideVote: Vote,
  LucideWallet: Wallet,
  LucideWand: Wand,
  LucideWand2: Wand2,
  LucideWatch: Watch,
  LucideWaves: Waves,
  LucideWebcam: Webcam,
  LucideWebhook: Webhook,
  LucideWheat: Wheat,
  LucideWheatOff: WheatOff,
  LucideWifi: Wifi,
  LucideWifiOff: WifiOff,
  LucideWind: Wind,
  LucideWine: Wine,
  LucideWineOff: WineOff,
  LucideWrapText: WrapText,
  LucideWrench: Wrench,
  LucideX: X,
  LucideXCircle: XCircle,
  LucideXOctagon: XOctagon,
  LucideXSquare: XSquare,
  LucideYoutube: Youtube,
  LucideZap: Zap,
  LucideZapOff: ZapOff,
  LucideZoomIn: ZoomIn,
  LucideZoomOut: ZoomOut,
  Luggage,
  LuggageIcon: Luggage,
  Magnet,
  MagnetIcon: Magnet,
  Mail,
  MailCheck,
  MailCheckIcon: MailCheck,
  MailIcon: Mail,
  MailMinus,
  MailMinusIcon: MailMinus,
  MailOpen,
  MailOpenIcon: MailOpen,
  MailPlus,
  MailPlusIcon: MailPlus,
  MailQuestion,
  MailQuestionIcon: MailQuestion,
  MailSearch,
  MailSearchIcon: MailSearch,
  MailWarning,
  MailWarningIcon: MailWarning,
  MailX,
  MailXIcon: MailX,
  Mails,
  MailsIcon: Mails,
  Map: Map$1,
  MapIcon: Map$1,
  MapPin,
  MapPinIcon: MapPin,
  MapPinOff,
  MapPinOffIcon: MapPinOff,
  Martini,
  MartiniIcon: Martini,
  Maximize,
  Maximize2,
  Maximize2Icon: Maximize2,
  MaximizeIcon: Maximize,
  Medal,
  MedalIcon: Medal,
  Megaphone,
  MegaphoneIcon: Megaphone,
  MegaphoneOff,
  MegaphoneOffIcon: MegaphoneOff,
  Meh,
  MehIcon: Meh,
  Menu: Menu2,
  MenuIcon: Menu2,
  MessageCircle,
  MessageCircleIcon: MessageCircle,
  MessageSquare,
  MessageSquareIcon: MessageSquare,
  Mic,
  Mic2,
  Mic2Icon: Mic2,
  MicIcon: Mic,
  MicOff,
  MicOffIcon: MicOff,
  Microscope,
  MicroscopeIcon: Microscope,
  Microwave,
  MicrowaveIcon: Microwave,
  Milestone,
  MilestoneIcon: Milestone,
  Milk,
  MilkIcon: Milk,
  MilkOff,
  MilkOffIcon: MilkOff,
  Minimize,
  Minimize2,
  Minimize2Icon: Minimize2,
  MinimizeIcon: Minimize,
  Minus,
  MinusCircle,
  MinusCircleIcon: MinusCircle,
  MinusIcon: Minus,
  MinusSquare,
  MinusSquareIcon: MinusSquare,
  Monitor,
  MonitorIcon: Monitor,
  MonitorOff,
  MonitorOffIcon: MonitorOff,
  MonitorSmartphone,
  MonitorSmartphoneIcon: MonitorSmartphone,
  MonitorSpeaker,
  MonitorSpeakerIcon: MonitorSpeaker,
  Moon,
  MoonIcon: Moon,
  MoreHorizontal,
  MoreHorizontalIcon: MoreHorizontal,
  MoreVertical,
  MoreVerticalIcon: MoreVertical,
  Mountain,
  MountainIcon: Mountain,
  MountainSnow,
  MountainSnowIcon: MountainSnow,
  Mouse,
  MouseIcon: Mouse,
  MousePointer,
  MousePointer2,
  MousePointer2Icon: MousePointer2,
  MousePointerClick,
  MousePointerClickIcon: MousePointerClick,
  MousePointerIcon: MousePointer,
  Move,
  Move3d,
  Move3dIcon: Move3d,
  MoveDiagonal,
  MoveDiagonal2,
  MoveDiagonal2Icon: MoveDiagonal2,
  MoveDiagonalIcon: MoveDiagonal,
  MoveHorizontal,
  MoveHorizontalIcon: MoveHorizontal,
  MoveIcon: Move,
  MoveVertical,
  MoveVerticalIcon: MoveVertical,
  Music,
  Music2,
  Music2Icon: Music2,
  Music3,
  Music3Icon: Music3,
  Music4,
  Music4Icon: Music4,
  MusicIcon: Music,
  Navigation,
  Navigation2,
  Navigation2Icon: Navigation2,
  Navigation2Off,
  Navigation2OffIcon: Navigation2Off,
  NavigationIcon: Navigation,
  NavigationOff,
  NavigationOffIcon: NavigationOff,
  Network,
  NetworkIcon: Network,
  Newspaper,
  NewspaperIcon: Newspaper,
  Nfc,
  NfcIcon: Nfc,
  Nut,
  NutIcon: Nut,
  NutOff,
  NutOffIcon: NutOff,
  Octagon,
  OctagonIcon: Octagon,
  Option,
  OptionIcon: Option,
  Outdent,
  OutdentIcon: Outdent,
  Package,
  Package2,
  Package2Icon: Package2,
  PackageCheck,
  PackageCheckIcon: PackageCheck,
  PackageIcon: Package,
  PackageMinus,
  PackageMinusIcon: PackageMinus,
  PackageOpen,
  PackageOpenIcon: PackageOpen,
  PackagePlus,
  PackagePlusIcon: PackagePlus,
  PackageSearch,
  PackageSearchIcon: PackageSearch,
  PackageX,
  PackageXIcon: PackageX,
  PaintBucket,
  PaintBucketIcon: PaintBucket,
  Paintbrush,
  Paintbrush2,
  Paintbrush2Icon: Paintbrush2,
  PaintbrushIcon: Paintbrush,
  Palette,
  PaletteIcon: Palette,
  Palmtree,
  PalmtreeIcon: Palmtree,
  Paperclip,
  PaperclipIcon: Paperclip,
  PartyPopper,
  PartyPopperIcon: PartyPopper,
  Pause,
  PauseCircle,
  PauseCircleIcon: PauseCircle,
  PauseIcon: Pause,
  PauseOctagon,
  PauseOctagonIcon: PauseOctagon,
  Pen: Edit2,
  PenBox: Edit4,
  PenLine: Edit3,
  PenTool,
  PenToolIcon: PenTool,
  Pencil,
  PencilIcon: Pencil,
  Percent,
  PercentIcon: Percent,
  PersonStanding,
  PersonStandingIcon: PersonStanding,
  Phone,
  PhoneCall,
  PhoneCallIcon: PhoneCall,
  PhoneForwarded,
  PhoneForwardedIcon: PhoneForwarded,
  PhoneIcon: Phone,
  PhoneIncoming,
  PhoneIncomingIcon: PhoneIncoming,
  PhoneMissed,
  PhoneMissedIcon: PhoneMissed,
  PhoneOff,
  PhoneOffIcon: PhoneOff,
  PhoneOutgoing,
  PhoneOutgoingIcon: PhoneOutgoing,
  PictureInPicture,
  PictureInPicture2,
  PictureInPicture2Icon: PictureInPicture2,
  PictureInPictureIcon: PictureInPicture,
  PieChart,
  PieChartIcon: PieChart,
  PiggyBank,
  PiggyBankIcon: PiggyBank,
  Pilcrow,
  PilcrowIcon: Pilcrow,
  Pill,
  PillIcon: Pill,
  Pin,
  PinIcon: Pin,
  PinOff,
  PinOffIcon: PinOff,
  Pipette,
  PipetteIcon: Pipette,
  Pizza,
  PizzaIcon: Pizza,
  Plane,
  PlaneIcon: Plane,
  Play,
  PlayCircle,
  PlayCircleIcon: PlayCircle,
  PlayIcon: Play,
  Plug,
  Plug2,
  Plug2Icon: Plug2,
  PlugIcon: Plug,
  PlugZap,
  PlugZapIcon: PlugZap,
  Plus,
  PlusCircle,
  PlusCircleIcon: PlusCircle,
  PlusIcon: Plus,
  PlusSquare,
  PlusSquareIcon: PlusSquare,
  Pocket,
  PocketIcon: Pocket,
  Podcast,
  PodcastIcon: Podcast,
  Pointer,
  PointerIcon: Pointer,
  PoundSterling,
  PoundSterlingIcon: PoundSterling,
  Power,
  PowerIcon: Power,
  PowerOff,
  PowerOffIcon: PowerOff,
  Printer,
  PrinterIcon: Printer,
  Puzzle,
  PuzzleIcon: Puzzle,
  QrCode,
  QrCodeIcon: QrCode,
  Quote,
  QuoteIcon: Quote,
  Radio,
  RadioIcon: Radio,
  RadioReceiver,
  RadioReceiverIcon: RadioReceiver,
  RectangleHorizontal,
  RectangleHorizontalIcon: RectangleHorizontal,
  RectangleVertical,
  RectangleVerticalIcon: RectangleVertical,
  Recycle,
  RecycleIcon: Recycle,
  Redo,
  Redo2,
  Redo2Icon: Redo2,
  RedoIcon: Redo,
  RefreshCcw,
  RefreshCcwIcon: RefreshCcw,
  RefreshCw,
  RefreshCwIcon: RefreshCw,
  Refrigerator,
  RefrigeratorIcon: Refrigerator,
  Regex,
  RegexIcon: Regex,
  RemoveFormatting,
  RemoveFormattingIcon: RemoveFormatting,
  Repeat,
  Repeat1,
  Repeat1Icon: Repeat1,
  RepeatIcon: Repeat,
  Reply,
  ReplyAll,
  ReplyAllIcon: ReplyAll,
  ReplyIcon: Reply,
  Rewind,
  RewindIcon: Rewind,
  Rocket,
  RocketIcon: Rocket,
  RockingChair,
  RockingChairIcon: RockingChair,
  Rotate3d,
  Rotate3dIcon: Rotate3d,
  RotateCcw,
  RotateCcwIcon: RotateCcw,
  RotateCw,
  RotateCwIcon: RotateCw,
  Router,
  RouterIcon: Router,
  Rss,
  RssIcon: Rss,
  Ruler,
  RulerIcon: Ruler,
  RussianRuble,
  RussianRubleIcon: RussianRuble,
  Sailboat,
  SailboatIcon: Sailboat,
  Salad,
  SaladIcon: Salad,
  Sandwich,
  SandwichIcon: Sandwich,
  Save,
  SaveIcon: Save,
  Scale,
  Scale3d,
  Scale3dIcon: Scale3d,
  ScaleIcon: Scale,
  Scaling,
  ScalingIcon: Scaling,
  Scan,
  ScanFace,
  ScanFaceIcon: ScanFace,
  ScanIcon: Scan,
  ScanLine,
  ScanLineIcon: ScanLine,
  Scissors,
  ScissorsIcon: Scissors,
  ScreenShare,
  ScreenShareIcon: ScreenShare,
  ScreenShareOff,
  ScreenShareOffIcon: ScreenShareOff,
  Scroll,
  ScrollIcon: Scroll,
  Search,
  SearchIcon: Search,
  Send,
  SendIcon: Send,
  SeparatorHorizontal,
  SeparatorHorizontalIcon: SeparatorHorizontal,
  SeparatorVertical,
  SeparatorVerticalIcon: SeparatorVertical,
  Server,
  ServerCog,
  ServerCogIcon: ServerCog,
  ServerCrash,
  ServerCrashIcon: ServerCrash,
  ServerIcon: Server,
  ServerOff,
  ServerOffIcon: ServerOff,
  Settings,
  Settings2,
  Settings2Icon: Settings2,
  SettingsIcon: Settings,
  Share,
  Share2,
  Share2Icon: Share2,
  ShareIcon: Share,
  Sheet,
  SheetIcon: Sheet,
  Shield,
  ShieldAlert,
  ShieldAlertIcon: ShieldAlert,
  ShieldCheck,
  ShieldCheckIcon: ShieldCheck,
  ShieldClose,
  ShieldCloseIcon: ShieldClose,
  ShieldIcon: Shield,
  ShieldOff,
  ShieldOffIcon: ShieldOff,
  Ship,
  ShipIcon: Ship,
  Shirt,
  ShirtIcon: Shirt,
  ShoppingBag,
  ShoppingBagIcon: ShoppingBag,
  ShoppingCart,
  ShoppingCartIcon: ShoppingCart,
  Shovel,
  ShovelIcon: Shovel,
  ShowerHead,
  ShowerHeadIcon: ShowerHead,
  Shrink,
  ShrinkIcon: Shrink,
  Shrub,
  ShrubIcon: Shrub,
  Shuffle,
  ShuffleIcon: Shuffle,
  Sidebar,
  SidebarClose,
  SidebarCloseIcon: SidebarClose,
  SidebarIcon: Sidebar,
  SidebarOpen,
  SidebarOpenIcon: SidebarOpen,
  Sigma,
  SigmaIcon: Sigma,
  Signal,
  SignalHigh,
  SignalHighIcon: SignalHigh,
  SignalIcon: Signal,
  SignalLow,
  SignalLowIcon: SignalLow,
  SignalMedium,
  SignalMediumIcon: SignalMedium,
  SignalZero,
  SignalZeroIcon: SignalZero,
  Siren,
  SirenIcon: Siren,
  SkipBack,
  SkipBackIcon: SkipBack,
  SkipForward,
  SkipForwardIcon: SkipForward,
  Skull,
  SkullIcon: Skull,
  Slack,
  SlackIcon: Slack,
  Slash,
  SlashIcon: Slash,
  Slice,
  SliceIcon: Slice,
  Sliders,
  SlidersHorizontal,
  SlidersHorizontalIcon: SlidersHorizontal,
  SlidersIcon: Sliders,
  Smartphone,
  SmartphoneCharging,
  SmartphoneChargingIcon: SmartphoneCharging,
  SmartphoneIcon: Smartphone,
  SmartphoneNfc,
  SmartphoneNfcIcon: SmartphoneNfc,
  Smile,
  SmileIcon: Smile,
  SmilePlus,
  SmilePlusIcon: SmilePlus,
  Snowflake,
  SnowflakeIcon: Snowflake,
  Sofa,
  SofaIcon: Sofa,
  SortAsc,
  SortAscIcon: SortAsc,
  SortDesc,
  SortDescIcon: SortDesc,
  Soup,
  SoupIcon: Soup,
  Speaker,
  SpeakerIcon: Speaker,
  Spline,
  SplineIcon: Spline,
  SplitSquareHorizontal,
  SplitSquareHorizontalIcon: SplitSquareHorizontal,
  SplitSquareVertical,
  SplitSquareVerticalIcon: SplitSquareVertical,
  Sprout,
  SproutIcon: Sprout,
  Square,
  SquareIcon: Square,
  Stamp,
  StampIcon: Stamp,
  Star,
  StarHalf,
  StarHalfIcon: StarHalf,
  StarIcon: Star,
  StarOff,
  StarOffIcon: StarOff,
  Stethoscope,
  StethoscopeIcon: Stethoscope,
  Sticker,
  StickerIcon: Sticker,
  StickyNote,
  StickyNoteIcon: StickyNote,
  StopCircle,
  StopCircleIcon: StopCircle,
  StretchHorizontal,
  StretchHorizontalIcon: StretchHorizontal,
  StretchVertical,
  StretchVerticalIcon: StretchVertical,
  Strikethrough,
  StrikethroughIcon: Strikethrough,
  Subscript,
  SubscriptIcon: Subscript,
  Subtitles,
  SubtitlesIcon: Subtitles,
  Sun,
  SunDim,
  SunDimIcon: SunDim,
  SunIcon: Sun,
  SunMedium,
  SunMediumIcon: SunMedium,
  SunMoon,
  SunMoonIcon: SunMoon,
  SunSnow,
  SunSnowIcon: SunSnow,
  Sunrise,
  SunriseIcon: Sunrise,
  Sunset,
  SunsetIcon: Sunset,
  Superscript,
  SuperscriptIcon: Superscript,
  SwissFranc,
  SwissFrancIcon: SwissFranc,
  SwitchCamera,
  SwitchCameraIcon: SwitchCamera,
  Sword,
  SwordIcon: Sword,
  Swords,
  SwordsIcon: Swords,
  Syringe,
  SyringeIcon: Syringe,
  Table,
  Table2,
  Table2Icon: Table2,
  TableIcon: Table,
  Tablet,
  TabletIcon: Tablet,
  Tablets,
  TabletsIcon: Tablets,
  Tag,
  TagIcon: Tag,
  Tags,
  TagsIcon: Tags,
  Target,
  TargetIcon: Target,
  Tent,
  TentIcon: Tent,
  Terminal,
  TerminalIcon: Terminal,
  TerminalSquare,
  TerminalSquareIcon: TerminalSquare,
  TextCursor,
  TextCursorIcon: TextCursor,
  TextCursorInput,
  TextCursorInputIcon: TextCursorInput,
  Thermometer,
  ThermometerIcon: Thermometer,
  ThermometerSnowflake,
  ThermometerSnowflakeIcon: ThermometerSnowflake,
  ThermometerSun,
  ThermometerSunIcon: ThermometerSun,
  ThumbsDown,
  ThumbsDownIcon: ThumbsDown,
  ThumbsUp,
  ThumbsUpIcon: ThumbsUp,
  Ticket,
  TicketIcon: Ticket,
  Timer,
  TimerIcon: Timer,
  TimerOff,
  TimerOffIcon: TimerOff,
  TimerReset,
  TimerResetIcon: TimerReset,
  ToggleLeft,
  ToggleLeftIcon: ToggleLeft,
  ToggleRight,
  ToggleRightIcon: ToggleRight,
  Tornado,
  TornadoIcon: Tornado,
  TowerControl,
  TowerControlIcon: TowerControl,
  ToyBrick,
  ToyBrickIcon: ToyBrick,
  Train,
  TrainIcon: Train,
  Trash,
  Trash2,
  Trash2Icon: Trash2,
  TrashIcon: Trash,
  TreeDeciduous,
  TreeDeciduousIcon: TreeDeciduous,
  TreePine,
  TreePineIcon: TreePine,
  Trees,
  TreesIcon: Trees,
  Trello,
  TrelloIcon: Trello,
  TrendingDown,
  TrendingDownIcon: TrendingDown,
  TrendingUp,
  TrendingUpIcon: TrendingUp,
  Triangle,
  TriangleIcon: Triangle,
  Trophy,
  TrophyIcon: Trophy,
  Truck,
  TruckIcon: Truck,
  Tv,
  Tv2,
  Tv2Icon: Tv2,
  TvIcon: Tv,
  Twitch,
  TwitchIcon: Twitch,
  Twitter,
  TwitterIcon: Twitter,
  Type,
  TypeIcon: Type,
  Umbrella,
  UmbrellaIcon: Umbrella,
  Underline,
  UnderlineIcon: Underline,
  Undo,
  Undo2,
  Undo2Icon: Undo2,
  UndoIcon: Undo,
  Unlink,
  Unlink2,
  Unlink2Icon: Unlink2,
  UnlinkIcon: Unlink,
  Unlock,
  UnlockIcon: Unlock,
  Upload,
  UploadCloud,
  UploadCloudIcon: UploadCloud,
  UploadIcon: Upload,
  Usb,
  UsbIcon: Usb,
  User,
  UserCheck,
  UserCheckIcon: UserCheck,
  UserCog,
  UserCogIcon: UserCog,
  UserIcon: User,
  UserMinus,
  UserMinusIcon: UserMinus,
  UserPlus,
  UserPlusIcon: UserPlus,
  UserX,
  UserXIcon: UserX,
  Users,
  UsersIcon: Users,
  Utensils,
  UtensilsCrossed,
  UtensilsCrossedIcon: UtensilsCrossed,
  UtensilsIcon: Utensils,
  UtilityPole,
  UtilityPoleIcon: UtilityPole,
  Vegan,
  VeganIcon: Vegan,
  VenetianMask,
  VenetianMaskIcon: VenetianMask,
  Verified,
  VerifiedIcon: Verified,
  Vibrate,
  VibrateIcon: Vibrate,
  VibrateOff,
  VibrateOffIcon: VibrateOff,
  Video,
  VideoIcon: Video,
  VideoOff,
  VideoOffIcon: VideoOff,
  View,
  ViewIcon: View,
  Voicemail,
  VoicemailIcon: Voicemail,
  Volume,
  Volume1,
  Volume1Icon: Volume1,
  Volume2,
  Volume2Icon: Volume2,
  VolumeIcon: Volume,
  VolumeX,
  VolumeXIcon: VolumeX,
  Vote,
  VoteIcon: Vote,
  Wallet,
  WalletIcon: Wallet,
  Wand,
  Wand2,
  Wand2Icon: Wand2,
  WandIcon: Wand,
  Watch,
  WatchIcon: Watch,
  Waves,
  WavesIcon: Waves,
  Webcam,
  WebcamIcon: Webcam,
  Webhook,
  WebhookIcon: Webhook,
  Wheat,
  WheatIcon: Wheat,
  WheatOff,
  WheatOffIcon: WheatOff,
  Wifi,
  WifiIcon: Wifi,
  WifiOff,
  WifiOffIcon: WifiOff,
  Wind,
  WindIcon: Wind,
  Wine,
  WineIcon: Wine,
  WineOff,
  WineOffIcon: WineOff,
  WrapText,
  WrapTextIcon: WrapText,
  Wrench,
  WrenchIcon: Wrench,
  X,
  XCircle,
  XCircleIcon: XCircle,
  XIcon: X,
  XOctagon,
  XOctagonIcon: XOctagon,
  XSquare,
  XSquareIcon: XSquare,
  Youtube,
  YoutubeIcon: Youtube,
  Zap,
  ZapIcon: Zap,
  ZapOff,
  ZapOffIcon: ZapOff,
  ZoomIn,
  ZoomInIcon: ZoomIn,
  ZoomOut,
  ZoomOutIcon: ZoomOut,
  icons: index$1
}, Symbol.toStringTag, { value: "Module" }));
const icons = [];
for (const [key, icon] of Object.entries(lucideIcons)) {
  icons[`${key}Icon`] = defineComponent({
    name: `${key}Icon`,
    setup() {
      return () => h(icon, {
        class: "lucide"
      });
    }
  });
}
(function(dom2) {
  function getHighestZindex() {
    let zIndex = 9999;
    dom2(".modal").each(function() {
      if (dom2(this).css("z-index") !== "auto" && dom2(this).css("z-index") > zIndex) {
        zIndex = parseInt(dom2(this).css("z-index"));
      }
    });
    return zIndex;
  }
  function getScrollbarWidth(el) {
    return window.innerWidth - dom2(el)[0].clientWidth;
  }
  function show(el) {
    if (!dom2("[data-modal-replacer='" + dom2(el).attr("id") + "']").length) {
      dom2(
        '<div data-modal-replacer="' + dom2(el).attr("id") + '"></div>'
      ).insertAfter(el);
      dom2(el).css({
        "margin-top": 0,
        "margin-left": 0
      });
      dom2(el).attr("aria-hidden", false).appendTo("body");
      setTimeout(() => {
        dom2(el).addClass("show").css("z-index", getHighestZindex() + 1);
        const event2 = new Event("shown.tw.modal");
        dom2(el)[0].dispatchEvent(event2);
      }, 200);
      dom2("body").css(
        "padding-right",
        parseInt(dom2("body").css("padding-right")) + getScrollbarWidth("html") + "px"
      ).addClass("overflow-y-hidden");
      dom2(".modal").removeClass("overflow-y-auto").css("padding-left", "0px");
      dom2(el).addClass("overflow-y-auto").css("padding-left", getScrollbarWidth(el) + "px").addClass(dom2(".modal.show").length ? "modal-overlap" : "");
      const event = new Event("show.tw.modal");
      dom2(el)[0].dispatchEvent(event);
    }
  }
  function hide2(el) {
    if (dom2(el).hasClass("modal") && dom2(el).hasClass("show")) {
      let transitionDuration = parseFloat(dom2(el).css("transition-duration").split(",")[1]) * 1e3;
      dom2(el).attr("aria-hidden", true).removeClass("show");
      setTimeout(() => {
        dom2(el).removeAttr("style").removeClass("modal-overlap").removeClass("overflow-y-auto");
        dom2(".modal").each(function() {
          if (parseInt(dom2(this).css("z-index")) === getHighestZindex()) {
            dom2(this).addClass("overflow-y-auto").css("padding-left", getScrollbarWidth(this) + "px");
          }
        });
        if (getHighestZindex() == 9999) {
          dom2("body").removeClass("overflow-y-hidden").css("padding-right", "");
        }
        dom2('[data-modal-replacer="' + dom2(el).attr("id") + '"]').replaceWith(
          el
        );
        const event2 = new Event("hidden.tw.modal");
        dom2(el)[0].dispatchEvent(event2);
      }, transitionDuration);
      const event = new Event("hide.tw.modal");
      dom2(el)[0].dispatchEvent(event);
    }
  }
  function toggle(el) {
    if (dom2(el).hasClass("modal") && dom2(el).hasClass("show")) {
      hide2(el);
    } else {
      show(el);
    }
  }
  function createInstance(el) {
    return {
      show() {
        show(el);
      },
      hide() {
        hide2(el);
      },
      toggle() {
        toggle(el);
      }
    };
  }
  dom2("body").on("click", '[data-tw-toggle="modal"]', function() {
    show(dom2(this).attr("data-tw-target"));
  });
  dom2("body").on("click", (event) => {
    if (dom2(event.target).hasClass("modal") && dom2(event.target).hasClass("show")) {
      if (dom2(event.target).data("tw-backdrop") !== "static") {
        hide2(event.target);
      } else {
        dom2(event.target).addClass("modal-static");
        setTimeout(() => {
          dom2(event.target).removeClass("modal-static");
        }, 600);
      }
    }
  });
  dom2("body").on("click", '[data-tw-dismiss="modal"]', function() {
    let modal = dom2(this).closest(".modal")[0];
    hide2(modal);
  });
  document.addEventListener("keydown", (event) => {
    if (event.code == "Escape") {
      let el = dom2(".modal.show").last();
      if (dom2(el).hasClass("modal") && dom2(el).hasClass("show") && (dom2(el).data("tw-keyboard") === void 0 || dom2(el).data("tw-keyboard") !== "false")) {
        if (dom2(el).data("tw-backdrop") !== "static") {
          hide2(el);
        } else {
          dom2(el).addClass("modal-static");
          setTimeout(() => {
            dom2(el).removeClass("modal-static");
          }, 600);
        }
      }
    }
  });
  (function init2() {
    dom2(".modal").each(function() {
      this["__modal"] = createInstance(this);
    });
    if (window.tailwind === void 0)
      window.tailwind = {};
    window.tailwind.Modal = {
      getInstance(el) {
        return el.__modal;
      },
      getOrCreateInstance(el) {
        return el.__modal === void 0 ? createInstance(el) : el.__modal;
      }
    };
  })();
})(dom$1);
const init$1 = (el, { props, emit: emit2 }) => {
  const modal = tailwind.Modal.getOrCreateInstance(el);
  if (props.show) {
    modal.show();
  } else {
    modal.hide();
  }
  if (el["__initiated"] === void 0) {
    el["__initiated"] = true;
    el.addEventListener("show.tw.modal", () => {
      emit2("show");
    });
    el.addEventListener("shown.tw.modal", () => {
      emit2("shown");
    });
    el.addEventListener("hide.tw.modal", () => {
      emit2("hide");
    });
    el.addEventListener("hidden.tw.modal", () => {
      emit2("hidden");
    });
  }
};
const Modal = defineComponent({
  name: "Modal",
  props: {
    show: {
      type: Boolean,
      default: false
    },
    size: {
      type: String,
      default: ""
    },
    backdrop: {
      type: String,
      default: ""
    },
    slideOver: {
      type: Boolean,
      default: false
    },
    refKey: {
      type: String,
      default: null
    }
  },
  directives: {
    modal: {
      mounted(el, { value }) {
        dom$1(el).attr("id", "_" + Math.random().toString(36).substr(2, 9));
        init$1(el, value);
      },
      updated(el, { value }) {
        init$1(el, value);
      }
    }
  },
  setup(props, { slots, emit: emit2 }) {
    const modalRef = ref();
    const bindInstance = () => {
      if (props.refKey) {
        const bind = inject(`bind[${props.refKey}]`);
        if (bind) {
          bind(tailwind.Modal.getOrCreateInstance(modalRef.value));
        }
      }
    };
    onMounted(() => {
      bindInstance();
    });
    const modalDirective = resolveDirective("modal");
    return () => withDirectives(
      h(
        "div",
        {
          class: ["modal", { "modal-slide-over": props.slideOver }],
          tabindex: "-1",
          "aria-hidden": "true",
          "data-tw-backdrop": props.backdrop,
          ref: modalRef
        },
        [
          h(
            "div",
            {
              class: ["modal-dialog", props.size]
            },
            [
              h(
                "div",
                {
                  class: "modal-content"
                },
                slots.default({
                  dismiss: () => {
                    tailwind.Modal.getOrCreateInstance(modalRef.value).hide();
                  }
                })
              )
            ]
          )
        ]
      ),
      [[modalDirective, { props, emit: emit2 }]]
    );
  }
});
const ModalHeader = defineComponent({
  name: "ModalHeader",
  setup(props, { slots }) {
    return () => h(
      "div",
      {
        class: "modal-header"
      },
      slots.default()
    );
  }
});
const ModalBody = defineComponent({
  name: "ModalBody",
  setup(props, { slots }) {
    return () => h(
      "div",
      {
        class: "modal-body"
      },
      slots.default()
    );
  }
});
const ModalFooter = defineComponent({
  name: "ModalFooter",
  setup(props, { slots }) {
    return () => h(
      "div",
      {
        class: "modal-footer"
      },
      slots.default()
    );
  }
});
var top = "top";
var bottom = "bottom";
var right = "right";
var left = "left";
var auto = "auto";
var basePlacements = [top, bottom, right, left];
var start = "start";
var end = "end";
var clippingParents = "clippingParents";
var viewport = "viewport";
var popper = "popper";
var reference = "reference";
var variationPlacements = /* @__PURE__ */ basePlacements.reduce(function(acc, placement) {
  return acc.concat([placement + "-" + start, placement + "-" + end]);
}, []);
var placements = /* @__PURE__ */ [].concat(basePlacements, [auto]).reduce(function(acc, placement) {
  return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
}, []);
var beforeRead = "beforeRead";
var read = "read";
var afterRead = "afterRead";
var beforeMain = "beforeMain";
var main = "main";
var afterMain = "afterMain";
var beforeWrite = "beforeWrite";
var write = "write";
var afterWrite = "afterWrite";
var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];
function getNodeName(element) {
  return element ? (element.nodeName || "").toLowerCase() : null;
}
function getWindow(node) {
  if (node == null) {
    return window;
  }
  if (node.toString() !== "[object Window]") {
    var ownerDocument = node.ownerDocument;
    return ownerDocument ? ownerDocument.defaultView || window : window;
  }
  return node;
}
function isElement(node) {
  var OwnElement = getWindow(node).Element;
  return node instanceof OwnElement || node instanceof Element;
}
function isHTMLElement(node) {
  var OwnElement = getWindow(node).HTMLElement;
  return node instanceof OwnElement || node instanceof HTMLElement;
}
function isShadowRoot(node) {
  if (typeof ShadowRoot === "undefined") {
    return false;
  }
  var OwnElement = getWindow(node).ShadowRoot;
  return node instanceof OwnElement || node instanceof ShadowRoot;
}
function applyStyles(_ref) {
  var state = _ref.state;
  Object.keys(state.elements).forEach(function(name) {
    var style = state.styles[name] || {};
    var attributes = state.attributes[name] || {};
    var element = state.elements[name];
    if (!isHTMLElement(element) || !getNodeName(element)) {
      return;
    }
    Object.assign(element.style, style);
    Object.keys(attributes).forEach(function(name2) {
      var value = attributes[name2];
      if (value === false) {
        element.removeAttribute(name2);
      } else {
        element.setAttribute(name2, value === true ? "" : value);
      }
    });
  });
}
function effect$2(_ref2) {
  var state = _ref2.state;
  var initialStyles = {
    popper: {
      position: state.options.strategy,
      left: "0",
      top: "0",
      margin: "0"
    },
    arrow: {
      position: "absolute"
    },
    reference: {}
  };
  Object.assign(state.elements.popper.style, initialStyles.popper);
  state.styles = initialStyles;
  if (state.elements.arrow) {
    Object.assign(state.elements.arrow.style, initialStyles.arrow);
  }
  return function() {
    Object.keys(state.elements).forEach(function(name) {
      var element = state.elements[name];
      var attributes = state.attributes[name] || {};
      var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]);
      var style = styleProperties.reduce(function(style2, property) {
        style2[property] = "";
        return style2;
      }, {});
      if (!isHTMLElement(element) || !getNodeName(element)) {
        return;
      }
      Object.assign(element.style, style);
      Object.keys(attributes).forEach(function(attribute) {
        element.removeAttribute(attribute);
      });
    });
  };
}
const applyStyles$1 = {
  name: "applyStyles",
  enabled: true,
  phase: "write",
  fn: applyStyles,
  effect: effect$2,
  requires: ["computeStyles"]
};
function getBasePlacement(placement) {
  return placement.split("-")[0];
}
var max = Math.max;
var min = Math.min;
var round = Math.round;
function getUAString() {
  var uaData = navigator.userAgentData;
  if (uaData != null && uaData.brands) {
    return uaData.brands.map(function(item) {
      return item.brand + "/" + item.version;
    }).join(" ");
  }
  return navigator.userAgent;
}
function isLayoutViewport() {
  return !/^((?!chrome|android).)*safari/i.test(getUAString());
}
function getBoundingClientRect(element, includeScale, isFixedStrategy) {
  if (includeScale === void 0) {
    includeScale = false;
  }
  if (isFixedStrategy === void 0) {
    isFixedStrategy = false;
  }
  var clientRect = element.getBoundingClientRect();
  var scaleX = 1;
  var scaleY = 1;
  if (includeScale && isHTMLElement(element)) {
    scaleX = element.offsetWidth > 0 ? round(clientRect.width) / element.offsetWidth || 1 : 1;
    scaleY = element.offsetHeight > 0 ? round(clientRect.height) / element.offsetHeight || 1 : 1;
  }
  var _ref = isElement(element) ? getWindow(element) : window, visualViewport = _ref.visualViewport;
  var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;
  var x = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;
  var y = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;
  var width = clientRect.width / scaleX;
  var height = clientRect.height / scaleY;
  return {
    width,
    height,
    top: y,
    right: x + width,
    bottom: y + height,
    left: x,
    x,
    y
  };
}
function getLayoutRect(element) {
  var clientRect = getBoundingClientRect(element);
  var width = element.offsetWidth;
  var height = element.offsetHeight;
  if (Math.abs(clientRect.width - width) <= 1) {
    width = clientRect.width;
  }
  if (Math.abs(clientRect.height - height) <= 1) {
    height = clientRect.height;
  }
  return {
    x: element.offsetLeft,
    y: element.offsetTop,
    width,
    height
  };
}
function contains(parent, child) {
  var rootNode = child.getRootNode && child.getRootNode();
  if (parent.contains(child)) {
    return true;
  } else if (rootNode && isShadowRoot(rootNode)) {
    var next = child;
    do {
      if (next && parent.isSameNode(next)) {
        return true;
      }
      next = next.parentNode || next.host;
    } while (next);
  }
  return false;
}
function getComputedStyle$1(element) {
  return getWindow(element).getComputedStyle(element);
}
function isTableElement(element) {
  return ["table", "td", "th"].indexOf(getNodeName(element)) >= 0;
}
function getDocumentElement(element) {
  return ((isElement(element) ? element.ownerDocument : (
    // $FlowFixMe[prop-missing]
    element.document
  )) || window.document).documentElement;
}
function getParentNode(element) {
  if (getNodeName(element) === "html") {
    return element;
  }
  return (
    // this is a quicker (but less type safe) way to save quite some bytes from the bundle
    // $FlowFixMe[incompatible-return]
    // $FlowFixMe[prop-missing]
    element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
    element.parentNode || // DOM Element detected
    (isShadowRoot(element) ? element.host : null) || // ShadowRoot detected
    // $FlowFixMe[incompatible-call]: HTMLElement is a Node
    getDocumentElement(element)
  );
}
function getTrueOffsetParent(element) {
  if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837
  getComputedStyle$1(element).position === "fixed") {
    return null;
  }
  return element.offsetParent;
}
function getContainingBlock(element) {
  var isFirefox = /firefox/i.test(getUAString());
  var isIE = /Trident/i.test(getUAString());
  if (isIE && isHTMLElement(element)) {
    var elementCss = getComputedStyle$1(element);
    if (elementCss.position === "fixed") {
      return null;
    }
  }
  var currentNode = getParentNode(element);
  if (isShadowRoot(currentNode)) {
    currentNode = currentNode.host;
  }
  while (isHTMLElement(currentNode) && ["html", "body"].indexOf(getNodeName(currentNode)) < 0) {
    var css = getComputedStyle$1(currentNode);
    if (css.transform !== "none" || css.perspective !== "none" || css.contain === "paint" || ["transform", "perspective"].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === "filter" || isFirefox && css.filter && css.filter !== "none") {
      return currentNode;
    } else {
      currentNode = currentNode.parentNode;
    }
  }
  return null;
}
function getOffsetParent(element) {
  var window2 = getWindow(element);
  var offsetParent = getTrueOffsetParent(element);
  while (offsetParent && isTableElement(offsetParent) && getComputedStyle$1(offsetParent).position === "static") {
    offsetParent = getTrueOffsetParent(offsetParent);
  }
  if (offsetParent && (getNodeName(offsetParent) === "html" || getNodeName(offsetParent) === "body" && getComputedStyle$1(offsetParent).position === "static")) {
    return window2;
  }
  return offsetParent || getContainingBlock(element) || window2;
}
function getMainAxisFromPlacement(placement) {
  return ["top", "bottom"].indexOf(placement) >= 0 ? "x" : "y";
}
function within(min$12, value, max$12) {
  return max(min$12, min(value, max$12));
}
function withinMaxClamp(min2, value, max2) {
  var v = within(min2, value, max2);
  return v > max2 ? max2 : v;
}
function getFreshSideObject() {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };
}
function mergePaddingObject(paddingObject) {
  return Object.assign({}, getFreshSideObject(), paddingObject);
}
function expandToHashMap(value, keys2) {
  return keys2.reduce(function(hashMap, key) {
    hashMap[key] = value;
    return hashMap;
  }, {});
}
var toPaddingObject = function toPaddingObject2(padding, state) {
  padding = typeof padding === "function" ? padding(Object.assign({}, state.rects, {
    placement: state.placement
  })) : padding;
  return mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
};
function arrow(_ref) {
  var _state$modifiersData$;
  var state = _ref.state, name = _ref.name, options = _ref.options;
  var arrowElement = state.elements.arrow;
  var popperOffsets2 = state.modifiersData.popperOffsets;
  var basePlacement = getBasePlacement(state.placement);
  var axis = getMainAxisFromPlacement(basePlacement);
  var isVertical = [left, right].indexOf(basePlacement) >= 0;
  var len = isVertical ? "height" : "width";
  if (!arrowElement || !popperOffsets2) {
    return;
  }
  var paddingObject = toPaddingObject(options.padding, state);
  var arrowRect = getLayoutRect(arrowElement);
  var minProp = axis === "y" ? top : left;
  var maxProp = axis === "y" ? bottom : right;
  var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets2[axis] - state.rects.popper[len];
  var startDiff = popperOffsets2[axis] - state.rects.reference[axis];
  var arrowOffsetParent = getOffsetParent(arrowElement);
  var clientSize = arrowOffsetParent ? axis === "y" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
  var centerToReference = endDiff / 2 - startDiff / 2;
  var min2 = paddingObject[minProp];
  var max2 = clientSize - arrowRect[len] - paddingObject[maxProp];
  var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
  var offset2 = within(min2, center, max2);
  var axisProp = axis;
  state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset2, _state$modifiersData$.centerOffset = offset2 - center, _state$modifiersData$);
}
function effect$1(_ref2) {
  var state = _ref2.state, options = _ref2.options;
  var _options$element = options.element, arrowElement = _options$element === void 0 ? "[data-popper-arrow]" : _options$element;
  if (arrowElement == null) {
    return;
  }
  if (typeof arrowElement === "string") {
    arrowElement = state.elements.popper.querySelector(arrowElement);
    if (!arrowElement) {
      return;
    }
  }
  if (!contains(state.elements.popper, arrowElement)) {
    return;
  }
  state.elements.arrow = arrowElement;
}
const arrow$1 = {
  name: "arrow",
  enabled: true,
  phase: "main",
  fn: arrow,
  effect: effect$1,
  requires: ["popperOffsets"],
  requiresIfExists: ["preventOverflow"]
};
function getVariation(placement) {
  return placement.split("-")[1];
}
var unsetSides = {
  top: "auto",
  right: "auto",
  bottom: "auto",
  left: "auto"
};
function roundOffsetsByDPR(_ref) {
  var x = _ref.x, y = _ref.y;
  var win = window;
  var dpr = win.devicePixelRatio || 1;
  return {
    x: round(x * dpr) / dpr || 0,
    y: round(y * dpr) / dpr || 0
  };
}
function mapToStyles(_ref2) {
  var _Object$assign2;
  var popper2 = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, variation = _ref2.variation, offsets = _ref2.offsets, position = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive, roundOffsets = _ref2.roundOffsets, isFixed = _ref2.isFixed;
  var _offsets$x = offsets.x, x = _offsets$x === void 0 ? 0 : _offsets$x, _offsets$y = offsets.y, y = _offsets$y === void 0 ? 0 : _offsets$y;
  var _ref3 = typeof roundOffsets === "function" ? roundOffsets({
    x,
    y
  }) : {
    x,
    y
  };
  x = _ref3.x;
  y = _ref3.y;
  var hasX = offsets.hasOwnProperty("x");
  var hasY = offsets.hasOwnProperty("y");
  var sideX = left;
  var sideY = top;
  var win = window;
  if (adaptive) {
    var offsetParent = getOffsetParent(popper2);
    var heightProp = "clientHeight";
    var widthProp = "clientWidth";
    if (offsetParent === getWindow(popper2)) {
      offsetParent = getDocumentElement(popper2);
      if (getComputedStyle$1(offsetParent).position !== "static" && position === "absolute") {
        heightProp = "scrollHeight";
        widthProp = "scrollWidth";
      }
    }
    offsetParent = offsetParent;
    if (placement === top || (placement === left || placement === right) && variation === end) {
      sideY = bottom;
      var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : (
        // $FlowFixMe[prop-missing]
        offsetParent[heightProp]
      );
      y -= offsetY - popperRect.height;
      y *= gpuAcceleration ? 1 : -1;
    }
    if (placement === left || (placement === top || placement === bottom) && variation === end) {
      sideX = right;
      var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : (
        // $FlowFixMe[prop-missing]
        offsetParent[widthProp]
      );
      x -= offsetX - popperRect.width;
      x *= gpuAcceleration ? 1 : -1;
    }
  }
  var commonStyles = Object.assign({
    position
  }, adaptive && unsetSides);
  var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
    x,
    y
  }) : {
    x,
    y
  };
  x = _ref4.x;
  y = _ref4.y;
  if (gpuAcceleration) {
    var _Object$assign;
    return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? "0" : "", _Object$assign[sideX] = hasX ? "0" : "", _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
  }
  return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : "", _Object$assign2[sideX] = hasX ? x + "px" : "", _Object$assign2.transform = "", _Object$assign2));
}
function computeStyles(_ref5) {
  var state = _ref5.state, options = _ref5.options;
  var _options$gpuAccelerat = options.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets = options.roundOffsets, roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
  var commonStyles = {
    placement: getBasePlacement(state.placement),
    variation: getVariation(state.placement),
    popper: state.elements.popper,
    popperRect: state.rects.popper,
    gpuAcceleration,
    isFixed: state.options.strategy === "fixed"
  };
  if (state.modifiersData.popperOffsets != null) {
    state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.popperOffsets,
      position: state.options.strategy,
      adaptive,
      roundOffsets
    })));
  }
  if (state.modifiersData.arrow != null) {
    state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.arrow,
      position: "absolute",
      adaptive: false,
      roundOffsets
    })));
  }
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    "data-popper-placement": state.placement
  });
}
const computeStyles$1 = {
  name: "computeStyles",
  enabled: true,
  phase: "beforeWrite",
  fn: computeStyles,
  data: {}
};
var passive = {
  passive: true
};
function effect(_ref) {
  var state = _ref.state, instance = _ref.instance, options = _ref.options;
  var _options$scroll = options.scroll, scroll = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options.resize, resize = _options$resize === void 0 ? true : _options$resize;
  var window2 = getWindow(state.elements.popper);
  var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
  if (scroll) {
    scrollParents.forEach(function(scrollParent) {
      scrollParent.addEventListener("scroll", instance.update, passive);
    });
  }
  if (resize) {
    window2.addEventListener("resize", instance.update, passive);
  }
  return function() {
    if (scroll) {
      scrollParents.forEach(function(scrollParent) {
        scrollParent.removeEventListener("scroll", instance.update, passive);
      });
    }
    if (resize) {
      window2.removeEventListener("resize", instance.update, passive);
    }
  };
}
const eventListeners = {
  name: "eventListeners",
  enabled: true,
  phase: "write",
  fn: function fn() {
  },
  effect,
  data: {}
};
var hash$1 = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
};
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, function(matched) {
    return hash$1[matched];
  });
}
var hash = {
  start: "end",
  end: "start"
};
function getOppositeVariationPlacement(placement) {
  return placement.replace(/start|end/g, function(matched) {
    return hash[matched];
  });
}
function getWindowScroll(node) {
  var win = getWindow(node);
  var scrollLeft = win.pageXOffset;
  var scrollTop = win.pageYOffset;
  return {
    scrollLeft,
    scrollTop
  };
}
function getWindowScrollBarX(element) {
  return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
}
function getViewportRect(element, strategy) {
  var win = getWindow(element);
  var html2 = getDocumentElement(element);
  var visualViewport = win.visualViewport;
  var width = html2.clientWidth;
  var height = html2.clientHeight;
  var x = 0;
  var y = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    var layoutViewport = isLayoutViewport();
    if (layoutViewport || !layoutViewport && strategy === "fixed") {
      x = visualViewport.offsetLeft;
      y = visualViewport.offsetTop;
    }
  }
  return {
    width,
    height,
    x: x + getWindowScrollBarX(element),
    y
  };
}
function getDocumentRect(element) {
  var _element$ownerDocumen;
  var html2 = getDocumentElement(element);
  var winScroll = getWindowScroll(element);
  var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
  var width = max(html2.scrollWidth, html2.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
  var height = max(html2.scrollHeight, html2.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
  var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
  var y = -winScroll.scrollTop;
  if (getComputedStyle$1(body || html2).direction === "rtl") {
    x += max(html2.clientWidth, body ? body.clientWidth : 0) - width;
  }
  return {
    width,
    height,
    x,
    y
  };
}
function isScrollParent(element) {
  var _getComputedStyle = getComputedStyle$1(element), overflow = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;
  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
}
function getScrollParent(node) {
  if (["html", "body", "#document"].indexOf(getNodeName(node)) >= 0) {
    return node.ownerDocument.body;
  }
  if (isHTMLElement(node) && isScrollParent(node)) {
    return node;
  }
  return getScrollParent(getParentNode(node));
}
function listScrollParents(element, list2) {
  var _element$ownerDocumen;
  if (list2 === void 0) {
    list2 = [];
  }
  var scrollParent = getScrollParent(element);
  var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
  var win = getWindow(scrollParent);
  var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
  var updatedList = list2.concat(target);
  return isBody ? updatedList : (
    // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
    updatedList.concat(listScrollParents(getParentNode(target)))
  );
}
function rectToClientRect(rect) {
  return Object.assign({}, rect, {
    left: rect.x,
    top: rect.y,
    right: rect.x + rect.width,
    bottom: rect.y + rect.height
  });
}
function getInnerBoundingClientRect(element, strategy) {
  var rect = getBoundingClientRect(element, false, strategy === "fixed");
  rect.top = rect.top + element.clientTop;
  rect.left = rect.left + element.clientLeft;
  rect.bottom = rect.top + element.clientHeight;
  rect.right = rect.left + element.clientWidth;
  rect.width = element.clientWidth;
  rect.height = element.clientHeight;
  rect.x = rect.left;
  rect.y = rect.top;
  return rect;
}
function getClientRectFromMixedType(element, clippingParent, strategy) {
  return clippingParent === viewport ? rectToClientRect(getViewportRect(element, strategy)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
}
function getClippingParents(element) {
  var clippingParents2 = listScrollParents(getParentNode(element));
  var canEscapeClipping = ["absolute", "fixed"].indexOf(getComputedStyle$1(element).position) >= 0;
  var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;
  if (!isElement(clipperElement)) {
    return [];
  }
  return clippingParents2.filter(function(clippingParent) {
    return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== "body";
  });
}
function getClippingRect(element, boundary, rootBoundary, strategy) {
  var mainClippingParents = boundary === "clippingParents" ? getClippingParents(element) : [].concat(boundary);
  var clippingParents2 = [].concat(mainClippingParents, [rootBoundary]);
  var firstClippingParent = clippingParents2[0];
  var clippingRect = clippingParents2.reduce(function(accRect, clippingParent) {
    var rect = getClientRectFromMixedType(element, clippingParent, strategy);
    accRect.top = max(rect.top, accRect.top);
    accRect.right = min(rect.right, accRect.right);
    accRect.bottom = min(rect.bottom, accRect.bottom);
    accRect.left = max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromMixedType(element, firstClippingParent, strategy));
  clippingRect.width = clippingRect.right - clippingRect.left;
  clippingRect.height = clippingRect.bottom - clippingRect.top;
  clippingRect.x = clippingRect.left;
  clippingRect.y = clippingRect.top;
  return clippingRect;
}
function computeOffsets(_ref) {
  var reference2 = _ref.reference, element = _ref.element, placement = _ref.placement;
  var basePlacement = placement ? getBasePlacement(placement) : null;
  var variation = placement ? getVariation(placement) : null;
  var commonX = reference2.x + reference2.width / 2 - element.width / 2;
  var commonY = reference2.y + reference2.height / 2 - element.height / 2;
  var offsets;
  switch (basePlacement) {
    case top:
      offsets = {
        x: commonX,
        y: reference2.y - element.height
      };
      break;
    case bottom:
      offsets = {
        x: commonX,
        y: reference2.y + reference2.height
      };
      break;
    case right:
      offsets = {
        x: reference2.x + reference2.width,
        y: commonY
      };
      break;
    case left:
      offsets = {
        x: reference2.x - element.width,
        y: commonY
      };
      break;
    default:
      offsets = {
        x: reference2.x,
        y: reference2.y
      };
  }
  var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;
  if (mainAxis != null) {
    var len = mainAxis === "y" ? "height" : "width";
    switch (variation) {
      case start:
        offsets[mainAxis] = offsets[mainAxis] - (reference2[len] / 2 - element[len] / 2);
        break;
      case end:
        offsets[mainAxis] = offsets[mainAxis] + (reference2[len] / 2 - element[len] / 2);
        break;
    }
  }
  return offsets;
}
function detectOverflow(state, options) {
  if (options === void 0) {
    options = {};
  }
  var _options = options, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$strategy = _options.strategy, strategy = _options$strategy === void 0 ? state.strategy : _options$strategy, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? clippingParents : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? popper : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding = _options$padding === void 0 ? 0 : _options$padding;
  var paddingObject = mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
  var altContext = elementContext === popper ? reference : popper;
  var popperRect = state.rects.popper;
  var element = state.elements[altBoundary ? altContext : elementContext];
  var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary, strategy);
  var referenceClientRect = getBoundingClientRect(state.elements.reference);
  var popperOffsets2 = computeOffsets({
    reference: referenceClientRect,
    element: popperRect,
    strategy: "absolute",
    placement
  });
  var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets2));
  var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect;
  var overflowOffsets = {
    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
    right: elementClientRect.right - clippingClientRect.right + paddingObject.right
  };
  var offsetData = state.modifiersData.offset;
  if (elementContext === popper && offsetData) {
    var offset2 = offsetData[placement];
    Object.keys(overflowOffsets).forEach(function(key) {
      var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
      var axis = [top, bottom].indexOf(key) >= 0 ? "y" : "x";
      overflowOffsets[key] += offset2[axis] * multiply;
    });
  }
  return overflowOffsets;
}
function computeAutoPlacement(state, options) {
  if (options === void 0) {
    options = {};
  }
  var _options = options, placement = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
  var variation = getVariation(placement);
  var placements$1 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function(placement2) {
    return getVariation(placement2) === variation;
  }) : basePlacements;
  var allowedPlacements = placements$1.filter(function(placement2) {
    return allowedAutoPlacements.indexOf(placement2) >= 0;
  });
  if (allowedPlacements.length === 0) {
    allowedPlacements = placements$1;
  }
  var overflows = allowedPlacements.reduce(function(acc, placement2) {
    acc[placement2] = detectOverflow(state, {
      placement: placement2,
      boundary,
      rootBoundary,
      padding
    })[getBasePlacement(placement2)];
    return acc;
  }, {});
  return Object.keys(overflows).sort(function(a, b) {
    return overflows[a] - overflows[b];
  });
}
function getExpandedFallbackPlacements(placement) {
  if (getBasePlacement(placement) === auto) {
    return [];
  }
  var oppositePlacement = getOppositePlacement(placement);
  return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
}
function flip(_ref) {
  var state = _ref.state, options = _ref.options, name = _ref.name;
  if (state.modifiersData[name]._skip) {
    return;
  }
  var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options.fallbackPlacements, padding = options.padding, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, _options$flipVariatio = options.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options.allowedAutoPlacements;
  var preferredPlacement = state.options.placement;
  var basePlacement = getBasePlacement(preferredPlacement);
  var isBasePlacement = basePlacement === preferredPlacement;
  var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
  var placements2 = [preferredPlacement].concat(fallbackPlacements).reduce(function(acc, placement2) {
    return acc.concat(getBasePlacement(placement2) === auto ? computeAutoPlacement(state, {
      placement: placement2,
      boundary,
      rootBoundary,
      padding,
      flipVariations,
      allowedAutoPlacements
    }) : placement2);
  }, []);
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var checksMap = /* @__PURE__ */ new Map();
  var makeFallbackChecks = true;
  var firstFittingPlacement = placements2[0];
  for (var i = 0; i < placements2.length; i++) {
    var placement = placements2[i];
    var _basePlacement = getBasePlacement(placement);
    var isStartVariation = getVariation(placement) === start;
    var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
    var len = isVertical ? "width" : "height";
    var overflow = detectOverflow(state, {
      placement,
      boundary,
      rootBoundary,
      altBoundary,
      padding
    });
    var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;
    if (referenceRect[len] > popperRect[len]) {
      mainVariationSide = getOppositePlacement(mainVariationSide);
    }
    var altVariationSide = getOppositePlacement(mainVariationSide);
    var checks = [];
    if (checkMainAxis) {
      checks.push(overflow[_basePlacement] <= 0);
    }
    if (checkAltAxis) {
      checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
    }
    if (checks.every(function(check) {
      return check;
    })) {
      firstFittingPlacement = placement;
      makeFallbackChecks = false;
      break;
    }
    checksMap.set(placement, checks);
  }
  if (makeFallbackChecks) {
    var numberOfChecks = flipVariations ? 3 : 1;
    var _loop = function _loop2(_i2) {
      var fittingPlacement = placements2.find(function(placement2) {
        var checks2 = checksMap.get(placement2);
        if (checks2) {
          return checks2.slice(0, _i2).every(function(check) {
            return check;
          });
        }
      });
      if (fittingPlacement) {
        firstFittingPlacement = fittingPlacement;
        return "break";
      }
    };
    for (var _i = numberOfChecks; _i > 0; _i--) {
      var _ret = _loop(_i);
      if (_ret === "break")
        break;
    }
  }
  if (state.placement !== firstFittingPlacement) {
    state.modifiersData[name]._skip = true;
    state.placement = firstFittingPlacement;
    state.reset = true;
  }
}
const flip$1 = {
  name: "flip",
  enabled: true,
  phase: "main",
  fn: flip,
  requiresIfExists: ["offset"],
  data: {
    _skip: false
  }
};
function getSideOffsets(overflow, rect, preventedOffsets) {
  if (preventedOffsets === void 0) {
    preventedOffsets = {
      x: 0,
      y: 0
    };
  }
  return {
    top: overflow.top - rect.height - preventedOffsets.y,
    right: overflow.right - rect.width + preventedOffsets.x,
    bottom: overflow.bottom - rect.height + preventedOffsets.y,
    left: overflow.left - rect.width - preventedOffsets.x
  };
}
function isAnySideFullyClipped(overflow) {
  return [top, right, bottom, left].some(function(side) {
    return overflow[side] >= 0;
  });
}
function hide(_ref) {
  var state = _ref.state, name = _ref.name;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var preventedOffsets = state.modifiersData.preventOverflow;
  var referenceOverflow = detectOverflow(state, {
    elementContext: "reference"
  });
  var popperAltOverflow = detectOverflow(state, {
    altBoundary: true
  });
  var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
  var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
  var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
  var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
  state.modifiersData[name] = {
    referenceClippingOffsets,
    popperEscapeOffsets,
    isReferenceHidden,
    hasPopperEscaped
  };
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    "data-popper-reference-hidden": isReferenceHidden,
    "data-popper-escaped": hasPopperEscaped
  });
}
const hide$1 = {
  name: "hide",
  enabled: true,
  phase: "main",
  requiresIfExists: ["preventOverflow"],
  fn: hide
};
function distanceAndSkiddingToXY(placement, rects, offset2) {
  var basePlacement = getBasePlacement(placement);
  var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;
  var _ref = typeof offset2 === "function" ? offset2(Object.assign({}, rects, {
    placement
  })) : offset2, skidding = _ref[0], distance = _ref[1];
  skidding = skidding || 0;
  distance = (distance || 0) * invertDistance;
  return [left, right].indexOf(basePlacement) >= 0 ? {
    x: distance,
    y: skidding
  } : {
    x: skidding,
    y: distance
  };
}
function offset(_ref2) {
  var state = _ref2.state, options = _ref2.options, name = _ref2.name;
  var _options$offset = options.offset, offset2 = _options$offset === void 0 ? [0, 0] : _options$offset;
  var data = placements.reduce(function(acc, placement) {
    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset2);
    return acc;
  }, {});
  var _data$state$placement = data[state.placement], x = _data$state$placement.x, y = _data$state$placement.y;
  if (state.modifiersData.popperOffsets != null) {
    state.modifiersData.popperOffsets.x += x;
    state.modifiersData.popperOffsets.y += y;
  }
  state.modifiersData[name] = data;
}
const offset$1 = {
  name: "offset",
  enabled: true,
  phase: "main",
  requires: ["popperOffsets"],
  fn: offset
};
function popperOffsets(_ref) {
  var state = _ref.state, name = _ref.name;
  state.modifiersData[name] = computeOffsets({
    reference: state.rects.reference,
    element: state.rects.popper,
    strategy: "absolute",
    placement: state.placement
  });
}
const popperOffsets$1 = {
  name: "popperOffsets",
  enabled: true,
  phase: "read",
  fn: popperOffsets,
  data: {}
};
function getAltAxis(axis) {
  return axis === "x" ? "y" : "x";
}
function preventOverflow(_ref) {
  var state = _ref.state, options = _ref.options, name = _ref.name;
  var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, padding = options.padding, _options$tether = options.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
  var overflow = detectOverflow(state, {
    boundary,
    rootBoundary,
    padding,
    altBoundary
  });
  var basePlacement = getBasePlacement(state.placement);
  var variation = getVariation(state.placement);
  var isBasePlacement = !variation;
  var mainAxis = getMainAxisFromPlacement(basePlacement);
  var altAxis = getAltAxis(mainAxis);
  var popperOffsets2 = state.modifiersData.popperOffsets;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var tetherOffsetValue = typeof tetherOffset === "function" ? tetherOffset(Object.assign({}, state.rects, {
    placement: state.placement
  })) : tetherOffset;
  var normalizedTetherOffsetValue = typeof tetherOffsetValue === "number" ? {
    mainAxis: tetherOffsetValue,
    altAxis: tetherOffsetValue
  } : Object.assign({
    mainAxis: 0,
    altAxis: 0
  }, tetherOffsetValue);
  var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
  var data = {
    x: 0,
    y: 0
  };
  if (!popperOffsets2) {
    return;
  }
  if (checkMainAxis) {
    var _offsetModifierState$;
    var mainSide = mainAxis === "y" ? top : left;
    var altSide = mainAxis === "y" ? bottom : right;
    var len = mainAxis === "y" ? "height" : "width";
    var offset2 = popperOffsets2[mainAxis];
    var min$12 = offset2 + overflow[mainSide];
    var max$12 = offset2 - overflow[altSide];
    var additive = tether ? -popperRect[len] / 2 : 0;
    var minLen = variation === start ? referenceRect[len] : popperRect[len];
    var maxLen = variation === start ? -popperRect[len] : -referenceRect[len];
    var arrowElement = state.elements.arrow;
    var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
      width: 0,
      height: 0
    };
    var arrowPaddingObject = state.modifiersData["arrow#persistent"] ? state.modifiersData["arrow#persistent"].padding : getFreshSideObject();
    var arrowPaddingMin = arrowPaddingObject[mainSide];
    var arrowPaddingMax = arrowPaddingObject[altSide];
    var arrowLen = within(0, referenceRect[len], arrowRect[len]);
    var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
    var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
    var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
    var clientOffset = arrowOffsetParent ? mainAxis === "y" ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
    var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
    var tetherMin = offset2 + minOffset - offsetModifierValue - clientOffset;
    var tetherMax = offset2 + maxOffset - offsetModifierValue;
    var preventedOffset = within(tether ? min(min$12, tetherMin) : min$12, offset2, tether ? max(max$12, tetherMax) : max$12);
    popperOffsets2[mainAxis] = preventedOffset;
    data[mainAxis] = preventedOffset - offset2;
  }
  if (checkAltAxis) {
    var _offsetModifierState$2;
    var _mainSide = mainAxis === "x" ? top : left;
    var _altSide = mainAxis === "x" ? bottom : right;
    var _offset = popperOffsets2[altAxis];
    var _len = altAxis === "y" ? "height" : "width";
    var _min = _offset + overflow[_mainSide];
    var _max = _offset - overflow[_altSide];
    var isOriginSide = [top, left].indexOf(basePlacement) !== -1;
    var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;
    var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;
    var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;
    var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);
    popperOffsets2[altAxis] = _preventedOffset;
    data[altAxis] = _preventedOffset - _offset;
  }
  state.modifiersData[name] = data;
}
const preventOverflow$1 = {
  name: "preventOverflow",
  enabled: true,
  phase: "main",
  fn: preventOverflow,
  requiresIfExists: ["offset"]
};
function getHTMLElementScroll(element) {
  return {
    scrollLeft: element.scrollLeft,
    scrollTop: element.scrollTop
  };
}
function getNodeScroll(node) {
  if (node === getWindow(node) || !isHTMLElement(node)) {
    return getWindowScroll(node);
  } else {
    return getHTMLElementScroll(node);
  }
}
function isElementScaled(element) {
  var rect = element.getBoundingClientRect();
  var scaleX = round(rect.width) / element.offsetWidth || 1;
  var scaleY = round(rect.height) / element.offsetHeight || 1;
  return scaleX !== 1 || scaleY !== 1;
}
function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
  if (isFixed === void 0) {
    isFixed = false;
  }
  var isOffsetParentAnElement = isHTMLElement(offsetParent);
  var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
  var documentElement = getDocumentElement(offsetParent);
  var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled, isFixed);
  var scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  var offsets = {
    x: 0,
    y: 0
  };
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || // https://github.com/popperjs/popper-core/issues/1078
    isScrollParent(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isHTMLElement(offsetParent)) {
      offsets = getBoundingClientRect(offsetParent, true);
      offsets.x += offsetParent.clientLeft;
      offsets.y += offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }
  return {
    x: rect.left + scroll.scrollLeft - offsets.x,
    y: rect.top + scroll.scrollTop - offsets.y,
    width: rect.width,
    height: rect.height
  };
}
function order(modifiers) {
  var map2 = /* @__PURE__ */ new Map();
  var visited = /* @__PURE__ */ new Set();
  var result = [];
  modifiers.forEach(function(modifier) {
    map2.set(modifier.name, modifier);
  });
  function sort(modifier) {
    visited.add(modifier.name);
    var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
    requires.forEach(function(dep) {
      if (!visited.has(dep)) {
        var depModifier = map2.get(dep);
        if (depModifier) {
          sort(depModifier);
        }
      }
    });
    result.push(modifier);
  }
  modifiers.forEach(function(modifier) {
    if (!visited.has(modifier.name)) {
      sort(modifier);
    }
  });
  return result;
}
function orderModifiers(modifiers) {
  var orderedModifiers = order(modifiers);
  return modifierPhases.reduce(function(acc, phase) {
    return acc.concat(orderedModifiers.filter(function(modifier) {
      return modifier.phase === phase;
    }));
  }, []);
}
function debounce(fn2) {
  var pending;
  return function() {
    if (!pending) {
      pending = new Promise(function(resolve2) {
        Promise.resolve().then(function() {
          pending = void 0;
          resolve2(fn2());
        });
      });
    }
    return pending;
  };
}
function mergeByName(modifiers) {
  var merged = modifiers.reduce(function(merged2, current) {
    var existing = merged2[current.name];
    merged2[current.name] = existing ? Object.assign({}, existing, current, {
      options: Object.assign({}, existing.options, current.options),
      data: Object.assign({}, existing.data, current.data)
    }) : current;
    return merged2;
  }, {});
  return Object.keys(merged).map(function(key) {
    return merged[key];
  });
}
var DEFAULT_OPTIONS = {
  placement: "bottom",
  modifiers: [],
  strategy: "absolute"
};
function areValidElements() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  return !args.some(function(element) {
    return !(element && typeof element.getBoundingClientRect === "function");
  });
}
function popperGenerator(generatorOptions) {
  if (generatorOptions === void 0) {
    generatorOptions = {};
  }
  var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers2 = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions2 = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
  return function createPopper2(reference2, popper2, options) {
    if (options === void 0) {
      options = defaultOptions2;
    }
    var state = {
      placement: "bottom",
      orderedModifiers: [],
      options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions2),
      modifiersData: {},
      elements: {
        reference: reference2,
        popper: popper2
      },
      attributes: {},
      styles: {}
    };
    var effectCleanupFns = [];
    var isDestroyed = false;
    var instance = {
      state,
      setOptions: function setOptions(setOptionsAction) {
        var options2 = typeof setOptionsAction === "function" ? setOptionsAction(state.options) : setOptionsAction;
        cleanupModifierEffects();
        state.options = Object.assign({}, defaultOptions2, state.options, options2);
        state.scrollParents = {
          reference: isElement(reference2) ? listScrollParents(reference2) : reference2.contextElement ? listScrollParents(reference2.contextElement) : [],
          popper: listScrollParents(popper2)
        };
        var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers2, state.options.modifiers)));
        state.orderedModifiers = orderedModifiers.filter(function(m) {
          return m.enabled;
        });
        runModifierEffects();
        return instance.update();
      },
      // Sync update – it will always be executed, even if not necessary. This
      // is useful for low frequency updates where sync behavior simplifies the
      // logic.
      // For high frequency updates (e.g. `resize` and `scroll` events), always
      // prefer the async Popper#update method
      forceUpdate: function forceUpdate() {
        if (isDestroyed) {
          return;
        }
        var _state$elements = state.elements, reference3 = _state$elements.reference, popper3 = _state$elements.popper;
        if (!areValidElements(reference3, popper3)) {
          return;
        }
        state.rects = {
          reference: getCompositeRect(reference3, getOffsetParent(popper3), state.options.strategy === "fixed"),
          popper: getLayoutRect(popper3)
        };
        state.reset = false;
        state.placement = state.options.placement;
        state.orderedModifiers.forEach(function(modifier) {
          return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
        });
        for (var index2 = 0; index2 < state.orderedModifiers.length; index2++) {
          if (state.reset === true) {
            state.reset = false;
            index2 = -1;
            continue;
          }
          var _state$orderedModifie = state.orderedModifiers[index2], fn2 = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2, name = _state$orderedModifie.name;
          if (typeof fn2 === "function") {
            state = fn2({
              state,
              options: _options,
              name,
              instance
            }) || state;
          }
        }
      },
      // Async and optimistically optimized update – it will not be executed if
      // not necessary (debounced to run at most once-per-tick)
      update: debounce(function() {
        return new Promise(function(resolve2) {
          instance.forceUpdate();
          resolve2(state);
        });
      }),
      destroy: function destroy() {
        cleanupModifierEffects();
        isDestroyed = true;
      }
    };
    if (!areValidElements(reference2, popper2)) {
      return instance;
    }
    instance.setOptions(options).then(function(state2) {
      if (!isDestroyed && options.onFirstUpdate) {
        options.onFirstUpdate(state2);
      }
    });
    function runModifierEffects() {
      state.orderedModifiers.forEach(function(_ref3) {
        var name = _ref3.name, _ref3$options = _ref3.options, options2 = _ref3$options === void 0 ? {} : _ref3$options, effect2 = _ref3.effect;
        if (typeof effect2 === "function") {
          var cleanupFn = effect2({
            state,
            name,
            instance,
            options: options2
          });
          var noopFn = function noopFn2() {
          };
          effectCleanupFns.push(cleanupFn || noopFn);
        }
      });
    }
    function cleanupModifierEffects() {
      effectCleanupFns.forEach(function(fn2) {
        return fn2();
      });
      effectCleanupFns = [];
    }
    return instance;
  };
}
var defaultModifiers = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1, offset$1, flip$1, preventOverflow$1, arrow$1, hide$1];
var createPopper = /* @__PURE__ */ popperGenerator({
  defaultModifiers
});
(function(dom2) {
  function hide2() {
    dom2(".dropdown-menu").each(async function() {
      if (dom2(this).attr("id") !== void 0 && dom2('[data-dropdown-replacer="' + dom2(this).attr("id") + '"]').length && dom2(this).data("dropdown-programmatically") === void 0) {
        let randId = dom2(this).attr("id");
        let dropdownToggle = dom2('[data-dropdown-replacer="' + randId + '"]').parent().find("[data-tw-toggle='dropdown']");
        dom2(this).removeClass("show");
        const event = new Event("hide.tw.dropdown");
        dom2(dropdownToggle).parent()[0].dispatchEvent(event);
        await setTimeout(() => {
          dom2('[data-dropdown-replacer="' + randId + '"]').replaceWith(this);
          dom2(this).removeAttr("style");
          dom2(this).removeAttr("data-popper-placement");
          dom2(dropdownToggle).attr("aria-expanded", false);
          const event2 = new Event("hidden.tw.dropdown");
          dom2(dropdownToggle).parent()[0].dispatchEvent(event2);
        }, 200);
      } else if (dom2(this).attr("id") !== void 0 && !dom2('[data-dropdown-replacer="' + dom2(this).attr("id") + '"]').length && dom2(this).hasClass("show") && dom2(this).data("dropdown-programmatically") === void 0) {
        dom2(this).remove();
      } else if (dom2(this).data("dropdown-programmatically") == "initiate") {
        dom2(this).attr("data-dropdown-programmatically", "showed");
      } else if (dom2(this).data("dropdown-programmatically") == "showed") {
        dom2(this).removeAttr("data-dropdown-programmatically");
        hide2();
      }
    });
  }
  function findVisibleDropdownToggle(dropdownToggle) {
    return dropdownToggle.filter((key, dropdownToggle2) => {
      return dropdownToggle2.offsetParent !== null;
    });
  }
  async function show(dropdown) {
    let dropdownBox = dom2(dropdown).find(".dropdown-menu").first();
    let dropdownToggle = findVisibleDropdownToggle(
      dom2(dropdown).find("[data-tw-toggle='dropdown']")
    );
    let placement = dom2(dropdown).data("tw-placement") ? dom2(dropdown).data("tw-placement") : "bottom-end";
    let randId = "_" + Math.random().toString(36).substr(2, 9);
    hide2();
    if (dom2(dropdownBox).length) {
      dom2(dropdownToggle).attr("aria-expanded", true);
      dom2(dropdown).css("position") == "static" ? dom2(dropdown).css("position", "relative") : "";
      dom2(dropdownBox).css("width", dom2(dropdownBox).css("width"));
      dom2('<div data-dropdown-replacer="' + randId + '"></div>').insertAfter(
        dropdownBox
      );
      dom2(dropdownBox).attr("id", randId).appendTo("body");
      dom2(".modal.show").each(function() {
        if (dom2(this).find('[data-dropdown-replacer="' + randId + '"]')) {
          dom2(dropdownBox).css("z-index", dom2(this).css("z-index"));
        }
      });
      createPopper(dropdownToggle[0], dropdownBox[0], {
        placement
      });
      dom2(dropdownBox).addClass("show");
      const event = new Event("show.tw.dropdown");
      dom2(dropdown)[0].dispatchEvent(event);
      await setTimeout(() => {
        const event2 = new Event("shown.tw.dropdown");
        dom2(dropdown)[0].dispatchEvent(event2);
      }, 200);
    }
  }
  function toggleProgrammatically(dropdown) {
    let dropdownBox = dom2(dropdown).find(".dropdown-menu").first();
    if (dom2(dropdownBox).length) {
      showProgrammatically(dropdown);
    } else {
      hide2();
    }
  }
  function showProgrammatically(dropdown) {
    if (dom2(dropdown).find(".dropdown-menu").length) {
      dom2(dropdown).find(".dropdown-menu").attr("data-dropdown-programmatically", "initiate");
    } else {
      let randId = dom2("[data-dropdown-replacer]").data("dropdown-replacer");
      dom2("#" + randId).attr("data-dropdown-programmatically", "initiate");
    }
    show(dropdown);
  }
  function createInstance(dropdownToggle) {
    const dropdown = dom2(dropdownToggle).closest(".dropdown");
    return {
      show() {
        showProgrammatically(dropdown);
      },
      hide() {
        hide2();
      },
      toggle() {
        toggleProgrammatically(dropdown);
      }
    };
  }
  dom2("body").on("click", function(event) {
    let dropdown = dom2(event.target).closest(".dropdown");
    let dropdownToggle = dom2(dropdown).find("[data-tw-toggle='dropdown']");
    let dropdownBox = dom2(dropdown).find(".dropdown-menu").first();
    let activeDropdownBox = dom2(event.target).closest(".dropdown-menu").first();
    let dismissButton = dom2(event.target).data("tw-dismiss");
    if (!dom2(dropdown).length && !dom2(activeDropdownBox).length || dom2(dropdownToggle).length && !dom2(dropdownBox).length || dismissButton == "dropdown") {
      hide2();
    } else if (!dom2(activeDropdownBox).length) {
      show(dropdown);
    }
  });
  document.addEventListener("keydown", function(event) {
    if (event.code == "Escape") {
      hide2();
    }
  });
  (function init2() {
    dom2("[data-tw-toggle='dropdown']").each(function() {
      this["__dropdown"] = createInstance(this);
    });
    if (window.tailwind === void 0)
      window.tailwind = {};
    window.tailwind.Dropdown = {
      getInstance(el) {
        return el.__dropdown;
      },
      getOrCreateInstance(el) {
        return el.__dropdown === void 0 ? createInstance(el) : el.__dropdown;
      }
    };
  })();
})(dom$1);
const init = (el, { props, emit: emit2 }) => {
  const dropdown = tailwind.Dropdown.getOrCreateInstance(el);
  setTimeout(() => {
    const isDropdownShowed = dom$1(el).find("[data-dropdown-replacer]").length;
    if (props.show && !isDropdownShowed) {
      dropdown.show();
    } else if (!props.show && isDropdownShowed) {
      dropdown.hide();
    }
  });
  if (el["__initiated"] === void 0) {
    el["__initiated"] = true;
    el.addEventListener("show.tw.dropdown", () => {
      emit2("show");
    });
    el.addEventListener("shown.tw.dropdown", () => {
      emit2("shown");
    });
    el.addEventListener("hide.tw.dropdown", () => {
      emit2("hide");
    });
    el.addEventListener("hidden.tw.dropdown", () => {
      emit2("hidden");
    });
  }
};
const Dropdown = defineComponent({
  name: "Dropdown",
  props: {
    show: {
      type: Boolean,
      default: false
    },
    placement: {
      type: String,
      default: "bottom-end"
    },
    refKey: {
      type: String,
      default: null
    }
  },
  directives: {
    dropdown: {
      mounted(el, { value }) {
        init(el, value);
      },
      updated(el, { value }) {
        init(el, value);
      }
    }
  },
  setup(props, { slots, emit: emit2 }) {
    const dropdownRef = ref();
    const dropdownRefTemp = ref();
    const bindInstance = () => {
      if (props.refKey) {
        const bind = inject(`bind[${props.refKey}]`);
        if (bind) {
          bind(tailwind.Dropdown.getOrCreateInstance(dropdownRef.value));
        }
      }
    };
    onMounted(() => {
      dropdownRefTemp.value = dropdownRef.value;
      bindInstance();
    });
    onUnmounted(() => {
      tailwind.Dropdown.getOrCreateInstance(dropdownRefTemp.value).hide();
    });
    const dropdownDirective = resolveDirective("dropdown");
    return () => withDirectives(
      h(
        "div",
        {
          class: "dropdown",
          ref: dropdownRef,
          "data-tw-placement": props.placement
        },
        slots.default({
          dismiss: () => {
            tailwind.Dropdown.getOrCreateInstance(dropdownRef.value).hide();
          }
        })
      ),
      [[dropdownDirective, { props, emit: emit2 }]]
    );
  }
});
const DropdownToggle = defineComponent({
  name: "DropdownToggle",
  props: {
    tag: {
      type: String,
      default: "button"
    }
  },
  setup(props, { slots }) {
    return () => h(
      props.tag,
      {
        class: "dropdown-toggle",
        "aria-expanded": false,
        "data-tw-toggle": "dropdown"
      },
      slots.default()
    );
  }
});
const DropdownMenu = defineComponent({
  name: "DropdownMenu",
  setup(props, { slots }) {
    return () => h(
      "div",
      {
        class: "dropdown-menu"
      },
      slots.default()
    );
  }
});
const DropdownContent = defineComponent({
  name: "DropdownContent",
  props: {
    tag: {
      type: String,
      default: "ul"
    }
  },
  setup(props, { slots }) {
    return () => h(
      props.tag,
      {
        class: "dropdown-content"
      },
      slots.default()
    );
  }
});
const DropdownItem = defineComponent({
  name: "DropdownItem",
  props: {
    tag: {
      type: String,
      default: "a"
    },
    class: {
      type: String,
      default: ""
    }
  },
  setup(props, { slots }) {
    return () => h("li", [
      h(
        props.tag,
        {
          class: ["dropdown-item cursor-pointer", props.class]
        },
        slots.default()
      )
    ]);
  }
});
const DropdownHeader = defineComponent({
  name: "DropdownHeader",
  props: {
    tag: {
      type: String,
      default: "h6"
    },
    class: {
      type: String,
      default: ""
    }
  },
  setup(props, { slots }) {
    return () => h("li", [
      h(
        props.tag,
        {
          class: ["dropdown-header", props.class]
        },
        slots.default()
      )
    ]);
  }
});
const DropdownFooter = defineComponent({
  name: "DropdownFooter",
  props: {
    tag: {
      type: String,
      default: "div"
    },
    class: {
      type: String,
      default: ""
    }
  },
  setup(props, { slots }) {
    return () => h("li", [
      h(
        props.tag,
        {
          class: ["dropdown-footer", props.class]
        },
        slots.default()
      )
    ]);
  }
});
const DropdownDivider = defineComponent({
  name: "DropdownDivider",
  props: {
    tag: {
      type: String,
      default: "hr"
    },
    class: {
      type: String,
      default: ""
    }
  },
  setup(props) {
    return () => h("li", [
      h(props.tag, {
        class: ["dropdown-divider", props.class]
      })
    ]);
  }
});
const globalComponents = (app2) => {
  app2.component("Modal", Modal);
  app2.component("ModalHeader", ModalHeader);
  app2.component("ModalBody", ModalBody);
  app2.component("ModalFooter", ModalFooter);
  app2.component("Dropdown", Dropdown);
  app2.component("DropdownToggle", DropdownToggle);
  app2.component("DropdownMenu", DropdownMenu);
  app2.component("DropdownContent", DropdownContent);
  app2.component("DropdownItem", DropdownItem);
  app2.component("DropdownHeader", DropdownHeader);
  app2.component("DropdownFooter", DropdownFooter);
  app2.component("DropdownDivider", DropdownDivider);
  for (const [key, icon] of Object.entries(icons)) {
    app2.component(key, icon);
  }
};
const index = "";
const app = createApp(_sfc_main).use(router$1).use(createPinia()).use(VueSweetalert2);
globalComponents(app);
app.mount("#app");
export {
  LOGO as L,
  RouterLink as R,
  _export_sfc as _,
  createTextVNode as a,
  createBaseVNode as b,
  createElementBlock as c,
  createVNode as d,
  createStaticVNode as e,
  popScopeId as f,
  openBlock as o,
  pushScopeId as p,
  resolveComponent as r,
  unref as u,
  withCtx as w
};
